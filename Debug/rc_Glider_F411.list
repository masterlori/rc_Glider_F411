
rc_Glider_F411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016660  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ac0  080167f8  080167f8  000267f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080172b8  080172b8  00030290  2**0
                  CONTENTS
  4 .ARM          00000008  080172b8  080172b8  000272b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080172c0  080172c0  00030290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080172c0  080172c0  000272c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080172c4  080172c4  000272c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  080172c8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00002bf0  20000290  08017558  00030290  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002e80  08017558  00032e80  2**0
                  ALLOC
 11 .param_section 00001000  08060000  08060000  00040000  2**2
                  ALLOC
 12 .new_firmware 00000004  08040000  08040000  00040000  2**2
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030290  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000302c0  2**0
                  CONTENTS, READONLY
 15 .debug_info   00024a50  00000000  00000000  00030303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00006100  00000000  00000000  00054d53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001e78  00000000  00000000  0005ae58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001795  00000000  00000000  0005ccd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0001e7c3  00000000  00000000  0005e465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002bee2  00000000  00000000  0007cc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000a4ada  00000000  00000000  000a8b0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00008408  00000000  00000000  0014d5e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006a  00000000  00000000  001559ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000290 	.word	0x20000290
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080167d4 	.word	0x080167d4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000294 	.word	0x20000294
 80001d4:	080167d4 	.word	0x080167d4

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpun>:
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x10>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d10a      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__aeabi_dcmpun+0x20>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d102      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	f04f 0001 	mov.w	r0, #1
 8000abe:	4770      	bx	lr

08000ac0 <__aeabi_d2f>:
 8000ac0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac8:	bf24      	itt	cs
 8000aca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ace:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad2:	d90d      	bls.n	8000af0 <__aeabi_d2f+0x30>
 8000ad4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000adc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae8:	bf08      	it	eq
 8000aea:	f020 0001 	biceq.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af4:	d121      	bne.n	8000b3a <__aeabi_d2f+0x7a>
 8000af6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afa:	bfbc      	itt	lt
 8000afc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	4770      	bxlt	lr
 8000b02:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b06:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0a:	f1c2 0218 	rsb	r2, r2, #24
 8000b0e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b12:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b16:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	f040 0001 	orrne.w	r0, r0, #1
 8000b20:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b24:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b28:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b2c:	ea40 000c 	orr.w	r0, r0, ip
 8000b30:	fa23 f302 	lsr.w	r3, r3, r2
 8000b34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b38:	e7cc      	b.n	8000ad4 <__aeabi_d2f+0x14>
 8000b3a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b3e:	d107      	bne.n	8000b50 <__aeabi_d2f+0x90>
 8000b40:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b44:	bf1e      	ittt	ne
 8000b46:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b4e:	4770      	bxne	lr
 8000b50:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b54:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_uldivmod>:
 8000b60:	b953      	cbnz	r3, 8000b78 <__aeabi_uldivmod+0x18>
 8000b62:	b94a      	cbnz	r2, 8000b78 <__aeabi_uldivmod+0x18>
 8000b64:	2900      	cmp	r1, #0
 8000b66:	bf08      	it	eq
 8000b68:	2800      	cmpeq	r0, #0
 8000b6a:	bf1c      	itt	ne
 8000b6c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b70:	f04f 30ff 	movne.w	r0, #4294967295
 8000b74:	f000 b970 	b.w	8000e58 <__aeabi_idiv0>
 8000b78:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b7c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b80:	f000 f806 	bl	8000b90 <__udivmoddi4>
 8000b84:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b8c:	b004      	add	sp, #16
 8000b8e:	4770      	bx	lr

08000b90 <__udivmoddi4>:
 8000b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b94:	9e08      	ldr	r6, [sp, #32]
 8000b96:	460d      	mov	r5, r1
 8000b98:	4604      	mov	r4, r0
 8000b9a:	460f      	mov	r7, r1
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d14a      	bne.n	8000c36 <__udivmoddi4+0xa6>
 8000ba0:	428a      	cmp	r2, r1
 8000ba2:	4694      	mov	ip, r2
 8000ba4:	d965      	bls.n	8000c72 <__udivmoddi4+0xe2>
 8000ba6:	fab2 f382 	clz	r3, r2
 8000baa:	b143      	cbz	r3, 8000bbe <__udivmoddi4+0x2e>
 8000bac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bb0:	f1c3 0220 	rsb	r2, r3, #32
 8000bb4:	409f      	lsls	r7, r3
 8000bb6:	fa20 f202 	lsr.w	r2, r0, r2
 8000bba:	4317      	orrs	r7, r2
 8000bbc:	409c      	lsls	r4, r3
 8000bbe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bc2:	fa1f f58c 	uxth.w	r5, ip
 8000bc6:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bca:	0c22      	lsrs	r2, r4, #16
 8000bcc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bd0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bd4:	fb01 f005 	mul.w	r0, r1, r5
 8000bd8:	4290      	cmp	r0, r2
 8000bda:	d90a      	bls.n	8000bf2 <__udivmoddi4+0x62>
 8000bdc:	eb1c 0202 	adds.w	r2, ip, r2
 8000be0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000be4:	f080 811c 	bcs.w	8000e20 <__udivmoddi4+0x290>
 8000be8:	4290      	cmp	r0, r2
 8000bea:	f240 8119 	bls.w	8000e20 <__udivmoddi4+0x290>
 8000bee:	3902      	subs	r1, #2
 8000bf0:	4462      	add	r2, ip
 8000bf2:	1a12      	subs	r2, r2, r0
 8000bf4:	b2a4      	uxth	r4, r4
 8000bf6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bfa:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bfe:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c02:	fb00 f505 	mul.w	r5, r0, r5
 8000c06:	42a5      	cmp	r5, r4
 8000c08:	d90a      	bls.n	8000c20 <__udivmoddi4+0x90>
 8000c0a:	eb1c 0404 	adds.w	r4, ip, r4
 8000c0e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c12:	f080 8107 	bcs.w	8000e24 <__udivmoddi4+0x294>
 8000c16:	42a5      	cmp	r5, r4
 8000c18:	f240 8104 	bls.w	8000e24 <__udivmoddi4+0x294>
 8000c1c:	4464      	add	r4, ip
 8000c1e:	3802      	subs	r0, #2
 8000c20:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c24:	1b64      	subs	r4, r4, r5
 8000c26:	2100      	movs	r1, #0
 8000c28:	b11e      	cbz	r6, 8000c32 <__udivmoddi4+0xa2>
 8000c2a:	40dc      	lsrs	r4, r3
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	e9c6 4300 	strd	r4, r3, [r6]
 8000c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c36:	428b      	cmp	r3, r1
 8000c38:	d908      	bls.n	8000c4c <__udivmoddi4+0xbc>
 8000c3a:	2e00      	cmp	r6, #0
 8000c3c:	f000 80ed 	beq.w	8000e1a <__udivmoddi4+0x28a>
 8000c40:	2100      	movs	r1, #0
 8000c42:	e9c6 0500 	strd	r0, r5, [r6]
 8000c46:	4608      	mov	r0, r1
 8000c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4c:	fab3 f183 	clz	r1, r3
 8000c50:	2900      	cmp	r1, #0
 8000c52:	d149      	bne.n	8000ce8 <__udivmoddi4+0x158>
 8000c54:	42ab      	cmp	r3, r5
 8000c56:	d302      	bcc.n	8000c5e <__udivmoddi4+0xce>
 8000c58:	4282      	cmp	r2, r0
 8000c5a:	f200 80f8 	bhi.w	8000e4e <__udivmoddi4+0x2be>
 8000c5e:	1a84      	subs	r4, r0, r2
 8000c60:	eb65 0203 	sbc.w	r2, r5, r3
 8000c64:	2001      	movs	r0, #1
 8000c66:	4617      	mov	r7, r2
 8000c68:	2e00      	cmp	r6, #0
 8000c6a:	d0e2      	beq.n	8000c32 <__udivmoddi4+0xa2>
 8000c6c:	e9c6 4700 	strd	r4, r7, [r6]
 8000c70:	e7df      	b.n	8000c32 <__udivmoddi4+0xa2>
 8000c72:	b902      	cbnz	r2, 8000c76 <__udivmoddi4+0xe6>
 8000c74:	deff      	udf	#255	; 0xff
 8000c76:	fab2 f382 	clz	r3, r2
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	f040 8090 	bne.w	8000da0 <__udivmoddi4+0x210>
 8000c80:	1a8a      	subs	r2, r1, r2
 8000c82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c86:	fa1f fe8c 	uxth.w	lr, ip
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c90:	fb07 2015 	mls	r0, r7, r5, r2
 8000c94:	0c22      	lsrs	r2, r4, #16
 8000c96:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c9a:	fb0e f005 	mul.w	r0, lr, r5
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0x124>
 8000ca2:	eb1c 0202 	adds.w	r2, ip, r2
 8000ca6:	f105 38ff 	add.w	r8, r5, #4294967295
 8000caa:	d202      	bcs.n	8000cb2 <__udivmoddi4+0x122>
 8000cac:	4290      	cmp	r0, r2
 8000cae:	f200 80cb 	bhi.w	8000e48 <__udivmoddi4+0x2b8>
 8000cb2:	4645      	mov	r5, r8
 8000cb4:	1a12      	subs	r2, r2, r0
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cbc:	fb07 2210 	mls	r2, r7, r0, r2
 8000cc0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc8:	45a6      	cmp	lr, r4
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x14e>
 8000ccc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cd4:	d202      	bcs.n	8000cdc <__udivmoddi4+0x14c>
 8000cd6:	45a6      	cmp	lr, r4
 8000cd8:	f200 80bb 	bhi.w	8000e52 <__udivmoddi4+0x2c2>
 8000cdc:	4610      	mov	r0, r2
 8000cde:	eba4 040e 	sub.w	r4, r4, lr
 8000ce2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ce6:	e79f      	b.n	8000c28 <__udivmoddi4+0x98>
 8000ce8:	f1c1 0720 	rsb	r7, r1, #32
 8000cec:	408b      	lsls	r3, r1
 8000cee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cf2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cf6:	fa05 f401 	lsl.w	r4, r5, r1
 8000cfa:	fa20 f307 	lsr.w	r3, r0, r7
 8000cfe:	40fd      	lsrs	r5, r7
 8000d00:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d04:	4323      	orrs	r3, r4
 8000d06:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d0a:	fa1f fe8c 	uxth.w	lr, ip
 8000d0e:	fb09 5518 	mls	r5, r9, r8, r5
 8000d12:	0c1c      	lsrs	r4, r3, #16
 8000d14:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d18:	fb08 f50e 	mul.w	r5, r8, lr
 8000d1c:	42a5      	cmp	r5, r4
 8000d1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d22:	fa00 f001 	lsl.w	r0, r0, r1
 8000d26:	d90b      	bls.n	8000d40 <__udivmoddi4+0x1b0>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d30:	f080 8088 	bcs.w	8000e44 <__udivmoddi4+0x2b4>
 8000d34:	42a5      	cmp	r5, r4
 8000d36:	f240 8085 	bls.w	8000e44 <__udivmoddi4+0x2b4>
 8000d3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d3e:	4464      	add	r4, ip
 8000d40:	1b64      	subs	r4, r4, r5
 8000d42:	b29d      	uxth	r5, r3
 8000d44:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d48:	fb09 4413 	mls	r4, r9, r3, r4
 8000d4c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d50:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d54:	45a6      	cmp	lr, r4
 8000d56:	d908      	bls.n	8000d6a <__udivmoddi4+0x1da>
 8000d58:	eb1c 0404 	adds.w	r4, ip, r4
 8000d5c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d60:	d26c      	bcs.n	8000e3c <__udivmoddi4+0x2ac>
 8000d62:	45a6      	cmp	lr, r4
 8000d64:	d96a      	bls.n	8000e3c <__udivmoddi4+0x2ac>
 8000d66:	3b02      	subs	r3, #2
 8000d68:	4464      	add	r4, ip
 8000d6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6e:	fba3 9502 	umull	r9, r5, r3, r2
 8000d72:	eba4 040e 	sub.w	r4, r4, lr
 8000d76:	42ac      	cmp	r4, r5
 8000d78:	46c8      	mov	r8, r9
 8000d7a:	46ae      	mov	lr, r5
 8000d7c:	d356      	bcc.n	8000e2c <__udivmoddi4+0x29c>
 8000d7e:	d053      	beq.n	8000e28 <__udivmoddi4+0x298>
 8000d80:	b156      	cbz	r6, 8000d98 <__udivmoddi4+0x208>
 8000d82:	ebb0 0208 	subs.w	r2, r0, r8
 8000d86:	eb64 040e 	sbc.w	r4, r4, lr
 8000d8a:	fa04 f707 	lsl.w	r7, r4, r7
 8000d8e:	40ca      	lsrs	r2, r1
 8000d90:	40cc      	lsrs	r4, r1
 8000d92:	4317      	orrs	r7, r2
 8000d94:	e9c6 7400 	strd	r7, r4, [r6]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da0:	f1c3 0120 	rsb	r1, r3, #32
 8000da4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000da8:	fa20 f201 	lsr.w	r2, r0, r1
 8000dac:	fa25 f101 	lsr.w	r1, r5, r1
 8000db0:	409d      	lsls	r5, r3
 8000db2:	432a      	orrs	r2, r5
 8000db4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db8:	fa1f fe8c 	uxth.w	lr, ip
 8000dbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc0:	fb07 1510 	mls	r5, r7, r0, r1
 8000dc4:	0c11      	lsrs	r1, r2, #16
 8000dc6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dca:	fb00 f50e 	mul.w	r5, r0, lr
 8000dce:	428d      	cmp	r5, r1
 8000dd0:	fa04 f403 	lsl.w	r4, r4, r3
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x258>
 8000dd6:	eb1c 0101 	adds.w	r1, ip, r1
 8000dda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dde:	d22f      	bcs.n	8000e40 <__udivmoddi4+0x2b0>
 8000de0:	428d      	cmp	r5, r1
 8000de2:	d92d      	bls.n	8000e40 <__udivmoddi4+0x2b0>
 8000de4:	3802      	subs	r0, #2
 8000de6:	4461      	add	r1, ip
 8000de8:	1b49      	subs	r1, r1, r5
 8000dea:	b292      	uxth	r2, r2
 8000dec:	fbb1 f5f7 	udiv	r5, r1, r7
 8000df0:	fb07 1115 	mls	r1, r7, r5, r1
 8000df4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000df8:	fb05 f10e 	mul.w	r1, r5, lr
 8000dfc:	4291      	cmp	r1, r2
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x282>
 8000e00:	eb1c 0202 	adds.w	r2, ip, r2
 8000e04:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e08:	d216      	bcs.n	8000e38 <__udivmoddi4+0x2a8>
 8000e0a:	4291      	cmp	r1, r2
 8000e0c:	d914      	bls.n	8000e38 <__udivmoddi4+0x2a8>
 8000e0e:	3d02      	subs	r5, #2
 8000e10:	4462      	add	r2, ip
 8000e12:	1a52      	subs	r2, r2, r1
 8000e14:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e18:	e738      	b.n	8000c8c <__udivmoddi4+0xfc>
 8000e1a:	4631      	mov	r1, r6
 8000e1c:	4630      	mov	r0, r6
 8000e1e:	e708      	b.n	8000c32 <__udivmoddi4+0xa2>
 8000e20:	4639      	mov	r1, r7
 8000e22:	e6e6      	b.n	8000bf2 <__udivmoddi4+0x62>
 8000e24:	4610      	mov	r0, r2
 8000e26:	e6fb      	b.n	8000c20 <__udivmoddi4+0x90>
 8000e28:	4548      	cmp	r0, r9
 8000e2a:	d2a9      	bcs.n	8000d80 <__udivmoddi4+0x1f0>
 8000e2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e30:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e34:	3b01      	subs	r3, #1
 8000e36:	e7a3      	b.n	8000d80 <__udivmoddi4+0x1f0>
 8000e38:	4645      	mov	r5, r8
 8000e3a:	e7ea      	b.n	8000e12 <__udivmoddi4+0x282>
 8000e3c:	462b      	mov	r3, r5
 8000e3e:	e794      	b.n	8000d6a <__udivmoddi4+0x1da>
 8000e40:	4640      	mov	r0, r8
 8000e42:	e7d1      	b.n	8000de8 <__udivmoddi4+0x258>
 8000e44:	46d0      	mov	r8, sl
 8000e46:	e77b      	b.n	8000d40 <__udivmoddi4+0x1b0>
 8000e48:	3d02      	subs	r5, #2
 8000e4a:	4462      	add	r2, ip
 8000e4c:	e732      	b.n	8000cb4 <__udivmoddi4+0x124>
 8000e4e:	4608      	mov	r0, r1
 8000e50:	e70a      	b.n	8000c68 <__udivmoddi4+0xd8>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	e742      	b.n	8000cde <__udivmoddi4+0x14e>

08000e58 <__aeabi_idiv0>:
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <autopilot_Timer>:

autopilot_stateTypeDef autopilot_states[AP_SATES_NUM];
volatile uint8_t _cur_ap_state;

void autopilot_Timer(uint32_t res)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
#ifdef NO_AUTOPILOT
	return;
#endif //NO_AUTOPILOT

	for( uint8_t i = 0; i < AUTOPILOT_TMR_NUM; i++ )
 8000e64:	2300      	movs	r3, #0
 8000e66:	73fb      	strb	r3, [r7, #15]
 8000e68:	e010      	b.n	8000e8c <autopilot_Timer+0x30>
	{
		if( autopilot_info.timer[i] > 0 ){
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]
 8000e6c:	4a0c      	ldr	r2, [pc, #48]	; (8000ea0 <autopilot_Timer+0x44>)
 8000e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d007      	beq.n	8000e86 <autopilot_Timer+0x2a>
			autopilot_info.timer[i]--;
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
 8000e78:	4a09      	ldr	r2, [pc, #36]	; (8000ea0 <autopilot_Timer+0x44>)
 8000e7a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e7e:	3a01      	subs	r2, #1
 8000e80:	4907      	ldr	r1, [pc, #28]	; (8000ea0 <autopilot_Timer+0x44>)
 8000e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for( uint8_t i = 0; i < AUTOPILOT_TMR_NUM; i++ )
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	73fb      	strb	r3, [r7, #15]
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
 8000e8e:	2b05      	cmp	r3, #5
 8000e90:	d9eb      	bls.n	8000e6a <autopilot_Timer+0xe>
		}
	}

	return;
 8000e92:	bf00      	nop
}
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	200002ac 	.word	0x200002ac

08000ea4 <autopilot_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void autopilot_InitTask()
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
#ifdef NO_AUTOPILOT
	return;
#endif //NO_AUTOPILOT

	//Init
	_cur_ap_state = 0xFF;
 8000ea8:	4b3a      	ldr	r3, [pc, #232]	; (8000f94 <autopilot_InitTask+0xf0>)
 8000eaa:	22ff      	movs	r2, #255	; 0xff
 8000eac:	701a      	strb	r2, [r3, #0]
	autopilot_info.timer[AUTOPILOT_TMR_INIT] = 500;
 8000eae:	4b3a      	ldr	r3, [pc, #232]	; (8000f98 <autopilot_InitTask+0xf4>)
 8000eb0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000eb4:	601a      	str	r2, [r3, #0]
	autopilot_info.armed_flag = 0;
 8000eb6:	4b38      	ldr	r3, [pc, #224]	; (8000f98 <autopilot_InitTask+0xf4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	765a      	strb	r2, [r3, #25]
	autopilot_info.astart_elevator_en = 0;
 8000ebc:	4b36      	ldr	r3, [pc, #216]	; (8000f98 <autopilot_InitTask+0xf4>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	771a      	strb	r2, [r3, #28]
	autopilot_info.astart_motor_en = 0;
 8000ec2:	4b35      	ldr	r3, [pc, #212]	; (8000f98 <autopilot_InitTask+0xf4>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	775a      	strb	r2, [r3, #29]
	autopilot_info.astart_elevator_val = -80;
 8000ec8:	4b33      	ldr	r3, [pc, #204]	; (8000f98 <autopilot_InitTask+0xf4>)
 8000eca:	22b0      	movs	r2, #176	; 0xb0
 8000ecc:	779a      	strb	r2, [r3, #30]
	autopilot_info.astart_motor_val = 90;
 8000ece:	4b32      	ldr	r3, [pc, #200]	; (8000f98 <autopilot_InitTask+0xf4>)
 8000ed0:	225a      	movs	r2, #90	; 0x5a
 8000ed2:	77da      	strb	r2, [r3, #31]

	autopilot_KalmanInit(&_roll_filter, 0.001, 0.003, 0.03);
 8000ed4:	ed9f 1a31 	vldr	s2, [pc, #196]	; 8000f9c <autopilot_InitTask+0xf8>
 8000ed8:	eddf 0a31 	vldr	s1, [pc, #196]	; 8000fa0 <autopilot_InitTask+0xfc>
 8000edc:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8000fa4 <autopilot_InitTask+0x100>
 8000ee0:	4831      	ldr	r0, [pc, #196]	; (8000fa8 <autopilot_InitTask+0x104>)
 8000ee2:	f000 fb61 	bl	80015a8 <autopilot_KalmanInit>
	autopilot_KalmanInit(&_pitch_filter, 0.001, 0.003, 0.03);
 8000ee6:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 8000f9c <autopilot_InitTask+0xf8>
 8000eea:	eddf 0a2d 	vldr	s1, [pc, #180]	; 8000fa0 <autopilot_InitTask+0xfc>
 8000eee:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8000fa4 <autopilot_InitTask+0x100>
 8000ef2:	482e      	ldr	r0, [pc, #184]	; (8000fac <autopilot_InitTask+0x108>)
 8000ef4:	f000 fb58 	bl	80015a8 <autopilot_KalmanInit>

	//Roll channel default
	_roll_pid.Kp = 1.0f;
 8000ef8:	4b2d      	ldr	r3, [pc, #180]	; (8000fb0 <autopilot_InitTask+0x10c>)
 8000efa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000efe:	601a      	str	r2, [r3, #0]
	_roll_pid.Ki = 0.1f;
 8000f00:	4b2b      	ldr	r3, [pc, #172]	; (8000fb0 <autopilot_InitTask+0x10c>)
 8000f02:	4a2c      	ldr	r2, [pc, #176]	; (8000fb4 <autopilot_InitTask+0x110>)
 8000f04:	605a      	str	r2, [r3, #4]
	_roll_pid.Kd = 0.01f;
 8000f06:	4b2a      	ldr	r3, [pc, #168]	; (8000fb0 <autopilot_InitTask+0x10c>)
 8000f08:	4a2b      	ldr	r2, [pc, #172]	; (8000fb8 <autopilot_InitTask+0x114>)
 8000f0a:	609a      	str	r2, [r3, #8]

	//Roll channel default
	_pitch_pid.Kp = 1.0f;
 8000f0c:	4b2b      	ldr	r3, [pc, #172]	; (8000fbc <autopilot_InitTask+0x118>)
 8000f0e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000f12:	601a      	str	r2, [r3, #0]
	_pitch_pid.Ki = 0.1f;
 8000f14:	4b29      	ldr	r3, [pc, #164]	; (8000fbc <autopilot_InitTask+0x118>)
 8000f16:	4a27      	ldr	r2, [pc, #156]	; (8000fb4 <autopilot_InitTask+0x110>)
 8000f18:	605a      	str	r2, [r3, #4]
	_pitch_pid.Kd = 0.01f;
 8000f1a:	4b28      	ldr	r3, [pc, #160]	; (8000fbc <autopilot_InitTask+0x118>)
 8000f1c:	4a26      	ldr	r2, [pc, #152]	; (8000fb8 <autopilot_InitTask+0x114>)
 8000f1e:	609a      	str	r2, [r3, #8]

	//Offsets
	autopilot_info.offset_roll = 0.0f;
 8000f20:	4b1d      	ldr	r3, [pc, #116]	; (8000f98 <autopilot_InitTask+0xf4>)
 8000f22:	f04f 0200 	mov.w	r2, #0
 8000f26:	625a      	str	r2, [r3, #36]	; 0x24
	autopilot_info.offset_pitch = 0.0f;
 8000f28:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <autopilot_InitTask+0xf4>)
 8000f2a:	f04f 0200 	mov.w	r2, #0
 8000f2e:	62da      	str	r2, [r3, #44]	; 0x2c

	autopilot_states[AP_STATE_IDLE].start_func = NULL;
 8000f30:	4b23      	ldr	r3, [pc, #140]	; (8000fc0 <autopilot_InitTask+0x11c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
	autopilot_states[AP_STATE_IDLE].main_func = autopilot_stateIdleMain;
 8000f36:	4b22      	ldr	r3, [pc, #136]	; (8000fc0 <autopilot_InitTask+0x11c>)
 8000f38:	4a22      	ldr	r2, [pc, #136]	; (8000fc4 <autopilot_InitTask+0x120>)
 8000f3a:	605a      	str	r2, [r3, #4]
	autopilot_states[AP_STATE_IDLE].end_func = NULL;
 8000f3c:	4b20      	ldr	r3, [pc, #128]	; (8000fc0 <autopilot_InitTask+0x11c>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
	autopilot_states[AP_STATE_IDLE].upd_period = 0;
 8000f42:	4b1f      	ldr	r3, [pc, #124]	; (8000fc0 <autopilot_InitTask+0x11c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	60da      	str	r2, [r3, #12]

	autopilot_states[AP_STATE_FULLMANUAL].start_func = autopilot_stateFullManStart;
 8000f48:	4b1d      	ldr	r3, [pc, #116]	; (8000fc0 <autopilot_InitTask+0x11c>)
 8000f4a:	4a1f      	ldr	r2, [pc, #124]	; (8000fc8 <autopilot_InitTask+0x124>)
 8000f4c:	611a      	str	r2, [r3, #16]
	autopilot_states[AP_STATE_FULLMANUAL].main_func = autopilot_stateFullManMain;
 8000f4e:	4b1c      	ldr	r3, [pc, #112]	; (8000fc0 <autopilot_InitTask+0x11c>)
 8000f50:	4a1e      	ldr	r2, [pc, #120]	; (8000fcc <autopilot_InitTask+0x128>)
 8000f52:	615a      	str	r2, [r3, #20]
	autopilot_states[AP_STATE_FULLMANUAL].end_func = NULL;
 8000f54:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <autopilot_InitTask+0x11c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	619a      	str	r2, [r3, #24]
	autopilot_states[AP_STATE_FULLMANUAL].upd_period = 10;
 8000f5a:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <autopilot_InitTask+0x11c>)
 8000f5c:	220a      	movs	r2, #10
 8000f5e:	61da      	str	r2, [r3, #28]

	autopilot_states[AP_STATE_STAB].start_func = autopilot_stateStabStart;
 8000f60:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <autopilot_InitTask+0x11c>)
 8000f62:	4a1b      	ldr	r2, [pc, #108]	; (8000fd0 <autopilot_InitTask+0x12c>)
 8000f64:	621a      	str	r2, [r3, #32]
	autopilot_states[AP_STATE_STAB].main_func = autopilot_stateStabMain;
 8000f66:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <autopilot_InitTask+0x11c>)
 8000f68:	4a1a      	ldr	r2, [pc, #104]	; (8000fd4 <autopilot_InitTask+0x130>)
 8000f6a:	625a      	str	r2, [r3, #36]	; 0x24
	autopilot_states[AP_STATE_STAB].end_func = NULL;
 8000f6c:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <autopilot_InitTask+0x11c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	629a      	str	r2, [r3, #40]	; 0x28
	autopilot_states[AP_STATE_STAB].upd_period = 10;
 8000f72:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <autopilot_InitTask+0x11c>)
 8000f74:	220a      	movs	r2, #10
 8000f76:	62da      	str	r2, [r3, #44]	; 0x2c

	autopilot_states[AP_STATE_FAILSAFE].start_func = autopilot_stateFailsafeStart;
 8000f78:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <autopilot_InitTask+0x11c>)
 8000f7a:	4a17      	ldr	r2, [pc, #92]	; (8000fd8 <autopilot_InitTask+0x134>)
 8000f7c:	631a      	str	r2, [r3, #48]	; 0x30
	autopilot_states[AP_STATE_FAILSAFE].main_func = autopilot_stateFailsafeMain;
 8000f7e:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <autopilot_InitTask+0x11c>)
 8000f80:	4a16      	ldr	r2, [pc, #88]	; (8000fdc <autopilot_InitTask+0x138>)
 8000f82:	635a      	str	r2, [r3, #52]	; 0x34
	autopilot_states[AP_STATE_FAILSAFE].end_func = NULL;
 8000f84:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <autopilot_InitTask+0x11c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	639a      	str	r2, [r3, #56]	; 0x38
	autopilot_states[AP_STATE_FAILSAFE].upd_period = 0;
 8000f8a:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <autopilot_InitTask+0x11c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	63da      	str	r2, [r3, #60]	; 0x3c

	return;
 8000f90:	bf00      	nop
}
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	200003b4 	.word	0x200003b4
 8000f98:	200002ac 	.word	0x200002ac
 8000f9c:	3cf5c28f 	.word	0x3cf5c28f
 8000fa0:	3b449ba6 	.word	0x3b449ba6
 8000fa4:	3a83126f 	.word	0x3a83126f
 8000fa8:	200002f0 	.word	0x200002f0
 8000fac:	20000318 	.word	0x20000318
 8000fb0:	20000340 	.word	0x20000340
 8000fb4:	3dcccccd 	.word	0x3dcccccd
 8000fb8:	3c23d70a 	.word	0x3c23d70a
 8000fbc:	20000358 	.word	0x20000358
 8000fc0:	20000374 	.word	0x20000374
 8000fc4:	080010e1 	.word	0x080010e1
 8000fc8:	08001101 	.word	0x08001101
 8000fcc:	08001111 	.word	0x08001111
 8000fd0:	080013a1 	.word	0x080013a1
 8000fd4:	080013b1 	.word	0x080013b1
 8000fd8:	08001569 	.word	0x08001569
 8000fdc:	08001589 	.word	0x08001589

08000fe0 <autopilot_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void autopilot_Task(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
#ifdef NO_AUTOPILOT
	return;
#endif //NO_AUTOPILOT

	// initialize first state ever
	if( (_cur_ap_state == 0xFF) && (autopilot_info.timer[AUTOPILOT_TMR_INIT] == 0) ){
 8000fe4:	4b18      	ldr	r3, [pc, #96]	; (8001048 <autopilot_Task+0x68>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	2bff      	cmp	r3, #255	; 0xff
 8000fec:	d107      	bne.n	8000ffe <autopilot_Task+0x1e>
 8000fee:	4b17      	ldr	r3, [pc, #92]	; (800104c <autopilot_Task+0x6c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d103      	bne.n	8000ffe <autopilot_Task+0x1e>
		autopilot_gotoState(AP_STATE_IDLE);
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	f000 f82c 	bl	8001054 <autopilot_gotoState>
 8000ffc:	e017      	b.n	800102e <autopilot_Task+0x4e>
	}
	else
	{
		if( (_cur_ap_state < AP_SATES_NUM) && (autopilot_states[_cur_ap_state].main_func != NULL) ){
 8000ffe:	4b12      	ldr	r3, [pc, #72]	; (8001048 <autopilot_Task+0x68>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	b2db      	uxtb	r3, r3
 8001004:	2b03      	cmp	r3, #3
 8001006:	d812      	bhi.n	800102e <autopilot_Task+0x4e>
 8001008:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <autopilot_Task+0x68>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	b2db      	uxtb	r3, r3
 800100e:	4a10      	ldr	r2, [pc, #64]	; (8001050 <autopilot_Task+0x70>)
 8001010:	011b      	lsls	r3, r3, #4
 8001012:	4413      	add	r3, r2
 8001014:	3304      	adds	r3, #4
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d008      	beq.n	800102e <autopilot_Task+0x4e>
			autopilot_states[_cur_ap_state].main_func();
 800101c:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <autopilot_Task+0x68>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	4a0b      	ldr	r2, [pc, #44]	; (8001050 <autopilot_Task+0x70>)
 8001024:	011b      	lsls	r3, r3, #4
 8001026:	4413      	add	r3, r2
 8001028:	3304      	adds	r3, #4
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4798      	blx	r3
		}
	}

	if( autopilot_info.timer[AUTOPILOT_TMR_ANG_UPD] == 0 )
 800102e:	4b07      	ldr	r3, [pc, #28]	; (800104c <autopilot_Task+0x6c>)
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d105      	bne.n	8001042 <autopilot_Task+0x62>
	{
		autopilot_info.timer[AUTOPILOT_TMR_ANG_UPD] = 10;
 8001036:	4b05      	ldr	r3, [pc, #20]	; (800104c <autopilot_Task+0x6c>)
 8001038:	220a      	movs	r2, #10
 800103a:	609a      	str	r2, [r3, #8]
		autopilot_UpdAngles();
 800103c:	f000 fbe0 	bl	8001800 <autopilot_UpdAngles>
	}

	return;
 8001040:	bf00      	nop
 8001042:	bf00      	nop
}
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200003b4 	.word	0x200003b4
 800104c:	200002ac 	.word	0x200002ac
 8001050:	20000374 	.word	0x20000374

08001054 <autopilot_gotoState>:
  * @brief  sets the new ui state
  * @param  None
  * @retval None
  */
void autopilot_gotoState(uint8_t new_state)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
#ifdef NO_AUTOPILOT
	return;
#endif //NO_AUTOPILOT

	if( new_state >= AP_SATES_NUM ){
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	2b03      	cmp	r3, #3
 8001062:	d833      	bhi.n	80010cc <autopilot_gotoState+0x78>
		return;
	}
	if( _cur_ap_state < AP_SATES_NUM )
 8001064:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <autopilot_gotoState+0x80>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b03      	cmp	r3, #3
 800106c:	d812      	bhi.n	8001094 <autopilot_gotoState+0x40>
	{
		if( autopilot_states[_cur_ap_state].end_func != NULL ){
 800106e:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <autopilot_gotoState+0x80>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	b2db      	uxtb	r3, r3
 8001074:	4a18      	ldr	r2, [pc, #96]	; (80010d8 <autopilot_gotoState+0x84>)
 8001076:	011b      	lsls	r3, r3, #4
 8001078:	4413      	add	r3, r2
 800107a:	3308      	adds	r3, #8
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d008      	beq.n	8001094 <autopilot_gotoState+0x40>
			autopilot_states[_cur_ap_state].end_func();
 8001082:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <autopilot_gotoState+0x80>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	b2db      	uxtb	r3, r3
 8001088:	4a13      	ldr	r2, [pc, #76]	; (80010d8 <autopilot_gotoState+0x84>)
 800108a:	011b      	lsls	r3, r3, #4
 800108c:	4413      	add	r3, r2
 800108e:	3308      	adds	r3, #8
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4798      	blx	r3
		}
	}
	if( autopilot_states[new_state].start_func != NULL ){
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	4a10      	ldr	r2, [pc, #64]	; (80010d8 <autopilot_gotoState+0x84>)
 8001098:	011b      	lsls	r3, r3, #4
 800109a:	4413      	add	r3, r2
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d005      	beq.n	80010ae <autopilot_gotoState+0x5a>
		autopilot_states[new_state].start_func();
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	4a0c      	ldr	r2, [pc, #48]	; (80010d8 <autopilot_gotoState+0x84>)
 80010a6:	011b      	lsls	r3, r3, #4
 80010a8:	4413      	add	r3, r2
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4798      	blx	r3
	}

	autopilot_info.timer[AUTOPILOT_TMR_UPD] = autopilot_states[new_state].upd_period;
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	4a09      	ldr	r2, [pc, #36]	; (80010d8 <autopilot_gotoState+0x84>)
 80010b2:	011b      	lsls	r3, r3, #4
 80010b4:	4413      	add	r3, r2
 80010b6:	330c      	adds	r3, #12
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a08      	ldr	r2, [pc, #32]	; (80010dc <autopilot_gotoState+0x88>)
 80010bc:	6053      	str	r3, [r2, #4]
	_cur_ap_state = new_state;
 80010be:	4a05      	ldr	r2, [pc, #20]	; (80010d4 <autopilot_gotoState+0x80>)
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	7013      	strb	r3, [r2, #0]
	autopilot_info.state = new_state;
 80010c4:	4a05      	ldr	r2, [pc, #20]	; (80010dc <autopilot_gotoState+0x88>)
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	7613      	strb	r3, [r2, #24]

	return;
 80010ca:	e000      	b.n	80010ce <autopilot_gotoState+0x7a>
		return;
 80010cc:	bf00      	nop
}
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	200003b4 	.word	0x200003b4
 80010d8:	20000374 	.word	0x20000374
 80010dc:	200002ac 	.word	0x200002ac

080010e0 <autopilot_stateIdleMain>:

/*IDLE*/
void autopilot_stateIdleMain()
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	if( sens_info.state == 4 ){
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <autopilot_stateIdleMain+0x1c>)
 80010e6:	791b      	ldrb	r3, [r3, #4]
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	d103      	bne.n	80010f6 <autopilot_stateIdleMain+0x16>
		autopilot_gotoState(AP_STATE_STAB);
 80010ee:	2002      	movs	r0, #2
 80010f0:	f7ff ffb0 	bl	8001054 <autopilot_gotoState>
		//autopilot_gotoState(AP_STATE_FULLMANUAL);
	}

	return;
 80010f4:	bf00      	nop
 80010f6:	bf00      	nop
}
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20001028 	.word	0x20001028

08001100 <autopilot_stateFullManStart>:

/*Full manual control*/
void autopilot_stateFullManStart()
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
	return;
 8001104:	bf00      	nop
}
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
	...

08001110 <autopilot_stateFullManMain>:

void autopilot_stateFullManMain()
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
	float t_trot;
	static uint8_t astart_mot_state = 0;
	static uint8_t astart_elev_state = 0;

	if( autopilot_info.timer[AUTOPILOT_TMR_UPD] == 0 )
 8001116:	4b9a      	ldr	r3, [pc, #616]	; (8001380 <autopilot_stateFullManMain+0x270>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	f040 8091 	bne.w	8001242 <autopilot_stateFullManMain+0x132>
	{
		autopilot_info.timer[AUTOPILOT_TMR_UPD] = autopilot_states[_cur_ap_state].upd_period;
 8001120:	4b98      	ldr	r3, [pc, #608]	; (8001384 <autopilot_stateFullManMain+0x274>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	b2db      	uxtb	r3, r3
 8001126:	4a98      	ldr	r2, [pc, #608]	; (8001388 <autopilot_stateFullManMain+0x278>)
 8001128:	011b      	lsls	r3, r3, #4
 800112a:	4413      	add	r3, r2
 800112c:	330c      	adds	r3, #12
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a93      	ldr	r2, [pc, #588]	; (8001380 <autopilot_stateFullManMain+0x270>)
 8001132:	6053      	str	r3, [r2, #4]
		if(rc_info.connected == 1)
 8001134:	4b95      	ldr	r3, [pc, #596]	; (800138c <autopilot_stateFullManMain+0x27c>)
 8001136:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b01      	cmp	r3, #1
 800113e:	d17d      	bne.n	800123c <autopilot_stateFullManMain+0x12c>
		{
			servo_setPercnet(SERVO_ROLL, rc_info.axis_r_y);
 8001140:	4b92      	ldr	r3, [pc, #584]	; (800138c <autopilot_stateFullManMain+0x27c>)
 8001142:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 8001146:	b25b      	sxtb	r3, r3
 8001148:	4619      	mov	r1, r3
 800114a:	2000      	movs	r0, #0
 800114c:	f009 fe86 	bl	800ae5c <servo_setPercnet>

			if( autopilot_info.astart_elevator_en == 0 ){
 8001150:	4b8b      	ldr	r3, [pc, #556]	; (8001380 <autopilot_stateFullManMain+0x270>)
 8001152:	7f1b      	ldrb	r3, [r3, #28]
 8001154:	b2db      	uxtb	r3, r3
 8001156:	2b00      	cmp	r3, #0
 8001158:	d108      	bne.n	800116c <autopilot_stateFullManMain+0x5c>
				servo_setPercnet(SERVO_PITCH, rc_info.axis_r_x);
 800115a:	4b8c      	ldr	r3, [pc, #560]	; (800138c <autopilot_stateFullManMain+0x27c>)
 800115c:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 8001160:	b25b      	sxtb	r3, r3
 8001162:	4619      	mov	r1, r3
 8001164:	2001      	movs	r0, #1
 8001166:	f009 fe79 	bl	800ae5c <servo_setPercnet>
 800116a:	e013      	b.n	8001194 <autopilot_stateFullManMain+0x84>
			}
			//Auto start
			else
			{
				servo_setPercnet(SERVO_PITCH, autopilot_info.astart_elevator_val);
 800116c:	4b84      	ldr	r3, [pc, #528]	; (8001380 <autopilot_stateFullManMain+0x270>)
 800116e:	7f9b      	ldrb	r3, [r3, #30]
 8001170:	b25b      	sxtb	r3, r3
 8001172:	4619      	mov	r1, r3
 8001174:	2001      	movs	r0, #1
 8001176:	f009 fe71 	bl	800ae5c <servo_setPercnet>
				//Auto start switch off condition
				if( abs((int)rc_info.axis_r_x) > 50 ){
 800117a:	4b84      	ldr	r3, [pc, #528]	; (800138c <autopilot_stateFullManMain+0x27c>)
 800117c:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 8001180:	b25b      	sxtb	r3, r3
 8001182:	2b00      	cmp	r3, #0
 8001184:	bfb8      	it	lt
 8001186:	425b      	neglt	r3, r3
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2b32      	cmp	r3, #50	; 0x32
 800118c:	d902      	bls.n	8001194 <autopilot_stateFullManMain+0x84>
					autopilot_info.astart_elevator_en = 0;
 800118e:	4b7c      	ldr	r3, [pc, #496]	; (8001380 <autopilot_stateFullManMain+0x270>)
 8001190:	2200      	movs	r2, #0
 8001192:	771a      	strb	r2, [r3, #28]
				}
			}
			//Motor
			if( ((rc_info.axis_l_x > 0) || (autopilot_info.astart_motor_en == 1)) && (autopilot_info.armed_flag == 1) )
 8001194:	4b7d      	ldr	r3, [pc, #500]	; (800138c <autopilot_stateFullManMain+0x27c>)
 8001196:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 800119a:	b25b      	sxtb	r3, r3
 800119c:	2b00      	cmp	r3, #0
 800119e:	dc04      	bgt.n	80011aa <autopilot_stateFullManMain+0x9a>
 80011a0:	4b77      	ldr	r3, [pc, #476]	; (8001380 <autopilot_stateFullManMain+0x270>)
 80011a2:	7f5b      	ldrb	r3, [r3, #29]
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d133      	bne.n	8001212 <autopilot_stateFullManMain+0x102>
 80011aa:	4b75      	ldr	r3, [pc, #468]	; (8001380 <autopilot_stateFullManMain+0x270>)
 80011ac:	7e5b      	ldrb	r3, [r3, #25]
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d12e      	bne.n	8001212 <autopilot_stateFullManMain+0x102>
			{
				if( autopilot_info.astart_motor_en == 0 ){
 80011b4:	4b72      	ldr	r3, [pc, #456]	; (8001380 <autopilot_stateFullManMain+0x270>)
 80011b6:	7f5b      	ldrb	r3, [r3, #29]
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d10e      	bne.n	80011dc <autopilot_stateFullManMain+0xcc>
					t_trot = autopilot_expRunningAverage((float)rc_info.axis_l_x);
 80011be:	4b73      	ldr	r3, [pc, #460]	; (800138c <autopilot_stateFullManMain+0x27c>)
 80011c0:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 80011c4:	b25b      	sxtb	r3, r3
 80011c6:	ee07 3a90 	vmov	s15, r3
 80011ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ce:	eeb0 0a67 	vmov.f32	s0, s15
 80011d2:	f000 fbd9 	bl	8001988 <autopilot_expRunningAverage>
 80011d6:	ed87 0a03 	vstr	s0, [r7, #12]
				if( autopilot_info.astart_motor_en == 0 ){
 80011da:	e021      	b.n	8001220 <autopilot_stateFullManMain+0x110>
				}
				//Auto start
				else
				{
					t_trot = autopilot_expRunningAverage((float)autopilot_info.astart_motor_val);
 80011dc:	4b68      	ldr	r3, [pc, #416]	; (8001380 <autopilot_stateFullManMain+0x270>)
 80011de:	7fdb      	ldrb	r3, [r3, #31]
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	ee07 3a90 	vmov	s15, r3
 80011e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011ea:	eeb0 0a67 	vmov.f32	s0, s15
 80011ee:	f000 fbcb 	bl	8001988 <autopilot_expRunningAverage>
 80011f2:	ed87 0a03 	vstr	s0, [r7, #12]
					//Auto start switch off condition
					if( abs((int)rc_info.axis_l_x) > 50 ){
 80011f6:	4b65      	ldr	r3, [pc, #404]	; (800138c <autopilot_stateFullManMain+0x27c>)
 80011f8:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 80011fc:	b25b      	sxtb	r3, r3
 80011fe:	2b00      	cmp	r3, #0
 8001200:	bfb8      	it	lt
 8001202:	425b      	neglt	r3, r3
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b32      	cmp	r3, #50	; 0x32
 8001208:	d90a      	bls.n	8001220 <autopilot_stateFullManMain+0x110>
						autopilot_info.astart_motor_en = 0;
 800120a:	4b5d      	ldr	r3, [pc, #372]	; (8001380 <autopilot_stateFullManMain+0x270>)
 800120c:	2200      	movs	r2, #0
 800120e:	775a      	strb	r2, [r3, #29]
				if( autopilot_info.astart_motor_en == 0 ){
 8001210:	e006      	b.n	8001220 <autopilot_stateFullManMain+0x110>
					}
				}
			}
			else
			{
				t_trot = autopilot_expRunningAverage(0.0f);
 8001212:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 8001390 <autopilot_stateFullManMain+0x280>
 8001216:	f000 fbb7 	bl	8001988 <autopilot_expRunningAverage>
 800121a:	ed87 0a03 	vstr	s0, [r7, #12]
 800121e:	e000      	b.n	8001222 <autopilot_stateFullManMain+0x112>
				if( autopilot_info.astart_motor_en == 0 ){
 8001220:	bf00      	nop
				//motor_setTorque(MOTOR_MAIN, 0);
			}
			motor_setTorque(MOTOR_MAIN, (uint8_t)t_trot);
 8001222:	edd7 7a03 	vldr	s15, [r7, #12]
 8001226:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800122a:	edc7 7a01 	vstr	s15, [r7, #4]
 800122e:	793b      	ldrb	r3, [r7, #4]
 8001230:	b2db      	uxtb	r3, r3
 8001232:	4619      	mov	r1, r3
 8001234:	2000      	movs	r0, #0
 8001236:	f008 fa6b 	bl	8009710 <motor_setTorque>
 800123a:	e002      	b.n	8001242 <autopilot_stateFullManMain+0x132>

		}
		//Lost RC reception
		else{
			autopilot_gotoState(AP_STATE_FAILSAFE);
 800123c:	2003      	movs	r0, #3
 800123e:	f7ff ff09 	bl	8001054 <autopilot_gotoState>
		}
	}

	//ARMING
	if( autopilot_info.armed_flag == 0 )
 8001242:	4b4f      	ldr	r3, [pc, #316]	; (8001380 <autopilot_stateFullManMain+0x270>)
 8001244:	7e5b      	ldrb	r3, [r3, #25]
 8001246:	b2db      	uxtb	r3, r3
 8001248:	2b00      	cmp	r3, #0
 800124a:	d131      	bne.n	80012b0 <autopilot_stateFullManMain+0x1a0>
	{
		if(rc_info.connected == 1)
 800124c:	4b4f      	ldr	r3, [pc, #316]	; (800138c <autopilot_stateFullManMain+0x27c>)
 800124e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b01      	cmp	r3, #1
 8001256:	d12b      	bne.n	80012b0 <autopilot_stateFullManMain+0x1a0>
		{
			//Push trot to min for 3 sec
			if( _ap_arm_st == 0 )
 8001258:	4b4e      	ldr	r3, [pc, #312]	; (8001394 <autopilot_stateFullManMain+0x284>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d10e      	bne.n	800127e <autopilot_stateFullManMain+0x16e>
			{
				if( rc_info.axis_l_x < -70 )
 8001260:	4b4a      	ldr	r3, [pc, #296]	; (800138c <autopilot_stateFullManMain+0x27c>)
 8001262:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8001266:	b25b      	sxtb	r3, r3
 8001268:	f113 0f46 	cmn.w	r3, #70	; 0x46
 800126c:	da20      	bge.n	80012b0 <autopilot_stateFullManMain+0x1a0>
				{
					autopilot_info.timer[AUTOPILOT_TMR_ARM] = 3000;
 800126e:	4b44      	ldr	r3, [pc, #272]	; (8001380 <autopilot_stateFullManMain+0x270>)
 8001270:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001274:	60da      	str	r2, [r3, #12]
					_ap_arm_st = 1;
 8001276:	4b47      	ldr	r3, [pc, #284]	; (8001394 <autopilot_stateFullManMain+0x284>)
 8001278:	2201      	movs	r2, #1
 800127a:	701a      	strb	r2, [r3, #0]
 800127c:	e018      	b.n	80012b0 <autopilot_stateFullManMain+0x1a0>
				}
			}
			else if( _ap_arm_st == 1 )
 800127e:	4b45      	ldr	r3, [pc, #276]	; (8001394 <autopilot_stateFullManMain+0x284>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d114      	bne.n	80012b0 <autopilot_stateFullManMain+0x1a0>
			{
				if( rc_info.axis_l_x >= -70 ){
 8001286:	4b41      	ldr	r3, [pc, #260]	; (800138c <autopilot_stateFullManMain+0x27c>)
 8001288:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 800128c:	b25b      	sxtb	r3, r3
 800128e:	f113 0f46 	cmn.w	r3, #70	; 0x46
 8001292:	db03      	blt.n	800129c <autopilot_stateFullManMain+0x18c>
					_ap_arm_st = 0;
 8001294:	4b3f      	ldr	r3, [pc, #252]	; (8001394 <autopilot_stateFullManMain+0x284>)
 8001296:	2200      	movs	r2, #0
 8001298:	701a      	strb	r2, [r3, #0]
 800129a:	e009      	b.n	80012b0 <autopilot_stateFullManMain+0x1a0>
				}
				else
				{
					if( autopilot_info.timer[AUTOPILOT_TMR_ARM] == 0 )
 800129c:	4b38      	ldr	r3, [pc, #224]	; (8001380 <autopilot_stateFullManMain+0x270>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d105      	bne.n	80012b0 <autopilot_stateFullManMain+0x1a0>
					{
						autopilot_info.armed_flag = 1;
 80012a4:	4b36      	ldr	r3, [pc, #216]	; (8001380 <autopilot_stateFullManMain+0x270>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	765a      	strb	r2, [r3, #25]
						_ap_arm_st = 0;
 80012aa:	4b3a      	ldr	r3, [pc, #232]	; (8001394 <autopilot_stateFullManMain+0x284>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]

		}
	}

	//Auto start elevator
	if( autopilot_info.astart_elevator_en == 0 )
 80012b0:	4b33      	ldr	r3, [pc, #204]	; (8001380 <autopilot_stateFullManMain+0x270>)
 80012b2:	7f1b      	ldrb	r3, [r3, #28]
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d129      	bne.n	800130e <autopilot_stateFullManMain+0x1fe>
	{
		if( astart_elev_state == 0 )
 80012ba:	4b37      	ldr	r3, [pc, #220]	; (8001398 <autopilot_stateFullManMain+0x288>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d10d      	bne.n	80012de <autopilot_stateFullManMain+0x1ce>
		{
			if( rc_info.button_r == 1 )
 80012c2:	4b32      	ldr	r3, [pc, #200]	; (800138c <autopilot_stateFullManMain+0x27c>)
 80012c4:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d11f      	bne.n	800130e <autopilot_stateFullManMain+0x1fe>
			{
				autopilot_info.timer[AUTOPILOT_TMR_ASTART_ELEV] = 2000;
 80012ce:	4b2c      	ldr	r3, [pc, #176]	; (8001380 <autopilot_stateFullManMain+0x270>)
 80012d0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80012d4:	615a      	str	r2, [r3, #20]
				astart_elev_state = 1;
 80012d6:	4b30      	ldr	r3, [pc, #192]	; (8001398 <autopilot_stateFullManMain+0x288>)
 80012d8:	2201      	movs	r2, #1
 80012da:	701a      	strb	r2, [r3, #0]
 80012dc:	e017      	b.n	800130e <autopilot_stateFullManMain+0x1fe>
			}
		}
		else if( astart_elev_state == 1 )
 80012de:	4b2e      	ldr	r3, [pc, #184]	; (8001398 <autopilot_stateFullManMain+0x288>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d113      	bne.n	800130e <autopilot_stateFullManMain+0x1fe>
		{
			if( rc_info.button_r != 1 ){
 80012e6:	4b29      	ldr	r3, [pc, #164]	; (800138c <autopilot_stateFullManMain+0x27c>)
 80012e8:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d003      	beq.n	80012fa <autopilot_stateFullManMain+0x1ea>
				astart_elev_state = 0;
 80012f2:	4b29      	ldr	r3, [pc, #164]	; (8001398 <autopilot_stateFullManMain+0x288>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]
 80012f8:	e009      	b.n	800130e <autopilot_stateFullManMain+0x1fe>
			}
			else
			{
				if( autopilot_info.timer[AUTOPILOT_TMR_ASTART_ELEV] == 0 )
 80012fa:	4b21      	ldr	r3, [pc, #132]	; (8001380 <autopilot_stateFullManMain+0x270>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d105      	bne.n	800130e <autopilot_stateFullManMain+0x1fe>
				{
					autopilot_info.astart_elevator_en = 1;
 8001302:	4b1f      	ldr	r3, [pc, #124]	; (8001380 <autopilot_stateFullManMain+0x270>)
 8001304:	2201      	movs	r2, #1
 8001306:	771a      	strb	r2, [r3, #28]
					astart_elev_state = 0;
 8001308:	4b23      	ldr	r3, [pc, #140]	; (8001398 <autopilot_stateFullManMain+0x288>)
 800130a:	2200      	movs	r2, #0
 800130c:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	//Auto start motor
	if( (autopilot_info.astart_motor_en == 0) && (autopilot_info.armed_flag == 1) )
 800130e:	4b1c      	ldr	r3, [pc, #112]	; (8001380 <autopilot_stateFullManMain+0x270>)
 8001310:	7f5b      	ldrb	r3, [r3, #29]
 8001312:	b2db      	uxtb	r3, r3
 8001314:	2b00      	cmp	r3, #0
 8001316:	d12f      	bne.n	8001378 <autopilot_stateFullManMain+0x268>
 8001318:	4b19      	ldr	r3, [pc, #100]	; (8001380 <autopilot_stateFullManMain+0x270>)
 800131a:	7e5b      	ldrb	r3, [r3, #25]
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b01      	cmp	r3, #1
 8001320:	d12a      	bne.n	8001378 <autopilot_stateFullManMain+0x268>
	{
		if( astart_mot_state == 0 )
 8001322:	4b1e      	ldr	r3, [pc, #120]	; (800139c <autopilot_stateFullManMain+0x28c>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d10d      	bne.n	8001346 <autopilot_stateFullManMain+0x236>
		{
			if( rc_info.button_l == 1 )
 800132a:	4b18      	ldr	r3, [pc, #96]	; (800138c <autopilot_stateFullManMain+0x27c>)
 800132c:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b01      	cmp	r3, #1
 8001334:	d120      	bne.n	8001378 <autopilot_stateFullManMain+0x268>
			{
				autopilot_info.timer[AUTOPILOT_TMR_ASTART_MOTOR] = 2000;
 8001336:	4b12      	ldr	r3, [pc, #72]	; (8001380 <autopilot_stateFullManMain+0x270>)
 8001338:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800133c:	611a      	str	r2, [r3, #16]
				astart_mot_state = 1;
 800133e:	4b17      	ldr	r3, [pc, #92]	; (800139c <autopilot_stateFullManMain+0x28c>)
 8001340:	2201      	movs	r2, #1
 8001342:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}

	return;
 8001344:	e018      	b.n	8001378 <autopilot_stateFullManMain+0x268>
		else if( astart_mot_state == 1 )
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <autopilot_stateFullManMain+0x28c>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d114      	bne.n	8001378 <autopilot_stateFullManMain+0x268>
			if( rc_info.button_l != 1 ){
 800134e:	4b0f      	ldr	r3, [pc, #60]	; (800138c <autopilot_stateFullManMain+0x27c>)
 8001350:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b01      	cmp	r3, #1
 8001358:	d003      	beq.n	8001362 <autopilot_stateFullManMain+0x252>
				astart_mot_state = 0;
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <autopilot_stateFullManMain+0x28c>)
 800135c:	2200      	movs	r2, #0
 800135e:	701a      	strb	r2, [r3, #0]
	return;
 8001360:	e00a      	b.n	8001378 <autopilot_stateFullManMain+0x268>
				if( autopilot_info.timer[AUTOPILOT_TMR_ASTART_MOTOR] == 0 )
 8001362:	4b07      	ldr	r3, [pc, #28]	; (8001380 <autopilot_stateFullManMain+0x270>)
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d106      	bne.n	8001378 <autopilot_stateFullManMain+0x268>
					autopilot_info.astart_motor_en = 1;
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <autopilot_stateFullManMain+0x270>)
 800136c:	2201      	movs	r2, #1
 800136e:	775a      	strb	r2, [r3, #29]
					astart_mot_state = 0;
 8001370:	4b0a      	ldr	r3, [pc, #40]	; (800139c <autopilot_stateFullManMain+0x28c>)
 8001372:	2200      	movs	r2, #0
 8001374:	701a      	strb	r2, [r3, #0]
	return;
 8001376:	bf00      	nop
 8001378:	bf00      	nop
}
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	200002ac 	.word	0x200002ac
 8001384:	200003b4 	.word	0x200003b4
 8001388:	20000374 	.word	0x20000374
 800138c:	20000e70 	.word	0x20000e70
 8001390:	00000000 	.word	0x00000000
 8001394:	20000370 	.word	0x20000370
 8001398:	200003b5 	.word	0x200003b5
 800139c:	200003b6 	.word	0x200003b6

080013a0 <autopilot_stateStabStart>:

/*Stabilize state*/
void autopilot_stateStabStart()
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
	return;
 80013a4:	bf00      	nop
}
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
	...

080013b0 <autopilot_stateStabMain>:

void autopilot_stateStabMain()
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af02      	add	r7, sp, #8
	float t_trot;

	if( autopilot_info.timer[AUTOPILOT_TMR_UPD] == 0 )
 80013b6:	4b64      	ldr	r3, [pc, #400]	; (8001548 <autopilot_stateStabMain+0x198>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f040 80c0 	bne.w	8001540 <autopilot_stateStabMain+0x190>
	{
		autopilot_info.timer[AUTOPILOT_TMR_UPD] = autopilot_states[_cur_ap_state].upd_period;
 80013c0:	4b62      	ldr	r3, [pc, #392]	; (800154c <autopilot_stateStabMain+0x19c>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	4a62      	ldr	r2, [pc, #392]	; (8001550 <autopilot_stateStabMain+0x1a0>)
 80013c8:	011b      	lsls	r3, r3, #4
 80013ca:	4413      	add	r3, r2
 80013cc:	330c      	adds	r3, #12
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a5d      	ldr	r2, [pc, #372]	; (8001548 <autopilot_stateStabMain+0x198>)
 80013d2:	6053      	str	r3, [r2, #4]
		//Roll
		autopilot_info.tar_roll = autopilot_map((int32_t)rc_info.axis_r_y, -100, 100, -20, 20);
 80013d4:	4b5f      	ldr	r3, [pc, #380]	; (8001554 <autopilot_stateStabMain+0x1a4>)
 80013d6:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 80013da:	b25b      	sxtb	r3, r3
 80013dc:	4618      	mov	r0, r3
 80013de:	2314      	movs	r3, #20
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	f06f 0313 	mvn.w	r3, #19
 80013e6:	2264      	movs	r2, #100	; 0x64
 80013e8:	f06f 0163 	mvn.w	r1, #99	; 0x63
 80013ec:	f000 fb12 	bl	8001a14 <autopilot_map>
 80013f0:	ee07 0a90 	vmov	s15, r0
 80013f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013f8:	4b53      	ldr	r3, [pc, #332]	; (8001548 <autopilot_stateStabMain+0x198>)
 80013fa:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		_roll_pid.output = autopilot_CalcPID(&_roll_pid, autopilot_info.tar_roll, autopilot_info.roll);
 80013fe:	4b52      	ldr	r3, [pc, #328]	; (8001548 <autopilot_stateStabMain+0x198>)
 8001400:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001404:	4b50      	ldr	r3, [pc, #320]	; (8001548 <autopilot_stateStabMain+0x198>)
 8001406:	ed93 7a08 	vldr	s14, [r3, #32]
 800140a:	eef0 0a47 	vmov.f32	s1, s14
 800140e:	eeb0 0a67 	vmov.f32	s0, s15
 8001412:	4851      	ldr	r0, [pc, #324]	; (8001558 <autopilot_stateStabMain+0x1a8>)
 8001414:	f000 fb1a 	bl	8001a4c <autopilot_CalcPID>
 8001418:	4603      	mov	r3, r0
 800141a:	4a4f      	ldr	r2, [pc, #316]	; (8001558 <autopilot_stateStabMain+0x1a8>)
 800141c:	6153      	str	r3, [r2, #20]
		servo_setPercnet(SERVO_ROLL, (int8_t)_roll_pid.output);
 800141e:	4b4e      	ldr	r3, [pc, #312]	; (8001558 <autopilot_stateStabMain+0x1a8>)
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	b25b      	sxtb	r3, r3
 8001424:	4619      	mov	r1, r3
 8001426:	2000      	movs	r0, #0
 8001428:	f009 fd18 	bl	800ae5c <servo_setPercnet>
		//Pitch
		autopilot_info.tar_pitch = autopilot_map((int32_t)rc_info.axis_r_x, -100, 100, -15, 15);
 800142c:	4b49      	ldr	r3, [pc, #292]	; (8001554 <autopilot_stateStabMain+0x1a4>)
 800142e:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 8001432:	b25b      	sxtb	r3, r3
 8001434:	4618      	mov	r0, r3
 8001436:	230f      	movs	r3, #15
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	f06f 030e 	mvn.w	r3, #14
 800143e:	2264      	movs	r2, #100	; 0x64
 8001440:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8001444:	f000 fae6 	bl	8001a14 <autopilot_map>
 8001448:	ee07 0a90 	vmov	s15, r0
 800144c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001450:	4b3d      	ldr	r3, [pc, #244]	; (8001548 <autopilot_stateStabMain+0x198>)
 8001452:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		_pitch_pid.output = autopilot_CalcPID(&_pitch_pid, autopilot_info.tar_pitch, autopilot_info.pitch);
 8001456:	4b3c      	ldr	r3, [pc, #240]	; (8001548 <autopilot_stateStabMain+0x198>)
 8001458:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800145c:	4b3a      	ldr	r3, [pc, #232]	; (8001548 <autopilot_stateStabMain+0x198>)
 800145e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001462:	eef0 0a47 	vmov.f32	s1, s14
 8001466:	eeb0 0a67 	vmov.f32	s0, s15
 800146a:	483c      	ldr	r0, [pc, #240]	; (800155c <autopilot_stateStabMain+0x1ac>)
 800146c:	f000 faee 	bl	8001a4c <autopilot_CalcPID>
 8001470:	4603      	mov	r3, r0
 8001472:	4a3a      	ldr	r2, [pc, #232]	; (800155c <autopilot_stateStabMain+0x1ac>)
 8001474:	6153      	str	r3, [r2, #20]
		servo_setPercnet(SERVO_PITCH, (int8_t)_pitch_pid.output);
 8001476:	4b39      	ldr	r3, [pc, #228]	; (800155c <autopilot_stateStabMain+0x1ac>)
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	b25b      	sxtb	r3, r3
 800147c:	4619      	mov	r1, r3
 800147e:	2001      	movs	r0, #1
 8001480:	f009 fcec 	bl	800ae5c <servo_setPercnet>
		//Motor
		if( autopilot_info.armed_flag == 1 ){
 8001484:	4b30      	ldr	r3, [pc, #192]	; (8001548 <autopilot_stateStabMain+0x198>)
 8001486:	7e5b      	ldrb	r3, [r3, #25]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b01      	cmp	r3, #1
 800148c:	d10e      	bne.n	80014ac <autopilot_stateStabMain+0xfc>
			t_trot = autopilot_expRunningAverage((float)rc_info.axis_l_x);
 800148e:	4b31      	ldr	r3, [pc, #196]	; (8001554 <autopilot_stateStabMain+0x1a4>)
 8001490:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8001494:	b25b      	sxtb	r3, r3
 8001496:	ee07 3a90 	vmov	s15, r3
 800149a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800149e:	eeb0 0a67 	vmov.f32	s0, s15
 80014a2:	f000 fa71 	bl	8001988 <autopilot_expRunningAverage>
 80014a6:	ed87 0a03 	vstr	s0, [r7, #12]
 80014aa:	e005      	b.n	80014b8 <autopilot_stateStabMain+0x108>
		}
		else{
			t_trot = autopilot_expRunningAverage(0.0f);
 80014ac:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8001560 <autopilot_stateStabMain+0x1b0>
 80014b0:	f000 fa6a 	bl	8001988 <autopilot_expRunningAverage>
 80014b4:	ed87 0a03 	vstr	s0, [r7, #12]
		}
		motor_setTorque(MOTOR_MAIN, (uint8_t)t_trot);
 80014b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80014bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014c0:	edc7 7a01 	vstr	s15, [r7, #4]
 80014c4:	793b      	ldrb	r3, [r7, #4]
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	4619      	mov	r1, r3
 80014ca:	2000      	movs	r0, #0
 80014cc:	f008 f920 	bl	8009710 <motor_setTorque>

		//ARMING
		if( autopilot_info.armed_flag == 0 )
 80014d0:	4b1d      	ldr	r3, [pc, #116]	; (8001548 <autopilot_stateStabMain+0x198>)
 80014d2:	7e5b      	ldrb	r3, [r3, #25]
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d132      	bne.n	8001540 <autopilot_stateStabMain+0x190>
		{
			if(rc_info.connected == 1)
 80014da:	4b1e      	ldr	r3, [pc, #120]	; (8001554 <autopilot_stateStabMain+0x1a4>)
 80014dc:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d12c      	bne.n	8001540 <autopilot_stateStabMain+0x190>
			{
				//Push trot to min for 3 sec
				if( _ap_arm_st == 0 )
 80014e6:	4b1f      	ldr	r3, [pc, #124]	; (8001564 <autopilot_stateStabMain+0x1b4>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d10e      	bne.n	800150c <autopilot_stateStabMain+0x15c>
				{
					if( rc_info.axis_l_x < -70 )
 80014ee:	4b19      	ldr	r3, [pc, #100]	; (8001554 <autopilot_stateStabMain+0x1a4>)
 80014f0:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 80014f4:	b25b      	sxtb	r3, r3
 80014f6:	f113 0f46 	cmn.w	r3, #70	; 0x46
 80014fa:	da21      	bge.n	8001540 <autopilot_stateStabMain+0x190>
					{
						autopilot_info.timer[AUTOPILOT_TMR_ARM] = 3000;
 80014fc:	4b12      	ldr	r3, [pc, #72]	; (8001548 <autopilot_stateStabMain+0x198>)
 80014fe:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001502:	60da      	str	r2, [r3, #12]
						_ap_arm_st = 1;
 8001504:	4b17      	ldr	r3, [pc, #92]	; (8001564 <autopilot_stateStabMain+0x1b4>)
 8001506:	2201      	movs	r2, #1
 8001508:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}

	return;
 800150a:	e019      	b.n	8001540 <autopilot_stateStabMain+0x190>
				else if( _ap_arm_st == 1 )
 800150c:	4b15      	ldr	r3, [pc, #84]	; (8001564 <autopilot_stateStabMain+0x1b4>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d115      	bne.n	8001540 <autopilot_stateStabMain+0x190>
					if( rc_info.axis_l_x >= -70 ){
 8001514:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <autopilot_stateStabMain+0x1a4>)
 8001516:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 800151a:	b25b      	sxtb	r3, r3
 800151c:	f113 0f46 	cmn.w	r3, #70	; 0x46
 8001520:	db03      	blt.n	800152a <autopilot_stateStabMain+0x17a>
						_ap_arm_st = 0;
 8001522:	4b10      	ldr	r3, [pc, #64]	; (8001564 <autopilot_stateStabMain+0x1b4>)
 8001524:	2200      	movs	r2, #0
 8001526:	701a      	strb	r2, [r3, #0]
	return;
 8001528:	e00a      	b.n	8001540 <autopilot_stateStabMain+0x190>
						if( autopilot_info.timer[AUTOPILOT_TMR_ARM] == 0 )
 800152a:	4b07      	ldr	r3, [pc, #28]	; (8001548 <autopilot_stateStabMain+0x198>)
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d106      	bne.n	8001540 <autopilot_stateStabMain+0x190>
							autopilot_info.armed_flag = 1;
 8001532:	4b05      	ldr	r3, [pc, #20]	; (8001548 <autopilot_stateStabMain+0x198>)
 8001534:	2201      	movs	r2, #1
 8001536:	765a      	strb	r2, [r3, #25]
							_ap_arm_st = 0;
 8001538:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <autopilot_stateStabMain+0x1b4>)
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
	return;
 800153e:	bf00      	nop
 8001540:	bf00      	nop
}
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	200002ac 	.word	0x200002ac
 800154c:	200003b4 	.word	0x200003b4
 8001550:	20000374 	.word	0x20000374
 8001554:	20000e70 	.word	0x20000e70
 8001558:	20000340 	.word	0x20000340
 800155c:	20000358 	.word	0x20000358
 8001560:	00000000 	.word	0x00000000
 8001564:	20000370 	.word	0x20000370

08001568 <autopilot_stateFailsafeStart>:

/*Failsafe state*/
void autopilot_stateFailsafeStart()
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
	servo_setPercnet(SERVO_ROLL, 0);
 800156c:	2100      	movs	r1, #0
 800156e:	2000      	movs	r0, #0
 8001570:	f009 fc74 	bl	800ae5c <servo_setPercnet>
	servo_setPercnet(SERVO_PITCH, 0);
 8001574:	2100      	movs	r1, #0
 8001576:	2001      	movs	r0, #1
 8001578:	f009 fc70 	bl	800ae5c <servo_setPercnet>
	motor_setTorque(MOTOR_MAIN, 0);
 800157c:	2100      	movs	r1, #0
 800157e:	2000      	movs	r0, #0
 8001580:	f008 f8c6 	bl	8009710 <motor_setTorque>

	return;
 8001584:	bf00      	nop
}
 8001586:	bd80      	pop	{r7, pc}

08001588 <autopilot_stateFailsafeMain>:

void autopilot_stateFailsafeMain()
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
	if(rc_info.connected == 1){
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <autopilot_stateFailsafeMain+0x1c>)
 800158e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b01      	cmp	r3, #1
 8001596:	d103      	bne.n	80015a0 <autopilot_stateFailsafeMain+0x18>
		autopilot_gotoState(AP_STATE_FULLMANUAL);
 8001598:	2001      	movs	r0, #1
 800159a:	f7ff fd5b 	bl	8001054 <autopilot_gotoState>
	}
	return;
 800159e:	bf00      	nop
 80015a0:	bf00      	nop
}
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000e70 	.word	0x20000e70

080015a8 <autopilot_KalmanInit>:

//Kalman filter init
void autopilot_KalmanInit(kalman_TypeDef* filter, float Q_angle, float Q_bias, float R_measure)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80015b4:	edc7 0a01 	vstr	s1, [r7, #4]
 80015b8:	ed87 1a00 	vstr	s2, [r7]
	filter->Q_angle = Q_angle;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	601a      	str	r2, [r3, #0]
	filter->Q_bias = Q_bias;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	605a      	str	r2, [r3, #4]
	filter->R_measure = R_measure;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	609a      	str	r2, [r3, #8]

	filter->angle = 0;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f04f 0200 	mov.w	r2, #0
 80015d4:	60da      	str	r2, [r3, #12]
	filter->bias = 0;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	611a      	str	r2, [r3, #16]

	filter->P[0][0] = 0;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	f04f 0200 	mov.w	r2, #0
 80015e4:	619a      	str	r2, [r3, #24]
	filter->P[0][1] = 0;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f04f 0200 	mov.w	r2, #0
 80015ec:	61da      	str	r2, [r3, #28]
	filter->P[1][0] = 0;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f04f 0200 	mov.w	r2, #0
 80015f4:	621a      	str	r2, [r3, #32]
	filter->P[1][1] = 0;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	f04f 0200 	mov.w	r2, #0
 80015fc:	625a      	str	r2, [r3, #36]	; 0x24

	return;
 80015fe:	bf00      	nop
}
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <autopilot_KalmanUpd>:

//Kalman filter update
float autopilot_KalmanUpd(kalman_TypeDef* filter, float newAngle, float newRate, float dt)
{
 800160a:	b480      	push	{r7}
 800160c:	b089      	sub	sp, #36	; 0x24
 800160e:	af00      	add	r7, sp, #0
 8001610:	60f8      	str	r0, [r7, #12]
 8001612:	ed87 0a02 	vstr	s0, [r7, #8]
 8001616:	edc7 0a01 	vstr	s1, [r7, #4]
 800161a:	ed87 1a00 	vstr	s2, [r7]
	float S;
	float K[2];
	float y;

	filter->rate = newRate - filter->bias;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	edd3 7a04 	vldr	s15, [r3, #16]
 8001624:	ed97 7a01 	vldr	s14, [r7, #4]
 8001628:	ee77 7a67 	vsub.f32	s15, s14, s15
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	edc3 7a05 	vstr	s15, [r3, #20]
	filter->angle += dt * filter->rate;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	ed93 7a03 	vldr	s14, [r3, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	edd3 6a05 	vldr	s13, [r3, #20]
 800163e:	edd7 7a00 	vldr	s15, [r7]
 8001642:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001646:	ee77 7a27 	vadd.f32	s15, s14, s15
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	edc3 7a03 	vstr	s15, [r3, #12]

	filter->P[0][0] += dt * (dt*filter->P[1][1] - filter->P[0][1] - filter->P[1][0] + filter->Q_angle);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	ed93 7a06 	vldr	s14, [r3, #24]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800165c:	edd7 7a00 	vldr	s15, [r7]
 8001660:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	edd3 7a07 	vldr	s15, [r3, #28]
 800166a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	edd3 7a08 	vldr	s15, [r3, #32]
 8001674:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	edd3 7a00 	vldr	s15, [r3]
 800167e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001682:	edd7 7a00 	vldr	s15, [r7]
 8001686:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800168a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	edc3 7a06 	vstr	s15, [r3, #24]
	filter->P[0][1] -= dt * filter->P[1][1];
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	ed93 7a07 	vldr	s14, [r3, #28]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80016a0:	edd7 7a00 	vldr	s15, [r7]
 80016a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	edc3 7a07 	vstr	s15, [r3, #28]
	filter->P[1][0] -= dt * filter->P[1][1];
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	ed93 7a08 	vldr	s14, [r3, #32]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80016be:	edd7 7a00 	vldr	s15, [r7]
 80016c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	edc3 7a08 	vstr	s15, [r3, #32]
	filter->P[1][1] += filter->Q_bias * dt;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	edd3 6a01 	vldr	s13, [r3, #4]
 80016dc:	edd7 7a00 	vldr	s15, [r7]
 80016e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	S = filter->P[0][0] + filter->R_measure;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	ed93 7a06 	vldr	s14, [r3, #24]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80016fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016fe:	edc7 7a07 	vstr	s15, [r7, #28]
	K[0] = filter->P[0][0] / S;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	edd3 6a06 	vldr	s13, [r3, #24]
 8001708:	ed97 7a07 	vldr	s14, [r7, #28]
 800170c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001710:	edc7 7a04 	vstr	s15, [r7, #16]
	K[1] = filter->P[1][0] / S;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	edd3 6a08 	vldr	s13, [r3, #32]
 800171a:	ed97 7a07 	vldr	s14, [r7, #28]
 800171e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001722:	edc7 7a05 	vstr	s15, [r7, #20]

	y = newAngle - filter->angle;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	edd3 7a03 	vldr	s15, [r3, #12]
 800172c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001730:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001734:	edc7 7a06 	vstr	s15, [r7, #24]
	filter->angle += K[0] * y;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	ed93 7a03 	vldr	s14, [r3, #12]
 800173e:	edd7 6a04 	vldr	s13, [r7, #16]
 8001742:	edd7 7a06 	vldr	s15, [r7, #24]
 8001746:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800174a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	edc3 7a03 	vstr	s15, [r3, #12]
	filter->bias += K[1] * y;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	ed93 7a04 	vldr	s14, [r3, #16]
 800175a:	edd7 6a05 	vldr	s13, [r7, #20]
 800175e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001762:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	edc3 7a04 	vstr	s15, [r3, #16]

	filter->P[0][0] -= K[0] * filter->P[0][0];
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	ed93 7a06 	vldr	s14, [r3, #24]
 8001776:	edd7 6a04 	vldr	s13, [r7, #16]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001780:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001784:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	edc3 7a06 	vstr	s15, [r3, #24]
	filter->P[0][1] -= K[0] * filter->P[0][1];
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	ed93 7a07 	vldr	s14, [r3, #28]
 8001794:	edd7 6a04 	vldr	s13, [r7, #16]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	edd3 7a07 	vldr	s15, [r3, #28]
 800179e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	edc3 7a07 	vstr	s15, [r3, #28]
	filter->P[1][0] -= K[1] * filter->P[0][0];
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	ed93 7a08 	vldr	s14, [r3, #32]
 80017b2:	edd7 6a05 	vldr	s13, [r7, #20]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	edd3 7a06 	vldr	s15, [r3, #24]
 80017bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	edc3 7a08 	vstr	s15, [r3, #32]
	filter->P[1][1] -= K[1] * filter->P[0][1];
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80017d0:	edd7 6a05 	vldr	s13, [r7, #20]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	edd3 7a07 	vldr	s15, [r3, #28]
 80017da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	return filter->angle;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	ee07 3a90 	vmov	s15, r3
}
 80017f0:	eeb0 0a67 	vmov.f32	s0, s15
 80017f4:	3724      	adds	r7, #36	; 0x24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
	...

08001800 <autopilot_UpdAngles>:

//Update Pitch Roll angles
void autopilot_UpdAngles()
{
 8001800:	b5b0      	push	{r4, r5, r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
	if( sens_info.state == 4 )
 8001806:	4b5a      	ldr	r3, [pc, #360]	; (8001970 <autopilot_UpdAngles+0x170>)
 8001808:	791b      	ldrb	r3, [r3, #4]
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b04      	cmp	r3, #4
 800180e:	f040 80a7 	bne.w	8001960 <autopilot_UpdAngles+0x160>
	{
		float dt = 0.01;
 8001812:	4b58      	ldr	r3, [pc, #352]	; (8001974 <autopilot_UpdAngles+0x174>)
 8001814:	60fb      	str	r3, [r7, #12]

		float roll = atan2(sens_info.accel_y, sens_info.accel_z) * 180/M_PI;
 8001816:	4b56      	ldr	r3, [pc, #344]	; (8001970 <autopilot_UpdAngles+0x170>)
 8001818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe fe48 	bl	80004b0 <__aeabi_f2d>
 8001820:	4604      	mov	r4, r0
 8001822:	460d      	mov	r5, r1
 8001824:	4b52      	ldr	r3, [pc, #328]	; (8001970 <autopilot_UpdAngles+0x170>)
 8001826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fe41 	bl	80004b0 <__aeabi_f2d>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	ec43 2b11 	vmov	d1, r2, r3
 8001836:	ec45 4b10 	vmov	d0, r4, r5
 800183a:	f014 fc51 	bl	80160e0 <atan2>
 800183e:	ec51 0b10 	vmov	r0, r1, d0
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	4b4c      	ldr	r3, [pc, #304]	; (8001978 <autopilot_UpdAngles+0x178>)
 8001848:	f7fe fe8a 	bl	8000560 <__aeabi_dmul>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	4610      	mov	r0, r2
 8001852:	4619      	mov	r1, r3
 8001854:	a344      	add	r3, pc, #272	; (adr r3, 8001968 <autopilot_UpdAngles+0x168>)
 8001856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185a:	f7fe ffab 	bl	80007b4 <__aeabi_ddiv>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4610      	mov	r0, r2
 8001864:	4619      	mov	r1, r3
 8001866:	f7ff f92b 	bl	8000ac0 <__aeabi_d2f>
 800186a:	4603      	mov	r3, r0
 800186c:	60bb      	str	r3, [r7, #8]
		float pitch = atan2(-sens_info.accel_x, sqrt(sens_info.accel_y * sens_info.accel_y + sens_info.accel_z * sens_info.accel_z)) * 180/M_PI;
 800186e:	4b40      	ldr	r3, [pc, #256]	; (8001970 <autopilot_UpdAngles+0x170>)
 8001870:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001874:	eef1 7a67 	vneg.f32	s15, s15
 8001878:	ee17 3a90 	vmov	r3, s15
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fe17 	bl	80004b0 <__aeabi_f2d>
 8001882:	4604      	mov	r4, r0
 8001884:	460d      	mov	r5, r1
 8001886:	4b3a      	ldr	r3, [pc, #232]	; (8001970 <autopilot_UpdAngles+0x170>)
 8001888:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800188c:	4b38      	ldr	r3, [pc, #224]	; (8001970 <autopilot_UpdAngles+0x170>)
 800188e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001892:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001896:	4b36      	ldr	r3, [pc, #216]	; (8001970 <autopilot_UpdAngles+0x170>)
 8001898:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800189c:	4b34      	ldr	r3, [pc, #208]	; (8001970 <autopilot_UpdAngles+0x170>)
 800189e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80018a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018aa:	ee17 0a90 	vmov	r0, s15
 80018ae:	f7fe fdff 	bl	80004b0 <__aeabi_f2d>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	ec43 2b10 	vmov	d0, r2, r3
 80018ba:	f014 fc13 	bl	80160e4 <sqrt>
 80018be:	eeb0 7a40 	vmov.f32	s14, s0
 80018c2:	eef0 7a60 	vmov.f32	s15, s1
 80018c6:	eeb0 1a47 	vmov.f32	s2, s14
 80018ca:	eef0 1a67 	vmov.f32	s3, s15
 80018ce:	ec45 4b10 	vmov	d0, r4, r5
 80018d2:	f014 fc05 	bl	80160e0 <atan2>
 80018d6:	ec51 0b10 	vmov	r0, r1, d0
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	4b26      	ldr	r3, [pc, #152]	; (8001978 <autopilot_UpdAngles+0x178>)
 80018e0:	f7fe fe3e 	bl	8000560 <__aeabi_dmul>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4610      	mov	r0, r2
 80018ea:	4619      	mov	r1, r3
 80018ec:	a31e      	add	r3, pc, #120	; (adr r3, 8001968 <autopilot_UpdAngles+0x168>)
 80018ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f2:	f7fe ff5f 	bl	80007b4 <__aeabi_ddiv>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4610      	mov	r0, r2
 80018fc:	4619      	mov	r1, r3
 80018fe:	f7ff f8df 	bl	8000ac0 <__aeabi_d2f>
 8001902:	4603      	mov	r3, r0
 8001904:	607b      	str	r3, [r7, #4]

		autopilot_info.roll = autopilot_KalmanUpd(&_roll_filter, roll, sens_info.gyro_x, dt) + autopilot_info.offset_roll;
 8001906:	4b1a      	ldr	r3, [pc, #104]	; (8001970 <autopilot_UpdAngles+0x170>)
 8001908:	edd3 7a02 	vldr	s15, [r3, #8]
 800190c:	ed97 1a03 	vldr	s2, [r7, #12]
 8001910:	eef0 0a67 	vmov.f32	s1, s15
 8001914:	ed97 0a02 	vldr	s0, [r7, #8]
 8001918:	4818      	ldr	r0, [pc, #96]	; (800197c <autopilot_UpdAngles+0x17c>)
 800191a:	f7ff fe76 	bl	800160a <autopilot_KalmanUpd>
 800191e:	eeb0 7a40 	vmov.f32	s14, s0
 8001922:	4b17      	ldr	r3, [pc, #92]	; (8001980 <autopilot_UpdAngles+0x180>)
 8001924:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001928:	ee77 7a27 	vadd.f32	s15, s14, s15
 800192c:	4b14      	ldr	r3, [pc, #80]	; (8001980 <autopilot_UpdAngles+0x180>)
 800192e:	edc3 7a08 	vstr	s15, [r3, #32]
		autopilot_info.pitch = autopilot_KalmanUpd(&_pitch_filter, pitch, sens_info.gyro_y, dt) + autopilot_info.offset_pitch;
 8001932:	4b0f      	ldr	r3, [pc, #60]	; (8001970 <autopilot_UpdAngles+0x170>)
 8001934:	edd3 7a03 	vldr	s15, [r3, #12]
 8001938:	ed97 1a03 	vldr	s2, [r7, #12]
 800193c:	eef0 0a67 	vmov.f32	s1, s15
 8001940:	ed97 0a01 	vldr	s0, [r7, #4]
 8001944:	480f      	ldr	r0, [pc, #60]	; (8001984 <autopilot_UpdAngles+0x184>)
 8001946:	f7ff fe60 	bl	800160a <autopilot_KalmanUpd>
 800194a:	eeb0 7a40 	vmov.f32	s14, s0
 800194e:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <autopilot_UpdAngles+0x180>)
 8001950:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001954:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001958:	4b09      	ldr	r3, [pc, #36]	; (8001980 <autopilot_UpdAngles+0x180>)
 800195a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	}
	return;
 800195e:	bf00      	nop
 8001960:	bf00      	nop
}
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bdb0      	pop	{r4, r5, r7, pc}
 8001968:	54442d18 	.word	0x54442d18
 800196c:	400921fb 	.word	0x400921fb
 8001970:	20001028 	.word	0x20001028
 8001974:	3c23d70a 	.word	0x3c23d70a
 8001978:	40668000 	.word	0x40668000
 800197c:	200002f0 	.word	0x200002f0
 8001980:	200002ac 	.word	0x200002ac
 8001984:	20000318 	.word	0x20000318

08001988 <autopilot_expRunningAverage>:

float autopilot_expRunningAverage(float newVal)
{
 8001988:	b5b0      	push	{r4, r5, r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	ed87 0a01 	vstr	s0, [r7, #4]
	static float filVal = 0.0f;

	if( newVal == 0.0f ){
 8001992:	edd7 7a01 	vldr	s15, [r7, #4]
 8001996:	eef5 7a40 	vcmp.f32	s15, #0.0
 800199a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800199e:	d104      	bne.n	80019aa <autopilot_expRunningAverage+0x22>
		filVal = 0.0f;
 80019a0:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <autopilot_expRunningAverage+0x88>)
 80019a2:	f04f 0200 	mov.w	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	e025      	b.n	80019f6 <autopilot_expRunningAverage+0x6e>
	}
	else{
		filVal += (newVal - filVal) * TROT_FILTER_KOEF;
 80019aa:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <autopilot_expRunningAverage+0x88>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe fd7e 	bl	80004b0 <__aeabi_f2d>
 80019b4:	4604      	mov	r4, r0
 80019b6:	460d      	mov	r5, r1
 80019b8:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <autopilot_expRunningAverage+0x88>)
 80019ba:	edd3 7a00 	vldr	s15, [r3]
 80019be:	ed97 7a01 	vldr	s14, [r7, #4]
 80019c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019c6:	ee17 0a90 	vmov	r0, s15
 80019ca:	f7fe fd71 	bl	80004b0 <__aeabi_f2d>
 80019ce:	a30e      	add	r3, pc, #56	; (adr r3, 8001a08 <autopilot_expRunningAverage+0x80>)
 80019d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d4:	f7fe fdc4 	bl	8000560 <__aeabi_dmul>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4620      	mov	r0, r4
 80019de:	4629      	mov	r1, r5
 80019e0:	f7fe fc08 	bl	80001f4 <__adddf3>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4610      	mov	r0, r2
 80019ea:	4619      	mov	r1, r3
 80019ec:	f7ff f868 	bl	8000ac0 <__aeabi_d2f>
 80019f0:	4603      	mov	r3, r0
 80019f2:	4a07      	ldr	r2, [pc, #28]	; (8001a10 <autopilot_expRunningAverage+0x88>)
 80019f4:	6013      	str	r3, [r2, #0]
	}

	return filVal;
 80019f6:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <autopilot_expRunningAverage+0x88>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	ee07 3a90 	vmov	s15, r3
}
 80019fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bdb0      	pop	{r4, r5, r7, pc}
 8001a08:	47ae147b 	.word	0x47ae147b
 8001a0c:	3f947ae1 	.word	0x3f947ae1
 8001a10:	200003b8 	.word	0x200003b8

08001a14 <autopilot_map>:
  * 	toLow: the lower bound of the value’s target range.
  * 	toHigh: the upper bound of the value’s target range.
  * @retval The mapped value.
  */
int32_t autopilot_map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
 8001a20:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	69b9      	ldr	r1, [r7, #24]
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	1a8a      	subs	r2, r1, r2
 8001a2e:	fb03 f202 	mul.w	r2, r3, r2
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	1acb      	subs	r3, r1, r3
 8001a38:	fb92 f2f3 	sdiv	r2, r2, r3
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	4413      	add	r3, r2
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <autopilot_CalcPID>:

// Function to calculate PID control signal
int32_t autopilot_CalcPID(PID_TypeDef *pid, float setpoint, float current_angle) {
 8001a4c:	b480      	push	{r7}
 8001a4e:	b087      	sub	sp, #28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a58:	edc7 0a01 	vstr	s1, [r7, #4]
    // Calculate error
    float error = setpoint - current_angle;
 8001a5c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a60:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a68:	edc7 7a04 	vstr	s15, [r7, #16]
    // Update integral sum
    pid->integral += error;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a72:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	edc3 7a03 	vstr	s15, [r3, #12]

    // Limit integral sum to avoid integral windup
    if (pid->integral > 100.0) {
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a86:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001b44 <autopilot_CalcPID+0xf8>
 8001a8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a92:	dd03      	ble.n	8001a9c <autopilot_CalcPID+0x50>
        pid->integral = 100.0;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4a2c      	ldr	r2, [pc, #176]	; (8001b48 <autopilot_CalcPID+0xfc>)
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	e00c      	b.n	8001ab6 <autopilot_CalcPID+0x6a>
    } else if (pid->integral < -100.0) {
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001aa2:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001b4c <autopilot_CalcPID+0x100>
 8001aa6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aae:	d502      	bpl.n	8001ab6 <autopilot_CalcPID+0x6a>
        pid->integral = -100.0;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4a27      	ldr	r2, [pc, #156]	; (8001b50 <autopilot_CalcPID+0x104>)
 8001ab4:	60da      	str	r2, [r3, #12]
    }

    // Calculate PID control signal
    float pid_output = (pid->Kp * error) + (pid->Ki * pid->integral) + (pid->Kd * (error - pid->prev_error));
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	ed93 7a00 	vldr	s14, [r3]
 8001abc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ac0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	edd3 6a01 	vldr	s13, [r3, #4]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ad0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ad4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	edd3 6a02 	vldr	s13, [r3, #8]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ae4:	ed97 6a04 	vldr	s12, [r7, #16]
 8001ae8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001aec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001af0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af4:	edc7 7a05 	vstr	s15, [r7, #20]

    // Limit output value between -100 and 100
    if (pid_output > 100.0) {
 8001af8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001afc:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001b44 <autopilot_CalcPID+0xf8>
 8001b00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b08:	dd02      	ble.n	8001b10 <autopilot_CalcPID+0xc4>
        pid_output = 100.0;
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <autopilot_CalcPID+0xfc>)
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	e00a      	b.n	8001b26 <autopilot_CalcPID+0xda>
    } else if (pid_output < -100.0) {
 8001b10:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b14:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001b4c <autopilot_CalcPID+0x100>
 8001b18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b20:	d501      	bpl.n	8001b26 <autopilot_CalcPID+0xda>
        pid_output = -100.0;
 8001b22:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <autopilot_CalcPID+0x104>)
 8001b24:	617b      	str	r3, [r7, #20]
    }

    // Update previous error for the next iteration
    pid->prev_error = error;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	611a      	str	r2, [r3, #16]

    // Convert the result to int32_t and return
    return (int32_t)pid_output;
 8001b2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b34:	ee17 3a90 	vmov	r3, s15
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	371c      	adds	r7, #28
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	42c80000 	.word	0x42c80000
 8001b48:	42c80000 	.word	0x42c80000
 8001b4c:	c2c80000 	.word	0xc2c80000
 8001b50:	c2c80000 	.word	0xc2c80000

08001b54 <cfg_NodeApVarProp>:

/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeApVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b087      	sub	sp, #28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
 8001b60:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 8001b62:	89fb      	ldrh	r3, [r7, #14]
 8001b64:	2b07      	cmp	r3, #7
 8001b66:	d82b      	bhi.n	8001bc0 <cfg_NodeApVarProp+0x6c>
 8001b68:	a201      	add	r2, pc, #4	; (adr r2, 8001b70 <cfg_NodeApVarProp+0x1c>)
 8001b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6e:	bf00      	nop
 8001b70:	08001b91 	.word	0x08001b91
 8001b74:	08001b97 	.word	0x08001b97
 8001b78:	08001b9d 	.word	0x08001b9d
 8001b7c:	08001ba3 	.word	0x08001ba3
 8001b80:	08001ba9 	.word	0x08001ba9
 8001b84:	08001baf 	.word	0x08001baf
 8001b88:	08001bb5 	.word	0x08001bb5
 8001b8c:	08001bbb 	.word	0x08001bbb
	{
		case AUTOPILOT_STATE:			str = "State"; break;
 8001b90:	4b37      	ldr	r3, [pc, #220]	; (8001c70 <cfg_NodeApVarProp+0x11c>)
 8001b92:	617b      	str	r3, [r7, #20]
 8001b94:	e016      	b.n	8001bc4 <cfg_NodeApVarProp+0x70>
		case AUTOPILOT_ARMED:			str = "Armed"; break;
 8001b96:	4b37      	ldr	r3, [pc, #220]	; (8001c74 <cfg_NodeApVarProp+0x120>)
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	e013      	b.n	8001bc4 <cfg_NodeApVarProp+0x70>
		case AUTOPILOT_ROLL:			str = "Roll"; break;
 8001b9c:	4b36      	ldr	r3, [pc, #216]	; (8001c78 <cfg_NodeApVarProp+0x124>)
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	e010      	b.n	8001bc4 <cfg_NodeApVarProp+0x70>
		case AUTOPILOT_OFFSET_ROLL:		str = "Roll offset"; break;
 8001ba2:	4b36      	ldr	r3, [pc, #216]	; (8001c7c <cfg_NodeApVarProp+0x128>)
 8001ba4:	617b      	str	r3, [r7, #20]
 8001ba6:	e00d      	b.n	8001bc4 <cfg_NodeApVarProp+0x70>
		case AUTOPILOT_PITCH:			str = "Pitch"; break;
 8001ba8:	4b35      	ldr	r3, [pc, #212]	; (8001c80 <cfg_NodeApVarProp+0x12c>)
 8001baa:	617b      	str	r3, [r7, #20]
 8001bac:	e00a      	b.n	8001bc4 <cfg_NodeApVarProp+0x70>
		case AUTOPILOT_OFFSET_PITCH:	str = "Pitch offset"; break;
 8001bae:	4b35      	ldr	r3, [pc, #212]	; (8001c84 <cfg_NodeApVarProp+0x130>)
 8001bb0:	617b      	str	r3, [r7, #20]
 8001bb2:	e007      	b.n	8001bc4 <cfg_NodeApVarProp+0x70>
		case AUTOPILOT_TAR_ROLL:		str = "Target roll"; break;
 8001bb4:	4b34      	ldr	r3, [pc, #208]	; (8001c88 <cfg_NodeApVarProp+0x134>)
 8001bb6:	617b      	str	r3, [r7, #20]
 8001bb8:	e004      	b.n	8001bc4 <cfg_NodeApVarProp+0x70>
		case AUTOPILOT_TAR_PITCH:		str = "Target pitch"; break;
 8001bba:	4b34      	ldr	r3, [pc, #208]	; (8001c8c <cfg_NodeApVarProp+0x138>)
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	e001      	b.n	8001bc4 <cfg_NodeApVarProp+0x70>
		default: return CFG_ERROR_VARID;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	e04e      	b.n	8001c62 <cfg_NodeApVarProp+0x10e>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d00f      	beq.n	8001bea <cfg_NodeApVarProp+0x96>
 8001bca:	e007      	b.n	8001bdc <cfg_NodeApVarProp+0x88>
 8001bcc:	697a      	ldr	r2, [r7, #20]
 8001bce:	1c53      	adds	r3, r2, #1
 8001bd0:	617b      	str	r3, [r7, #20]
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	1c59      	adds	r1, r3, #1
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	7812      	ldrb	r2, [r2, #0]
 8001bda:	701a      	strb	r2, [r3, #0]
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1f3      	bne.n	8001bcc <cfg_NodeApVarProp+0x78>
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d037      	beq.n	8001c60 <cfg_NodeApVarProp+0x10c>
 8001bf0:	89fb      	ldrh	r3, [r7, #14]
 8001bf2:	2b07      	cmp	r3, #7
 8001bf4:	d832      	bhi.n	8001c5c <cfg_NodeApVarProp+0x108>
 8001bf6:	a201      	add	r2, pc, #4	; (adr r2, 8001bfc <cfg_NodeApVarProp+0xa8>)
 8001bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bfc:	08001c1d 	.word	0x08001c1d
 8001c00:	08001c25 	.word	0x08001c25
 8001c04:	08001c2d 	.word	0x08001c2d
 8001c08:	08001c35 	.word	0x08001c35
 8001c0c:	08001c3d 	.word	0x08001c3d
 8001c10:	08001c45 	.word	0x08001c45
 8001c14:	08001c4d 	.word	0x08001c4d
 8001c18:	08001c55 	.word	0x08001c55
	{
		case AUTOPILOT_STATE:			*prop = CFG_VAR_TYPE_UINT; break;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2202      	movs	r2, #2
 8001c20:	801a      	strh	r2, [r3, #0]
 8001c22:	e01d      	b.n	8001c60 <cfg_NodeApVarProp+0x10c>
		case AUTOPILOT_ARMED:			*prop = CFG_VAR_TYPE_BOOL; break;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2203      	movs	r2, #3
 8001c28:	801a      	strh	r2, [r3, #0]
 8001c2a:	e019      	b.n	8001c60 <cfg_NodeApVarProp+0x10c>
		case AUTOPILOT_ROLL:			*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2214      	movs	r2, #20
 8001c30:	801a      	strh	r2, [r3, #0]
 8001c32:	e015      	b.n	8001c60 <cfg_NodeApVarProp+0x10c>
		case AUTOPILOT_OFFSET_ROLL:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_CONST; break;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2224      	movs	r2, #36	; 0x24
 8001c38:	801a      	strh	r2, [r3, #0]
 8001c3a:	e011      	b.n	8001c60 <cfg_NodeApVarProp+0x10c>
		case AUTOPILOT_PITCH:			*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2214      	movs	r2, #20
 8001c40:	801a      	strh	r2, [r3, #0]
 8001c42:	e00d      	b.n	8001c60 <cfg_NodeApVarProp+0x10c>
		case AUTOPILOT_OFFSET_PITCH:	*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_CONST; break;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2224      	movs	r2, #36	; 0x24
 8001c48:	801a      	strh	r2, [r3, #0]
 8001c4a:	e009      	b.n	8001c60 <cfg_NodeApVarProp+0x10c>
		case AUTOPILOT_TAR_ROLL:		*prop = CFG_VAR_TYPE_REAL; break;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2204      	movs	r2, #4
 8001c50:	801a      	strh	r2, [r3, #0]
 8001c52:	e005      	b.n	8001c60 <cfg_NodeApVarProp+0x10c>
		case AUTOPILOT_TAR_PITCH:		*prop = CFG_VAR_TYPE_REAL; break;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2204      	movs	r2, #4
 8001c58:	801a      	strh	r2, [r3, #0]
 8001c5a:	e001      	b.n	8001c60 <cfg_NodeApVarProp+0x10c>
		default: return CFG_ERROR_VARID;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	e000      	b.n	8001c62 <cfg_NodeApVarProp+0x10e>
	}
	return CFG_ERROR_NONE;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	371c      	adds	r7, #28
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	080167f8 	.word	0x080167f8
 8001c74:	08016800 	.word	0x08016800
 8001c78:	08016808 	.word	0x08016808
 8001c7c:	08016810 	.word	0x08016810
 8001c80:	0801681c 	.word	0x0801681c
 8001c84:	08016824 	.word	0x08016824
 8001c88:	08016834 	.word	0x08016834
 8001c8c:	08016840 	.word	0x08016840

08001c90 <cfg_NodeApVarGet>:

uint16_t cfg_NodeApVarGet(uint16_t varid, void *value)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	6039      	str	r1, [r7, #0]
 8001c9a:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d044      	beq.n	8001d2c <cfg_NodeApVarGet+0x9c>
 8001ca2:	88fb      	ldrh	r3, [r7, #6]
 8001ca4:	2b07      	cmp	r3, #7
 8001ca6:	d83f      	bhi.n	8001d28 <cfg_NodeApVarGet+0x98>
 8001ca8:	a201      	add	r2, pc, #4	; (adr r2, 8001cb0 <cfg_NodeApVarGet+0x20>)
 8001caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cae:	bf00      	nop
 8001cb0:	08001cd1 	.word	0x08001cd1
 8001cb4:	08001cdf 	.word	0x08001cdf
 8001cb8:	08001ced 	.word	0x08001ced
 8001cbc:	08001cf7 	.word	0x08001cf7
 8001cc0:	08001d01 	.word	0x08001d01
 8001cc4:	08001d0b 	.word	0x08001d0b
 8001cc8:	08001d15 	.word	0x08001d15
 8001ccc:	08001d1f 	.word	0x08001d1f
	{
		case AUTOPILOT_STATE:			*(uint32_t*)value = (uint32_t)autopilot_info.state; break;
 8001cd0:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <cfg_NodeApVarGet+0xac>)
 8001cd2:	7e1b      	ldrb	r3, [r3, #24]
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	e026      	b.n	8001d2c <cfg_NodeApVarGet+0x9c>
		case AUTOPILOT_ARMED:			*(uint32_t*)value = (uint32_t)autopilot_info.armed_flag; break;
 8001cde:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <cfg_NodeApVarGet+0xac>)
 8001ce0:	7e5b      	ldrb	r3, [r3, #25]
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	e01f      	b.n	8001d2c <cfg_NodeApVarGet+0x9c>
		case AUTOPILOT_ROLL:			*(float*)value = autopilot_info.roll; break;
 8001cec:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <cfg_NodeApVarGet+0xac>)
 8001cee:	6a1a      	ldr	r2, [r3, #32]
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	e01a      	b.n	8001d2c <cfg_NodeApVarGet+0x9c>
		case AUTOPILOT_OFFSET_ROLL:		*(float*)value = autopilot_info.offset_roll; break;
 8001cf6:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <cfg_NodeApVarGet+0xac>)
 8001cf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	e015      	b.n	8001d2c <cfg_NodeApVarGet+0x9c>
		case AUTOPILOT_PITCH:			*(float*)value = autopilot_info.pitch; break;
 8001d00:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <cfg_NodeApVarGet+0xac>)
 8001d02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	e010      	b.n	8001d2c <cfg_NodeApVarGet+0x9c>
		case AUTOPILOT_OFFSET_PITCH:	*(float*)value = autopilot_info.offset_pitch; break;
 8001d0a:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <cfg_NodeApVarGet+0xac>)
 8001d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	e00b      	b.n	8001d2c <cfg_NodeApVarGet+0x9c>
		case AUTOPILOT_TAR_ROLL:		*(float*)value = autopilot_info.tar_roll; break;
 8001d14:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <cfg_NodeApVarGet+0xac>)
 8001d16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	e006      	b.n	8001d2c <cfg_NodeApVarGet+0x9c>
		case AUTOPILOT_TAR_PITCH:		*(float*)value = autopilot_info.tar_pitch; break;
 8001d1e:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <cfg_NodeApVarGet+0xac>)
 8001d20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	e001      	b.n	8001d2c <cfg_NodeApVarGet+0x9c>
		default: return CFG_ERROR_VARID;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e000      	b.n	8001d2e <cfg_NodeApVarGet+0x9e>
	}
	return CFG_ERROR_NONE;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	200002ac 	.word	0x200002ac

08001d40 <cfg_NodeApVarSet>:

uint16_t cfg_NodeApVarSet(uint16_t varid, void *value)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	6039      	str	r1, [r7, #0]
 8001d4a:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d038      	beq.n	8001dc4 <cfg_NodeApVarSet+0x84>
 8001d52:	88fb      	ldrh	r3, [r7, #6]
 8001d54:	2b07      	cmp	r3, #7
 8001d56:	d833      	bhi.n	8001dc0 <cfg_NodeApVarSet+0x80>
 8001d58:	a201      	add	r2, pc, #4	; (adr r2, 8001d60 <cfg_NodeApVarSet+0x20>)
 8001d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5e:	bf00      	nop
 8001d60:	08001d81 	.word	0x08001d81
 8001d64:	08001d8d 	.word	0x08001d8d
 8001d68:	08001dc1 	.word	0x08001dc1
 8001d6c:	08001d99 	.word	0x08001d99
 8001d70:	08001dc1 	.word	0x08001dc1
 8001d74:	08001da3 	.word	0x08001da3
 8001d78:	08001dad 	.word	0x08001dad
 8001d7c:	08001db7 	.word	0x08001db7
	{
		case AUTOPILOT_STATE:			autopilot_info.state = (uint8_t)*(uint32_t*)value; break;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	4b13      	ldr	r3, [pc, #76]	; (8001dd4 <cfg_NodeApVarSet+0x94>)
 8001d88:	761a      	strb	r2, [r3, #24]
 8001d8a:	e01b      	b.n	8001dc4 <cfg_NodeApVarSet+0x84>
		case AUTOPILOT_ARMED:			autopilot_info.armed_flag = (uint8_t)*(uint32_t*)value; break;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	4b10      	ldr	r3, [pc, #64]	; (8001dd4 <cfg_NodeApVarSet+0x94>)
 8001d94:	765a      	strb	r2, [r3, #25]
 8001d96:	e015      	b.n	8001dc4 <cfg_NodeApVarSet+0x84>
		case AUTOPILOT_OFFSET_ROLL:		autopilot_info.offset_roll = *(float*)value; break;
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a0d      	ldr	r2, [pc, #52]	; (8001dd4 <cfg_NodeApVarSet+0x94>)
 8001d9e:	6253      	str	r3, [r2, #36]	; 0x24
 8001da0:	e010      	b.n	8001dc4 <cfg_NodeApVarSet+0x84>
		case AUTOPILOT_OFFSET_PITCH:	autopilot_info.offset_pitch = *(float*)value; break;
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a0b      	ldr	r2, [pc, #44]	; (8001dd4 <cfg_NodeApVarSet+0x94>)
 8001da8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001daa:	e00b      	b.n	8001dc4 <cfg_NodeApVarSet+0x84>
		case AUTOPILOT_TAR_ROLL:		autopilot_info.tar_roll = *(float*)value; break;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a08      	ldr	r2, [pc, #32]	; (8001dd4 <cfg_NodeApVarSet+0x94>)
 8001db2:	6313      	str	r3, [r2, #48]	; 0x30
 8001db4:	e006      	b.n	8001dc4 <cfg_NodeApVarSet+0x84>
		case AUTOPILOT_TAR_PITCH:		autopilot_info.tar_pitch = *(float*)value; break;
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a06      	ldr	r2, [pc, #24]	; (8001dd4 <cfg_NodeApVarSet+0x94>)
 8001dbc:	6353      	str	r3, [r2, #52]	; 0x34
 8001dbe:	e001      	b.n	8001dc4 <cfg_NodeApVarSet+0x84>
		default: return CFG_ERROR_VARID;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	e000      	b.n	8001dc6 <cfg_NodeApVarSet+0x86>
	}
	return CFG_ERROR_NONE;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	200002ac 	.word	0x200002ac

08001dd8 <cfg_NodeRollChVarProp>:

uint16_t cfg_NodeRollChVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b087      	sub	sp, #28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
 8001de4:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 8001de6:	89fb      	ldrh	r3, [r7, #14]
 8001de8:	2b04      	cmp	r3, #4
 8001dea:	d81c      	bhi.n	8001e26 <cfg_NodeRollChVarProp+0x4e>
 8001dec:	a201      	add	r2, pc, #4	; (adr r2, 8001df4 <cfg_NodeRollChVarProp+0x1c>)
 8001dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df2:	bf00      	nop
 8001df4:	08001e09 	.word	0x08001e09
 8001df8:	08001e0f 	.word	0x08001e0f
 8001dfc:	08001e15 	.word	0x08001e15
 8001e00:	08001e1b 	.word	0x08001e1b
 8001e04:	08001e21 	.word	0x08001e21
	{
		case ROLLCH_P_COEF:		str = "P coef"; break;
 8001e08:	4b2a      	ldr	r3, [pc, #168]	; (8001eb4 <cfg_NodeRollChVarProp+0xdc>)
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	e00d      	b.n	8001e2a <cfg_NodeRollChVarProp+0x52>
		case ROLLCH_I_COEF:		str = "I coef"; break;
 8001e0e:	4b2a      	ldr	r3, [pc, #168]	; (8001eb8 <cfg_NodeRollChVarProp+0xe0>)
 8001e10:	617b      	str	r3, [r7, #20]
 8001e12:	e00a      	b.n	8001e2a <cfg_NodeRollChVarProp+0x52>
		case ROLLCH_D_COEF:		str = "D coef"; break;
 8001e14:	4b29      	ldr	r3, [pc, #164]	; (8001ebc <cfg_NodeRollChVarProp+0xe4>)
 8001e16:	617b      	str	r3, [r7, #20]
 8001e18:	e007      	b.n	8001e2a <cfg_NodeRollChVarProp+0x52>
		case ROLLCH_I_VAL:		str = "I value"; break;
 8001e1a:	4b29      	ldr	r3, [pc, #164]	; (8001ec0 <cfg_NodeRollChVarProp+0xe8>)
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	e004      	b.n	8001e2a <cfg_NodeRollChVarProp+0x52>
		case ROLLCH_OUTPUT:		str = "Output value"; break;
 8001e20:	4b28      	ldr	r3, [pc, #160]	; (8001ec4 <cfg_NodeRollChVarProp+0xec>)
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	e001      	b.n	8001e2a <cfg_NodeRollChVarProp+0x52>
		default: return CFG_ERROR_VARID;
 8001e26:	2302      	movs	r3, #2
 8001e28:	e03d      	b.n	8001ea6 <cfg_NodeRollChVarProp+0xce>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00f      	beq.n	8001e50 <cfg_NodeRollChVarProp+0x78>
 8001e30:	e007      	b.n	8001e42 <cfg_NodeRollChVarProp+0x6a>
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	1c53      	adds	r3, r2, #1
 8001e36:	617b      	str	r3, [r7, #20]
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	1c59      	adds	r1, r3, #1
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	7812      	ldrb	r2, [r2, #0]
 8001e40:	701a      	strb	r2, [r3, #0]
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1f3      	bne.n	8001e32 <cfg_NodeRollChVarProp+0x5a>
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d026      	beq.n	8001ea4 <cfg_NodeRollChVarProp+0xcc>
 8001e56:	89fb      	ldrh	r3, [r7, #14]
 8001e58:	2b04      	cmp	r3, #4
 8001e5a:	d821      	bhi.n	8001ea0 <cfg_NodeRollChVarProp+0xc8>
 8001e5c:	a201      	add	r2, pc, #4	; (adr r2, 8001e64 <cfg_NodeRollChVarProp+0x8c>)
 8001e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e62:	bf00      	nop
 8001e64:	08001e79 	.word	0x08001e79
 8001e68:	08001e81 	.word	0x08001e81
 8001e6c:	08001e89 	.word	0x08001e89
 8001e70:	08001e91 	.word	0x08001e91
 8001e74:	08001e99 	.word	0x08001e99
	{
		case ROLLCH_P_COEF:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_CONST; break;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2224      	movs	r2, #36	; 0x24
 8001e7c:	801a      	strh	r2, [r3, #0]
 8001e7e:	e011      	b.n	8001ea4 <cfg_NodeRollChVarProp+0xcc>
		case ROLLCH_I_COEF:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_CONST; break;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2224      	movs	r2, #36	; 0x24
 8001e84:	801a      	strh	r2, [r3, #0]
 8001e86:	e00d      	b.n	8001ea4 <cfg_NodeRollChVarProp+0xcc>
		case ROLLCH_D_COEF:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_CONST; break;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2224      	movs	r2, #36	; 0x24
 8001e8c:	801a      	strh	r2, [r3, #0]
 8001e8e:	e009      	b.n	8001ea4 <cfg_NodeRollChVarProp+0xcc>
		case ROLLCH_I_VAL:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2214      	movs	r2, #20
 8001e94:	801a      	strh	r2, [r3, #0]
 8001e96:	e005      	b.n	8001ea4 <cfg_NodeRollChVarProp+0xcc>
		case ROLLCH_OUTPUT:		*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2211      	movs	r2, #17
 8001e9c:	801a      	strh	r2, [r3, #0]
 8001e9e:	e001      	b.n	8001ea4 <cfg_NodeRollChVarProp+0xcc>
		default: return CFG_ERROR_VARID;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	e000      	b.n	8001ea6 <cfg_NodeRollChVarProp+0xce>
	}
	return CFG_ERROR_NONE;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	371c      	adds	r7, #28
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	08016850 	.word	0x08016850
 8001eb8:	08016858 	.word	0x08016858
 8001ebc:	08016860 	.word	0x08016860
 8001ec0:	08016868 	.word	0x08016868
 8001ec4:	08016870 	.word	0x08016870

08001ec8 <cfg_NodeRollChVarGet>:

uint16_t cfg_NodeRollChVarGet(uint16_t varid, void *value)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	6039      	str	r1, [r7, #0]
 8001ed2:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d02b      	beq.n	8001f32 <cfg_NodeRollChVarGet+0x6a>
 8001eda:	88fb      	ldrh	r3, [r7, #6]
 8001edc:	2b04      	cmp	r3, #4
 8001ede:	d826      	bhi.n	8001f2e <cfg_NodeRollChVarGet+0x66>
 8001ee0:	a201      	add	r2, pc, #4	; (adr r2, 8001ee8 <cfg_NodeRollChVarGet+0x20>)
 8001ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee6:	bf00      	nop
 8001ee8:	08001efd 	.word	0x08001efd
 8001eec:	08001f07 	.word	0x08001f07
 8001ef0:	08001f11 	.word	0x08001f11
 8001ef4:	08001f1b 	.word	0x08001f1b
 8001ef8:	08001f25 	.word	0x08001f25
	{
		case ROLLCH_P_COEF:		*(float*)value = _roll_pid.Kp; break;
 8001efc:	4b10      	ldr	r3, [pc, #64]	; (8001f40 <cfg_NodeRollChVarGet+0x78>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	e015      	b.n	8001f32 <cfg_NodeRollChVarGet+0x6a>
		case ROLLCH_I_COEF:		*(float*)value = _roll_pid.Ki; break;
 8001f06:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <cfg_NodeRollChVarGet+0x78>)
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	e010      	b.n	8001f32 <cfg_NodeRollChVarGet+0x6a>
		case ROLLCH_D_COEF:		*(float*)value = _roll_pid.Kd; break;
 8001f10:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <cfg_NodeRollChVarGet+0x78>)
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	e00b      	b.n	8001f32 <cfg_NodeRollChVarGet+0x6a>
		case ROLLCH_I_VAL:		*(float*)value = _roll_pid.integral; break;
 8001f1a:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <cfg_NodeRollChVarGet+0x78>)
 8001f1c:	68da      	ldr	r2, [r3, #12]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	e006      	b.n	8001f32 <cfg_NodeRollChVarGet+0x6a>
		case ROLLCH_OUTPUT:		*(int32_t*)value = _roll_pid.output; break;
 8001f24:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <cfg_NodeRollChVarGet+0x78>)
 8001f26:	695a      	ldr	r2, [r3, #20]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	e001      	b.n	8001f32 <cfg_NodeRollChVarGet+0x6a>
		default: return CFG_ERROR_VARID;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e000      	b.n	8001f34 <cfg_NodeRollChVarGet+0x6c>
	}
	return CFG_ERROR_NONE;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	20000340 	.word	0x20000340

08001f44 <cfg_NodeRollChVarSet>:

uint16_t cfg_NodeRollChVarSet(uint16_t varid, void *value)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	6039      	str	r1, [r7, #0]
 8001f4e:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d01a      	beq.n	8001f8c <cfg_NodeRollChVarSet+0x48>
 8001f56:	88fb      	ldrh	r3, [r7, #6]
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d010      	beq.n	8001f7e <cfg_NodeRollChVarSet+0x3a>
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	dc13      	bgt.n	8001f88 <cfg_NodeRollChVarSet+0x44>
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d002      	beq.n	8001f6a <cfg_NodeRollChVarSet+0x26>
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d005      	beq.n	8001f74 <cfg_NodeRollChVarSet+0x30>
 8001f68:	e00e      	b.n	8001f88 <cfg_NodeRollChVarSet+0x44>
	{
		case ROLLCH_P_COEF:		_roll_pid.Kp = *(float*)value; break;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a0b      	ldr	r2, [pc, #44]	; (8001f9c <cfg_NodeRollChVarSet+0x58>)
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	e00b      	b.n	8001f8c <cfg_NodeRollChVarSet+0x48>
		case ROLLCH_I_COEF:		_roll_pid.Ki = *(float*)value; break;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a08      	ldr	r2, [pc, #32]	; (8001f9c <cfg_NodeRollChVarSet+0x58>)
 8001f7a:	6053      	str	r3, [r2, #4]
 8001f7c:	e006      	b.n	8001f8c <cfg_NodeRollChVarSet+0x48>
		case ROLLCH_D_COEF:		_roll_pid.Kd = *(float*)value; break;
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a06      	ldr	r2, [pc, #24]	; (8001f9c <cfg_NodeRollChVarSet+0x58>)
 8001f84:	6093      	str	r3, [r2, #8]
 8001f86:	e001      	b.n	8001f8c <cfg_NodeRollChVarSet+0x48>
		default: return CFG_ERROR_VARID;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	e000      	b.n	8001f8e <cfg_NodeRollChVarSet+0x4a>
	}
	return CFG_ERROR_NONE;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	20000340 	.word	0x20000340

08001fa0 <cfg_NodePitchChVarProp>:

uint16_t cfg_NodePitchChVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b087      	sub	sp, #28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
 8001fac:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 8001fae:	89fb      	ldrh	r3, [r7, #14]
 8001fb0:	2b04      	cmp	r3, #4
 8001fb2:	d81c      	bhi.n	8001fee <cfg_NodePitchChVarProp+0x4e>
 8001fb4:	a201      	add	r2, pc, #4	; (adr r2, 8001fbc <cfg_NodePitchChVarProp+0x1c>)
 8001fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fba:	bf00      	nop
 8001fbc:	08001fd1 	.word	0x08001fd1
 8001fc0:	08001fd7 	.word	0x08001fd7
 8001fc4:	08001fdd 	.word	0x08001fdd
 8001fc8:	08001fe3 	.word	0x08001fe3
 8001fcc:	08001fe9 	.word	0x08001fe9
	{
		case PITCHCH_P_COEF:		str = "P coef"; break;
 8001fd0:	4b2a      	ldr	r3, [pc, #168]	; (800207c <cfg_NodePitchChVarProp+0xdc>)
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	e00d      	b.n	8001ff2 <cfg_NodePitchChVarProp+0x52>
		case PITCHCH_I_COEF:		str = "I coef"; break;
 8001fd6:	4b2a      	ldr	r3, [pc, #168]	; (8002080 <cfg_NodePitchChVarProp+0xe0>)
 8001fd8:	617b      	str	r3, [r7, #20]
 8001fda:	e00a      	b.n	8001ff2 <cfg_NodePitchChVarProp+0x52>
		case PITCHCH_D_COEF:		str = "D coef"; break;
 8001fdc:	4b29      	ldr	r3, [pc, #164]	; (8002084 <cfg_NodePitchChVarProp+0xe4>)
 8001fde:	617b      	str	r3, [r7, #20]
 8001fe0:	e007      	b.n	8001ff2 <cfg_NodePitchChVarProp+0x52>
		case PITCHCH_I_VAL:			str = "I value"; break;
 8001fe2:	4b29      	ldr	r3, [pc, #164]	; (8002088 <cfg_NodePitchChVarProp+0xe8>)
 8001fe4:	617b      	str	r3, [r7, #20]
 8001fe6:	e004      	b.n	8001ff2 <cfg_NodePitchChVarProp+0x52>
		case PITCHCH_OUTPUT:		str = "Output value"; break;
 8001fe8:	4b28      	ldr	r3, [pc, #160]	; (800208c <cfg_NodePitchChVarProp+0xec>)
 8001fea:	617b      	str	r3, [r7, #20]
 8001fec:	e001      	b.n	8001ff2 <cfg_NodePitchChVarProp+0x52>
		default: return CFG_ERROR_VARID;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	e03d      	b.n	800206e <cfg_NodePitchChVarProp+0xce>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00f      	beq.n	8002018 <cfg_NodePitchChVarProp+0x78>
 8001ff8:	e007      	b.n	800200a <cfg_NodePitchChVarProp+0x6a>
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	1c53      	adds	r3, r2, #1
 8001ffe:	617b      	str	r3, [r7, #20]
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	1c59      	adds	r1, r3, #1
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	7812      	ldrb	r2, [r2, #0]
 8002008:	701a      	strb	r2, [r3, #0]
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f3      	bne.n	8001ffa <cfg_NodePitchChVarProp+0x5a>
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	2200      	movs	r2, #0
 8002016:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d026      	beq.n	800206c <cfg_NodePitchChVarProp+0xcc>
 800201e:	89fb      	ldrh	r3, [r7, #14]
 8002020:	2b04      	cmp	r3, #4
 8002022:	d821      	bhi.n	8002068 <cfg_NodePitchChVarProp+0xc8>
 8002024:	a201      	add	r2, pc, #4	; (adr r2, 800202c <cfg_NodePitchChVarProp+0x8c>)
 8002026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800202a:	bf00      	nop
 800202c:	08002041 	.word	0x08002041
 8002030:	08002049 	.word	0x08002049
 8002034:	08002051 	.word	0x08002051
 8002038:	08002059 	.word	0x08002059
 800203c:	08002061 	.word	0x08002061
	{
		case PITCHCH_P_COEF:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_CONST; break;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2224      	movs	r2, #36	; 0x24
 8002044:	801a      	strh	r2, [r3, #0]
 8002046:	e011      	b.n	800206c <cfg_NodePitchChVarProp+0xcc>
		case PITCHCH_I_COEF:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_CONST; break;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2224      	movs	r2, #36	; 0x24
 800204c:	801a      	strh	r2, [r3, #0]
 800204e:	e00d      	b.n	800206c <cfg_NodePitchChVarProp+0xcc>
		case PITCHCH_D_COEF:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_CONST; break;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2224      	movs	r2, #36	; 0x24
 8002054:	801a      	strh	r2, [r3, #0]
 8002056:	e009      	b.n	800206c <cfg_NodePitchChVarProp+0xcc>
		case PITCHCH_I_VAL:			*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2214      	movs	r2, #20
 800205c:	801a      	strh	r2, [r3, #0]
 800205e:	e005      	b.n	800206c <cfg_NodePitchChVarProp+0xcc>
		case PITCHCH_OUTPUT:		*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2211      	movs	r2, #17
 8002064:	801a      	strh	r2, [r3, #0]
 8002066:	e001      	b.n	800206c <cfg_NodePitchChVarProp+0xcc>
		default: return CFG_ERROR_VARID;
 8002068:	2302      	movs	r3, #2
 800206a:	e000      	b.n	800206e <cfg_NodePitchChVarProp+0xce>
	}
	return CFG_ERROR_NONE;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	371c      	adds	r7, #28
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	08016850 	.word	0x08016850
 8002080:	08016858 	.word	0x08016858
 8002084:	08016860 	.word	0x08016860
 8002088:	08016868 	.word	0x08016868
 800208c:	08016870 	.word	0x08016870

08002090 <cfg_NodePitchChVarGet>:

uint16_t cfg_NodePitchChVarGet(uint16_t varid, void *value)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	6039      	str	r1, [r7, #0]
 800209a:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d02b      	beq.n	80020fa <cfg_NodePitchChVarGet+0x6a>
 80020a2:	88fb      	ldrh	r3, [r7, #6]
 80020a4:	2b04      	cmp	r3, #4
 80020a6:	d826      	bhi.n	80020f6 <cfg_NodePitchChVarGet+0x66>
 80020a8:	a201      	add	r2, pc, #4	; (adr r2, 80020b0 <cfg_NodePitchChVarGet+0x20>)
 80020aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ae:	bf00      	nop
 80020b0:	080020c5 	.word	0x080020c5
 80020b4:	080020cf 	.word	0x080020cf
 80020b8:	080020d9 	.word	0x080020d9
 80020bc:	080020e3 	.word	0x080020e3
 80020c0:	080020ed 	.word	0x080020ed
	{
		case PITCHCH_P_COEF:		*(float*)value = _pitch_pid.Kp; break;
 80020c4:	4b10      	ldr	r3, [pc, #64]	; (8002108 <cfg_NodePitchChVarGet+0x78>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	e015      	b.n	80020fa <cfg_NodePitchChVarGet+0x6a>
		case PITCHCH_I_COEF:		*(float*)value = _pitch_pid.Ki; break;
 80020ce:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <cfg_NodePitchChVarGet+0x78>)
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	e010      	b.n	80020fa <cfg_NodePitchChVarGet+0x6a>
		case PITCHCH_D_COEF:		*(float*)value = _pitch_pid.Kd; break;
 80020d8:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <cfg_NodePitchChVarGet+0x78>)
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	e00b      	b.n	80020fa <cfg_NodePitchChVarGet+0x6a>
		case PITCHCH_I_VAL:			*(float*)value = _pitch_pid.integral; break;
 80020e2:	4b09      	ldr	r3, [pc, #36]	; (8002108 <cfg_NodePitchChVarGet+0x78>)
 80020e4:	68da      	ldr	r2, [r3, #12]
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	e006      	b.n	80020fa <cfg_NodePitchChVarGet+0x6a>
		case PITCHCH_OUTPUT:		*(int32_t*)value = _pitch_pid.output; break;
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <cfg_NodePitchChVarGet+0x78>)
 80020ee:	695a      	ldr	r2, [r3, #20]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	e001      	b.n	80020fa <cfg_NodePitchChVarGet+0x6a>
		default: return CFG_ERROR_VARID;
 80020f6:	2302      	movs	r3, #2
 80020f8:	e000      	b.n	80020fc <cfg_NodePitchChVarGet+0x6c>
	}
	return CFG_ERROR_NONE;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	20000358 	.word	0x20000358

0800210c <cfg_NodePitchChVarSet>:

uint16_t cfg_NodePitchChVarSet(uint16_t varid, void *value)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	6039      	str	r1, [r7, #0]
 8002116:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d01a      	beq.n	8002154 <cfg_NodePitchChVarSet+0x48>
 800211e:	88fb      	ldrh	r3, [r7, #6]
 8002120:	2b02      	cmp	r3, #2
 8002122:	d010      	beq.n	8002146 <cfg_NodePitchChVarSet+0x3a>
 8002124:	2b02      	cmp	r3, #2
 8002126:	dc13      	bgt.n	8002150 <cfg_NodePitchChVarSet+0x44>
 8002128:	2b00      	cmp	r3, #0
 800212a:	d002      	beq.n	8002132 <cfg_NodePitchChVarSet+0x26>
 800212c:	2b01      	cmp	r3, #1
 800212e:	d005      	beq.n	800213c <cfg_NodePitchChVarSet+0x30>
 8002130:	e00e      	b.n	8002150 <cfg_NodePitchChVarSet+0x44>
	{
		case PITCHCH_P_COEF:		_pitch_pid.Kp = *(float*)value; break;
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a0b      	ldr	r2, [pc, #44]	; (8002164 <cfg_NodePitchChVarSet+0x58>)
 8002138:	6013      	str	r3, [r2, #0]
 800213a:	e00b      	b.n	8002154 <cfg_NodePitchChVarSet+0x48>
		case PITCHCH_I_COEF:		_pitch_pid.Ki = *(float*)value; break;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a08      	ldr	r2, [pc, #32]	; (8002164 <cfg_NodePitchChVarSet+0x58>)
 8002142:	6053      	str	r3, [r2, #4]
 8002144:	e006      	b.n	8002154 <cfg_NodePitchChVarSet+0x48>
		case PITCHCH_D_COEF:		_pitch_pid.Kd = *(float*)value; break;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a06      	ldr	r2, [pc, #24]	; (8002164 <cfg_NodePitchChVarSet+0x58>)
 800214c:	6093      	str	r3, [r2, #8]
 800214e:	e001      	b.n	8002154 <cfg_NodePitchChVarSet+0x48>
		default: return CFG_ERROR_VARID;
 8002150:	2302      	movs	r3, #2
 8002152:	e000      	b.n	8002156 <cfg_NodePitchChVarSet+0x4a>
	}
	return CFG_ERROR_NONE;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	20000358 	.word	0x20000358

08002168 <battery_Timer>:
  * @brief  called from SysTick_Handler to update local class time
  * @param  res - time pass in mSec
  * @retval None
  */
void battery_Timer(uint32_t res)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
#ifdef NO_BATTERY
	return;
#endif //NO_BATTERY

	battery_time_counter += res;
 8002170:	4b0a      	ldr	r3, [pc, #40]	; (800219c <battery_Timer+0x34>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4413      	add	r3, r2
 8002178:	4a08      	ldr	r2, [pc, #32]	; (800219c <battery_Timer+0x34>)
 800217a:	6013      	str	r3, [r2, #0]

	if( battery_info.timer ){
 800217c:	4b08      	ldr	r3, [pc, #32]	; (80021a0 <battery_Timer+0x38>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d005      	beq.n	8002190 <battery_Timer+0x28>
		battery_info.timer--;
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <battery_Timer+0x38>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	3b01      	subs	r3, #1
 800218a:	4a05      	ldr	r2, [pc, #20]	; (80021a0 <battery_Timer+0x38>)
 800218c:	6013      	str	r3, [r2, #0]
	}

	return;
 800218e:	bf00      	nop
 8002190:	bf00      	nop
}
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	200003e8 	.word	0x200003e8
 80021a0:	200003bc 	.word	0x200003bc

080021a4 <battery_InitTask>:
  * @brief  Init the battery interface
  * @param  None
  * @retval 1 if success, 0 if failed
  */
void battery_InitTask(uint32_t battery_filtered_measure_period)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
#ifdef NO_BATTERY
	return 1;
#endif //NO_BATTERY

	// set minimum of 100mSec, just to be safe
	if ( battery_filtered_measure_period < 100 ){
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b63      	cmp	r3, #99	; 0x63
 80021b0:	d801      	bhi.n	80021b6 <battery_InitTask+0x12>
		battery_filtered_measure_period = 100;
 80021b2:	2364      	movs	r3, #100	; 0x64
 80021b4:	607b      	str	r3, [r7, #4]
	}

	battery_info.battery_filtered_measure_period = battery_filtered_measure_period;
 80021b6:	4a08      	ldr	r2, [pc, #32]	; (80021d8 <battery_InitTask+0x34>)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6293      	str	r3, [r2, #40]	; 0x28
	battery_info.timer = 500;
 80021bc:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <battery_InitTask+0x34>)
 80021be:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80021c2:	601a      	str	r2, [r3, #0]
	battery_info.init_flag = 1;
 80021c4:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <battery_InitTask+0x34>)
 80021c6:	2201      	movs	r2, #1
 80021c8:	711a      	strb	r2, [r3, #4]

	return;
 80021ca:	bf00      	nop
}
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	200003bc 	.word	0x200003bc

080021dc <battery_Task>:
  * @brief  called from the main loop
  * @param  None
  * @retval None
  */
void battery_Task()
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
#ifdef NO_BATTERY
	return;
#endif //NO_BATTERY

	// enter only if there is new analog reading of the battery voltage, else there is not reason to make any thing
	if ( battery_info.battery_volatge_updated_flag == 1)
 80021e2:	4b34      	ldr	r3, [pc, #208]	; (80022b4 <battery_Task+0xd8>)
 80021e4:	7b5b      	ldrb	r3, [r3, #13]
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d15e      	bne.n	80022aa <battery_Task+0xce>
	{
		battery_info.battery_volatge_updated_flag = 0;
 80021ec:	4b31      	ldr	r3, [pc, #196]	; (80022b4 <battery_Task+0xd8>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	735a      	strb	r2, [r3, #13]
		//Initialization - 1st fill the filters array
		//done only once at the first time there is a battery voltage reading
		if( battery_info.init_flag == 1)
 80021f2:	4b30      	ldr	r3, [pc, #192]	; (80022b4 <battery_Task+0xd8>)
 80021f4:	791b      	ldrb	r3, [r3, #4]
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d109      	bne.n	8002210 <battery_Task+0x34>
		{
			battery_filterInit(battery_info.battery_volatge);
 80021fc:	4b2d      	ldr	r3, [pc, #180]	; (80022b4 <battery_Task+0xd8>)
 80021fe:	89db      	ldrh	r3, [r3, #14]
 8002200:	b29b      	uxth	r3, r3
 8002202:	4618      	mov	r0, r3
 8002204:	f000 f858 	bl	80022b8 <battery_filterInit>
			battery_info.init_flag = 0;
 8002208:	4b2a      	ldr	r3, [pc, #168]	; (80022b4 <battery_Task+0xd8>)
 800220a:	2200      	movs	r2, #0
 800220c:	711a      	strb	r2, [r3, #4]
			battery_info.filtered_voltage = (uint16_t)(meas_sum / BATTERY_FILT_MEAS_NUM);
			battery_info.charge_percent = battery_calcPerc(battery_info.filtered_voltage);
		}
	}

	return;
 800220e:	e04c      	b.n	80022aa <battery_Task+0xce>
		else if( battery_info.timer == 0 ) // need to sample
 8002210:	4b28      	ldr	r3, [pc, #160]	; (80022b4 <battery_Task+0xd8>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d148      	bne.n	80022aa <battery_Task+0xce>
			battery_info.timer = battery_info.battery_filtered_measure_period;
 8002218:	4b26      	ldr	r3, [pc, #152]	; (80022b4 <battery_Task+0xd8>)
 800221a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221c:	4a25      	ldr	r2, [pc, #148]	; (80022b4 <battery_Task+0xd8>)
 800221e:	6013      	str	r3, [r2, #0]
			battery_info.battery_filter_step = (battery_info.battery_filter_step + 1) % BATTERY_FILT_MEAS_NUM;
 8002220:	4b24      	ldr	r3, [pc, #144]	; (80022b4 <battery_Task+0xd8>)
 8002222:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002226:	b2db      	uxtb	r3, r3
 8002228:	3301      	adds	r3, #1
 800222a:	425a      	negs	r2, r3
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	f002 0207 	and.w	r2, r2, #7
 8002234:	bf58      	it	pl
 8002236:	4253      	negpl	r3, r2
 8002238:	b2da      	uxtb	r2, r3
 800223a:	4b1e      	ldr	r3, [pc, #120]	; (80022b4 <battery_Task+0xd8>)
 800223c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			battery_info.battery_meas_arr[battery_info.battery_filter_step] = battery_info.battery_volatge;
 8002240:	4b1c      	ldr	r3, [pc, #112]	; (80022b4 <battery_Task+0xd8>)
 8002242:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002246:	b2db      	uxtb	r3, r3
 8002248:	4618      	mov	r0, r3
 800224a:	4b1a      	ldr	r3, [pc, #104]	; (80022b4 <battery_Task+0xd8>)
 800224c:	89db      	ldrh	r3, [r3, #14]
 800224e:	b299      	uxth	r1, r3
 8002250:	4a18      	ldr	r2, [pc, #96]	; (80022b4 <battery_Task+0xd8>)
 8002252:	f100 0308 	add.w	r3, r0, #8
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	4413      	add	r3, r2
 800225a:	460a      	mov	r2, r1
 800225c:	809a      	strh	r2, [r3, #4]
			uint32_t meas_sum = 0;
 800225e:	2300      	movs	r3, #0
 8002260:	607b      	str	r3, [r7, #4]
			for( uint8_t i = 0; i < BATTERY_FILT_MEAS_NUM; i++ ){
 8002262:	2300      	movs	r3, #0
 8002264:	70fb      	strb	r3, [r7, #3]
 8002266:	e00d      	b.n	8002284 <battery_Task+0xa8>
				meas_sum += (uint32_t)battery_info.battery_meas_arr[i];
 8002268:	78fb      	ldrb	r3, [r7, #3]
 800226a:	4a12      	ldr	r2, [pc, #72]	; (80022b4 <battery_Task+0xd8>)
 800226c:	3308      	adds	r3, #8
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	4413      	add	r3, r2
 8002272:	889b      	ldrh	r3, [r3, #4]
 8002274:	b29b      	uxth	r3, r3
 8002276:	461a      	mov	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4413      	add	r3, r2
 800227c:	607b      	str	r3, [r7, #4]
			for( uint8_t i = 0; i < BATTERY_FILT_MEAS_NUM; i++ ){
 800227e:	78fb      	ldrb	r3, [r7, #3]
 8002280:	3301      	adds	r3, #1
 8002282:	70fb      	strb	r3, [r7, #3]
 8002284:	78fb      	ldrb	r3, [r7, #3]
 8002286:	2b07      	cmp	r3, #7
 8002288:	d9ee      	bls.n	8002268 <battery_Task+0x8c>
			battery_info.filtered_voltage = (uint16_t)(meas_sum / BATTERY_FILT_MEAS_NUM);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	08db      	lsrs	r3, r3, #3
 800228e:	b29a      	uxth	r2, r3
 8002290:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <battery_Task+0xd8>)
 8002292:	821a      	strh	r2, [r3, #16]
			battery_info.charge_percent = battery_calcPerc(battery_info.filtered_voltage);
 8002294:	4b07      	ldr	r3, [pc, #28]	; (80022b4 <battery_Task+0xd8>)
 8002296:	8a1b      	ldrh	r3, [r3, #16]
 8002298:	b29b      	uxth	r3, r3
 800229a:	4618      	mov	r0, r3
 800229c:	f000 f838 	bl	8002310 <battery_calcPerc>
 80022a0:	4603      	mov	r3, r0
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	4b03      	ldr	r3, [pc, #12]	; (80022b4 <battery_Task+0xd8>)
 80022a6:	749a      	strb	r2, [r3, #18]
	return;
 80022a8:	bf00      	nop
 80022aa:	bf00      	nop
}
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	200003bc 	.word	0x200003bc

080022b8 <battery_filterInit>:
  * @brief  function to init the battery filter array so it will work as expected in the first power up.
  * @param  val - battery voltage to init the filter array value.
  * @retval None
  */
static void battery_filterInit(uint16_t val)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	80fb      	strh	r3, [r7, #6]
#ifdef NO_BATTERY
	return;
#endif //NO_BATTERY

	for( uint8_t i = 0; i < BATTERY_FILT_MEAS_NUM; i++ ){
 80022c2:	2300      	movs	r3, #0
 80022c4:	73fb      	strb	r3, [r7, #15]
 80022c6:	e009      	b.n	80022dc <battery_filterInit+0x24>
		battery_info.battery_meas_arr[i] = val;
 80022c8:	7bfb      	ldrb	r3, [r7, #15]
 80022ca:	4a10      	ldr	r2, [pc, #64]	; (800230c <battery_filterInit+0x54>)
 80022cc:	3308      	adds	r3, #8
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	4413      	add	r3, r2
 80022d2:	88fa      	ldrh	r2, [r7, #6]
 80022d4:	809a      	strh	r2, [r3, #4]
	for( uint8_t i = 0; i < BATTERY_FILT_MEAS_NUM; i++ ){
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
 80022d8:	3301      	adds	r3, #1
 80022da:	73fb      	strb	r3, [r7, #15]
 80022dc:	7bfb      	ldrb	r3, [r7, #15]
 80022de:	2b07      	cmp	r3, #7
 80022e0:	d9f2      	bls.n	80022c8 <battery_filterInit+0x10>
	}

	battery_info.battery_filter_step = 0;
 80022e2:	4b0a      	ldr	r3, [pc, #40]	; (800230c <battery_filterInit+0x54>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	battery_info.filtered_voltage = val;
 80022ea:	4a08      	ldr	r2, [pc, #32]	; (800230c <battery_filterInit+0x54>)
 80022ec:	88fb      	ldrh	r3, [r7, #6]
 80022ee:	8213      	strh	r3, [r2, #16]
	battery_info.charge_percent = battery_calcPerc(battery_info.filtered_voltage);
 80022f0:	4b06      	ldr	r3, [pc, #24]	; (800230c <battery_filterInit+0x54>)
 80022f2:	8a1b      	ldrh	r3, [r3, #16]
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 f80a 	bl	8002310 <battery_calcPerc>
 80022fc:	4603      	mov	r3, r0
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	4b02      	ldr	r3, [pc, #8]	; (800230c <battery_filterInit+0x54>)
 8002302:	749a      	strb	r2, [r3, #18]

	return;
 8002304:	bf00      	nop
}
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	200003bc 	.word	0x200003bc

08002310 <battery_calcPerc>:
  * @brief  function to convert from battery mVolt to battery charge percentages
  * @param  m_volt - battery voltage in mVolt.
  * @retval None
  */
uint16_t battery_calcPerc(uint16_t m_volt)
{
 8002310:	b5b0      	push	{r4, r5, r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af02      	add	r7, sp, #8
 8002316:	4603      	mov	r3, r0
 8002318:	80fb      	strh	r3, [r7, #6]
#ifdef NO_BATTERY
	return 100;
#endif //NO_BATTERY

	uint8_t i = 0;
 800231a:	2300      	movs	r3, #0
 800231c:	73fb      	strb	r3, [r7, #15]
	uint16_t o_perc = 0;
 800231e:	2300      	movs	r3, #0
 8002320:	81bb      	strh	r3, [r7, #12]

	// minimum voltage
	if( m_volt <= _battery_perc_lut[0][0] ){
 8002322:	4b27      	ldr	r3, [pc, #156]	; (80023c0 <battery_calcPerc+0xb0>)
 8002324:	881b      	ldrh	r3, [r3, #0]
 8002326:	88fa      	ldrh	r2, [r7, #6]
 8002328:	429a      	cmp	r2, r3
 800232a:	d802      	bhi.n	8002332 <battery_calcPerc+0x22>
		return _battery_perc_lut[0][1];
 800232c:	4b24      	ldr	r3, [pc, #144]	; (80023c0 <battery_calcPerc+0xb0>)
 800232e:	885b      	ldrh	r3, [r3, #2]
 8002330:	e041      	b.n	80023b6 <battery_calcPerc+0xa6>
	}

	// maximum voltage
	if( m_volt >= _battery_perc_lut[BATTERY_LUT_LEN - 1][0] ){
 8002332:	4b23      	ldr	r3, [pc, #140]	; (80023c0 <battery_calcPerc+0xb0>)
 8002334:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002336:	88fa      	ldrh	r2, [r7, #6]
 8002338:	429a      	cmp	r2, r3
 800233a:	d302      	bcc.n	8002342 <battery_calcPerc+0x32>
		return _battery_perc_lut[BATTERY_LUT_LEN - 1][1];
 800233c:	4b20      	ldr	r3, [pc, #128]	; (80023c0 <battery_calcPerc+0xb0>)
 800233e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002340:	e039      	b.n	80023b6 <battery_calcPerc+0xa6>
	}

	// scan the look up table for needed voltage
	for( i = 0; i < BATTERY_LUT_LEN - 1; i++ )
 8002342:	2300      	movs	r3, #0
 8002344:	73fb      	strb	r3, [r7, #15]
 8002346:	e011      	b.n	800236c <battery_calcPerc+0x5c>
	{
		if( (m_volt >= _battery_perc_lut[i][0]) && (m_volt <= _battery_perc_lut[i + 1][0]) )
 8002348:	7bfb      	ldrb	r3, [r7, #15]
 800234a:	4a1d      	ldr	r2, [pc, #116]	; (80023c0 <battery_calcPerc+0xb0>)
 800234c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8002350:	88fa      	ldrh	r2, [r7, #6]
 8002352:	429a      	cmp	r2, r3
 8002354:	d307      	bcc.n	8002366 <battery_calcPerc+0x56>
 8002356:	7bfb      	ldrb	r3, [r7, #15]
 8002358:	3301      	adds	r3, #1
 800235a:	4a19      	ldr	r2, [pc, #100]	; (80023c0 <battery_calcPerc+0xb0>)
 800235c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8002360:	88fa      	ldrh	r2, [r7, #6]
 8002362:	429a      	cmp	r2, r3
 8002364:	d906      	bls.n	8002374 <battery_calcPerc+0x64>
	for( i = 0; i < BATTERY_LUT_LEN - 1; i++ )
 8002366:	7bfb      	ldrb	r3, [r7, #15]
 8002368:	3301      	adds	r3, #1
 800236a:	73fb      	strb	r3, [r7, #15]
 800236c:	7bfb      	ldrb	r3, [r7, #15]
 800236e:	2b0a      	cmp	r3, #10
 8002370:	d9ea      	bls.n	8002348 <battery_calcPerc+0x38>
 8002372:	e000      	b.n	8002376 <battery_calcPerc+0x66>
		{
			break;
 8002374:	bf00      	nop
		}
	}

	o_perc = (uint16_t)analog_map((int32_t)m_volt, (int32_t)_battery_perc_lut[i][0],
 8002376:	88f8      	ldrh	r0, [r7, #6]
 8002378:	7bfb      	ldrb	r3, [r7, #15]
 800237a:	4a11      	ldr	r2, [pc, #68]	; (80023c0 <battery_calcPerc+0xb0>)
 800237c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8002380:	4619      	mov	r1, r3
									(int32_t)_battery_perc_lut[i + 1][0], (int32_t)_battery_perc_lut[i][1],
 8002382:	7bfb      	ldrb	r3, [r7, #15]
 8002384:	3301      	adds	r3, #1
 8002386:	4a0e      	ldr	r2, [pc, #56]	; (80023c0 <battery_calcPerc+0xb0>)
 8002388:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
	o_perc = (uint16_t)analog_map((int32_t)m_volt, (int32_t)_battery_perc_lut[i][0],
 800238c:	461c      	mov	r4, r3
									(int32_t)_battery_perc_lut[i + 1][0], (int32_t)_battery_perc_lut[i][1],
 800238e:	7bfb      	ldrb	r3, [r7, #15]
 8002390:	4a0b      	ldr	r2, [pc, #44]	; (80023c0 <battery_calcPerc+0xb0>)
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	885b      	ldrh	r3, [r3, #2]
	o_perc = (uint16_t)analog_map((int32_t)m_volt, (int32_t)_battery_perc_lut[i][0],
 8002398:	461d      	mov	r5, r3
									(int32_t)_battery_perc_lut[i + 1][1]);
 800239a:	7bfb      	ldrb	r3, [r7, #15]
 800239c:	3301      	adds	r3, #1
 800239e:	4a08      	ldr	r2, [pc, #32]	; (80023c0 <battery_calcPerc+0xb0>)
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	885b      	ldrh	r3, [r3, #2]
	o_perc = (uint16_t)analog_map((int32_t)m_volt, (int32_t)_battery_perc_lut[i][0],
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	462b      	mov	r3, r5
 80023aa:	4622      	mov	r2, r4
 80023ac:	f000 f80a 	bl	80023c4 <analog_map>
 80023b0:	4603      	mov	r3, r0
 80023b2:	81bb      	strh	r3, [r7, #12]

	return o_perc;
 80023b4:	89bb      	ldrh	r3, [r7, #12]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bdb0      	pop	{r4, r5, r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000000 	.word	0x20000000

080023c4 <analog_map>:
  * 	toLow: the lower bound of the value’s target range.
  * 	toHigh: the upper bound of the value’s target range.
  * @retval The mapped value.
  */
static int32_t analog_map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
 80023d0:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	69b9      	ldr	r1, [r7, #24]
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	1a8a      	subs	r2, r1, r2
 80023de:	fb03 f202 	mul.w	r2, r3, r2
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	1acb      	subs	r3, r1, r3
 80023e8:	fb92 f2f3 	sdiv	r2, r2, r3
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	4413      	add	r3, r2
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <cfg_NodeBatVarProp>:

/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeBatVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b087      	sub	sp, #28
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
 8002408:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 800240a:	89fb      	ldrh	r3, [r7, #14]
 800240c:	2b02      	cmp	r3, #2
 800240e:	d00c      	beq.n	800242a <cfg_NodeBatVarProp+0x2e>
 8002410:	2b02      	cmp	r3, #2
 8002412:	dc0d      	bgt.n	8002430 <cfg_NodeBatVarProp+0x34>
 8002414:	2b00      	cmp	r3, #0
 8002416:	d002      	beq.n	800241e <cfg_NodeBatVarProp+0x22>
 8002418:	2b01      	cmp	r3, #1
 800241a:	d003      	beq.n	8002424 <cfg_NodeBatVarProp+0x28>
 800241c:	e008      	b.n	8002430 <cfg_NodeBatVarProp+0x34>
	{
		case BAT_VOLTAGE:			str = "Voltage"; break;
 800241e:	4b20      	ldr	r3, [pc, #128]	; (80024a0 <cfg_NodeBatVarProp+0xa4>)
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	e007      	b.n	8002434 <cfg_NodeBatVarProp+0x38>
		case BAT_FILTERED_VOLTAGE:	str = "Filtered voltage"; break;
 8002424:	4b1f      	ldr	r3, [pc, #124]	; (80024a4 <cfg_NodeBatVarProp+0xa8>)
 8002426:	617b      	str	r3, [r7, #20]
 8002428:	e004      	b.n	8002434 <cfg_NodeBatVarProp+0x38>
		case BAT_CHG_PERC:			str = "Charge (%)"; break;
 800242a:	4b1f      	ldr	r3, [pc, #124]	; (80024a8 <cfg_NodeBatVarProp+0xac>)
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	e001      	b.n	8002434 <cfg_NodeBatVarProp+0x38>
		default: return CFG_ERROR_VARID;
 8002430:	2302      	movs	r3, #2
 8002432:	e02e      	b.n	8002492 <cfg_NodeBatVarProp+0x96>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00f      	beq.n	800245a <cfg_NodeBatVarProp+0x5e>
 800243a:	e007      	b.n	800244c <cfg_NodeBatVarProp+0x50>
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	1c53      	adds	r3, r2, #1
 8002440:	617b      	str	r3, [r7, #20]
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	1c59      	adds	r1, r3, #1
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	7812      	ldrb	r2, [r2, #0]
 800244a:	701a      	strb	r2, [r3, #0]
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1f3      	bne.n	800243c <cfg_NodeBatVarProp+0x40>
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	2200      	movs	r2, #0
 8002458:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d017      	beq.n	8002490 <cfg_NodeBatVarProp+0x94>
 8002460:	89fb      	ldrh	r3, [r7, #14]
 8002462:	2b02      	cmp	r3, #2
 8002464:	d00e      	beq.n	8002484 <cfg_NodeBatVarProp+0x88>
 8002466:	2b02      	cmp	r3, #2
 8002468:	dc10      	bgt.n	800248c <cfg_NodeBatVarProp+0x90>
 800246a:	2b00      	cmp	r3, #0
 800246c:	d002      	beq.n	8002474 <cfg_NodeBatVarProp+0x78>
 800246e:	2b01      	cmp	r3, #1
 8002470:	d004      	beq.n	800247c <cfg_NodeBatVarProp+0x80>
 8002472:	e00b      	b.n	800248c <cfg_NodeBatVarProp+0x90>
	{
		case BAT_VOLTAGE:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2212      	movs	r2, #18
 8002478:	801a      	strh	r2, [r3, #0]
 800247a:	e009      	b.n	8002490 <cfg_NodeBatVarProp+0x94>
		case BAT_FILTERED_VOLTAGE:	*prop = CFG_VAR_TYPE_UINT| CFG_VAR_PROP_READONLY; break;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2212      	movs	r2, #18
 8002480:	801a      	strh	r2, [r3, #0]
 8002482:	e005      	b.n	8002490 <cfg_NodeBatVarProp+0x94>
		case BAT_CHG_PERC:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2212      	movs	r2, #18
 8002488:	801a      	strh	r2, [r3, #0]
 800248a:	e001      	b.n	8002490 <cfg_NodeBatVarProp+0x94>
		default: return CFG_ERROR_VARID;
 800248c:	2302      	movs	r3, #2
 800248e:	e000      	b.n	8002492 <cfg_NodeBatVarProp+0x96>
	}
	return CFG_ERROR_NONE;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	371c      	adds	r7, #28
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	08016880 	.word	0x08016880
 80024a4:	08016888 	.word	0x08016888
 80024a8:	0801689c 	.word	0x0801689c

080024ac <cfg_NodeBatVarGet>:

uint16_t cfg_NodeBatVarGet(uint16_t varid, void *value)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	6039      	str	r1, [r7, #0]
 80024b6:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d020      	beq.n	8002500 <cfg_NodeBatVarGet+0x54>
 80024be:	88fb      	ldrh	r3, [r7, #6]
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d014      	beq.n	80024ee <cfg_NodeBatVarGet+0x42>
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	dc19      	bgt.n	80024fc <cfg_NodeBatVarGet+0x50>
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d002      	beq.n	80024d2 <cfg_NodeBatVarGet+0x26>
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d007      	beq.n	80024e0 <cfg_NodeBatVarGet+0x34>
 80024d0:	e014      	b.n	80024fc <cfg_NodeBatVarGet+0x50>
	{
		case BAT_VOLTAGE: 			*(uint32_t*)value = (uint32_t)battery_info.battery_volatge; break;
 80024d2:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <cfg_NodeBatVarGet+0x64>)
 80024d4:	89db      	ldrh	r3, [r3, #14]
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	461a      	mov	r2, r3
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	e00f      	b.n	8002500 <cfg_NodeBatVarGet+0x54>
		case BAT_FILTERED_VOLTAGE: 	*(uint32_t*)value = (uint32_t)battery_info.filtered_voltage; break;
 80024e0:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <cfg_NodeBatVarGet+0x64>)
 80024e2:	8a1b      	ldrh	r3, [r3, #16]
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	461a      	mov	r2, r3
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	e008      	b.n	8002500 <cfg_NodeBatVarGet+0x54>
		case BAT_CHG_PERC: 			*(uint32_t*)value = (uint32_t)battery_info.charge_percent; break;
 80024ee:	4b08      	ldr	r3, [pc, #32]	; (8002510 <cfg_NodeBatVarGet+0x64>)
 80024f0:	7c9b      	ldrb	r3, [r3, #18]
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	461a      	mov	r2, r3
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	e001      	b.n	8002500 <cfg_NodeBatVarGet+0x54>
		default: return CFG_ERROR_VARID;
 80024fc:	2302      	movs	r3, #2
 80024fe:	e000      	b.n	8002502 <cfg_NodeBatVarGet+0x56>
	}
	return CFG_ERROR_NONE;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	200003bc 	.word	0x200003bc

08002514 <cfg_NodeBatVarSet>:

uint16_t cfg_NodeBatVarSet(uint16_t varid, void *value)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	6039      	str	r1, [r7, #0]
 800251e:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00f      	beq.n	8002546 <cfg_NodeBatVarSet+0x32>
 8002526:	88fb      	ldrh	r3, [r7, #6]
 8002528:	2b02      	cmp	r3, #2
 800252a:	d007      	beq.n	800253c <cfg_NodeBatVarSet+0x28>
 800252c:	2b02      	cmp	r3, #2
 800252e:	dc03      	bgt.n	8002538 <cfg_NodeBatVarSet+0x24>
 8002530:	2b00      	cmp	r3, #0
 8002532:	d005      	beq.n	8002540 <cfg_NodeBatVarSet+0x2c>
 8002534:	2b01      	cmp	r3, #1
 8002536:	d005      	beq.n	8002544 <cfg_NodeBatVarSet+0x30>
	{
		case BAT_VOLTAGE:			break;
		case BAT_FILTERED_VOLTAGE:	break;
		case BAT_CHG_PERC:			break;
		default: return CFG_ERROR_VARID;
 8002538:	2302      	movs	r3, #2
 800253a:	e005      	b.n	8002548 <cfg_NodeBatVarSet+0x34>
		case BAT_CHG_PERC:			break;
 800253c:	bf00      	nop
 800253e:	e002      	b.n	8002546 <cfg_NodeBatVarSet+0x32>
		case BAT_VOLTAGE:			break;
 8002540:	bf00      	nop
 8002542:	e000      	b.n	8002546 <cfg_NodeBatVarSet+0x32>
		case BAT_FILTERED_VOLTAGE:	break;
 8002544:	bf00      	nop
	}
	return CFG_ERROR_NONE;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <cfg_GetNodeName>:
	{ NODE_PITCHCH, NODE_AUTOPILOT, PITCHCH_VAR_NUM, cfg_NodePitchChVarGet, cfg_NodePitchChVarSet, cfg_NodePitchChVarProp}
};

/* @brief get the name of the node */
uint16_t cfg_GetNodeName(uint16_t nodeid, char *name)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	6039      	str	r1, [r7, #0]
 800255e:	80fb      	strh	r3, [r7, #6]
	char *str;

	// получаем имя переменной
	switch( nodeid )
 8002560:	88fb      	ldrh	r3, [r7, #6]
 8002562:	f642 023e 	movw	r2, #10302	; 0x283e
 8002566:	4293      	cmp	r3, r2
 8002568:	d050      	beq.n	800260c <cfg_GetNodeName+0xb8>
 800256a:	f642 023e 	movw	r2, #10302	; 0x283e
 800256e:	4293      	cmp	r3, r2
 8002570:	dc4f      	bgt.n	8002612 <cfg_GetNodeName+0xbe>
 8002572:	f642 023d 	movw	r2, #10301	; 0x283d
 8002576:	4293      	cmp	r3, r2
 8002578:	d045      	beq.n	8002606 <cfg_GetNodeName+0xb2>
 800257a:	f642 023d 	movw	r2, #10301	; 0x283d
 800257e:	4293      	cmp	r3, r2
 8002580:	dc47      	bgt.n	8002612 <cfg_GetNodeName+0xbe>
 8002582:	f242 72dd 	movw	r2, #10205	; 0x27dd
 8002586:	4293      	cmp	r3, r2
 8002588:	dc43      	bgt.n	8002612 <cfg_GetNodeName+0xbe>
 800258a:	f242 72d9 	movw	r2, #10201	; 0x27d9
 800258e:	4293      	cmp	r3, r2
 8002590:	da0c      	bge.n	80025ac <cfg_GetNodeName+0x58>
 8002592:	2b67      	cmp	r3, #103	; 0x67
 8002594:	d034      	beq.n	8002600 <cfg_GetNodeName+0xac>
 8002596:	2b67      	cmp	r3, #103	; 0x67
 8002598:	dc3b      	bgt.n	8002612 <cfg_GetNodeName+0xbe>
 800259a:	2b66      	cmp	r3, #102	; 0x66
 800259c:	d01e      	beq.n	80025dc <cfg_GetNodeName+0x88>
 800259e:	2b66      	cmp	r3, #102	; 0x66
 80025a0:	dc37      	bgt.n	8002612 <cfg_GetNodeName+0xbe>
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d014      	beq.n	80025d0 <cfg_GetNodeName+0x7c>
 80025a6:	2b65      	cmp	r3, #101	; 0x65
 80025a8:	d015      	beq.n	80025d6 <cfg_GetNodeName+0x82>
		case NODE_BAT    	: str = "Battery"; break;
		case NODE_SENS    	: str = "Sensors"; break;
		case NODE_AUTOPILOT	: str = "Autopilot"; break;
		case NODE_ROLLCH	: str = "Roll channel"; break;
		case NODE_PITCHCH	: str = "Pitch channel"; break;
		default:break;
 80025aa:	e032      	b.n	8002612 <cfg_GetNodeName+0xbe>
	switch( nodeid )
 80025ac:	f5a3 531f 	sub.w	r3, r3, #10176	; 0x27c0
 80025b0:	3b19      	subs	r3, #25
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	d82d      	bhi.n	8002612 <cfg_GetNodeName+0xbe>
 80025b6:	a201      	add	r2, pc, #4	; (adr r2, 80025bc <cfg_GetNodeName+0x68>)
 80025b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025bc:	080025e3 	.word	0x080025e3
 80025c0:	080025e9 	.word	0x080025e9
 80025c4:	080025ef 	.word	0x080025ef
 80025c8:	080025f5 	.word	0x080025f5
 80025cc:	080025fb 	.word	0x080025fb
		case NODE_MAIN		: str = "Nimbus_2000"; break;
 80025d0:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <cfg_GetNodeName+0xf4>)
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	e01e      	b.n	8002614 <cfg_GetNodeName+0xc0>
		case NODE_FW		: str = "Firmware"; break;
 80025d6:	4b1d      	ldr	r3, [pc, #116]	; (800264c <cfg_GetNodeName+0xf8>)
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	e01b      	b.n	8002614 <cfg_GetNodeName+0xc0>
		case NODE_DEV    	: str = "Aircraft devices"; break;
 80025dc:	4b1c      	ldr	r3, [pc, #112]	; (8002650 <cfg_GetNodeName+0xfc>)
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	e018      	b.n	8002614 <cfg_GetNodeName+0xc0>
		case NODE_SERVO    	: str = "Servo"; break;
 80025e2:	4b1c      	ldr	r3, [pc, #112]	; (8002654 <cfg_GetNodeName+0x100>)
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	e015      	b.n	8002614 <cfg_GetNodeName+0xc0>
		case NODE_MOTOR    	: str = "Motor"; break;
 80025e8:	4b1b      	ldr	r3, [pc, #108]	; (8002658 <cfg_GetNodeName+0x104>)
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	e012      	b.n	8002614 <cfg_GetNodeName+0xc0>
		case NODE_RC    	: str = "RC"; break;
 80025ee:	4b1b      	ldr	r3, [pc, #108]	; (800265c <cfg_GetNodeName+0x108>)
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	e00f      	b.n	8002614 <cfg_GetNodeName+0xc0>
		case NODE_BAT    	: str = "Battery"; break;
 80025f4:	4b1a      	ldr	r3, [pc, #104]	; (8002660 <cfg_GetNodeName+0x10c>)
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	e00c      	b.n	8002614 <cfg_GetNodeName+0xc0>
		case NODE_SENS    	: str = "Sensors"; break;
 80025fa:	4b1a      	ldr	r3, [pc, #104]	; (8002664 <cfg_GetNodeName+0x110>)
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	e009      	b.n	8002614 <cfg_GetNodeName+0xc0>
		case NODE_AUTOPILOT	: str = "Autopilot"; break;
 8002600:	4b19      	ldr	r3, [pc, #100]	; (8002668 <cfg_GetNodeName+0x114>)
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	e006      	b.n	8002614 <cfg_GetNodeName+0xc0>
		case NODE_ROLLCH	: str = "Roll channel"; break;
 8002606:	4b19      	ldr	r3, [pc, #100]	; (800266c <cfg_GetNodeName+0x118>)
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	e003      	b.n	8002614 <cfg_GetNodeName+0xc0>
		case NODE_PITCHCH	: str = "Pitch channel"; break;
 800260c:	4b18      	ldr	r3, [pc, #96]	; (8002670 <cfg_GetNodeName+0x11c>)
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	e000      	b.n	8002614 <cfg_GetNodeName+0xc0>
		default:break;
 8002612:	bf00      	nop
	}
	if( name )
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00f      	beq.n	800263a <cfg_GetNodeName+0xe6>
	{
		while( *str ){
 800261a:	e007      	b.n	800262c <cfg_GetNodeName+0xd8>
			*name++ = *str++;
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	1c53      	adds	r3, r2, #1
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	1c59      	adds	r1, r3, #1
 8002626:	6039      	str	r1, [r7, #0]
 8002628:	7812      	ldrb	r2, [r2, #0]
 800262a:	701a      	strb	r2, [r3, #0]
		while( *str ){
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1f3      	bne.n	800261c <cfg_GetNodeName+0xc8>
		}
		*name = 0;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	2200      	movs	r2, #0
 8002638:	701a      	strb	r2, [r3, #0]
	}

	return CFG_ERROR_NONE;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	080168a8 	.word	0x080168a8
 800264c:	080168b4 	.word	0x080168b4
 8002650:	080168c0 	.word	0x080168c0
 8002654:	080168d4 	.word	0x080168d4
 8002658:	080168dc 	.word	0x080168dc
 800265c:	080168e4 	.word	0x080168e4
 8002660:	080168e8 	.word	0x080168e8
 8002664:	080168f0 	.word	0x080168f0
 8002668:	080168f8 	.word	0x080168f8
 800266c:	08016904 	.word	0x08016904
 8002670:	08016914 	.word	0x08016914

08002674 <cfg_GetNode>:

/* @brief get node*/
cgf_nodeTypeDef* cfg_GetNode(uint16_t nodeid)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	4603      	mov	r3, r0
 800267c:	80fb      	strh	r3, [r7, #6]
	cgf_nodeTypeDef *node = cfg_NodeList;
 800267e:	4b13      	ldr	r3, [pc, #76]	; (80026cc <cfg_GetNode+0x58>)
 8002680:	60fb      	str	r3, [r7, #12]
	uint16_t n;

	for( n = 0; n < cfg_info.node_num && node->id != nodeid ; n++, node++ );
 8002682:	2300      	movs	r3, #0
 8002684:	817b      	strh	r3, [r7, #10]
 8002686:	e005      	b.n	8002694 <cfg_GetNode+0x20>
 8002688:	897b      	ldrh	r3, [r7, #10]
 800268a:	3301      	adds	r3, #1
 800268c:	817b      	strh	r3, [r7, #10]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	3314      	adds	r3, #20
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	4b0e      	ldr	r3, [pc, #56]	; (80026d0 <cfg_GetNode+0x5c>)
 8002696:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800269a:	b29b      	uxth	r3, r3
 800269c:	897a      	ldrh	r2, [r7, #10]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d204      	bcs.n	80026ac <cfg_GetNode+0x38>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	881b      	ldrh	r3, [r3, #0]
 80026a6:	88fa      	ldrh	r2, [r7, #6]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d1ed      	bne.n	8002688 <cfg_GetNode+0x14>

	return n == cfg_info.node_num ? 0 : node;
 80026ac:	4b08      	ldr	r3, [pc, #32]	; (80026d0 <cfg_GetNode+0x5c>)
 80026ae:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	897a      	ldrh	r2, [r7, #10]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d001      	beq.n	80026be <cfg_GetNode+0x4a>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	e000      	b.n	80026c0 <cfg_GetNode+0x4c>
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	20000030 	.word	0x20000030
 80026d0:	200003ec 	.word	0x200003ec

080026d4 <cfg_NodeFwVarProp>:

/* Main node functions*/
/*************************************************************************/
uint16_t cfg_NodeFwVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b087      	sub	sp, #28
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
 80026e0:	81fb      	strh	r3, [r7, #14]
	char *str;// = malloc(50);

	if( varid == 0 )
 80026e2:	89fb      	ldrh	r3, [r7, #14]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d105      	bne.n	80026f4 <cfg_NodeFwVarProp+0x20>
	{
		str = "Version";
 80026e8:	4b16      	ldr	r3, [pc, #88]	; (8002744 <cfg_NodeFwVarProp+0x70>)
 80026ea:	617b      	str	r3, [r7, #20]
		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2214      	movs	r2, #20
 80026f0:	801a      	strh	r2, [r3, #0]
 80026f2:	e00d      	b.n	8002710 <cfg_NodeFwVarProp+0x3c>
	}
	else if( varid == 1 )
 80026f4:	89fb      	ldrh	r3, [r7, #14]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d105      	bne.n	8002706 <cfg_NodeFwVarProp+0x32>
	{
		str = "Prepare for flashing";
 80026fa:	4b13      	ldr	r3, [pc, #76]	; (8002748 <cfg_NodeFwVarProp+0x74>)
 80026fc:	617b      	str	r3, [r7, #20]
		*prop = CFG_VAR_TYPE_BOOL;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2203      	movs	r2, #3
 8002702:	801a      	strh	r2, [r3, #0]
 8002704:	e004      	b.n	8002710 <cfg_NodeFwVarProp+0x3c>
	}
	else
	{
		str = "Data";
 8002706:	4b11      	ldr	r3, [pc, #68]	; (800274c <cfg_NodeFwVarProp+0x78>)
 8002708:	617b      	str	r3, [r7, #20]
		//str = malloc(15);
		//sprintf(str, "Data %u", varid - 2);
		*prop = CFG_VAR_TYPE_HEX | CFG_VAR_PROP_READONLY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2215      	movs	r2, #21
 800270e:	801a      	strh	r2, [r3, #0]
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00f      	beq.n	8002736 <cfg_NodeFwVarProp+0x62>
 8002716:	e007      	b.n	8002728 <cfg_NodeFwVarProp+0x54>
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	1c53      	adds	r3, r2, #1
 800271c:	617b      	str	r3, [r7, #20]
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	1c59      	adds	r1, r3, #1
 8002722:	60b9      	str	r1, [r7, #8]
 8002724:	7812      	ldrb	r2, [r2, #0]
 8002726:	701a      	strb	r2, [r3, #0]
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1f3      	bne.n	8002718 <cfg_NodeFwVarProp+0x44>
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	2200      	movs	r2, #0
 8002734:	701a      	strb	r2, [r3, #0]
	//free(str);
	return CFG_ERROR_NONE;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	371c      	adds	r7, #28
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	08016924 	.word	0x08016924
 8002748:	0801692c 	.word	0x0801692c
 800274c:	08016944 	.word	0x08016944

08002750 <cfg_NodeFwVarGet>:

uint16_t cfg_NodeFwVarGet(uint16_t varid, void *value)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	6039      	str	r1, [r7, #0]
 800275a:	80fb      	strh	r3, [r7, #6]
	if( varid == 0 ){
 800275c:	88fb      	ldrh	r3, [r7, #6]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d103      	bne.n	800276a <cfg_NodeFwVarGet+0x1a>
		*(float*)value = 0.9;
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	4a0a      	ldr	r2, [pc, #40]	; (8002790 <cfg_NodeFwVarGet+0x40>)
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	e00a      	b.n	8002780 <cfg_NodeFwVarGet+0x30>
	}
	else if( varid == 1){
 800276a:	88fb      	ldrh	r3, [r7, #6]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d103      	bne.n	8002778 <cfg_NodeFwVarGet+0x28>
		*(uint32_t*)value = 0;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	2200      	movs	r2, #0
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	e003      	b.n	8002780 <cfg_NodeFwVarGet+0x30>
	}
	else {
		*(uint32_t*)value = 0xFFFFFFFF;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	f04f 32ff 	mov.w	r2, #4294967295
 800277e:	601a      	str	r2, [r3, #0]
	}
	return CFG_ERROR_NONE;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	3f666666 	.word	0x3f666666

08002794 <cfg_NodeFwVarSet>:

uint16_t cfg_NodeFwVarSet(uint16_t varid, void *value)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	6039      	str	r1, [r7, #0]
 800279e:	80fb      	strh	r3, [r7, #6]
	//Prepare for flashing (clear new fw buffer)
	if( varid == 1 )
 80027a0:	88fb      	ldrh	r3, [r7, #6]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d106      	bne.n	80027b4 <cfg_NodeFwVarSet+0x20>
	{
		if( *(uint32_t*)value != 0 ){
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d012      	beq.n	80027d4 <cfg_NodeFwVarSet+0x40>
			cfg_ClearFwBuf();
 80027ae:	f001 f91d 	bl	80039ec <cfg_ClearFwBuf>
 80027b2:	e00f      	b.n	80027d4 <cfg_NodeFwVarSet+0x40>
		}
	}
	//Receiving data
	else if( varid < CFG_FW_VAR_NUM ){
 80027b4:	88fb      	ldrh	r3, [r7, #6]
 80027b6:	2b2f      	cmp	r3, #47	; 0x2f
 80027b8:	d805      	bhi.n	80027c6 <cfg_NodeFwVarSet+0x32>
		cfg_WriteFwData(*(uint32_t*)value);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f001 f92c 	bl	8003a1c <cfg_WriteFwData>
 80027c4:	e006      	b.n	80027d4 <cfg_NodeFwVarSet+0x40>
	}
	//Receiving complete
	else if( varid == (CFG_FW_VAR_NUM + 1) ){
 80027c6:	88fb      	ldrh	r3, [r7, #6]
 80027c8:	2b31      	cmp	r3, #49	; 0x31
 80027ca:	d103      	bne.n	80027d4 <cfg_NodeFwVarSet+0x40>
		cfg_info.new_fw_received = 1;
 80027cc:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <cfg_NodeFwVarSet+0x4c>)
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2649 	strb.w	r2, [r3, #1609]	; 0x649
	}
	return CFG_ERROR_NONE;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	200003ec 	.word	0x200003ec

080027e4 <cfg_NodeMainVarProp>:

/* Main node functions*/
/*************************************************************************/
uint16_t cfg_NodeMainVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b087      	sub	sp, #28
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
 80027f0:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 80027f2:	89fb      	ldrh	r3, [r7, #14]
 80027f4:	2b03      	cmp	r3, #3
 80027f6:	d817      	bhi.n	8002828 <cfg_NodeMainVarProp+0x44>
 80027f8:	a201      	add	r2, pc, #4	; (adr r2, 8002800 <cfg_NodeMainVarProp+0x1c>)
 80027fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fe:	bf00      	nop
 8002800:	08002811 	.word	0x08002811
 8002804:	08002817 	.word	0x08002817
 8002808:	0800281d 	.word	0x0800281d
 800280c:	08002823 	.word	0x08002823
	{
		case MAIN_DEVICE_ID:			str = "Device ID"; break;
 8002810:	4b25      	ldr	r3, [pc, #148]	; (80028a8 <cfg_NodeMainVarProp+0xc4>)
 8002812:	617b      	str	r3, [r7, #20]
 8002814:	e00a      	b.n	800282c <cfg_NodeMainVarProp+0x48>
		case MAIN_WORKING_TIME:			str = "Working time"; break;
 8002816:	4b25      	ldr	r3, [pc, #148]	; (80028ac <cfg_NodeMainVarProp+0xc8>)
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	e007      	b.n	800282c <cfg_NodeMainVarProp+0x48>
		case MAIN_SAVE:					str = "Save settings"; break;
 800281c:	4b24      	ldr	r3, [pc, #144]	; (80028b0 <cfg_NodeMainVarProp+0xcc>)
 800281e:	617b      	str	r3, [r7, #20]
 8002820:	e004      	b.n	800282c <cfg_NodeMainVarProp+0x48>
		case MAIN_RESET:				str = "Reboot device"; break;
 8002822:	4b24      	ldr	r3, [pc, #144]	; (80028b4 <cfg_NodeMainVarProp+0xd0>)
 8002824:	617b      	str	r3, [r7, #20]
 8002826:	e001      	b.n	800282c <cfg_NodeMainVarProp+0x48>
		default: return CFG_ERROR_VARID;
 8002828:	2302      	movs	r3, #2
 800282a:	e036      	b.n	800289a <cfg_NodeMainVarProp+0xb6>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00f      	beq.n	8002852 <cfg_NodeMainVarProp+0x6e>
 8002832:	e007      	b.n	8002844 <cfg_NodeMainVarProp+0x60>
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	1c53      	adds	r3, r2, #1
 8002838:	617b      	str	r3, [r7, #20]
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	1c59      	adds	r1, r3, #1
 800283e:	60b9      	str	r1, [r7, #8]
 8002840:	7812      	ldrb	r2, [r2, #0]
 8002842:	701a      	strb	r2, [r3, #0]
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1f3      	bne.n	8002834 <cfg_NodeMainVarProp+0x50>
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2200      	movs	r2, #0
 8002850:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d01f      	beq.n	8002898 <cfg_NodeMainVarProp+0xb4>
 8002858:	89fb      	ldrh	r3, [r7, #14]
 800285a:	2b03      	cmp	r3, #3
 800285c:	d81a      	bhi.n	8002894 <cfg_NodeMainVarProp+0xb0>
 800285e:	a201      	add	r2, pc, #4	; (adr r2, 8002864 <cfg_NodeMainVarProp+0x80>)
 8002860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002864:	08002875 	.word	0x08002875
 8002868:	0800287d 	.word	0x0800287d
 800286c:	08002885 	.word	0x08002885
 8002870:	0800288d 	.word	0x0800288d
	{
		case MAIN_DEVICE_ID:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2222      	movs	r2, #34	; 0x22
 8002878:	801a      	strh	r2, [r3, #0]
 800287a:	e00d      	b.n	8002898 <cfg_NodeMainVarProp+0xb4>
		case MAIN_WORKING_TIME:	  		*prop = CFG_VAR_TYPE_TIME | CFG_VAR_PROP_READONLY; break;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2217      	movs	r2, #23
 8002880:	801a      	strh	r2, [r3, #0]
 8002882:	e009      	b.n	8002898 <cfg_NodeMainVarProp+0xb4>
		case MAIN_SAVE:					*prop = CFG_VAR_TYPE_BOOL; break;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2203      	movs	r2, #3
 8002888:	801a      	strh	r2, [r3, #0]
 800288a:	e005      	b.n	8002898 <cfg_NodeMainVarProp+0xb4>
		case MAIN_RESET:				*prop = CFG_VAR_TYPE_BOOL; break;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2203      	movs	r2, #3
 8002890:	801a      	strh	r2, [r3, #0]
 8002892:	e001      	b.n	8002898 <cfg_NodeMainVarProp+0xb4>
		default: return CFG_ERROR_VARID;
 8002894:	2302      	movs	r3, #2
 8002896:	e000      	b.n	800289a <cfg_NodeMainVarProp+0xb6>
	}
	return CFG_ERROR_NONE;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	371c      	adds	r7, #28
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	0801694c 	.word	0x0801694c
 80028ac:	08016958 	.word	0x08016958
 80028b0:	08016968 	.word	0x08016968
 80028b4:	08016978 	.word	0x08016978

080028b8 <cfg_NodeMainVarGet>:

uint16_t cfg_NodeMainVarGet(uint16_t varid, void *value)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	6039      	str	r1, [r7, #0]
 80028c2:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d026      	beq.n	8002918 <cfg_NodeMainVarGet+0x60>
 80028ca:	88fb      	ldrh	r3, [r7, #6]
 80028cc:	2b03      	cmp	r3, #3
 80028ce:	d821      	bhi.n	8002914 <cfg_NodeMainVarGet+0x5c>
 80028d0:	a201      	add	r2, pc, #4	; (adr r2, 80028d8 <cfg_NodeMainVarGet+0x20>)
 80028d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d6:	bf00      	nop
 80028d8:	080028e9 	.word	0x080028e9
 80028dc:	080028f9 	.word	0x080028f9
 80028e0:	08002905 	.word	0x08002905
 80028e4:	0800290d 	.word	0x0800290d
	{
		case MAIN_DEVICE_ID: 			*(uint32_t*)value = (uint32_t)cfg_info.device_id; break;
 80028e8:	4b0e      	ldr	r3, [pc, #56]	; (8002924 <cfg_NodeMainVarGet+0x6c>)
 80028ea:	f8b3 3638 	ldrh.w	r3, [r3, #1592]	; 0x638
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	461a      	mov	r2, r3
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	e00f      	b.n	8002918 <cfg_NodeMainVarGet+0x60>
		case MAIN_WORKING_TIME: 		*(uint32_t*)value = HAL_GetTick(); break;
 80028f8:	f009 f83e 	bl	800b978 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	e009      	b.n	8002918 <cfg_NodeMainVarGet+0x60>
		case MAIN_SAVE: 				*(uint32_t*)value = 0; break;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	e005      	b.n	8002918 <cfg_NodeMainVarGet+0x60>
		case MAIN_RESET: 				*(uint32_t*)value = 0; break;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	e001      	b.n	8002918 <cfg_NodeMainVarGet+0x60>
		default: return CFG_ERROR_VARID;
 8002914:	2302      	movs	r3, #2
 8002916:	e000      	b.n	800291a <cfg_NodeMainVarGet+0x62>
	}
	return CFG_ERROR_NONE;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	200003ec 	.word	0x200003ec

08002928 <cfg_NodeMainVarSet>:

uint16_t cfg_NodeMainVarSet(uint16_t varid, void *value)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	4603      	mov	r3, r0
 8002930:	6039      	str	r1, [r7, #0]
 8002932:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d02a      	beq.n	8002990 <cfg_NodeMainVarSet+0x68>
 800293a:	88fb      	ldrh	r3, [r7, #6]
 800293c:	2b03      	cmp	r3, #3
 800293e:	d820      	bhi.n	8002982 <cfg_NodeMainVarSet+0x5a>
 8002940:	a201      	add	r2, pc, #4	; (adr r2, 8002948 <cfg_NodeMainVarSet+0x20>)
 8002942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002946:	bf00      	nop
 8002948:	08002959 	.word	0x08002959
 800294c:	08002987 	.word	0x08002987
 8002950:	08002965 	.word	0x08002965
 8002954:	08002973 	.word	0x08002973
	{
		case MAIN_DEVICE_ID:				cfg_info.device_id = *(uint16_t*)value; break;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	881a      	ldrh	r2, [r3, #0]
 800295c:	4b0f      	ldr	r3, [pc, #60]	; (800299c <cfg_NodeMainVarSet+0x74>)
 800295e:	f8a3 2638 	strh.w	r2, [r3, #1592]	; 0x638
 8002962:	e015      	b.n	8002990 <cfg_NodeMainVarSet+0x68>
		case MAIN_WORKING_TIME:				break;
		case MAIN_SAVE:						if( *(uint32_t*)value ) {cfg_SaveSettings();} break;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00e      	beq.n	800298a <cfg_NodeMainVarSet+0x62>
 800296c:	f000 fe68 	bl	8003640 <cfg_SaveSettings>
 8002970:	e00b      	b.n	800298a <cfg_NodeMainVarSet+0x62>
		case MAIN_RESET:					if( *(uint32_t*)value ) {system_info.reset_req = 1;} break;
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d009      	beq.n	800298e <cfg_NodeMainVarSet+0x66>
 800297a:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <cfg_NodeMainVarSet+0x78>)
 800297c:	2201      	movs	r2, #1
 800297e:	705a      	strb	r2, [r3, #1]
 8002980:	e005      	b.n	800298e <cfg_NodeMainVarSet+0x66>
		default: return CFG_ERROR_VARID;
 8002982:	2302      	movs	r3, #2
 8002984:	e005      	b.n	8002992 <cfg_NodeMainVarSet+0x6a>
		case MAIN_WORKING_TIME:				break;
 8002986:	bf00      	nop
 8002988:	e002      	b.n	8002990 <cfg_NodeMainVarSet+0x68>
		case MAIN_SAVE:						if( *(uint32_t*)value ) {cfg_SaveSettings();} break;
 800298a:	bf00      	nop
 800298c:	e000      	b.n	8002990 <cfg_NodeMainVarSet+0x68>
		case MAIN_RESET:					if( *(uint32_t*)value ) {system_info.reset_req = 1;} break;
 800298e:	bf00      	nop
	}
	return CFG_ERROR_NONE;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	200003ec 	.word	0x200003ec
 80029a0:	200010c0 	.word	0x200010c0

080029a4 <cfg_Timer>:
  * @brief  called from SysTick_Handler to update local class time
  * @param  res - time pass in mSec
  * @retval None
  */
void cfg_Timer(uint32_t res)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
#ifdef NO_CFG
	return;
#endif //NO_CFG

	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 80029ac:	2300      	movs	r3, #0
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	e023      	b.n	80029fa <cfg_Timer+0x56>
	{
		if( cfg_info.iface[i].timer > 0 ){
 80029b2:	4a16      	ldr	r2, [pc, #88]	; (8002a0c <cfg_Timer+0x68>)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80029ba:	fb01 f303 	mul.w	r3, r1, r3
 80029be:	4413      	add	r3, r2
 80029c0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d014      	beq.n	80029f4 <cfg_Timer+0x50>
			cfg_info.iface[i].timer--;
 80029ca:	4a10      	ldr	r2, [pc, #64]	; (8002a0c <cfg_Timer+0x68>)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80029d2:	fb01 f303 	mul.w	r3, r1, r3
 80029d6:	4413      	add	r3, r2
 80029d8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	1e5a      	subs	r2, r3, #1
 80029e0:	490a      	ldr	r1, [pc, #40]	; (8002a0c <cfg_Timer+0x68>)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f44f 7047 	mov.w	r0, #796	; 0x31c
 80029e8:	fb00 f303 	mul.w	r3, r0, r3
 80029ec:	440b      	add	r3, r1
 80029ee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80029f2:	601a      	str	r2, [r3, #0]
	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	3301      	adds	r3, #1
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d9d8      	bls.n	80029b2 <cfg_Timer+0xe>
		}
	}

	return;
 8002a00:	bf00      	nop
}
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	200003ec 	.word	0x200003ec

08002a10 <cfg_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void cfg_InitTask()
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
#ifdef NO_CFG
	return;
#endif //NO_CFG

	cfg_info.device_id = 1;
 8002a16:	4b2e      	ldr	r3, [pc, #184]	; (8002ad0 <cfg_InitTask+0xc0>)
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f8a3 2638 	strh.w	r2, [r3, #1592]	; 0x638
	cfg_info.node_num = sizeof( cfg_NodeList ) / sizeof( cgf_nodeTypeDef );
 8002a1e:	4b2c      	ldr	r3, [pc, #176]	; (8002ad0 <cfg_InitTask+0xc0>)
 8002a20:	220b      	movs	r2, #11
 8002a22:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640

	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 8002a26:	2300      	movs	r3, #0
 8002a28:	607b      	str	r3, [r7, #4]
 8002a2a:	e040      	b.n	8002aae <cfg_InitTask+0x9e>
	{
		cfg_info.iface[i].timer = 0;
 8002a2c:	4a28      	ldr	r2, [pc, #160]	; (8002ad0 <cfg_InitTask+0xc0>)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002a34:	fb01 f303 	mul.w	r3, r1, r3
 8002a38:	4413      	add	r3, r2
 8002a3a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]
		cfg_info.iface[i].rx_buf.head = 0;
 8002a42:	4a23      	ldr	r2, [pc, #140]	; (8002ad0 <cfg_InitTask+0xc0>)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002a4a:	fb01 f303 	mul.w	r3, r1, r3
 8002a4e:	4413      	add	r3, r2
 8002a50:	3302      	adds	r3, #2
 8002a52:	2200      	movs	r2, #0
 8002a54:	801a      	strh	r2, [r3, #0]
		cfg_info.iface[i].rx_buf.tail = 0;
 8002a56:	4a1e      	ldr	r2, [pc, #120]	; (8002ad0 <cfg_InitTask+0xc0>)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002a5e:	fb01 f303 	mul.w	r3, r1, r3
 8002a62:	4413      	add	r3, r2
 8002a64:	3304      	adds	r3, #4
 8002a66:	2200      	movs	r2, #0
 8002a68:	801a      	strh	r2, [r3, #0]
		cfg_info.iface[i].rx_buf.state = RINGBUF_WAIT_HEADER;
 8002a6a:	4a19      	ldr	r2, [pc, #100]	; (8002ad0 <cfg_InitTask+0xc0>)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002a72:	fb01 f303 	mul.w	r3, r1, r3
 8002a76:	4413      	add	r3, r2
 8002a78:	2200      	movs	r2, #0
 8002a7a:	701a      	strb	r2, [r3, #0]
		cfg_info.iface[i].tx_buf_bytes = 0;
 8002a7c:	4a14      	ldr	r2, [pc, #80]	; (8002ad0 <cfg_InitTask+0xc0>)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002a84:	fb01 f303 	mul.w	r3, r1, r3
 8002a88:	4413      	add	r3, r2
 8002a8a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
		cfg_info.iface[i].req_num = 0;
 8002a92:	4a0f      	ldr	r2, [pc, #60]	; (8002ad0 <cfg_InitTask+0xc0>)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002a9a:	fb01 f303 	mul.w	r3, r1, r3
 8002a9e:	4413      	add	r3, r2
 8002aa0:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]
	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	607b      	str	r3, [r7, #4]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d9bb      	bls.n	8002a2c <cfg_InitTask+0x1c>
	}

	cfg_info.iface[CFG_IFACE_CH0].tx_func = cfg_TxDataCh0;
 8002ab4:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <cfg_InitTask+0xc0>)
 8002ab6:	4a07      	ldr	r2, [pc, #28]	; (8002ad4 <cfg_InitTask+0xc4>)
 8002ab8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	cfg_info.iface[CFG_IFACE_CH1_USB].tx_func = cfg_TxDataCh1USB;
 8002abc:	4b04      	ldr	r3, [pc, #16]	; (8002ad0 <cfg_InitTask+0xc0>)
 8002abe:	4a06      	ldr	r2, [pc, #24]	; (8002ad8 <cfg_InitTask+0xc8>)
 8002ac0:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528

	cfg_LoadSettings();
 8002ac4:	f000 fee4 	bl	8003890 <cfg_LoadSettings>

	return;
 8002ac8:	bf00      	nop
}
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	200003ec 	.word	0x200003ec
 8002ad4:	08003e39 	.word	0x08003e39
 8002ad8:	08003e55 	.word	0x08003e55

08002adc <cfg_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void cfg_Task(void)
{
 8002adc:	b590      	push	{r4, r7, lr}
 8002ade:	b099      	sub	sp, #100	; 0x64
 8002ae0:	af00      	add	r7, sp, #0
	return;
#endif //NO_CFG

	uint16_t tmp_u16;
	uint8_t tmp_u8;
	uint16_t node_num = 0;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	uint16_t node_id = 0;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	uint16_t var_id = 0;
 8002aee:	2300      	movs	r3, #0
 8002af0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	uint16_t var_prop = 0;
 8002af4:	2300      	movs	r3, #0
 8002af6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint16_t var_num = 0;
 8002afa:	2300      	movs	r3, #0
 8002afc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	uint32_t var_val = 0;
 8002b00:	2300      	movs	r3, #0
 8002b02:	64bb      	str	r3, [r7, #72]	; 0x48
	uint16_t j = 0;
 8002b04:	2300      	movs	r3, #0
 8002b06:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	char name[CFG_NAMECHARS];
	uint8_t name_len;

	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b0e:	e3f3      	b.n	80032f8 <cfg_Task+0x81c>
	{
		//Transmitting
		if( (cfg_info.iface[i].tx_buf_bytes > 0) && (cfg_info.iface[i].timer == 0) )
 8002b10:	4ab8      	ldr	r2, [pc, #736]	; (8002df4 <cfg_Task+0x318>)
 8002b12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b14:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002b18:	fb01 f303 	mul.w	r3, r1, r3
 8002b1c:	4413      	add	r3, r2
 8002b1e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d069      	beq.n	8002bfc <cfg_Task+0x120>
 8002b28:	4ab2      	ldr	r2, [pc, #712]	; (8002df4 <cfg_Task+0x318>)
 8002b2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b2c:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002b30:	fb01 f303 	mul.w	r3, r1, r3
 8002b34:	4413      	add	r3, r2
 8002b36:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d15d      	bne.n	8002bfc <cfg_Task+0x120>
		{
			cfg_info.iface[i].timer = CFG_TX_PERIOD;
 8002b40:	4aac      	ldr	r2, [pc, #688]	; (8002df4 <cfg_Task+0x318>)
 8002b42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b44:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002b48:	fb01 f303 	mul.w	r3, r1, r3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]
			if( cfg_info.iface[i].tx_buf_bytes > CFG_MAX_TX_LEN )
 8002b56:	4aa7      	ldr	r2, [pc, #668]	; (8002df4 <cfg_Task+0x318>)
 8002b58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b5a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002b5e:	fb01 f303 	mul.w	r3, r1, r3
 8002b62:	4413      	add	r3, r2
 8002b64:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2b40      	cmp	r3, #64	; 0x40
 8002b6c:	d91c      	bls.n	8002ba8 <cfg_Task+0xcc>
			{
				cfg_info.iface[i].tx_func((uint8_t*)cfg_info.iface[i].tx_buf, CFG_MAX_TX_LEN);
 8002b6e:	4aa1      	ldr	r2, [pc, #644]	; (8002df4 <cfg_Task+0x318>)
 8002b70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b72:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002b76:	fb01 f303 	mul.w	r3, r1, r3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002b84:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002b88:	fb01 f202 	mul.w	r2, r1, r2
 8002b8c:	f502 7284 	add.w	r2, r2, #264	; 0x108
 8002b90:	4998      	ldr	r1, [pc, #608]	; (8002df4 <cfg_Task+0x318>)
 8002b92:	440a      	add	r2, r1
 8002b94:	2140      	movs	r1, #64	; 0x40
 8002b96:	4610      	mov	r0, r2
 8002b98:	4798      	blx	r3
				cfg_RemTxData(i, CFG_MAX_TX_LEN);
 8002b9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	2140      	movs	r1, #64	; 0x40
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f001 f89f 	bl	8003ce4 <cfg_RemTxData>
 8002ba6:	e029      	b.n	8002bfc <cfg_Task+0x120>
			}
			else
			{
				cfg_info.iface[i].tx_func((uint8_t*)cfg_info.iface[i].tx_buf, cfg_info.iface[i].tx_buf_bytes);
 8002ba8:	4a92      	ldr	r2, [pc, #584]	; (8002df4 <cfg_Task+0x318>)
 8002baa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bac:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002bb0:	fb01 f303 	mul.w	r3, r1, r3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002bbe:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002bc2:	fb01 f202 	mul.w	r2, r1, r2
 8002bc6:	f502 7284 	add.w	r2, r2, #264	; 0x108
 8002bca:	498a      	ldr	r1, [pc, #552]	; (8002df4 <cfg_Task+0x318>)
 8002bcc:	1850      	adds	r0, r2, r1
 8002bce:	4989      	ldr	r1, [pc, #548]	; (8002df4 <cfg_Task+0x318>)
 8002bd0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002bd2:	f44f 7447 	mov.w	r4, #796	; 0x31c
 8002bd6:	fb04 f202 	mul.w	r2, r4, r2
 8002bda:	440a      	add	r2, r1
 8002bdc:	f502 7202 	add.w	r2, r2, #520	; 0x208
 8002be0:	6812      	ldr	r2, [r2, #0]
 8002be2:	4611      	mov	r1, r2
 8002be4:	4798      	blx	r3
				cfg_info.iface[i].tx_buf_bytes = 0;
 8002be6:	4a83      	ldr	r2, [pc, #524]	; (8002df4 <cfg_Task+0x318>)
 8002be8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bea:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002bee:	fb01 f303 	mul.w	r3, r1, r3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
			}
		}
		//Handling received pkt
		if( cfg_info.iface[i].rvd_pkt_size > 0 )
 8002bfc:	4a7d      	ldr	r2, [pc, #500]	; (8002df4 <cfg_Task+0x318>)
 8002bfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c00:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002c04:	fb01 f303 	mul.w	r3, r1, r3
 8002c08:	4413      	add	r3, r2
 8002c0a:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 836e 	beq.w	80032f2 <cfg_Task+0x816>
		{
			cfg_info.iface[i].req_num += 1;
 8002c16:	4a77      	ldr	r2, [pc, #476]	; (8002df4 <cfg_Task+0x318>)
 8002c18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c1a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002c1e:	fb01 f303 	mul.w	r3, r1, r3
 8002c22:	4413      	add	r3, r2
 8002c24:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	1c5a      	adds	r2, r3, #1
 8002c2c:	4971      	ldr	r1, [pc, #452]	; (8002df4 <cfg_Task+0x318>)
 8002c2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c30:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002c34:	fb00 f303 	mul.w	r3, r0, r3
 8002c38:	440b      	add	r3, r1
 8002c3a:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8002c3e:	601a      	str	r2, [r3, #0]
			//Answer
			tmp_u16 = CFG_HEADER;
 8002c40:	f64c 63fa 	movw	r3, #52986	; 0xcefa
 8002c44:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
			cfg_AddTxData(i, (uint8_t*)&tmp_u16, 2);
 8002c48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002c50:	2202      	movs	r2, #2
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 ff08 	bl	8003a68 <cfg_AddTxData>
			cfg_AddTxData(i, (uint8_t*)&cfg_info.device_id, 2);
 8002c58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	4966      	ldr	r1, [pc, #408]	; (8002df8 <cfg_Task+0x31c>)
 8002c60:	4618      	mov	r0, r3
 8002c62:	f000 ff01 	bl	8003a68 <cfg_AddTxData>
			cfg_AddTxData(i, (uint8_t*)&cfg_info.iface[i].rvd_pkt[5], 1); /*cmd*/
 8002c66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c68:	b298      	uxth	r0, r3
 8002c6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c6c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002c70:	fb02 f303 	mul.w	r3, r2, r3
 8002c74:	f203 2315 	addw	r3, r3, #533	; 0x215
 8002c78:	4a5e      	ldr	r2, [pc, #376]	; (8002df4 <cfg_Task+0x318>)
 8002c7a:	4413      	add	r3, r2
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	2201      	movs	r2, #1
 8002c80:	4619      	mov	r1, r3
 8002c82:	f000 fef1 	bl	8003a68 <cfg_AddTxData>
			//Handle command
			if( cfg_info.iface[i].rvd_pkt[5] == CFG_CMD_GETNODENUM )
 8002c86:	4a5b      	ldr	r2, [pc, #364]	; (8002df4 <cfg_Task+0x318>)
 8002c88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c8a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002c8e:	fb01 f303 	mul.w	r3, r1, r3
 8002c92:	4413      	add	r3, r2
 8002c94:	f203 2319 	addw	r3, r3, #537	; 0x219
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d107      	bne.n	8002cb0 <cfg_Task+0x1d4>
			{
				cfg_AddTxData(i, (uint8_t*)&cfg_info.node_num, 2);
 8002ca0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	2202      	movs	r2, #2
 8002ca6:	4955      	ldr	r1, [pc, #340]	; (8002dfc <cfg_Task+0x320>)
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f000 fedd 	bl	8003a68 <cfg_AddTxData>
 8002cae:	e2db      	b.n	8003268 <cfg_Task+0x78c>
			}
			else if( cfg_info.iface[i].rvd_pkt[5] == CFG_CMD_GETNODEDESCR )
 8002cb0:	4a50      	ldr	r2, [pc, #320]	; (8002df4 <cfg_Task+0x318>)
 8002cb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cb4:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002cb8:	fb01 f303 	mul.w	r3, r1, r3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	f203 2319 	addw	r3, r3, #537	; 0x219
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	f040 809c 	bne.w	8002e04 <cfg_Task+0x328>
			{
				memcpy(&node_num, (uint8_t*)&cfg_info.iface[i].rvd_pkt[6], sizeof(node_num));
 8002ccc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cce:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002cd2:	fb02 f303 	mul.w	r3, r2, r3
 8002cd6:	f203 2316 	addw	r3, r3, #534	; 0x216
 8002cda:	4a46      	ldr	r2, [pc, #280]	; (8002df4 <cfg_Task+0x318>)
 8002cdc:	4413      	add	r3, r2
 8002cde:	3304      	adds	r3, #4
 8002ce0:	881b      	ldrh	r3, [r3, #0]
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				if( node_num < cfg_info.node_num )
 8002ce8:	4b42      	ldr	r3, [pc, #264]	; (8002df4 <cfg_Task+0x318>)
 8002cea:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d957      	bls.n	8002da8 <cfg_Task+0x2cc>
				{
					cfg_AddTxData(i, (uint8_t*)&node_num, 2);
 8002cf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8002d00:	2202      	movs	r2, #2
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 feb0 	bl	8003a68 <cfg_AddTxData>
					cfg_AddTxData(i, (uint8_t*)&cfg_NodeList[node_num].id, 2);
 8002d08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d0a:	b298      	uxth	r0, r3
 8002d0c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002d10:	461a      	mov	r2, r3
 8002d12:	4613      	mov	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4a39      	ldr	r2, [pc, #228]	; (8002e00 <cfg_Task+0x324>)
 8002d1c:	4413      	add	r3, r2
 8002d1e:	2202      	movs	r2, #2
 8002d20:	4619      	mov	r1, r3
 8002d22:	f000 fea1 	bl	8003a68 <cfg_AddTxData>
					cfg_AddTxData(i, (uint8_t*)&cfg_NodeList[node_num].pid, 2);
 8002d26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d28:	b298      	uxth	r0, r3
 8002d2a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002d2e:	461a      	mov	r2, r3
 8002d30:	4613      	mov	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4a31      	ldr	r2, [pc, #196]	; (8002e00 <cfg_Task+0x324>)
 8002d3a:	4413      	add	r3, r2
 8002d3c:	3302      	adds	r3, #2
 8002d3e:	2202      	movs	r2, #2
 8002d40:	4619      	mov	r1, r3
 8002d42:	f000 fe91 	bl	8003a68 <cfg_AddTxData>
					cfg_AddTxData(i, (uint8_t*)&cfg_NodeList[node_num].var_num, 2);
 8002d46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d48:	b298      	uxth	r0, r3
 8002d4a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002d4e:	461a      	mov	r2, r3
 8002d50:	4613      	mov	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4a29      	ldr	r2, [pc, #164]	; (8002e00 <cfg_Task+0x324>)
 8002d5a:	4413      	add	r3, r2
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	2202      	movs	r2, #2
 8002d60:	4619      	mov	r1, r3
 8002d62:	f000 fe81 	bl	8003a68 <cfg_AddTxData>
					/*node name*/
					cfg_GetNodeName(cfg_NodeList[node_num].id, name);
 8002d66:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4a24      	ldr	r2, [pc, #144]	; (8002e00 <cfg_Task+0x324>)
 8002d6e:	460b      	mov	r3, r1
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	440b      	add	r3, r1
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	881b      	ldrh	r3, [r3, #0]
 8002d7a:	1d3a      	adds	r2, r7, #4
 8002d7c:	4611      	mov	r1, r2
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff fbe8 	bl	8002554 <cfg_GetNodeName>
					name_len = strlen(name) + 1;
 8002d84:	1d3b      	adds	r3, r7, #4
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fd fa26 	bl	80001d8 <strlen>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	3301      	adds	r3, #1
 8002d92:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
					cfg_AddTxData(i, (uint8_t*)name, (uint32_t)name_len);
 8002d96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8002d9e:	1d39      	adds	r1, r7, #4
 8002da0:	4618      	mov	r0, r3
 8002da2:	f000 fe61 	bl	8003a68 <cfg_AddTxData>
 8002da6:	e25f      	b.n	8003268 <cfg_Task+0x78c>
				}
				else
				{
					cfg_info.iface[i].tx_buf[4] |= 0x80;
 8002da8:	4a12      	ldr	r2, [pc, #72]	; (8002df4 <cfg_Task+0x318>)
 8002daa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dac:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002db0:	fb01 f303 	mul.w	r3, r1, r3
 8002db4:	4413      	add	r3, r2
 8002db6:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002dc2:	b2d8      	uxtb	r0, r3
 8002dc4:	4a0b      	ldr	r2, [pc, #44]	; (8002df4 <cfg_Task+0x318>)
 8002dc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dc8:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002dcc:	fb01 f303 	mul.w	r3, r1, r3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	701a      	strb	r2, [r3, #0]
					tmp_u8 = CFG_CMD_ERROR_NODENUM;
 8002dda:	2302      	movs	r3, #2
 8002ddc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					cfg_AddTxData(i, (uint8_t*)&tmp_u8, 1);
 8002de0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	f107 0157 	add.w	r1, r7, #87	; 0x57
 8002de8:	2201      	movs	r2, #1
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 fe3c 	bl	8003a68 <cfg_AddTxData>
 8002df0:	e23a      	b.n	8003268 <cfg_Task+0x78c>
 8002df2:	bf00      	nop
 8002df4:	200003ec 	.word	0x200003ec
 8002df8:	20000a24 	.word	0x20000a24
 8002dfc:	20000a2c 	.word	0x20000a2c
 8002e00:	20000030 	.word	0x20000030
				}
			}
			else if( cfg_info.iface[i].rvd_pkt[5] == CFG_CMD_GETVARDESCR )
 8002e04:	4ab0      	ldr	r2, [pc, #704]	; (80030c8 <cfg_Task+0x5ec>)
 8002e06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e08:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002e0c:	fb01 f303 	mul.w	r3, r1, r3
 8002e10:	4413      	add	r3, r2
 8002e12:	f203 2319 	addw	r3, r3, #537	; 0x219
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	f040 80a8 	bne.w	8002f70 <cfg_Task+0x494>
			{
				memcpy(&node_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[6], sizeof(node_id));
 8002e20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e22:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002e26:	fb02 f303 	mul.w	r3, r2, r3
 8002e2a:	f203 2316 	addw	r3, r3, #534	; 0x216
 8002e2e:	4aa6      	ldr	r2, [pc, #664]	; (80030c8 <cfg_Task+0x5ec>)
 8002e30:	4413      	add	r3, r2
 8002e32:	3304      	adds	r3, #4
 8002e34:	881b      	ldrh	r3, [r3, #0]
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
				memcpy(&var_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[8], sizeof(var_id));
 8002e3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e3e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002e42:	fb02 f303 	mul.w	r3, r2, r3
 8002e46:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8002e4a:	4a9f      	ldr	r2, [pc, #636]	; (80030c8 <cfg_Task+0x5ec>)
 8002e4c:	4413      	add	r3, r2
 8002e4e:	3304      	adds	r3, #4
 8002e50:	881b      	ldrh	r3, [r3, #0]
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
				if( cfg_GetNode(node_id) != 0 )
 8002e58:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff fc09 	bl	8002674 <cfg_GetNode>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d05e      	beq.n	8002f26 <cfg_Task+0x44a>
				{
					if( cfg_GetNode(node_id)->var_prop_func(var_id, name, &var_prop) == CFG_ERROR_NONE )
 8002e68:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff fc01 	bl	8002674 <cfg_GetNode>
 8002e72:	4603      	mov	r3, r0
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	f8b7 0050 	ldrh.w	r0, [r7, #80]	; 0x50
 8002e7a:	f107 024e 	add.w	r2, r7, #78	; 0x4e
 8002e7e:	1d39      	adds	r1, r7, #4
 8002e80:	4798      	blx	r3
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d129      	bne.n	8002edc <cfg_Task+0x400>
					{
						cfg_AddTxData(i, (uint8_t*)&node_id, 2);
 8002e88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	f107 0152 	add.w	r1, r7, #82	; 0x52
 8002e90:	2202      	movs	r2, #2
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 fde8 	bl	8003a68 <cfg_AddTxData>
						cfg_AddTxData(i, (uint8_t*)&var_id, 2);
 8002e98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 fde0 	bl	8003a68 <cfg_AddTxData>
						cfg_AddTxData(i, (uint8_t*)&var_prop, 2);
 8002ea8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	f107 014e 	add.w	r1, r7, #78	; 0x4e
 8002eb0:	2202      	movs	r2, #2
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 fdd8 	bl	8003a68 <cfg_AddTxData>
						name_len = strlen(name) + 1;
 8002eb8:	1d3b      	adds	r3, r7, #4
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fd f98c 	bl	80001d8 <strlen>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
						cfg_AddTxData(i, (uint8_t*)name, (uint32_t)name_len);
 8002eca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8002ed2:	1d39      	adds	r1, r7, #4
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 fdc7 	bl	8003a68 <cfg_AddTxData>
 8002eda:	e1c5      	b.n	8003268 <cfg_Task+0x78c>
					}
					else
					{
						cfg_info.iface[i].tx_buf[4] |= 0x80;
 8002edc:	4a7a      	ldr	r2, [pc, #488]	; (80030c8 <cfg_Task+0x5ec>)
 8002ede:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ee0:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002ee4:	fb01 f303 	mul.w	r3, r1, r3
 8002ee8:	4413      	add	r3, r2
 8002eea:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ef6:	b2d8      	uxtb	r0, r3
 8002ef8:	4a73      	ldr	r2, [pc, #460]	; (80030c8 <cfg_Task+0x5ec>)
 8002efa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002efc:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002f00:	fb01 f303 	mul.w	r3, r1, r3
 8002f04:	4413      	add	r3, r2
 8002f06:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	701a      	strb	r2, [r3, #0]
						tmp_u8 = CFG_CMD_ERROR_VARNUM;
 8002f0e:	2304      	movs	r3, #4
 8002f10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						cfg_AddTxData(i, (uint8_t*)&tmp_u8, 1);
 8002f14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	f107 0157 	add.w	r1, r7, #87	; 0x57
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 fda2 	bl	8003a68 <cfg_AddTxData>
 8002f24:	e1a0      	b.n	8003268 <cfg_Task+0x78c>
					}
				}
				else
				{
					cfg_info.iface[i].tx_buf[4] |= 0x80;
 8002f26:	4a68      	ldr	r2, [pc, #416]	; (80030c8 <cfg_Task+0x5ec>)
 8002f28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f2a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002f2e:	fb01 f303 	mul.w	r3, r1, r3
 8002f32:	4413      	add	r3, r2
 8002f34:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f40:	b2d8      	uxtb	r0, r3
 8002f42:	4a61      	ldr	r2, [pc, #388]	; (80030c8 <cfg_Task+0x5ec>)
 8002f44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f46:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002f4a:	fb01 f303 	mul.w	r3, r1, r3
 8002f4e:	4413      	add	r3, r2
 8002f50:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8002f54:	4602      	mov	r2, r0
 8002f56:	701a      	strb	r2, [r3, #0]
					tmp_u8 = CFG_CMD_ERROR_NODEID;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					cfg_AddTxData(i, (uint8_t*)&tmp_u8, 1);
 8002f5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	f107 0157 	add.w	r1, r7, #87	; 0x57
 8002f66:	2201      	movs	r2, #1
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 fd7d 	bl	8003a68 <cfg_AddTxData>
 8002f6e:	e17b      	b.n	8003268 <cfg_Task+0x78c>
				}
			}
			else if( cfg_info.iface[i].rvd_pkt[5] == CFG_CMD_GETVARS )
 8002f70:	4a55      	ldr	r2, [pc, #340]	; (80030c8 <cfg_Task+0x5ec>)
 8002f72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f74:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002f78:	fb01 f303 	mul.w	r3, r1, r3
 8002f7c:	4413      	add	r3, r2
 8002f7e:	f203 2319 	addw	r3, r3, #537	; 0x219
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b10      	cmp	r3, #16
 8002f88:	f040 80a0 	bne.w	80030cc <cfg_Task+0x5f0>
			{
				memcpy(&node_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[6], sizeof(node_id));
 8002f8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f8e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002f92:	fb02 f303 	mul.w	r3, r2, r3
 8002f96:	f203 2316 	addw	r3, r3, #534	; 0x216
 8002f9a:	4a4b      	ldr	r2, [pc, #300]	; (80030c8 <cfg_Task+0x5ec>)
 8002f9c:	4413      	add	r3, r2
 8002f9e:	3304      	adds	r3, #4
 8002fa0:	881b      	ldrh	r3, [r3, #0]
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
				memcpy(&var_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[8], sizeof(var_id));
 8002fa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002faa:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002fae:	fb02 f303 	mul.w	r3, r2, r3
 8002fb2:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8002fb6:	4a44      	ldr	r2, [pc, #272]	; (80030c8 <cfg_Task+0x5ec>)
 8002fb8:	4413      	add	r3, r2
 8002fba:	3304      	adds	r3, #4
 8002fbc:	881b      	ldrh	r3, [r3, #0]
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
				memcpy(&var_num, (uint8_t*)&cfg_info.iface[i].rvd_pkt[10], sizeof(var_num));
 8002fc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fc6:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002fca:	fb02 f303 	mul.w	r3, r2, r3
 8002fce:	f203 231a 	addw	r3, r3, #538	; 0x21a
 8002fd2:	4a3d      	ldr	r2, [pc, #244]	; (80030c8 <cfg_Task+0x5ec>)
 8002fd4:	4413      	add	r3, r2
 8002fd6:	3304      	adds	r3, #4
 8002fd8:	881b      	ldrh	r3, [r3, #0]
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
				if( cfg_GetNode(node_id) != 0 )
 8002fe0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff fb45 	bl	8002674 <cfg_GetNode>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d046      	beq.n	800307e <cfg_Task+0x5a2>
				{
					cfg_AddTxData(i, (uint8_t*)&node_id, 2);
 8002ff0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	f107 0152 	add.w	r1, r7, #82	; 0x52
 8002ff8:	2202      	movs	r2, #2
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 fd34 	bl	8003a68 <cfg_AddTxData>
					cfg_AddTxData(i, (uint8_t*)&var_id, 2);
 8003000:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003002:	b29b      	uxth	r3, r3
 8003004:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003008:	2202      	movs	r2, #2
 800300a:	4618      	mov	r0, r3
 800300c:	f000 fd2c 	bl	8003a68 <cfg_AddTxData>
					for( j = 0; j < var_num; j++ )
 8003010:	2300      	movs	r3, #0
 8003012:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003016:	e021      	b.n	800305c <cfg_Task+0x580>
					{
						if( cfg_GetNode(node_id)->var_get_func(var_id + j, &var_val) == CFG_ERROR_NONE ){
 8003018:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff fb29 	bl	8002674 <cfg_GetNode>
 8003022:	4603      	mov	r3, r0
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 800302a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800302e:	440a      	add	r2, r1
 8003030:	b292      	uxth	r2, r2
 8003032:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003036:	4610      	mov	r0, r2
 8003038:	4798      	blx	r3
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d114      	bne.n	800306a <cfg_Task+0x58e>
							cfg_AddTxData(i, (uint8_t*)&var_val, 4);
 8003040:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003042:	b29b      	uxth	r3, r3
 8003044:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003048:	2204      	movs	r2, #4
 800304a:	4618      	mov	r0, r3
 800304c:	f000 fd0c 	bl	8003a68 <cfg_AddTxData>
					for( j = 0; j < var_num; j++ )
 8003050:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003054:	3301      	adds	r3, #1
 8003056:	b29b      	uxth	r3, r3
 8003058:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800305c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003060:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003064:	429a      	cmp	r2, r3
 8003066:	d3d7      	bcc.n	8003018 <cfg_Task+0x53c>
 8003068:	e000      	b.n	800306c <cfg_Task+0x590>
						}
						else{
							break;
 800306a:	bf00      	nop
						}
					}
					cfg_IntertTxData(i, 9, (uint8_t*)&j, 2); /*insert number of parameters (variables)*/
 800306c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800306e:	b298      	uxth	r0, r3
 8003070:	f107 0246 	add.w	r2, r7, #70	; 0x46
 8003074:	2302      	movs	r3, #2
 8003076:	2109      	movs	r1, #9
 8003078:	f000 fd48 	bl	8003b0c <cfg_IntertTxData>
 800307c:	e0f4      	b.n	8003268 <cfg_Task+0x78c>
				}
				else
				{
					cfg_info.iface[i].tx_buf[4] |= 0x80;
 800307e:	4a12      	ldr	r2, [pc, #72]	; (80030c8 <cfg_Task+0x5ec>)
 8003080:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003082:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003086:	fb01 f303 	mul.w	r3, r1, r3
 800308a:	4413      	add	r3, r2
 800308c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	b2db      	uxtb	r3, r3
 8003094:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003098:	b2d8      	uxtb	r0, r3
 800309a:	4a0b      	ldr	r2, [pc, #44]	; (80030c8 <cfg_Task+0x5ec>)
 800309c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800309e:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80030a2:	fb01 f303 	mul.w	r3, r1, r3
 80030a6:	4413      	add	r3, r2
 80030a8:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80030ac:	4602      	mov	r2, r0
 80030ae:	701a      	strb	r2, [r3, #0]
					tmp_u8 = CFG_CMD_ERROR_NODEID;
 80030b0:	2303      	movs	r3, #3
 80030b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					cfg_AddTxData(i, (uint8_t*)&tmp_u8, 1);
 80030b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	f107 0157 	add.w	r1, r7, #87	; 0x57
 80030be:	2201      	movs	r2, #1
 80030c0:	4618      	mov	r0, r3
 80030c2:	f000 fcd1 	bl	8003a68 <cfg_AddTxData>
 80030c6:	e0cf      	b.n	8003268 <cfg_Task+0x78c>
 80030c8:	200003ec 	.word	0x200003ec
				}
			}
			else if( cfg_info.iface[i].rvd_pkt[5] == CFG_CMD_SETVARS )
 80030cc:	4a8e      	ldr	r2, [pc, #568]	; (8003308 <cfg_Task+0x82c>)
 80030ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030d0:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80030d4:	fb01 f303 	mul.w	r3, r1, r3
 80030d8:	4413      	add	r3, r2
 80030da:	f203 2319 	addw	r3, r3, #537	; 0x219
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b11      	cmp	r3, #17
 80030e4:	f040 80c0 	bne.w	8003268 <cfg_Task+0x78c>
			{
				memcpy(&node_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[6], sizeof(node_id));
 80030e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030ea:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80030ee:	fb02 f303 	mul.w	r3, r2, r3
 80030f2:	f203 2316 	addw	r3, r3, #534	; 0x216
 80030f6:	4a84      	ldr	r2, [pc, #528]	; (8003308 <cfg_Task+0x82c>)
 80030f8:	4413      	add	r3, r2
 80030fa:	3304      	adds	r3, #4
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	b29b      	uxth	r3, r3
 8003100:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
				memcpy(&var_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[8], sizeof(var_id));
 8003104:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003106:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800310a:	fb02 f303 	mul.w	r3, r2, r3
 800310e:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8003112:	4a7d      	ldr	r2, [pc, #500]	; (8003308 <cfg_Task+0x82c>)
 8003114:	4413      	add	r3, r2
 8003116:	3304      	adds	r3, #4
 8003118:	881b      	ldrh	r3, [r3, #0]
 800311a:	b29b      	uxth	r3, r3
 800311c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
				memcpy(&var_num, (uint8_t*)&cfg_info.iface[i].rvd_pkt[10], sizeof(var_num));
 8003120:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003122:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8003126:	fb02 f303 	mul.w	r3, r2, r3
 800312a:	f203 231a 	addw	r3, r3, #538	; 0x21a
 800312e:	4a76      	ldr	r2, [pc, #472]	; (8003308 <cfg_Task+0x82c>)
 8003130:	4413      	add	r3, r2
 8003132:	3304      	adds	r3, #4
 8003134:	881b      	ldrh	r3, [r3, #0]
 8003136:	b29b      	uxth	r3, r3
 8003138:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
				if( cfg_GetNode(node_id) != 0 )
 800313c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff fa97 	bl	8002674 <cfg_GetNode>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d069      	beq.n	8003220 <cfg_Task+0x744>
				{
					cfg_AddTxData(i, (uint8_t*)&node_id, 2);
 800314c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800314e:	b29b      	uxth	r3, r3
 8003150:	f107 0152 	add.w	r1, r7, #82	; 0x52
 8003154:	2202      	movs	r2, #2
 8003156:	4618      	mov	r0, r3
 8003158:	f000 fc86 	bl	8003a68 <cfg_AddTxData>
					cfg_AddTxData(i, (uint8_t*)&var_id, 2);
 800315c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800315e:	b29b      	uxth	r3, r3
 8003160:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003164:	2202      	movs	r2, #2
 8003166:	4618      	mov	r0, r3
 8003168:	f000 fc7e 	bl	8003a68 <cfg_AddTxData>
					for( j = 0; j < var_num; j++ )
 800316c:	2300      	movs	r3, #0
 800316e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003172:	e046      	b.n	8003202 <cfg_Task+0x726>
					{
						memcpy(&var_val, (uint8_t*)&cfg_info.iface[i].rvd_pkt[12 + (j * 4)], sizeof(var_val));
 8003174:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003178:	3303      	adds	r3, #3
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800317e:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003182:	fb01 f202 	mul.w	r2, r1, r2
 8003186:	4413      	add	r3, r2
 8003188:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800318c:	4a5e      	ldr	r2, [pc, #376]	; (8003308 <cfg_Task+0x82c>)
 800318e:	4413      	add	r3, r2
 8003190:	3304      	adds	r3, #4
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	64bb      	str	r3, [r7, #72]	; 0x48
						if( (cfg_GetNode(node_id)->var_set_func(var_id + j, &var_val) == CFG_ERROR_NONE) &&
 8003196:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff fa6a 	bl	8002674 <cfg_GetNode>
 80031a0:	4603      	mov	r3, r0
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 80031a8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80031ac:	440a      	add	r2, r1
 80031ae:	b292      	uxth	r2, r2
 80031b0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80031b4:	4610      	mov	r0, r2
 80031b6:	4798      	blx	r3
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d127      	bne.n	800320e <cfg_Task+0x732>
								(cfg_GetNode(node_id)->var_get_func(var_id + j, &var_val) == CFG_ERROR_NONE) ){
 80031be:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff fa56 	bl	8002674 <cfg_GetNode>
 80031c8:	4603      	mov	r3, r0
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 80031d0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80031d4:	440a      	add	r2, r1
 80031d6:	b292      	uxth	r2, r2
 80031d8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80031dc:	4610      	mov	r0, r2
 80031de:	4798      	blx	r3
 80031e0:	4603      	mov	r3, r0
						if( (cfg_GetNode(node_id)->var_set_func(var_id + j, &var_val) == CFG_ERROR_NONE) &&
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d113      	bne.n	800320e <cfg_Task+0x732>
							cfg_AddTxData(i, (uint8_t*)&var_val, 4);
 80031e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80031ee:	2204      	movs	r2, #4
 80031f0:	4618      	mov	r0, r3
 80031f2:	f000 fc39 	bl	8003a68 <cfg_AddTxData>
					for( j = 0; j < var_num; j++ )
 80031f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80031fa:	3301      	adds	r3, #1
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003202:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003206:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800320a:	429a      	cmp	r2, r3
 800320c:	d3b2      	bcc.n	8003174 <cfg_Task+0x698>
						}
						else{
							break;
						}
					}
					cfg_IntertTxData(i, 9, (uint8_t*)&j, 2); /*insert number of parameters (variables)*/
 800320e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003210:	b298      	uxth	r0, r3
 8003212:	f107 0246 	add.w	r2, r7, #70	; 0x46
 8003216:	2302      	movs	r3, #2
 8003218:	2109      	movs	r1, #9
 800321a:	f000 fc77 	bl	8003b0c <cfg_IntertTxData>
 800321e:	e023      	b.n	8003268 <cfg_Task+0x78c>
				}
				else
				{
					cfg_info.iface[i].tx_buf[4] |= 0x80;
 8003220:	4a39      	ldr	r2, [pc, #228]	; (8003308 <cfg_Task+0x82c>)
 8003222:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003224:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003228:	fb01 f303 	mul.w	r3, r1, r3
 800322c:	4413      	add	r3, r2
 800322e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	b2db      	uxtb	r3, r3
 8003236:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800323a:	b2d8      	uxtb	r0, r3
 800323c:	4a32      	ldr	r2, [pc, #200]	; (8003308 <cfg_Task+0x82c>)
 800323e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003240:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003244:	fb01 f303 	mul.w	r3, r1, r3
 8003248:	4413      	add	r3, r2
 800324a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800324e:	4602      	mov	r2, r0
 8003250:	701a      	strb	r2, [r3, #0]
					tmp_u8 = CFG_CMD_ERROR_NODEID;
 8003252:	2303      	movs	r3, #3
 8003254:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					cfg_AddTxData(i, (uint8_t*)&tmp_u8, 1);
 8003258:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800325a:	b29b      	uxth	r3, r3
 800325c:	f107 0157 	add.w	r1, r7, #87	; 0x57
 8003260:	2201      	movs	r2, #1
 8003262:	4618      	mov	r0, r3
 8003264:	f000 fc00 	bl	8003a68 <cfg_AddTxData>
			else
			{

			}
			/*data length*/
			tmp_u8 = cfg_info.iface[i].tx_buf_bytes - 4;
 8003268:	4a27      	ldr	r2, [pc, #156]	; (8003308 <cfg_Task+0x82c>)
 800326a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800326c:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003270:	fb01 f303 	mul.w	r3, r1, r3
 8003274:	4413      	add	r3, r2
 8003276:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	b2db      	uxtb	r3, r3
 800327e:	3b04      	subs	r3, #4
 8003280:	b2db      	uxtb	r3, r3
 8003282:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			cfg_IntertTxData(i, 4, &tmp_u8, 1);
 8003286:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003288:	b298      	uxth	r0, r3
 800328a:	f107 0257 	add.w	r2, r7, #87	; 0x57
 800328e:	2301      	movs	r3, #1
 8003290:	2104      	movs	r1, #4
 8003292:	f000 fc3b 	bl	8003b0c <cfg_IntertTxData>
			//crc calc
			tmp_u16 = crc16_calc((uint8_t*)cfg_info.iface[i].tx_buf, cfg_info.iface[i].tx_buf_bytes);
 8003296:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003298:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800329c:	fb02 f303 	mul.w	r3, r2, r3
 80032a0:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80032a4:	4a18      	ldr	r2, [pc, #96]	; (8003308 <cfg_Task+0x82c>)
 80032a6:	441a      	add	r2, r3
 80032a8:	4917      	ldr	r1, [pc, #92]	; (8003308 <cfg_Task+0x82c>)
 80032aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032ac:	f44f 7047 	mov.w	r0, #796	; 0x31c
 80032b0:	fb00 f303 	mul.w	r3, r0, r3
 80032b4:	440b      	add	r3, r1
 80032b6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	b29b      	uxth	r3, r3
 80032be:	4619      	mov	r1, r3
 80032c0:	4610      	mov	r0, r2
 80032c2:	f000 fdd7 	bl	8003e74 <crc16_calc>
 80032c6:	4603      	mov	r3, r0
 80032c8:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
			cfg_AddTxData(i, (uint8_t*)&tmp_u16, 2);
 80032cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80032d4:	2202      	movs	r2, #2
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 fbc6 	bl	8003a68 <cfg_AddTxData>
			cfg_info.iface[i].rvd_pkt_size = 0;
 80032dc:	4a0a      	ldr	r2, [pc, #40]	; (8003308 <cfg_Task+0x82c>)
 80032de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032e0:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80032e4:	fb01 f303 	mul.w	r3, r1, r3
 80032e8:	4413      	add	r3, r2
 80032ea:	f503 7345 	add.w	r3, r3, #788	; 0x314
 80032ee:	2200      	movs	r2, #0
 80032f0:	601a      	str	r2, [r3, #0]
	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 80032f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032f4:	3301      	adds	r3, #1
 80032f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	f67f ac08 	bls.w	8002b10 <cfg_Task+0x34>
		}
	}

	return;
 8003300:	bf00      	nop
}
 8003302:	3764      	adds	r7, #100	; 0x64
 8003304:	46bd      	mov	sp, r7
 8003306:	bd90      	pop	{r4, r7, pc}
 8003308:	200003ec 	.word	0x200003ec

0800330c <cfg_RcvData>:

void cfg_RcvData(uint16_t iface, uint8_t data)
{
 800330c:	b5b0      	push	{r4, r5, r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	4603      	mov	r3, r0
 8003314:	460a      	mov	r2, r1
 8003316:	80fb      	strh	r3, [r7, #6]
 8003318:	4613      	mov	r3, r2
 800331a:	717b      	strb	r3, [r7, #5]
	static uint16_t rcv_size;
	uint16_t header;
	uint16_t dev_id;
	uint16_t crc;

	if( iface >= CFG_IFACE_NUM ){
 800331c:	88fb      	ldrh	r3, [r7, #6]
 800331e:	2b01      	cmp	r3, #1
 8003320:	f200 8164 	bhi.w	80035ec <cfg_RcvData+0x2e0>
		return;
	}

	cfg_info.iface[iface].rx_buf.data[cfg_info.iface[iface].rx_buf.tail =
 8003324:	88fb      	ldrh	r3, [r7, #6]
			(cfg_info.iface[iface].rx_buf.tail + 1) & CFG_BUF_MASK] = data;
 8003326:	88fa      	ldrh	r2, [r7, #6]
 8003328:	49b4      	ldr	r1, [pc, #720]	; (80035fc <cfg_RcvData+0x2f0>)
 800332a:	f44f 7047 	mov.w	r0, #796	; 0x31c
 800332e:	fb00 f202 	mul.w	r2, r0, r2
 8003332:	440a      	add	r2, r1
 8003334:	3204      	adds	r2, #4
 8003336:	8812      	ldrh	r2, [r2, #0]
 8003338:	b292      	uxth	r2, r2
 800333a:	3201      	adds	r2, #1
 800333c:	b291      	uxth	r1, r2
	cfg_info.iface[iface].rx_buf.data[cfg_info.iface[iface].rx_buf.tail =
 800333e:	88fa      	ldrh	r2, [r7, #6]
			(cfg_info.iface[iface].rx_buf.tail + 1) & CFG_BUF_MASK] = data;
 8003340:	b2c9      	uxtb	r1, r1
 8003342:	b28c      	uxth	r4, r1
	cfg_info.iface[iface].rx_buf.data[cfg_info.iface[iface].rx_buf.tail =
 8003344:	49ad      	ldr	r1, [pc, #692]	; (80035fc <cfg_RcvData+0x2f0>)
 8003346:	f44f 7047 	mov.w	r0, #796	; 0x31c
 800334a:	fb00 f202 	mul.w	r2, r0, r2
 800334e:	440a      	add	r2, r1
 8003350:	3204      	adds	r2, #4
 8003352:	4621      	mov	r1, r4
 8003354:	8011      	strh	r1, [r2, #0]
 8003356:	4620      	mov	r0, r4
			(cfg_info.iface[iface].rx_buf.tail + 1) & CFG_BUF_MASK] = data;
 8003358:	4aa8      	ldr	r2, [pc, #672]	; (80035fc <cfg_RcvData+0x2f0>)
 800335a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800335e:	fb01 f303 	mul.w	r3, r1, r3
 8003362:	4413      	add	r3, r2
 8003364:	4403      	add	r3, r0
 8003366:	3308      	adds	r3, #8
 8003368:	797a      	ldrb	r2, [r7, #5]
 800336a:	701a      	strb	r2, [r3, #0]
	//Waiting header
	if( cfg_info.iface[iface].rx_buf.state == RINGBUF_WAIT_HEADER )
 800336c:	88fb      	ldrh	r3, [r7, #6]
 800336e:	4aa3      	ldr	r2, [pc, #652]	; (80035fc <cfg_RcvData+0x2f0>)
 8003370:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003374:	fb01 f303 	mul.w	r3, r1, r3
 8003378:	4413      	add	r3, r2
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d17b      	bne.n	800347a <cfg_RcvData+0x16e>
	{
		//Catch header
		header = cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 8003382:	88fb      	ldrh	r3, [r7, #6]
 8003384:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8003388:	fb02 f303 	mul.w	r3, r2, r3
 800338c:	3308      	adds	r3, #8
 800338e:	4a9b      	ldr	r2, [pc, #620]	; (80035fc <cfg_RcvData+0x2f0>)
 8003390:	441a      	add	r2, r3
				(cfg_info.iface[iface].rx_buf.tail - 4) & CFG_BUF_MASK);
 8003392:	88fb      	ldrh	r3, [r7, #6]
 8003394:	4999      	ldr	r1, [pc, #612]	; (80035fc <cfg_RcvData+0x2f0>)
 8003396:	f44f 7047 	mov.w	r0, #796	; 0x31c
 800339a:	fb00 f303 	mul.w	r3, r0, r3
 800339e:	440b      	add	r3, r1
 80033a0:	3304      	adds	r3, #4
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	3b04      	subs	r3, #4
 80033a8:	b29b      	uxth	r3, r3
		header = cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	4619      	mov	r1, r3
 80033b0:	4610      	mov	r0, r2
 80033b2:	f000 f927 	bl	8003604 <cfg_ringBufRead16b>
 80033b6:	4603      	mov	r3, r0
 80033b8:	817b      	strh	r3, [r7, #10]
		dev_id = cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 80033ba:	88fb      	ldrh	r3, [r7, #6]
 80033bc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80033c0:	fb02 f303 	mul.w	r3, r2, r3
 80033c4:	3308      	adds	r3, #8
 80033c6:	4a8d      	ldr	r2, [pc, #564]	; (80035fc <cfg_RcvData+0x2f0>)
 80033c8:	441a      	add	r2, r3
				(cfg_info.iface[iface].rx_buf.tail - 2) & CFG_BUF_MASK);
 80033ca:	88fb      	ldrh	r3, [r7, #6]
 80033cc:	498b      	ldr	r1, [pc, #556]	; (80035fc <cfg_RcvData+0x2f0>)
 80033ce:	f44f 7047 	mov.w	r0, #796	; 0x31c
 80033d2:	fb00 f303 	mul.w	r3, r0, r3
 80033d6:	440b      	add	r3, r1
 80033d8:	3304      	adds	r3, #4
 80033da:	881b      	ldrh	r3, [r3, #0]
 80033dc:	b29b      	uxth	r3, r3
 80033de:	3b02      	subs	r3, #2
 80033e0:	b29b      	uxth	r3, r3
		dev_id = cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	4619      	mov	r1, r3
 80033e8:	4610      	mov	r0, r2
 80033ea:	f000 f90b 	bl	8003604 <cfg_ringBufRead16b>
 80033ee:	4603      	mov	r3, r0
 80033f0:	813b      	strh	r3, [r7, #8]
		if( (header == CFG_HEADER) && (dev_id == cfg_info.device_id) )
 80033f2:	897b      	ldrh	r3, [r7, #10]
 80033f4:	f64c 62fa 	movw	r2, #52986	; 0xcefa
 80033f8:	4293      	cmp	r3, r2
 80033fa:	f040 80f9 	bne.w	80035f0 <cfg_RcvData+0x2e4>
 80033fe:	4b7f      	ldr	r3, [pc, #508]	; (80035fc <cfg_RcvData+0x2f0>)
 8003400:	f8b3 3638 	ldrh.w	r3, [r3, #1592]	; 0x638
 8003404:	b29b      	uxth	r3, r3
 8003406:	893a      	ldrh	r2, [r7, #8]
 8003408:	429a      	cmp	r2, r3
 800340a:	f040 80f1 	bne.w	80035f0 <cfg_RcvData+0x2e4>
		{
			cfg_info.iface[iface].rx_buf.head = (cfg_info.iface[iface].rx_buf.tail - 4) & CFG_BUF_MASK;
 800340e:	88fb      	ldrh	r3, [r7, #6]
 8003410:	4a7a      	ldr	r2, [pc, #488]	; (80035fc <cfg_RcvData+0x2f0>)
 8003412:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003416:	fb01 f303 	mul.w	r3, r1, r3
 800341a:	4413      	add	r3, r2
 800341c:	3304      	adds	r3, #4
 800341e:	881b      	ldrh	r3, [r3, #0]
 8003420:	b29b      	uxth	r3, r3
 8003422:	3b04      	subs	r3, #4
 8003424:	b29a      	uxth	r2, r3
 8003426:	88fb      	ldrh	r3, [r7, #6]
 8003428:	b2d2      	uxtb	r2, r2
 800342a:	b290      	uxth	r0, r2
 800342c:	4a73      	ldr	r2, [pc, #460]	; (80035fc <cfg_RcvData+0x2f0>)
 800342e:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003432:	fb01 f303 	mul.w	r3, r1, r3
 8003436:	4413      	add	r3, r2
 8003438:	3302      	adds	r3, #2
 800343a:	4602      	mov	r2, r0
 800343c:	801a      	strh	r2, [r3, #0]
			rcv_size = data + 1;
 800343e:	797b      	ldrb	r3, [r7, #5]
 8003440:	b29b      	uxth	r3, r3
 8003442:	3301      	adds	r3, #1
 8003444:	b29a      	uxth	r2, r3
 8003446:	4b6e      	ldr	r3, [pc, #440]	; (8003600 <cfg_RcvData+0x2f4>)
 8003448:	801a      	strh	r2, [r3, #0]
			cfg_info.iface[iface].rx_buf.data_size  = data + 5;
 800344a:	797b      	ldrb	r3, [r7, #5]
 800344c:	b29a      	uxth	r2, r3
 800344e:	88fb      	ldrh	r3, [r7, #6]
 8003450:	3205      	adds	r2, #5
 8003452:	b290      	uxth	r0, r2
 8003454:	4a69      	ldr	r2, [pc, #420]	; (80035fc <cfg_RcvData+0x2f0>)
 8003456:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800345a:	fb01 f303 	mul.w	r3, r1, r3
 800345e:	4413      	add	r3, r2
 8003460:	3306      	adds	r3, #6
 8003462:	4602      	mov	r2, r0
 8003464:	801a      	strh	r2, [r3, #0]
			cfg_info.iface[iface].rx_buf.state = RINGBUF_WAIT_DATA;
 8003466:	88fb      	ldrh	r3, [r7, #6]
 8003468:	4a64      	ldr	r2, [pc, #400]	; (80035fc <cfg_RcvData+0x2f0>)
 800346a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800346e:	fb01 f303 	mul.w	r3, r1, r3
 8003472:	4413      	add	r3, r2
 8003474:	2201      	movs	r2, #1
 8003476:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}

	return;
 8003478:	e0ba      	b.n	80035f0 <cfg_RcvData+0x2e4>
	else if( cfg_info.iface[iface].rx_buf.state == RINGBUF_WAIT_DATA )
 800347a:	88fb      	ldrh	r3, [r7, #6]
 800347c:	4a5f      	ldr	r2, [pc, #380]	; (80035fc <cfg_RcvData+0x2f0>)
 800347e:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003482:	fb01 f303 	mul.w	r3, r1, r3
 8003486:	4413      	add	r3, r2
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2b01      	cmp	r3, #1
 800348e:	f040 80af 	bne.w	80035f0 <cfg_RcvData+0x2e4>
		if( rcv_size-- != 0 ){
 8003492:	4b5b      	ldr	r3, [pc, #364]	; (8003600 <cfg_RcvData+0x2f4>)
 8003494:	881b      	ldrh	r3, [r3, #0]
 8003496:	1e5a      	subs	r2, r3, #1
 8003498:	b291      	uxth	r1, r2
 800349a:	4a59      	ldr	r2, [pc, #356]	; (8003600 <cfg_RcvData+0x2f4>)
 800349c:	8011      	strh	r1, [r2, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f040 80a8 	bne.w	80035f4 <cfg_RcvData+0x2e8>
			cfg_info.iface[iface].rx_buf.state = RINGBUF_WAIT_HEADER;
 80034a4:	88fb      	ldrh	r3, [r7, #6]
 80034a6:	4a55      	ldr	r2, [pc, #340]	; (80035fc <cfg_RcvData+0x2f0>)
 80034a8:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80034ac:	fb01 f303 	mul.w	r3, r1, r3
 80034b0:	4413      	add	r3, r2
 80034b2:	2200      	movs	r2, #0
 80034b4:	701a      	strb	r2, [r3, #0]
			crc = crc16_RingBuf((uint8_t*)cfg_info.iface[iface].rx_buf.data, cfg_info.iface[iface].rx_buf.head,
 80034b6:	88fb      	ldrh	r3, [r7, #6]
 80034b8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80034bc:	fb02 f303 	mul.w	r3, r2, r3
 80034c0:	3308      	adds	r3, #8
 80034c2:	4a4e      	ldr	r2, [pc, #312]	; (80035fc <cfg_RcvData+0x2f0>)
 80034c4:	1898      	adds	r0, r3, r2
 80034c6:	88fb      	ldrh	r3, [r7, #6]
 80034c8:	4a4c      	ldr	r2, [pc, #304]	; (80035fc <cfg_RcvData+0x2f0>)
 80034ca:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80034ce:	fb01 f303 	mul.w	r3, r1, r3
 80034d2:	4413      	add	r3, r2
 80034d4:	3302      	adds	r3, #2
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	b299      	uxth	r1, r3
 80034da:	88fb      	ldrh	r3, [r7, #6]
					cfg_info.iface[iface].rx_buf.data_size, CFG_BUF_MASK);
 80034dc:	4a47      	ldr	r2, [pc, #284]	; (80035fc <cfg_RcvData+0x2f0>)
 80034de:	f44f 7447 	mov.w	r4, #796	; 0x31c
 80034e2:	fb04 f303 	mul.w	r3, r4, r3
 80034e6:	4413      	add	r3, r2
 80034e8:	3306      	adds	r3, #6
 80034ea:	881b      	ldrh	r3, [r3, #0]
 80034ec:	b29a      	uxth	r2, r3
			crc = crc16_RingBuf((uint8_t*)cfg_info.iface[iface].rx_buf.data, cfg_info.iface[iface].rx_buf.head,
 80034ee:	23ff      	movs	r3, #255	; 0xff
 80034f0:	f000 fcea 	bl	8003ec8 <crc16_RingBuf>
 80034f4:	4603      	mov	r3, r0
 80034f6:	81bb      	strh	r3, [r7, #12]
			if( crc == cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 80034f8:	88fb      	ldrh	r3, [r7, #6]
 80034fa:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80034fe:	fb02 f303 	mul.w	r3, r2, r3
 8003502:	3308      	adds	r3, #8
 8003504:	4a3d      	ldr	r2, [pc, #244]	; (80035fc <cfg_RcvData+0x2f0>)
 8003506:	441a      	add	r2, r3
					(cfg_info.iface[iface].rx_buf.tail - 1) & CFG_BUF_MASK) ){
 8003508:	88fb      	ldrh	r3, [r7, #6]
 800350a:	493c      	ldr	r1, [pc, #240]	; (80035fc <cfg_RcvData+0x2f0>)
 800350c:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8003510:	fb00 f303 	mul.w	r3, r0, r3
 8003514:	440b      	add	r3, r1
 8003516:	3304      	adds	r3, #4
 8003518:	881b      	ldrh	r3, [r3, #0]
 800351a:	b29b      	uxth	r3, r3
 800351c:	3b01      	subs	r3, #1
 800351e:	b29b      	uxth	r3, r3
			if( crc == cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 8003520:	b2db      	uxtb	r3, r3
 8003522:	b29b      	uxth	r3, r3
 8003524:	4619      	mov	r1, r3
 8003526:	4610      	mov	r0, r2
 8003528:	f000 f86c 	bl	8003604 <cfg_ringBufRead16b>
 800352c:	4603      	mov	r3, r0
 800352e:	461a      	mov	r2, r3
 8003530:	89bb      	ldrh	r3, [r7, #12]
 8003532:	4293      	cmp	r3, r2
 8003534:	d15c      	bne.n	80035f0 <cfg_RcvData+0x2e4>
				if( cfg_info.iface[iface].rvd_pkt_size == 0 )
 8003536:	88fb      	ldrh	r3, [r7, #6]
 8003538:	4a30      	ldr	r2, [pc, #192]	; (80035fc <cfg_RcvData+0x2f0>)
 800353a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800353e:	fb01 f303 	mul.w	r3, r1, r3
 8003542:	4413      	add	r3, r2
 8003544:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d150      	bne.n	80035f0 <cfg_RcvData+0x2e4>
					for( uint16_t i = 0; i < cfg_info.iface[iface].rx_buf.data_size; i++ ){
 800354e:	2300      	movs	r3, #0
 8003550:	81fb      	strh	r3, [r7, #14]
 8003552:	e028      	b.n	80035a6 <cfg_RcvData+0x29a>
							cfg_info.iface[iface].rx_buf.data[(cfg_info.iface[iface].rx_buf.head + i) & CFG_BUF_MASK];
 8003554:	88f8      	ldrh	r0, [r7, #6]
 8003556:	88fb      	ldrh	r3, [r7, #6]
 8003558:	4a28      	ldr	r2, [pc, #160]	; (80035fc <cfg_RcvData+0x2f0>)
 800355a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800355e:	fb01 f303 	mul.w	r3, r1, r3
 8003562:	4413      	add	r3, r2
 8003564:	3302      	adds	r3, #2
 8003566:	881b      	ldrh	r3, [r3, #0]
 8003568:	b29a      	uxth	r2, r3
 800356a:	89fb      	ldrh	r3, [r7, #14]
 800356c:	4413      	add	r3, r2
 800356e:	b29b      	uxth	r3, r3
 8003570:	b2d9      	uxtb	r1, r3
						cfg_info.iface[iface].rvd_pkt[i] =
 8003572:	88fa      	ldrh	r2, [r7, #6]
 8003574:	89fb      	ldrh	r3, [r7, #14]
							cfg_info.iface[iface].rx_buf.data[(cfg_info.iface[iface].rx_buf.head + i) & CFG_BUF_MASK];
 8003576:	4c21      	ldr	r4, [pc, #132]	; (80035fc <cfg_RcvData+0x2f0>)
 8003578:	f44f 7547 	mov.w	r5, #796	; 0x31c
 800357c:	fb05 f000 	mul.w	r0, r5, r0
 8003580:	4420      	add	r0, r4
 8003582:	4401      	add	r1, r0
 8003584:	3108      	adds	r1, #8
 8003586:	7809      	ldrb	r1, [r1, #0]
 8003588:	b2cc      	uxtb	r4, r1
						cfg_info.iface[iface].rvd_pkt[i] =
 800358a:	491c      	ldr	r1, [pc, #112]	; (80035fc <cfg_RcvData+0x2f0>)
 800358c:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8003590:	fb00 f202 	mul.w	r2, r0, r2
 8003594:	440a      	add	r2, r1
 8003596:	4413      	add	r3, r2
 8003598:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800359c:	4622      	mov	r2, r4
 800359e:	701a      	strb	r2, [r3, #0]
					for( uint16_t i = 0; i < cfg_info.iface[iface].rx_buf.data_size; i++ ){
 80035a0:	89fb      	ldrh	r3, [r7, #14]
 80035a2:	3301      	adds	r3, #1
 80035a4:	81fb      	strh	r3, [r7, #14]
 80035a6:	88fb      	ldrh	r3, [r7, #6]
 80035a8:	4a14      	ldr	r2, [pc, #80]	; (80035fc <cfg_RcvData+0x2f0>)
 80035aa:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80035ae:	fb01 f303 	mul.w	r3, r1, r3
 80035b2:	4413      	add	r3, r2
 80035b4:	3306      	adds	r3, #6
 80035b6:	881b      	ldrh	r3, [r3, #0]
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	89fa      	ldrh	r2, [r7, #14]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d3c9      	bcc.n	8003554 <cfg_RcvData+0x248>
					cfg_info.iface[iface].rvd_pkt_size = cfg_info.iface[iface].rx_buf.data_size;
 80035c0:	88fb      	ldrh	r3, [r7, #6]
 80035c2:	4a0e      	ldr	r2, [pc, #56]	; (80035fc <cfg_RcvData+0x2f0>)
 80035c4:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80035c8:	fb01 f303 	mul.w	r3, r1, r3
 80035cc:	4413      	add	r3, r2
 80035ce:	3306      	adds	r3, #6
 80035d0:	881b      	ldrh	r3, [r3, #0]
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	88fb      	ldrh	r3, [r7, #6]
 80035d6:	4610      	mov	r0, r2
 80035d8:	4a08      	ldr	r2, [pc, #32]	; (80035fc <cfg_RcvData+0x2f0>)
 80035da:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80035de:	fb01 f303 	mul.w	r3, r1, r3
 80035e2:	4413      	add	r3, r2
 80035e4:	f503 7345 	add.w	r3, r3, #788	; 0x314
 80035e8:	6018      	str	r0, [r3, #0]
	return;
 80035ea:	e001      	b.n	80035f0 <cfg_RcvData+0x2e4>
		return;
 80035ec:	bf00      	nop
 80035ee:	e002      	b.n	80035f6 <cfg_RcvData+0x2ea>
	return;
 80035f0:	bf00      	nop
 80035f2:	e000      	b.n	80035f6 <cfg_RcvData+0x2ea>
			return;
 80035f4:	bf00      	nop
}
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bdb0      	pop	{r4, r5, r7, pc}
 80035fc:	200003ec 	.word	0x200003ec
 8003600:	20000a40 	.word	0x20000a40

08003604 <cfg_ringBufRead16b>:

uint16_t cfg_ringBufRead16b(uint8_t *buf, uint16_t pos)
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	460b      	mov	r3, r1
 800360e:	807b      	strh	r3, [r7, #2]
	uint16_t tmp;
	tmp = buf[(pos + 1) & CFG_BUF_MASK] & 0xFF;
 8003610:	887b      	ldrh	r3, [r7, #2]
 8003612:	3301      	adds	r3, #1
 8003614:	b2db      	uxtb	r3, r3
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	4413      	add	r3, r2
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp << 8) + buf[pos];
 800361e:	89fb      	ldrh	r3, [r7, #14]
 8003620:	021b      	lsls	r3, r3, #8
 8003622:	b29a      	uxth	r2, r3
 8003624:	887b      	ldrh	r3, [r7, #2]
 8003626:	6879      	ldr	r1, [r7, #4]
 8003628:	440b      	add	r3, r1
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	b29b      	uxth	r3, r3
 800362e:	4413      	add	r3, r2
 8003630:	81fb      	strh	r3, [r7, #14]
	return tmp;
 8003632:	89fb      	ldrh	r3, [r7, #14]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3714      	adds	r7, #20
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <cfg_SaveSettings>:
	tmp = (tmp << 8) + buf[pos];
	return tmp;
}

void cfg_SaveSettings()
{
 8003640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003644:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 8003648:	b085      	sub	sp, #20
 800364a:	af00      	add	r7, sp, #0
#endif //NO_CFG

	uint16_t i, j;
	uint32_t tmp_var_buf[CFG_MAX_SAVE_PAR_NUM];
	uint16_t var_prop;
	uint16_t var_cnt = 0;
 800364c:	2300      	movs	r3, #0
 800364e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003652:	f102 020a 	add.w	r2, r2, #10
 8003656:	8013      	strh	r3, [r2, #0]
	uint32_t var_crc;

	//Count parameters to be saved
	//Nodes
	for( i = 0; i < cfg_info.node_num; i++ )
 8003658:	2300      	movs	r3, #0
 800365a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800365e:	f102 020e 	add.w	r2, r2, #14
 8003662:	8013      	strh	r3, [r2, #0]
 8003664:	e079      	b.n	800375a <cfg_SaveSettings+0x11a>
	{
		//Parameters (Variables)
		for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 8003666:	2300      	movs	r3, #0
 8003668:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800366c:	f102 020c 	add.w	r2, r2, #12
 8003670:	8013      	strh	r3, [r2, #0]
 8003672:	e053      	b.n	800371c <cfg_SaveSettings+0xdc>
		{
			cfg_NodeList[i].var_prop_func(j, NULL, &var_prop);
 8003674:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003678:	f103 030e 	add.w	r3, r3, #14
 800367c:	881a      	ldrh	r2, [r3, #0]
 800367e:	4981      	ldr	r1, [pc, #516]	; (8003884 <cfg_SaveSettings+0x244>)
 8003680:	4613      	mov	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4413      	add	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	440b      	add	r3, r1
 800368a:	3310      	adds	r3, #16
 800368c:	681e      	ldr	r6, [r3, #0]
 800368e:	f107 0310 	add.w	r3, r7, #16
 8003692:	3b0e      	subs	r3, #14
 8003694:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003698:	f102 020c 	add.w	r2, r2, #12
 800369c:	8810      	ldrh	r0, [r2, #0]
 800369e:	461a      	mov	r2, r3
 80036a0:	2100      	movs	r1, #0
 80036a2:	47b0      	blx	r6
			if( (var_prop & CFG_VAR_PROP_CONST) != 0 )
 80036a4:	f107 0310 	add.w	r3, r7, #16
 80036a8:	f833 3c0e 	ldrh.w	r3, [r3, #-14]
 80036ac:	f003 0320 	and.w	r3, r3, #32
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d028      	beq.n	8003706 <cfg_SaveSettings+0xc6>
			{
				cfg_NodeList[i].var_get_func(j, &tmp_var_buf[var_cnt]);
 80036b4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80036b8:	f103 030e 	add.w	r3, r3, #14
 80036bc:	881a      	ldrh	r2, [r3, #0]
 80036be:	4971      	ldr	r1, [pc, #452]	; (8003884 <cfg_SaveSettings+0x244>)
 80036c0:	4613      	mov	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	440b      	add	r3, r1
 80036ca:	3308      	adds	r3, #8
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80036d2:	f103 030a 	add.w	r3, r3, #10
 80036d6:	8819      	ldrh	r1, [r3, #0]
 80036d8:	f107 0310 	add.w	r3, r7, #16
 80036dc:	3b0c      	subs	r3, #12
 80036de:	0089      	lsls	r1, r1, #2
 80036e0:	4419      	add	r1, r3
 80036e2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80036e6:	f103 030c 	add.w	r3, r3, #12
 80036ea:	881b      	ldrh	r3, [r3, #0]
 80036ec:	4618      	mov	r0, r3
 80036ee:	4790      	blx	r2
				var_cnt += 1;
 80036f0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80036f4:	f103 030a 	add.w	r3, r3, #10
 80036f8:	881b      	ldrh	r3, [r3, #0]
 80036fa:	3301      	adds	r3, #1
 80036fc:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003700:	f102 020a 	add.w	r2, r2, #10
 8003704:	8013      	strh	r3, [r2, #0]
		for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 8003706:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800370a:	f103 030c 	add.w	r3, r3, #12
 800370e:	881b      	ldrh	r3, [r3, #0]
 8003710:	3301      	adds	r3, #1
 8003712:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003716:	f102 020c 	add.w	r2, r2, #12
 800371a:	8013      	strh	r3, [r2, #0]
 800371c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003720:	f103 030e 	add.w	r3, r3, #14
 8003724:	881a      	ldrh	r2, [r3, #0]
 8003726:	4957      	ldr	r1, [pc, #348]	; (8003884 <cfg_SaveSettings+0x244>)
 8003728:	4613      	mov	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	3304      	adds	r3, #4
 8003734:	881b      	ldrh	r3, [r3, #0]
 8003736:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800373a:	f102 020c 	add.w	r2, r2, #12
 800373e:	8812      	ldrh	r2, [r2, #0]
 8003740:	429a      	cmp	r2, r3
 8003742:	d397      	bcc.n	8003674 <cfg_SaveSettings+0x34>
	for( i = 0; i < cfg_info.node_num; i++ )
 8003744:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003748:	f103 030e 	add.w	r3, r3, #14
 800374c:	881b      	ldrh	r3, [r3, #0]
 800374e:	3301      	adds	r3, #1
 8003750:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003754:	f102 020e 	add.w	r2, r2, #14
 8003758:	8013      	strh	r3, [r2, #0]
 800375a:	4b4b      	ldr	r3, [pc, #300]	; (8003888 <cfg_SaveSettings+0x248>)
 800375c:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 8003760:	b29b      	uxth	r3, r3
 8003762:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003766:	f102 020e 	add.w	r2, r2, #14
 800376a:	8812      	ldrh	r2, [r2, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	f4ff af7a 	bcc.w	8003666 <cfg_SaveSettings+0x26>
			}
		}
	}
	//Writing array to flash (parameters + parameters number + crc)
	if( (var_cnt > 0) && (var_cnt < (CFG_MAX_SAVE_PAR_NUM - 2)) )
 8003772:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003776:	f103 030a 	add.w	r3, r3, #10
 800377a:	881b      	ldrh	r3, [r3, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d07a      	beq.n	8003876 <cfg_SaveSettings+0x236>
 8003780:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003784:	f103 030a 	add.w	r3, r3, #10
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	f240 32fd 	movw	r2, #1021	; 0x3fd
 800378e:	4293      	cmp	r3, r2
 8003790:	d871      	bhi.n	8003876 <cfg_SaveSettings+0x236>
	{
		var_crc = crc32_calc(0, tmp_var_buf, var_cnt);
 8003792:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003796:	f103 030a 	add.w	r3, r3, #10
 800379a:	881a      	ldrh	r2, [r3, #0]
 800379c:	f107 0310 	add.w	r3, r7, #16
 80037a0:	3b0c      	subs	r3, #12
 80037a2:	4619      	mov	r1, r3
 80037a4:	2000      	movs	r0, #0
 80037a6:	f000 fbc7 	bl	8003f38 <crc32_calc>
 80037aa:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80037ae:	f103 0304 	add.w	r3, r3, #4
 80037b2:	6018      	str	r0, [r3, #0]
		HAL_FLASH_Unlock();
 80037b4:	f008 ff76 	bl	800c6a4 <HAL_FLASH_Unlock>
		//Erase sector which stores parameters array
		FLASH_Erase_Sector(FLASH_SECTOR_7, FLASH_VOLTAGE_RANGE_3);
 80037b8:	2102      	movs	r1, #2
 80037ba:	2007      	movs	r0, #7
 80037bc:	f009 f8e4 	bl	800c988 <FLASH_Erase_Sector>
		//Write number of parameters
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)param_arr, (uint64_t)var_cnt);
 80037c0:	4932      	ldr	r1, [pc, #200]	; (800388c <cfg_SaveSettings+0x24c>)
 80037c2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80037c6:	f103 030a 	add.w	r3, r3, #10
 80037ca:	881b      	ldrh	r3, [r3, #0]
 80037cc:	2200      	movs	r2, #0
 80037ce:	469a      	mov	sl, r3
 80037d0:	4693      	mov	fp, r2
 80037d2:	4652      	mov	r2, sl
 80037d4:	465b      	mov	r3, fp
 80037d6:	2002      	movs	r0, #2
 80037d8:	f008 ff10 	bl	800c5fc <HAL_FLASH_Program>
		//Write CRC
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)param_arr + 4, (uint64_t)var_crc);
 80037dc:	4b2b      	ldr	r3, [pc, #172]	; (800388c <cfg_SaveSettings+0x24c>)
 80037de:	1d19      	adds	r1, r3, #4
 80037e0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80037e4:	f103 0304 	add.w	r3, r3, #4
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2200      	movs	r2, #0
 80037ec:	4698      	mov	r8, r3
 80037ee:	4691      	mov	r9, r2
 80037f0:	4642      	mov	r2, r8
 80037f2:	464b      	mov	r3, r9
 80037f4:	2002      	movs	r0, #2
 80037f6:	f008 ff01 	bl	800c5fc <HAL_FLASH_Program>
		//Write parameters
		for(i = 0; i < var_cnt; i++ ){
 80037fa:	2300      	movs	r3, #0
 80037fc:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003800:	f102 020e 	add.w	r2, r2, #14
 8003804:	8013      	strh	r3, [r2, #0]
 8003806:	e027      	b.n	8003858 <cfg_SaveSettings+0x218>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)param_arr + 8 + (i * 4), (uint64_t)tmp_var_buf[i]);
 8003808:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800380c:	f103 030e 	add.w	r3, r3, #14
 8003810:	881b      	ldrh	r3, [r3, #0]
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	461a      	mov	r2, r3
 8003816:	4b1d      	ldr	r3, [pc, #116]	; (800388c <cfg_SaveSettings+0x24c>)
 8003818:	3308      	adds	r3, #8
 800381a:	18d1      	adds	r1, r2, r3
 800381c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003820:	f103 030e 	add.w	r3, r3, #14
 8003824:	881b      	ldrh	r3, [r3, #0]
 8003826:	f107 0210 	add.w	r2, r7, #16
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4413      	add	r3, r2
 800382e:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8003832:	2200      	movs	r2, #0
 8003834:	461c      	mov	r4, r3
 8003836:	4615      	mov	r5, r2
 8003838:	4622      	mov	r2, r4
 800383a:	462b      	mov	r3, r5
 800383c:	2002      	movs	r0, #2
 800383e:	f008 fedd 	bl	800c5fc <HAL_FLASH_Program>
		for(i = 0; i < var_cnt; i++ ){
 8003842:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003846:	f103 030e 	add.w	r3, r3, #14
 800384a:	881b      	ldrh	r3, [r3, #0]
 800384c:	3301      	adds	r3, #1
 800384e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003852:	f102 020e 	add.w	r2, r2, #14
 8003856:	8013      	strh	r3, [r2, #0]
 8003858:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800385c:	f103 030e 	add.w	r3, r3, #14
 8003860:	881a      	ldrh	r2, [r3, #0]
 8003862:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003866:	f103 030a 	add.w	r3, r3, #10
 800386a:	881b      	ldrh	r3, [r3, #0]
 800386c:	429a      	cmp	r2, r3
 800386e:	d3cb      	bcc.n	8003808 <cfg_SaveSettings+0x1c8>
		}
		HAL_FLASH_Lock();
 8003870:	f008 ff3a 	bl	800c6e8 <HAL_FLASH_Lock>

	}

	return;
 8003874:	bf00      	nop
 8003876:	bf00      	nop
}
 8003878:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 800387c:	3714      	adds	r7, #20
 800387e:	46bd      	mov	sp, r7
 8003880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003884:	20000030 	.word	0x20000030
 8003888:	200003ec 	.word	0x200003ec
 800388c:	08060000 	.word	0x08060000

08003890 <cfg_LoadSettings>:

void cfg_LoadSettings()
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
#ifdef NO_CFG
	return;
#endif //NO_CFG

	uint16_t i, j;
	uint16_t var_prop = 0;
 8003896:	2300      	movs	r3, #0
 8003898:	80fb      	strh	r3, [r7, #6]
	uint16_t var_cnt = 0;
 800389a:	2300      	movs	r3, #0
 800389c:	827b      	strh	r3, [r7, #18]
	uint16_t load_var_cnt = 0;
 800389e:	2300      	movs	r3, #0
 80038a0:	823b      	strh	r3, [r7, #16]
	uint32_t var_num = param_arr[0]; /* Number of stored parameters */
 80038a2:	4b4e      	ldr	r3, [pc, #312]	; (80039dc <cfg_LoadSettings+0x14c>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	60fb      	str	r3, [r7, #12]
	uint32_t var_crc = param_arr[1];
 80038a8:	4b4c      	ldr	r3, [pc, #304]	; (80039dc <cfg_LoadSettings+0x14c>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	60bb      	str	r3, [r7, #8]

	if( (var_num > 0) && (var_num < (CFG_MAX_SAVE_PAR_NUM - 2)) )
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 808e 	beq.w	80039d2 <cfg_LoadSettings+0x142>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f240 32fd 	movw	r2, #1021	; 0x3fd
 80038bc:	4293      	cmp	r3, r2
 80038be:	f200 8088 	bhi.w	80039d2 <cfg_LoadSettings+0x142>
	{
		//Count parameters to be saved
		//Nodes
		for( i = 0; i < cfg_info.node_num; i++ )
 80038c2:	2300      	movs	r3, #0
 80038c4:	82fb      	strh	r3, [r7, #22]
 80038c6:	e029      	b.n	800391c <cfg_LoadSettings+0x8c>
		{
			//Parameters (Variables)
			for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 80038c8:	2300      	movs	r3, #0
 80038ca:	82bb      	strh	r3, [r7, #20]
 80038cc:	e017      	b.n	80038fe <cfg_LoadSettings+0x6e>
			{
				cfg_NodeList[i].var_prop_func(j, NULL, &var_prop);
 80038ce:	8afa      	ldrh	r2, [r7, #22]
 80038d0:	4943      	ldr	r1, [pc, #268]	; (80039e0 <cfg_LoadSettings+0x150>)
 80038d2:	4613      	mov	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	4413      	add	r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	440b      	add	r3, r1
 80038dc:	3310      	adds	r3, #16
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	1dba      	adds	r2, r7, #6
 80038e2:	8ab8      	ldrh	r0, [r7, #20]
 80038e4:	2100      	movs	r1, #0
 80038e6:	4798      	blx	r3
				if( (var_prop & CFG_VAR_PROP_CONST) != 0 ){
 80038e8:	88fb      	ldrh	r3, [r7, #6]
 80038ea:	f003 0320 	and.w	r3, r3, #32
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d002      	beq.n	80038f8 <cfg_LoadSettings+0x68>
					var_cnt += 1;
 80038f2:	8a7b      	ldrh	r3, [r7, #18]
 80038f4:	3301      	adds	r3, #1
 80038f6:	827b      	strh	r3, [r7, #18]
			for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 80038f8:	8abb      	ldrh	r3, [r7, #20]
 80038fa:	3301      	adds	r3, #1
 80038fc:	82bb      	strh	r3, [r7, #20]
 80038fe:	8afa      	ldrh	r2, [r7, #22]
 8003900:	4937      	ldr	r1, [pc, #220]	; (80039e0 <cfg_LoadSettings+0x150>)
 8003902:	4613      	mov	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4413      	add	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	440b      	add	r3, r1
 800390c:	3304      	adds	r3, #4
 800390e:	881b      	ldrh	r3, [r3, #0]
 8003910:	8aba      	ldrh	r2, [r7, #20]
 8003912:	429a      	cmp	r2, r3
 8003914:	d3db      	bcc.n	80038ce <cfg_LoadSettings+0x3e>
		for( i = 0; i < cfg_info.node_num; i++ )
 8003916:	8afb      	ldrh	r3, [r7, #22]
 8003918:	3301      	adds	r3, #1
 800391a:	82fb      	strh	r3, [r7, #22]
 800391c:	4b31      	ldr	r3, [pc, #196]	; (80039e4 <cfg_LoadSettings+0x154>)
 800391e:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 8003922:	b29b      	uxth	r3, r3
 8003924:	8afa      	ldrh	r2, [r7, #22]
 8003926:	429a      	cmp	r2, r3
 8003928:	d3ce      	bcc.n	80038c8 <cfg_LoadSettings+0x38>
				}
			}
		}

		//volatile uint32_t t_crc = crc32_calc(0, &param_arr[2], var_cnt);
		if( (var_num == var_cnt) && (var_crc == crc32_calc(0, &param_arr[2], var_cnt)) )
 800392a:	8a7b      	ldrh	r3, [r7, #18]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	429a      	cmp	r2, r3
 8003930:	d14f      	bne.n	80039d2 <cfg_LoadSettings+0x142>
 8003932:	8a7b      	ldrh	r3, [r7, #18]
 8003934:	461a      	mov	r2, r3
 8003936:	492c      	ldr	r1, [pc, #176]	; (80039e8 <cfg_LoadSettings+0x158>)
 8003938:	2000      	movs	r0, #0
 800393a:	f000 fafd 	bl	8003f38 <crc32_calc>
 800393e:	4602      	mov	r2, r0
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	4293      	cmp	r3, r2
 8003944:	d145      	bne.n	80039d2 <cfg_LoadSettings+0x142>
		{
			for( i = 0; i < cfg_info.node_num; i++ )
 8003946:	2300      	movs	r3, #0
 8003948:	82fb      	strh	r3, [r7, #22]
 800394a:	e03a      	b.n	80039c2 <cfg_LoadSettings+0x132>
			{
				//Parameters (Variables)
				for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 800394c:	2300      	movs	r3, #0
 800394e:	82bb      	strh	r3, [r7, #20]
 8003950:	e028      	b.n	80039a4 <cfg_LoadSettings+0x114>
				{
					cfg_NodeList[i].var_prop_func(j, NULL, &var_prop);
 8003952:	8afa      	ldrh	r2, [r7, #22]
 8003954:	4922      	ldr	r1, [pc, #136]	; (80039e0 <cfg_LoadSettings+0x150>)
 8003956:	4613      	mov	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4413      	add	r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	440b      	add	r3, r1
 8003960:	3310      	adds	r3, #16
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	1dba      	adds	r2, r7, #6
 8003966:	8ab8      	ldrh	r0, [r7, #20]
 8003968:	2100      	movs	r1, #0
 800396a:	4798      	blx	r3
					if( (var_prop & CFG_VAR_PROP_CONST) != 0 )
 800396c:	88fb      	ldrh	r3, [r7, #6]
 800396e:	f003 0320 	and.w	r3, r3, #32
 8003972:	2b00      	cmp	r3, #0
 8003974:	d013      	beq.n	800399e <cfg_LoadSettings+0x10e>
					{
						cfg_NodeList[i].var_set_func(j, &param_arr[2 + load_var_cnt]);
 8003976:	8afa      	ldrh	r2, [r7, #22]
 8003978:	4919      	ldr	r1, [pc, #100]	; (80039e0 <cfg_LoadSettings+0x150>)
 800397a:	4613      	mov	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4413      	add	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	440b      	add	r3, r1
 8003984:	330c      	adds	r3, #12
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	8a3a      	ldrh	r2, [r7, #16]
 800398a:	3202      	adds	r2, #2
 800398c:	0092      	lsls	r2, r2, #2
 800398e:	4913      	ldr	r1, [pc, #76]	; (80039dc <cfg_LoadSettings+0x14c>)
 8003990:	4411      	add	r1, r2
 8003992:	8aba      	ldrh	r2, [r7, #20]
 8003994:	4610      	mov	r0, r2
 8003996:	4798      	blx	r3
						load_var_cnt += 1;
 8003998:	8a3b      	ldrh	r3, [r7, #16]
 800399a:	3301      	adds	r3, #1
 800399c:	823b      	strh	r3, [r7, #16]
				for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 800399e:	8abb      	ldrh	r3, [r7, #20]
 80039a0:	3301      	adds	r3, #1
 80039a2:	82bb      	strh	r3, [r7, #20]
 80039a4:	8afa      	ldrh	r2, [r7, #22]
 80039a6:	490e      	ldr	r1, [pc, #56]	; (80039e0 <cfg_LoadSettings+0x150>)
 80039a8:	4613      	mov	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4413      	add	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	440b      	add	r3, r1
 80039b2:	3304      	adds	r3, #4
 80039b4:	881b      	ldrh	r3, [r3, #0]
 80039b6:	8aba      	ldrh	r2, [r7, #20]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d3ca      	bcc.n	8003952 <cfg_LoadSettings+0xc2>
			for( i = 0; i < cfg_info.node_num; i++ )
 80039bc:	8afb      	ldrh	r3, [r7, #22]
 80039be:	3301      	adds	r3, #1
 80039c0:	82fb      	strh	r3, [r7, #22]
 80039c2:	4b08      	ldr	r3, [pc, #32]	; (80039e4 <cfg_LoadSettings+0x154>)
 80039c4:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	8afa      	ldrh	r2, [r7, #22]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d3bd      	bcc.n	800394c <cfg_LoadSettings+0xbc>
				}
			}
		}
	}

	return;
 80039d0:	bf00      	nop
 80039d2:	bf00      	nop
}
 80039d4:	3718      	adds	r7, #24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	08060000 	.word	0x08060000
 80039e0:	20000030 	.word	0x20000030
 80039e4:	200003ec 	.word	0x200003ec
 80039e8:	08060008 	.word	0x08060008

080039ec <cfg_ClearFwBuf>:

void cfg_ClearFwBuf()
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
#ifdef NO_CFG
	return;
#endif //NO_CFG

	HAL_FLASH_Unlock();
 80039f0:	f008 fe58 	bl	800c6a4 <HAL_FLASH_Unlock>
	//todo: calc sectors from addr
	FLASH_Erase_Sector(FLASH_SECTOR_6, FLASH_VOLTAGE_RANGE_3);
 80039f4:	2102      	movs	r1, #2
 80039f6:	2006      	movs	r0, #6
 80039f8:	f008 ffc6 	bl	800c988 <FLASH_Erase_Sector>
	FLASH_Erase_Sector(FLASH_SECTOR_15, FLASH_VOLTAGE_RANGE_3);
	FLASH_Erase_Sector(FLASH_SECTOR_16, FLASH_VOLTAGE_RANGE_3);
	FLASH_Erase_Sector(FLASH_SECTOR_17, FLASH_VOLTAGE_RANGE_3);
	FLASH_Erase_Sector(FLASH_SECTOR_18, FLASH_VOLTAGE_RANGE_3);
	FLASH_Erase_Sector(FLASH_SECTOR_19, FLASH_VOLTAGE_RANGE_3);*/
	HAL_FLASH_Lock();
 80039fc:	f008 fe74 	bl	800c6e8 <HAL_FLASH_Lock>
	cfg_new_fw_cur_addr = (uint32_t)&new_fw_start;
 8003a00:	4a03      	ldr	r2, [pc, #12]	; (8003a10 <cfg_ClearFwBuf+0x24>)
 8003a02:	4b04      	ldr	r3, [pc, #16]	; (8003a14 <cfg_ClearFwBuf+0x28>)
 8003a04:	601a      	str	r2, [r3, #0]
	cfg_new_fw_size = 0;
 8003a06:	4b04      	ldr	r3, [pc, #16]	; (8003a18 <cfg_ClearFwBuf+0x2c>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]

	return;
 8003a0c:	bf00      	nop
}
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	08040000 	.word	0x08040000
 8003a14:	20000a38 	.word	0x20000a38
 8003a18:	20000a3c 	.word	0x20000a3c

08003a1c <cfg_WriteFwData>:

void cfg_WriteFwData(uint32_t data)
{
 8003a1c:	b5b0      	push	{r4, r5, r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
#ifdef NO_CFG
	return;
#endif //NO_CFG

	HAL_FLASH_Unlock();
 8003a24:	f008 fe3e 	bl	800c6a4 <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, cfg_new_fw_cur_addr, (uint64_t)data);
 8003a28:	4b0d      	ldr	r3, [pc, #52]	; (8003a60 <cfg_WriteFwData+0x44>)
 8003a2a:	6819      	ldr	r1, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	461c      	mov	r4, r3
 8003a32:	4615      	mov	r5, r2
 8003a34:	4622      	mov	r2, r4
 8003a36:	462b      	mov	r3, r5
 8003a38:	2002      	movs	r0, #2
 8003a3a:	f008 fddf 	bl	800c5fc <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 8003a3e:	f008 fe53 	bl	800c6e8 <HAL_FLASH_Lock>
	cfg_new_fw_cur_addr += 4;
 8003a42:	4b07      	ldr	r3, [pc, #28]	; (8003a60 <cfg_WriteFwData+0x44>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	3304      	adds	r3, #4
 8003a48:	4a05      	ldr	r2, [pc, #20]	; (8003a60 <cfg_WriteFwData+0x44>)
 8003a4a:	6013      	str	r3, [r2, #0]
	cfg_new_fw_size += 4;
 8003a4c:	4b05      	ldr	r3, [pc, #20]	; (8003a64 <cfg_WriteFwData+0x48>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	3304      	adds	r3, #4
 8003a52:	4a04      	ldr	r2, [pc, #16]	; (8003a64 <cfg_WriteFwData+0x48>)
 8003a54:	6013      	str	r3, [r2, #0]

	return;
 8003a56:	bf00      	nop
}
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bdb0      	pop	{r4, r5, r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	20000a38 	.word	0x20000a38
 8003a64:	20000a3c 	.word	0x20000a3c

08003a68 <cfg_AddTxData>:

void cfg_AddTxData(uint16_t iface, uint8_t *data, uint32_t len)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	4603      	mov	r3, r0
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
 8003a74:	81fb      	strh	r3, [r7, #14]
#ifdef NO_CFG
	return;
#endif //NO_CFG

	if( iface >= CFG_IFACE_NUM ){
 8003a76:	89fb      	ldrh	r3, [r7, #14]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d83e      	bhi.n	8003afa <cfg_AddTxData+0x92>
		return;
	}

	if( len > (CFG_BUF_SIZE - cfg_info.iface[iface].tx_buf_bytes) ){
 8003a7c:	89fb      	ldrh	r3, [r7, #14]
 8003a7e:	4a22      	ldr	r2, [pc, #136]	; (8003b08 <cfg_AddTxData+0xa0>)
 8003a80:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003a84:	fb01 f303 	mul.w	r3, r1, r3
 8003a88:	4413      	add	r3, r2
 8003a8a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d831      	bhi.n	8003afe <cfg_AddTxData+0x96>
		return;
	}
	memcpy((uint8_t*)&cfg_info.iface[iface].tx_buf[cfg_info.iface[iface].tx_buf_bytes], data, len);
 8003a9a:	89fa      	ldrh	r2, [r7, #14]
 8003a9c:	89fb      	ldrh	r3, [r7, #14]
 8003a9e:	491a      	ldr	r1, [pc, #104]	; (8003b08 <cfg_AddTxData+0xa0>)
 8003aa0:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8003aa4:	fb00 f303 	mul.w	r3, r0, r3
 8003aa8:	440b      	add	r3, r1
 8003aaa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003ab4:	fb01 f202 	mul.w	r2, r1, r2
 8003ab8:	4413      	add	r3, r2
 8003aba:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003abe:	4a12      	ldr	r2, [pc, #72]	; (8003b08 <cfg_AddTxData+0xa0>)
 8003ac0:	4413      	add	r3, r2
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	68b9      	ldr	r1, [r7, #8]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f012 fafc 	bl	80160c4 <memcpy>
	cfg_info.iface[iface].tx_buf_bytes += len;
 8003acc:	89fb      	ldrh	r3, [r7, #14]
 8003ace:	4a0e      	ldr	r2, [pc, #56]	; (8003b08 <cfg_AddTxData+0xa0>)
 8003ad0:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003ad4:	fb01 f303 	mul.w	r3, r1, r3
 8003ad8:	4413      	add	r3, r2
 8003ada:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ade:	6819      	ldr	r1, [r3, #0]
 8003ae0:	89fb      	ldrh	r3, [r7, #14]
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	440a      	add	r2, r1
 8003ae6:	4908      	ldr	r1, [pc, #32]	; (8003b08 <cfg_AddTxData+0xa0>)
 8003ae8:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8003aec:	fb00 f303 	mul.w	r3, r0, r3
 8003af0:	440b      	add	r3, r1
 8003af2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003af6:	601a      	str	r2, [r3, #0]

	return;
 8003af8:	e002      	b.n	8003b00 <cfg_AddTxData+0x98>
		return;
 8003afa:	bf00      	nop
 8003afc:	e000      	b.n	8003b00 <cfg_AddTxData+0x98>
		return;
 8003afe:	bf00      	nop
}
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	200003ec 	.word	0x200003ec

08003b0c <cfg_IntertTxData>:

void cfg_IntertTxData(uint16_t iface, uint32_t pos, uint8_t *data, uint32_t len)
{
 8003b0c:	b590      	push	{r4, r7, lr}
 8003b0e:	b0c5      	sub	sp, #276	; 0x114
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	4604      	mov	r4, r0
 8003b14:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8003b18:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 8003b1c:	6001      	str	r1, [r0, #0]
 8003b1e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8003b22:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8003b26:	600a      	str	r2, [r1, #0]
 8003b28:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003b2c:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8003b30:	6013      	str	r3, [r2, #0]
 8003b32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003b36:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003b3a:	4622      	mov	r2, r4
 8003b3c:	801a      	strh	r2, [r3, #0]
	return;
#endif //NO_CFG

	uint8_t tmp_buf[CFG_BUF_SIZE];

	if( iface >= CFG_IFACE_NUM ){
 8003b3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003b42:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003b46:	881b      	ldrh	r3, [r3, #0]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	f200 80c0 	bhi.w	8003cce <cfg_IntertTxData+0x1c2>
		return;
	}
	if( len > (CFG_BUF_SIZE - cfg_info.iface[iface].tx_buf_bytes) ){
 8003b4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003b52:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003b56:	881b      	ldrh	r3, [r3, #0]
 8003b58:	4a61      	ldr	r2, [pc, #388]	; (8003ce0 <cfg_IntertTxData+0x1d4>)
 8003b5a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003b5e:	fb01 f303 	mul.w	r3, r1, r3
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8003b6e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003b72:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8003b76:	6812      	ldr	r2, [r2, #0]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	f200 80aa 	bhi.w	8003cd2 <cfg_IntertTxData+0x1c6>
		return;
	}
	if( pos >= CFG_BUF_SIZE ){
 8003b7e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003b82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2bff      	cmp	r3, #255	; 0xff
 8003b8a:	f200 80a4 	bhi.w	8003cd6 <cfg_IntertTxData+0x1ca>
	/*tmp_buf = malloc(cfg_info.iface[iface].tx_buf_bytes - pos);
	if( tmp_buf == 0 )
	{
		tmp_buf = 1;
	}*/
	memcpy(tmp_buf, (uint8_t*)&cfg_info.iface[iface].tx_buf[pos], cfg_info.iface[iface].tx_buf_bytes - pos);
 8003b8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003b92:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003b96:	881b      	ldrh	r3, [r3, #0]
 8003b98:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8003b9c:	fb03 f202 	mul.w	r2, r3, r2
 8003ba0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003ba4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4413      	add	r3, r2
 8003bac:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003bb0:	4a4b      	ldr	r2, [pc, #300]	; (8003ce0 <cfg_IntertTxData+0x1d4>)
 8003bb2:	1899      	adds	r1, r3, r2
 8003bb4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003bb8:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003bbc:	881b      	ldrh	r3, [r3, #0]
 8003bbe:	4a48      	ldr	r2, [pc, #288]	; (8003ce0 <cfg_IntertTxData+0x1d4>)
 8003bc0:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8003bc4:	fb00 f303 	mul.w	r3, r0, r3
 8003bc8:	4413      	add	r3, r2
 8003bca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003bd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	1ad2      	subs	r2, r2, r3
 8003bdc:	f107 0310 	add.w	r3, r7, #16
 8003be0:	4618      	mov	r0, r3
 8003be2:	f012 fa6f 	bl	80160c4 <memcpy>
	memcpy((uint8_t*)&cfg_info.iface[iface].tx_buf[pos], data, len);
 8003be6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003bea:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003bee:	881b      	ldrh	r3, [r3, #0]
 8003bf0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8003bf4:	fb03 f202 	mul.w	r2, r3, r2
 8003bf8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003bfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4413      	add	r3, r2
 8003c04:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003c08:	4a35      	ldr	r2, [pc, #212]	; (8003ce0 <cfg_IntertTxData+0x1d4>)
 8003c0a:	1898      	adds	r0, r3, r2
 8003c0c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003c10:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8003c14:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003c18:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003c1c:	6812      	ldr	r2, [r2, #0]
 8003c1e:	6819      	ldr	r1, [r3, #0]
 8003c20:	f012 fa50 	bl	80160c4 <memcpy>
	memcpy((uint8_t*)&cfg_info.iface[iface].tx_buf[pos + len], tmp_buf, cfg_info.iface[iface].tx_buf_bytes - pos);
 8003c24:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003c28:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003c2c:	881a      	ldrh	r2, [r3, #0]
 8003c2e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003c32:	f5a3 7184 	sub.w	r1, r3, #264	; 0x108
 8003c36:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003c3a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003c3e:	6809      	ldr	r1, [r1, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	440b      	add	r3, r1
 8003c44:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003c48:	fb01 f202 	mul.w	r2, r1, r2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003c52:	4a23      	ldr	r2, [pc, #140]	; (8003ce0 <cfg_IntertTxData+0x1d4>)
 8003c54:	1898      	adds	r0, r3, r2
 8003c56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003c5a:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003c5e:	881b      	ldrh	r3, [r3, #0]
 8003c60:	4a1f      	ldr	r2, [pc, #124]	; (8003ce0 <cfg_IntertTxData+0x1d4>)
 8003c62:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003c66:	fb01 f303 	mul.w	r3, r1, r3
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003c76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	1ad2      	subs	r2, r2, r3
 8003c7e:	f107 0310 	add.w	r3, r7, #16
 8003c82:	4619      	mov	r1, r3
 8003c84:	f012 fa1e 	bl	80160c4 <memcpy>
	//free(tmp_buf);
	cfg_info.iface[iface].tx_buf_bytes += len;
 8003c88:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003c8c:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003c90:	881b      	ldrh	r3, [r3, #0]
 8003c92:	4a13      	ldr	r2, [pc, #76]	; (8003ce0 <cfg_IntertTxData+0x1d4>)
 8003c94:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003c98:	fb01 f303 	mul.w	r3, r1, r3
 8003c9c:	4413      	add	r3, r2
 8003c9e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ca2:	6819      	ldr	r1, [r3, #0]
 8003ca4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003ca8:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003cac:	881b      	ldrh	r3, [r3, #0]
 8003cae:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003cb2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8003cb6:	6812      	ldr	r2, [r2, #0]
 8003cb8:	440a      	add	r2, r1
 8003cba:	4909      	ldr	r1, [pc, #36]	; (8003ce0 <cfg_IntertTxData+0x1d4>)
 8003cbc:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8003cc0:	fb00 f303 	mul.w	r3, r0, r3
 8003cc4:	440b      	add	r3, r1
 8003cc6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003cca:	601a      	str	r2, [r3, #0]

	return;
 8003ccc:	e004      	b.n	8003cd8 <cfg_IntertTxData+0x1cc>
		return;
 8003cce:	bf00      	nop
 8003cd0:	e002      	b.n	8003cd8 <cfg_IntertTxData+0x1cc>
		return;
 8003cd2:	bf00      	nop
 8003cd4:	e000      	b.n	8003cd8 <cfg_IntertTxData+0x1cc>
		return;
 8003cd6:	bf00      	nop
}
 8003cd8:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd90      	pop	{r4, r7, pc}
 8003ce0:	200003ec 	.word	0x200003ec

08003ce4 <cfg_RemTxData>:

void cfg_RemTxData(uint16_t iface, uint32_t len)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b0c2      	sub	sp, #264	; 0x108
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	4602      	mov	r2, r0
 8003cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cf4:	6019      	str	r1, [r3, #0]
 8003cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cfa:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003cfe:	801a      	strh	r2, [r3, #0]
	return;
#endif //NO_CFG

	uint8_t tmp_buf[CFG_BUF_SIZE];

	if( (len > cfg_info.iface[iface].tx_buf_bytes)
 8003d00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d04:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003d08:	881b      	ldrh	r3, [r3, #0]
 8003d0a:	4a4a      	ldr	r2, [pc, #296]	; (8003e34 <cfg_RemTxData+0x150>)
 8003d0c:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003d10:	fb01 f303 	mul.w	r3, r1, r3
 8003d14:	4413      	add	r3, r2
 8003d16:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8003d20:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8003d24:	6812      	ldr	r2, [r2, #0]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d87f      	bhi.n	8003e2a <cfg_RemTxData+0x146>
			|| (len == 0) || (cfg_info.iface[iface].tx_buf_bytes == 0) ){
 8003d2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d078      	beq.n	8003e2a <cfg_RemTxData+0x146>
 8003d38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d3c:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	4a3c      	ldr	r2, [pc, #240]	; (8003e34 <cfg_RemTxData+0x150>)
 8003d44:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003d48:	fb01 f303 	mul.w	r3, r1, r3
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d068      	beq.n	8003e2a <cfg_RemTxData+0x146>
		return;
	}
	cfg_info.iface[iface].tx_buf_bytes -= len;
 8003d58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d5c:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003d60:	881b      	ldrh	r3, [r3, #0]
 8003d62:	4a34      	ldr	r2, [pc, #208]	; (8003e34 <cfg_RemTxData+0x150>)
 8003d64:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003d68:	fb01 f303 	mul.w	r3, r1, r3
 8003d6c:	4413      	add	r3, r2
 8003d6e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d72:	6819      	ldr	r1, [r3, #0]
 8003d74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d78:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003d7c:	881b      	ldrh	r3, [r3, #0]
 8003d7e:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8003d82:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8003d86:	6812      	ldr	r2, [r2, #0]
 8003d88:	1a8a      	subs	r2, r1, r2
 8003d8a:	492a      	ldr	r1, [pc, #168]	; (8003e34 <cfg_RemTxData+0x150>)
 8003d8c:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8003d90:	fb00 f303 	mul.w	r3, r0, r3
 8003d94:	440b      	add	r3, r1
 8003d96:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d9a:	601a      	str	r2, [r3, #0]
	//tmp_buf = malloc(cfg_info.iface[iface].tx_buf_bytes);
	memcpy(tmp_buf, (uint8_t*)&cfg_info.iface[iface].tx_buf[len], cfg_info.iface[iface].tx_buf_bytes);
 8003d9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003da0:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003da4:	881b      	ldrh	r3, [r3, #0]
 8003da6:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8003daa:	fb03 f202 	mul.w	r2, r3, r2
 8003dae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003db2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4413      	add	r3, r2
 8003dba:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003dbe:	4a1d      	ldr	r2, [pc, #116]	; (8003e34 <cfg_RemTxData+0x150>)
 8003dc0:	1899      	adds	r1, r3, r2
 8003dc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003dc6:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003dca:	881b      	ldrh	r3, [r3, #0]
 8003dcc:	4a19      	ldr	r2, [pc, #100]	; (8003e34 <cfg_RemTxData+0x150>)
 8003dce:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8003dd2:	fb00 f303 	mul.w	r3, r0, r3
 8003dd6:	4413      	add	r3, r2
 8003dd8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	f107 0308 	add.w	r3, r7, #8
 8003de2:	4618      	mov	r0, r3
 8003de4:	f012 f96e 	bl	80160c4 <memcpy>
	memcpy((uint8_t*)cfg_info.iface[iface].tx_buf, tmp_buf, cfg_info.iface[iface].tx_buf_bytes);
 8003de8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003dec:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8003df6:	fb02 f303 	mul.w	r3, r2, r3
 8003dfa:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003dfe:	4a0d      	ldr	r2, [pc, #52]	; (8003e34 <cfg_RemTxData+0x150>)
 8003e00:	1898      	adds	r0, r3, r2
 8003e02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e06:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003e0a:	881b      	ldrh	r3, [r3, #0]
 8003e0c:	4a09      	ldr	r2, [pc, #36]	; (8003e34 <cfg_RemTxData+0x150>)
 8003e0e:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003e12:	fb01 f303 	mul.w	r3, r1, r3
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	f107 0308 	add.w	r3, r7, #8
 8003e22:	4619      	mov	r1, r3
 8003e24:	f012 f94e 	bl	80160c4 <memcpy>
	//free(tmp_buf);

	return;
 8003e28:	e000      	b.n	8003e2c <cfg_RemTxData+0x148>
		return;
 8003e2a:	bf00      	nop
}
 8003e2c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	200003ec 	.word	0x200003ec

08003e38 <cfg_TxDataCh0>:

void cfg_TxDataCh0(uint8_t *data, uint32_t len)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
#ifdef NO_CFG
	return;
#endif //NO_CFG

	modem_TrmData(SYSTEM_CFG_MODEM_CH, data, len);
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	6879      	ldr	r1, [r7, #4]
 8003e46:	2001      	movs	r0, #1
 8003e48:	f005 fa04 	bl	8009254 <modem_TrmData>
	//HAL_UART_Transmit(&HAL_CFG_UART, data, len, HAL_MAX_DELAY);

	return;
 8003e4c:	bf00      	nop
}
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <cfg_TxDataCh1USB>:

void cfg_TxDataCh1USB(uint8_t *data, uint32_t len)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
#ifdef NO_CFG
	return;
#endif //NO_CFG

	CDC_Transmit_FS(data, (uint16_t)len);
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	4619      	mov	r1, r3
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f011 fca9 	bl	80157bc <CDC_Transmit_FS>
	//modem_TrmData(SYSTEM_CFG_MODEM_CH, data, len);
	//HAL_UART_Transmit(&HAL_CFG_UART, data, len, HAL_MAX_DELAY);

	return;
 8003e6a:	bf00      	nop
}
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
	...

08003e74 <crc16_calc>:
	    0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641,
	    0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040
};

uint16_t crc16_calc(uint8_t *buf, uint16_t len)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	807b      	strh	r3, [r7, #2]
	uint8_t *data = buf;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	60fb      	str	r3, [r7, #12]
	uint16_t crc = 0xFFFF;
 8003e84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e88:	817b      	strh	r3, [r7, #10]
	while( len-- )
 8003e8a:	e00e      	b.n	8003eaa <crc16_calc+0x36>
		crc = ( crc >> 8 ) ^ crc16_table[(crc & 0xFF) ^ (*data++ & 0xFF)];
 8003e8c:	897b      	ldrh	r3, [r7, #10]
 8003e8e:	0a1b      	lsrs	r3, r3, #8
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	897b      	ldrh	r3, [r7, #10]
 8003e94:	b2d9      	uxtb	r1, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	1c58      	adds	r0, r3, #1
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	404b      	eors	r3, r1
 8003ea0:	4908      	ldr	r1, [pc, #32]	; (8003ec4 <crc16_calc+0x50>)
 8003ea2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003ea6:	4053      	eors	r3, r2
 8003ea8:	817b      	strh	r3, [r7, #10]
	while( len-- )
 8003eaa:	887b      	ldrh	r3, [r7, #2]
 8003eac:	1e5a      	subs	r2, r3, #1
 8003eae:	807a      	strh	r2, [r7, #2]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1eb      	bne.n	8003e8c <crc16_calc+0x18>
	return crc;
 8003eb4:	897b      	ldrh	r3, [r7, #10]
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3714      	adds	r7, #20
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	08016c30 	.word	0x08016c30

08003ec8 <crc16_RingBuf>:

uint16_t crc16_RingBuf(uint8_t *buf, uint16_t tail, uint16_t len, uint16_t mask)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b087      	sub	sp, #28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	4608      	mov	r0, r1
 8003ed2:	4611      	mov	r1, r2
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	817b      	strh	r3, [r7, #10]
 8003eda:	460b      	mov	r3, r1
 8003edc:	813b      	strh	r3, [r7, #8]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	80fb      	strh	r3, [r7, #6]
	uint16_t crc = 0xFFFF;
 8003ee2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ee6:	82fb      	strh	r3, [r7, #22]
	while( len-- )
 8003ee8:	e017      	b.n	8003f1a <crc16_RingBuf+0x52>
	{
		crc = ( crc >> 8 ) ^ crc16_table[(crc & 0xFF) ^ (buf[tail] & 0xFF)];
 8003eea:	8afb      	ldrh	r3, [r7, #22]
 8003eec:	0a1b      	lsrs	r3, r3, #8
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	8afb      	ldrh	r3, [r7, #22]
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	8979      	ldrh	r1, [r7, #10]
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	4401      	add	r1, r0
 8003efa:	7809      	ldrb	r1, [r1, #0]
 8003efc:	404b      	eors	r3, r1
 8003efe:	490d      	ldr	r1, [pc, #52]	; (8003f34 <crc16_RingBuf+0x6c>)
 8003f00:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003f04:	4053      	eors	r3, r2
 8003f06:	82fb      	strh	r3, [r7, #22]
		tail = (tail + 1) & mask;
 8003f08:	897b      	ldrh	r3, [r7, #10]
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	b21a      	sxth	r2, r3
 8003f10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f14:	4013      	ands	r3, r2
 8003f16:	b21b      	sxth	r3, r3
 8003f18:	817b      	strh	r3, [r7, #10]
	while( len-- )
 8003f1a:	893b      	ldrh	r3, [r7, #8]
 8003f1c:	1e5a      	subs	r2, r3, #1
 8003f1e:	813a      	strh	r2, [r7, #8]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1e2      	bne.n	8003eea <crc16_RingBuf+0x22>
	}
	return crc;
 8003f24:	8afb      	ldrh	r3, [r7, #22]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	371c      	adds	r7, #28
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	08016c30 	.word	0x08016c30

08003f38 <crc32_calc>:
  0xafb010b1, 0xab710d06, 0xa6322bdf, 0xa2f33668,
  0xbcb4666d, 0xb8757bda, 0xb5365d03, 0xb1f740b4
};

uint32_t crc32_calc (uint16_t init, uint32_t *buf, uint16_t len)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	4603      	mov	r3, r0
 8003f40:	6039      	str	r1, [r7, #0]
 8003f42:	80fb      	strh	r3, [r7, #6]
 8003f44:	4613      	mov	r3, r2
 8003f46:	80bb      	strh	r3, [r7, #4]
  uint32_t crc = init;
 8003f48:	88fb      	ldrh	r3, [r7, #6]
 8003f4a:	60fb      	str	r3, [r7, #12]
  while (len--)
 8003f4c:	e00f      	b.n	8003f6e <crc32_calc+0x36>
    {
      crc = (crc << 8) ^ crc32_table[((crc >> 24) ^ *buf) & 255];
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	021a      	lsls	r2, r3, #8
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	0e19      	lsrs	r1, r3, #24
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	404b      	eors	r3, r1
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	490a      	ldr	r1, [pc, #40]	; (8003f88 <crc32_calc+0x50>)
 8003f60:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f64:	4053      	eors	r3, r2
 8003f66:	60fb      	str	r3, [r7, #12]
      buf++;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	3304      	adds	r3, #4
 8003f6c:	603b      	str	r3, [r7, #0]
  while (len--)
 8003f6e:	88bb      	ldrh	r3, [r7, #4]
 8003f70:	1e5a      	subs	r2, r3, #1
 8003f72:	80ba      	strh	r2, [r7, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1ea      	bne.n	8003f4e <crc32_calc+0x16>
    }
  return crc;
 8003f78:	68fb      	ldr	r3, [r7, #12]
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	08016e30 	.word	0x08016e30

08003f8c <leds_Timer>:
  * @brief  called from SysTick_Handler to update local class time
  * @param  res - time pass in mSec
  * @retval None
  */
void leds_Timer(uint32_t res)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
#ifdef NO_LEDS
	return;
#endif //NO_LEDS

	leds_time_counter += res;
 8003f94:	4b19      	ldr	r3, [pc, #100]	; (8003ffc <leds_Timer+0x70>)
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	4a17      	ldr	r2, [pc, #92]	; (8003ffc <leds_Timer+0x70>)
 8003f9e:	6013      	str	r3, [r2, #0]

	for( uint32_t i = 0; i < LEDS_NUM; i++ )
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	60fb      	str	r3, [r7, #12]
 8003fa4:	e020      	b.n	8003fe8 <leds_Timer+0x5c>
	{
		if( leds_info.leds[i].timer )
 8003fa6:	4916      	ldr	r1, [pc, #88]	; (8004000 <leds_Timer+0x74>)
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	4613      	mov	r3, r2
 8003fac:	011b      	lsls	r3, r3, #4
 8003fae:	4413      	add	r3, r2
 8003fb0:	00db      	lsls	r3, r3, #3
 8003fb2:	440b      	add	r3, r1
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d012      	beq.n	8003fe2 <leds_Timer+0x56>
			leds_info.leds[i].timer--;
 8003fbc:	4910      	ldr	r1, [pc, #64]	; (8004000 <leds_Timer+0x74>)
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	4413      	add	r3, r2
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	440b      	add	r3, r1
 8003fca:	3304      	adds	r3, #4
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	1e59      	subs	r1, r3, #1
 8003fd0:	480b      	ldr	r0, [pc, #44]	; (8004000 <leds_Timer+0x74>)
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	011b      	lsls	r3, r3, #4
 8003fd8:	4413      	add	r3, r2
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	4403      	add	r3, r0
 8003fde:	3304      	adds	r3, #4
 8003fe0:	6019      	str	r1, [r3, #0]
	for( uint32_t i = 0; i < LEDS_NUM; i++ )
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	60fb      	str	r3, [r7, #12]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0db      	beq.n	8003fa6 <leds_Timer+0x1a>
	}
}
 8003fee:	bf00      	nop
 8003ff0:	bf00      	nop
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	20000ad8 	.word	0x20000ad8
 8004000:	20000a44 	.word	0x20000a44

08004004 <leds_InitTask>:
  * @param  None
  * @retval 1 if success, 0 if failed
  */
/**********************************************************************/
uint8_t leds_InitTask()
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
#ifdef NO_LEDS
	return 1;
#endif //NO_LEDS

	leds_info.leds[LED_SIM_BLUE].type = led_simple;
 800400a:	4b8f      	ldr	r3, [pc, #572]	; (8004248 <leds_InitTask+0x244>)
 800400c:	2200      	movs	r2, #0
 800400e:	701a      	strb	r2, [r3, #0]
	leds_info.leds[LED_SIM_BLUE].sim_port = BLUE_LED_GPIO_Port;
 8004010:	4b8d      	ldr	r3, [pc, #564]	; (8004248 <leds_InitTask+0x244>)
 8004012:	4a8e      	ldr	r2, [pc, #568]	; (800424c <leds_InitTask+0x248>)
 8004014:	63da      	str	r2, [r3, #60]	; 0x3c
	leds_info.leds[LED_SIM_BLUE].sim_pin = BLUE_LED_Pin;
 8004016:	4b8c      	ldr	r3, [pc, #560]	; (8004248 <leds_InitTask+0x244>)
 8004018:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800401c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

	//Initialize beginning state
	for( uint32_t i = 0; i < LEDS_NUM; i++ )
 8004020:	2300      	movs	r3, #0
 8004022:	607b      	str	r3, [r7, #4]
 8004024:	e362      	b.n	80046ec <leds_InitTask+0x6e8>
	{
		//SIMPLE
		if( leds_info.leds[i].type == led_simple )
 8004026:	4988      	ldr	r1, [pc, #544]	; (8004248 <leds_InitTask+0x244>)
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	4613      	mov	r3, r2
 800402c:	011b      	lsls	r3, r3, #4
 800402e:	4413      	add	r3, r2
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	440b      	add	r3, r1
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b00      	cmp	r3, #0
 800403a:	d12b      	bne.n	8004094 <leds_InitTask+0x90>
		{
			leds_info.leds[i].state = led_st0;
 800403c:	4982      	ldr	r1, [pc, #520]	; (8004248 <leds_InitTask+0x244>)
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	4613      	mov	r3, r2
 8004042:	011b      	lsls	r3, r3, #4
 8004044:	4413      	add	r3, r2
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	440b      	add	r3, r1
 800404a:	3301      	adds	r3, #1
 800404c:	2200      	movs	r2, #0
 800404e:	701a      	strb	r2, [r3, #0]
			leds_info.leds[i].mode = led_toggle;
 8004050:	497d      	ldr	r1, [pc, #500]	; (8004248 <leds_InitTask+0x244>)
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	4613      	mov	r3, r2
 8004056:	011b      	lsls	r3, r3, #4
 8004058:	4413      	add	r3, r2
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	440b      	add	r3, r1
 800405e:	3302      	adds	r3, #2
 8004060:	2200      	movs	r2, #0
 8004062:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(leds_info.leds[i].sim_port, leds_info.leds[i].sim_pin, GPIO_PIN_RESET);
 8004064:	4978      	ldr	r1, [pc, #480]	; (8004248 <leds_InitTask+0x244>)
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	4613      	mov	r3, r2
 800406a:	011b      	lsls	r3, r3, #4
 800406c:	4413      	add	r3, r2
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	440b      	add	r3, r1
 8004072:	333c      	adds	r3, #60	; 0x3c
 8004074:	6818      	ldr	r0, [r3, #0]
 8004076:	4974      	ldr	r1, [pc, #464]	; (8004248 <leds_InitTask+0x244>)
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	4613      	mov	r3, r2
 800407c:	011b      	lsls	r3, r3, #4
 800407e:	4413      	add	r3, r2
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	440b      	add	r3, r1
 8004084:	3340      	adds	r3, #64	; 0x40
 8004086:	881b      	ldrh	r3, [r3, #0]
 8004088:	b29b      	uxth	r3, r3
 800408a:	2200      	movs	r2, #0
 800408c:	4619      	mov	r1, r3
 800408e:	f008 ff43 	bl	800cf18 <HAL_GPIO_WritePin>
 8004092:	e328      	b.n	80046e6 <leds_InitTask+0x6e2>
		}
		//PWM
		else if( leds_info.leds[i].type == led_pwm )
 8004094:	496c      	ldr	r1, [pc, #432]	; (8004248 <leds_InitTask+0x244>)
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	4613      	mov	r3, r2
 800409a:	011b      	lsls	r3, r3, #4
 800409c:	4413      	add	r3, r2
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	440b      	add	r3, r1
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	f040 80d2 	bne.w	8004250 <leds_InitTask+0x24c>
		{
			if( leds_info.leds[i].pwmch0_tim != NULL )
 80040ac:	4966      	ldr	r1, [pc, #408]	; (8004248 <leds_InitTask+0x244>)
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	4613      	mov	r3, r2
 80040b2:	011b      	lsls	r3, r3, #4
 80040b4:	4413      	add	r3, r2
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	440b      	add	r3, r1
 80040ba:	3344      	adds	r3, #68	; 0x44
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f000 80c0 	beq.w	8004244 <leds_InitTask+0x240>
			{
				leds_info.leds[i].state = led_st0;
 80040c4:	4960      	ldr	r1, [pc, #384]	; (8004248 <leds_InitTask+0x244>)
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	4613      	mov	r3, r2
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	4413      	add	r3, r2
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	440b      	add	r3, r1
 80040d2:	3301      	adds	r3, #1
 80040d4:	2200      	movs	r2, #0
 80040d6:	701a      	strb	r2, [r3, #0]
				leds_info.leds[i].mode = led_toggle;
 80040d8:	495b      	ldr	r1, [pc, #364]	; (8004248 <leds_InitTask+0x244>)
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	4613      	mov	r3, r2
 80040de:	011b      	lsls	r3, r3, #4
 80040e0:	4413      	add	r3, r2
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	440b      	add	r3, r1
 80040e6:	3302      	adds	r3, #2
 80040e8:	2200      	movs	r2, #0
 80040ea:	701a      	strb	r2, [r3, #0]
				leds_info.leds[i].pwmch0_value0 = LEDS_MIN_PWM_VALUE;
 80040ec:	4956      	ldr	r1, [pc, #344]	; (8004248 <leds_InitTask+0x244>)
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	4613      	mov	r3, r2
 80040f2:	011b      	lsls	r3, r3, #4
 80040f4:	4413      	add	r3, r2
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	440b      	add	r3, r1
 80040fa:	330c      	adds	r3, #12
 80040fc:	2200      	movs	r2, #0
 80040fe:	701a      	strb	r2, [r3, #0]
				leds_info.leds[i].pwmch0_cur_value = (float)LEDS_MIN_PWM_VALUE;
 8004100:	4951      	ldr	r1, [pc, #324]	; (8004248 <leds_InitTask+0x244>)
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	4613      	mov	r3, r2
 8004106:	011b      	lsls	r3, r3, #4
 8004108:	4413      	add	r3, r2
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	440b      	add	r3, r1
 800410e:	3308      	adds	r3, #8
 8004110:	f04f 0200 	mov.w	r2, #0
 8004114:	601a      	str	r2, [r3, #0]
				if( HAL_TIM_PWM_Start(leds_info.leds[i].pwmch0_tim, leds_info.leds[i].pwmch0_timch) != HAL_OK )
 8004116:	494c      	ldr	r1, [pc, #304]	; (8004248 <leds_InitTask+0x244>)
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	4613      	mov	r3, r2
 800411c:	011b      	lsls	r3, r3, #4
 800411e:	4413      	add	r3, r2
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	440b      	add	r3, r1
 8004124:	3344      	adds	r3, #68	; 0x44
 8004126:	6818      	ldr	r0, [r3, #0]
 8004128:	4947      	ldr	r1, [pc, #284]	; (8004248 <leds_InitTask+0x244>)
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	4613      	mov	r3, r2
 800412e:	011b      	lsls	r3, r3, #4
 8004130:	4413      	add	r3, r2
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	440b      	add	r3, r1
 8004136:	3348      	adds	r3, #72	; 0x48
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4619      	mov	r1, r3
 800413c:	f00b fed8 	bl	800fef0 <HAL_TIM_PWM_Start>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <leds_InitTask+0x146>
				{
					return 0;
 8004146:	2300      	movs	r3, #0
 8004148:	e2d5      	b.n	80046f6 <leds_InitTask+0x6f2>
				}
				__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch0_tim, leds_info.leds[i].pwmch0_timch, leds_info.leds[i].pwmch0_value0);
 800414a:	493f      	ldr	r1, [pc, #252]	; (8004248 <leds_InitTask+0x244>)
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	4613      	mov	r3, r2
 8004150:	011b      	lsls	r3, r3, #4
 8004152:	4413      	add	r3, r2
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	440b      	add	r3, r1
 8004158:	3348      	adds	r3, #72	; 0x48
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d116      	bne.n	800418e <leds_InitTask+0x18a>
 8004160:	4939      	ldr	r1, [pc, #228]	; (8004248 <leds_InitTask+0x244>)
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	4613      	mov	r3, r2
 8004166:	011b      	lsls	r3, r3, #4
 8004168:	4413      	add	r3, r2
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	440b      	add	r3, r1
 800416e:	330c      	adds	r3, #12
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	b2d8      	uxtb	r0, r3
 8004174:	4934      	ldr	r1, [pc, #208]	; (8004248 <leds_InitTask+0x244>)
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	4613      	mov	r3, r2
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	4413      	add	r3, r2
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	440b      	add	r3, r1
 8004182:	3344      	adds	r3, #68	; 0x44
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4602      	mov	r2, r0
 800418a:	635a      	str	r2, [r3, #52]	; 0x34
 800418c:	e2ab      	b.n	80046e6 <leds_InitTask+0x6e2>
 800418e:	492e      	ldr	r1, [pc, #184]	; (8004248 <leds_InitTask+0x244>)
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	4613      	mov	r3, r2
 8004194:	011b      	lsls	r3, r3, #4
 8004196:	4413      	add	r3, r2
 8004198:	00db      	lsls	r3, r3, #3
 800419a:	440b      	add	r3, r1
 800419c:	3348      	adds	r3, #72	; 0x48
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b04      	cmp	r3, #4
 80041a2:	d116      	bne.n	80041d2 <leds_InitTask+0x1ce>
 80041a4:	4928      	ldr	r1, [pc, #160]	; (8004248 <leds_InitTask+0x244>)
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	4613      	mov	r3, r2
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	4413      	add	r3, r2
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	440b      	add	r3, r1
 80041b2:	330c      	adds	r3, #12
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	b2d8      	uxtb	r0, r3
 80041b8:	4923      	ldr	r1, [pc, #140]	; (8004248 <leds_InitTask+0x244>)
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	4613      	mov	r3, r2
 80041be:	011b      	lsls	r3, r3, #4
 80041c0:	4413      	add	r3, r2
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	440b      	add	r3, r1
 80041c6:	3344      	adds	r3, #68	; 0x44
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	4603      	mov	r3, r0
 80041ce:	6393      	str	r3, [r2, #56]	; 0x38
 80041d0:	e289      	b.n	80046e6 <leds_InitTask+0x6e2>
 80041d2:	491d      	ldr	r1, [pc, #116]	; (8004248 <leds_InitTask+0x244>)
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	4613      	mov	r3, r2
 80041d8:	011b      	lsls	r3, r3, #4
 80041da:	4413      	add	r3, r2
 80041dc:	00db      	lsls	r3, r3, #3
 80041de:	440b      	add	r3, r1
 80041e0:	3348      	adds	r3, #72	; 0x48
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b08      	cmp	r3, #8
 80041e6:	d116      	bne.n	8004216 <leds_InitTask+0x212>
 80041e8:	4917      	ldr	r1, [pc, #92]	; (8004248 <leds_InitTask+0x244>)
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	4613      	mov	r3, r2
 80041ee:	011b      	lsls	r3, r3, #4
 80041f0:	4413      	add	r3, r2
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	440b      	add	r3, r1
 80041f6:	330c      	adds	r3, #12
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	b2d8      	uxtb	r0, r3
 80041fc:	4912      	ldr	r1, [pc, #72]	; (8004248 <leds_InitTask+0x244>)
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	4613      	mov	r3, r2
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	4413      	add	r3, r2
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	440b      	add	r3, r1
 800420a:	3344      	adds	r3, #68	; 0x44
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	4603      	mov	r3, r0
 8004212:	63d3      	str	r3, [r2, #60]	; 0x3c
 8004214:	e267      	b.n	80046e6 <leds_InitTask+0x6e2>
 8004216:	490c      	ldr	r1, [pc, #48]	; (8004248 <leds_InitTask+0x244>)
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	4613      	mov	r3, r2
 800421c:	011b      	lsls	r3, r3, #4
 800421e:	4413      	add	r3, r2
 8004220:	00db      	lsls	r3, r3, #3
 8004222:	440b      	add	r3, r1
 8004224:	330c      	adds	r3, #12
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	b2d8      	uxtb	r0, r3
 800422a:	4907      	ldr	r1, [pc, #28]	; (8004248 <leds_InitTask+0x244>)
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	4613      	mov	r3, r2
 8004230:	011b      	lsls	r3, r3, #4
 8004232:	4413      	add	r3, r2
 8004234:	00db      	lsls	r3, r3, #3
 8004236:	440b      	add	r3, r1
 8004238:	3344      	adds	r3, #68	; 0x44
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	4603      	mov	r3, r0
 8004240:	6413      	str	r3, [r2, #64]	; 0x40
 8004242:	e250      	b.n	80046e6 <leds_InitTask+0x6e2>
			}
			else
			{
				return 0;
 8004244:	2300      	movs	r3, #0
 8004246:	e256      	b.n	80046f6 <leds_InitTask+0x6f2>
 8004248:	20000a44 	.word	0x20000a44
 800424c:	40020800 	.word	0x40020800
			}
		}
		//RGB
		else if( leds_info.leds[i].type == led_rgb )
 8004250:	49b7      	ldr	r1, [pc, #732]	; (8004530 <leds_InitTask+0x52c>)
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	4613      	mov	r3, r2
 8004256:	011b      	lsls	r3, r3, #4
 8004258:	4413      	add	r3, r2
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	440b      	add	r3, r1
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b02      	cmp	r3, #2
 8004264:	f040 823f 	bne.w	80046e6 <leds_InitTask+0x6e2>
		{
			if( (leds_info.leds[i].pwmch0_tim != NULL) && (leds_info.leds[i].pwmch1_tim != NULL) && (leds_info.leds[i].pwmch2_tim != NULL) )
 8004268:	49b1      	ldr	r1, [pc, #708]	; (8004530 <leds_InitTask+0x52c>)
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	4613      	mov	r3, r2
 800426e:	011b      	lsls	r3, r3, #4
 8004270:	4413      	add	r3, r2
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	440b      	add	r3, r1
 8004276:	3344      	adds	r3, #68	; 0x44
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	f000 8231 	beq.w	80046e2 <leds_InitTask+0x6de>
 8004280:	49ab      	ldr	r1, [pc, #684]	; (8004530 <leds_InitTask+0x52c>)
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	4613      	mov	r3, r2
 8004286:	011b      	lsls	r3, r3, #4
 8004288:	4413      	add	r3, r2
 800428a:	00db      	lsls	r3, r3, #3
 800428c:	440b      	add	r3, r1
 800428e:	334c      	adds	r3, #76	; 0x4c
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	f000 8225 	beq.w	80046e2 <leds_InitTask+0x6de>
 8004298:	49a5      	ldr	r1, [pc, #660]	; (8004530 <leds_InitTask+0x52c>)
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	4613      	mov	r3, r2
 800429e:	011b      	lsls	r3, r3, #4
 80042a0:	4413      	add	r3, r2
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	440b      	add	r3, r1
 80042a6:	3354      	adds	r3, #84	; 0x54
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 8219 	beq.w	80046e2 <leds_InitTask+0x6de>
			{
				leds_info.leds[i].state = led_st0;
 80042b0:	499f      	ldr	r1, [pc, #636]	; (8004530 <leds_InitTask+0x52c>)
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	4613      	mov	r3, r2
 80042b6:	011b      	lsls	r3, r3, #4
 80042b8:	4413      	add	r3, r2
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	440b      	add	r3, r1
 80042be:	3301      	adds	r3, #1
 80042c0:	2200      	movs	r2, #0
 80042c2:	701a      	strb	r2, [r3, #0]
				leds_info.leds[i].mode = led_toggle;
 80042c4:	499a      	ldr	r1, [pc, #616]	; (8004530 <leds_InitTask+0x52c>)
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	4613      	mov	r3, r2
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	4413      	add	r3, r2
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	440b      	add	r3, r1
 80042d2:	3302      	adds	r3, #2
 80042d4:	2200      	movs	r2, #0
 80042d6:	701a      	strb	r2, [r3, #0]
				leds_info.leds[i].pwmch0_value0 = LEDS_MIN_PWM_VALUE;
 80042d8:	4995      	ldr	r1, [pc, #596]	; (8004530 <leds_InitTask+0x52c>)
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	4613      	mov	r3, r2
 80042de:	011b      	lsls	r3, r3, #4
 80042e0:	4413      	add	r3, r2
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	440b      	add	r3, r1
 80042e6:	330c      	adds	r3, #12
 80042e8:	2200      	movs	r2, #0
 80042ea:	701a      	strb	r2, [r3, #0]
				leds_info.leds[i].pwmch0_cur_value = (float)LEDS_MIN_PWM_VALUE;
 80042ec:	4990      	ldr	r1, [pc, #576]	; (8004530 <leds_InitTask+0x52c>)
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	4613      	mov	r3, r2
 80042f2:	011b      	lsls	r3, r3, #4
 80042f4:	4413      	add	r3, r2
 80042f6:	00db      	lsls	r3, r3, #3
 80042f8:	440b      	add	r3, r1
 80042fa:	3308      	adds	r3, #8
 80042fc:	f04f 0200 	mov.w	r2, #0
 8004300:	601a      	str	r2, [r3, #0]
				leds_info.leds[i].pwmch1_value0 = LEDS_MIN_PWM_VALUE;
 8004302:	498b      	ldr	r1, [pc, #556]	; (8004530 <leds_InitTask+0x52c>)
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	4613      	mov	r3, r2
 8004308:	011b      	lsls	r3, r3, #4
 800430a:	4413      	add	r3, r2
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	440b      	add	r3, r1
 8004310:	3318      	adds	r3, #24
 8004312:	2200      	movs	r2, #0
 8004314:	701a      	strb	r2, [r3, #0]
				leds_info.leds[i].pwmch1_cur_value = (float)LEDS_MIN_PWM_VALUE;
 8004316:	4986      	ldr	r1, [pc, #536]	; (8004530 <leds_InitTask+0x52c>)
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	4613      	mov	r3, r2
 800431c:	011b      	lsls	r3, r3, #4
 800431e:	4413      	add	r3, r2
 8004320:	00db      	lsls	r3, r3, #3
 8004322:	440b      	add	r3, r1
 8004324:	3314      	adds	r3, #20
 8004326:	f04f 0200 	mov.w	r2, #0
 800432a:	601a      	str	r2, [r3, #0]
				leds_info.leds[i].pwmch2_value0 = LEDS_MIN_PWM_VALUE;
 800432c:	4980      	ldr	r1, [pc, #512]	; (8004530 <leds_InitTask+0x52c>)
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	4613      	mov	r3, r2
 8004332:	011b      	lsls	r3, r3, #4
 8004334:	4413      	add	r3, r2
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	440b      	add	r3, r1
 800433a:	3324      	adds	r3, #36	; 0x24
 800433c:	2200      	movs	r2, #0
 800433e:	701a      	strb	r2, [r3, #0]
				leds_info.leds[i].pwmch2_cur_value = (float)LEDS_MIN_PWM_VALUE;
 8004340:	497b      	ldr	r1, [pc, #492]	; (8004530 <leds_InitTask+0x52c>)
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	4613      	mov	r3, r2
 8004346:	011b      	lsls	r3, r3, #4
 8004348:	4413      	add	r3, r2
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	440b      	add	r3, r1
 800434e:	3320      	adds	r3, #32
 8004350:	f04f 0200 	mov.w	r2, #0
 8004354:	601a      	str	r2, [r3, #0]
				if( HAL_TIM_PWM_Start(leds_info.leds[i].pwmch0_tim, leds_info.leds[i].pwmch0_timch) != HAL_OK )
 8004356:	4976      	ldr	r1, [pc, #472]	; (8004530 <leds_InitTask+0x52c>)
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	4613      	mov	r3, r2
 800435c:	011b      	lsls	r3, r3, #4
 800435e:	4413      	add	r3, r2
 8004360:	00db      	lsls	r3, r3, #3
 8004362:	440b      	add	r3, r1
 8004364:	3344      	adds	r3, #68	; 0x44
 8004366:	6818      	ldr	r0, [r3, #0]
 8004368:	4971      	ldr	r1, [pc, #452]	; (8004530 <leds_InitTask+0x52c>)
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	4613      	mov	r3, r2
 800436e:	011b      	lsls	r3, r3, #4
 8004370:	4413      	add	r3, r2
 8004372:	00db      	lsls	r3, r3, #3
 8004374:	440b      	add	r3, r1
 8004376:	3348      	adds	r3, #72	; 0x48
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4619      	mov	r1, r3
 800437c:	f00b fdb8 	bl	800fef0 <HAL_TIM_PWM_Start>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <leds_InitTask+0x386>
				{
					return 0;
 8004386:	2300      	movs	r3, #0
 8004388:	e1b5      	b.n	80046f6 <leds_InitTask+0x6f2>
				}
				if( HAL_TIM_PWM_Start(leds_info.leds[i].pwmch1_tim, leds_info.leds[i].pwmch1_timch) != HAL_OK )
 800438a:	4969      	ldr	r1, [pc, #420]	; (8004530 <leds_InitTask+0x52c>)
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	4613      	mov	r3, r2
 8004390:	011b      	lsls	r3, r3, #4
 8004392:	4413      	add	r3, r2
 8004394:	00db      	lsls	r3, r3, #3
 8004396:	440b      	add	r3, r1
 8004398:	334c      	adds	r3, #76	; 0x4c
 800439a:	6818      	ldr	r0, [r3, #0]
 800439c:	4964      	ldr	r1, [pc, #400]	; (8004530 <leds_InitTask+0x52c>)
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	4613      	mov	r3, r2
 80043a2:	011b      	lsls	r3, r3, #4
 80043a4:	4413      	add	r3, r2
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	440b      	add	r3, r1
 80043aa:	3350      	adds	r3, #80	; 0x50
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4619      	mov	r1, r3
 80043b0:	f00b fd9e 	bl	800fef0 <HAL_TIM_PWM_Start>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <leds_InitTask+0x3ba>
				{
					return 0;
 80043ba:	2300      	movs	r3, #0
 80043bc:	e19b      	b.n	80046f6 <leds_InitTask+0x6f2>
				}
				if( HAL_TIM_PWM_Start(leds_info.leds[i].pwmch2_tim, leds_info.leds[i].pwmch2_timch) != HAL_OK )
 80043be:	495c      	ldr	r1, [pc, #368]	; (8004530 <leds_InitTask+0x52c>)
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	4613      	mov	r3, r2
 80043c4:	011b      	lsls	r3, r3, #4
 80043c6:	4413      	add	r3, r2
 80043c8:	00db      	lsls	r3, r3, #3
 80043ca:	440b      	add	r3, r1
 80043cc:	3354      	adds	r3, #84	; 0x54
 80043ce:	6818      	ldr	r0, [r3, #0]
 80043d0:	4957      	ldr	r1, [pc, #348]	; (8004530 <leds_InitTask+0x52c>)
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	4613      	mov	r3, r2
 80043d6:	011b      	lsls	r3, r3, #4
 80043d8:	4413      	add	r3, r2
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	440b      	add	r3, r1
 80043de:	3358      	adds	r3, #88	; 0x58
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4619      	mov	r1, r3
 80043e4:	f00b fd84 	bl	800fef0 <HAL_TIM_PWM_Start>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <leds_InitTask+0x3ee>
				{
					return 0;
 80043ee:	2300      	movs	r3, #0
 80043f0:	e181      	b.n	80046f6 <leds_InitTask+0x6f2>
				}
				__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch0_tim, leds_info.leds[i].pwmch0_timch, leds_info.leds[i].pwmch0_value0);
 80043f2:	494f      	ldr	r1, [pc, #316]	; (8004530 <leds_InitTask+0x52c>)
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	4613      	mov	r3, r2
 80043f8:	011b      	lsls	r3, r3, #4
 80043fa:	4413      	add	r3, r2
 80043fc:	00db      	lsls	r3, r3, #3
 80043fe:	440b      	add	r3, r1
 8004400:	3348      	adds	r3, #72	; 0x48
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d116      	bne.n	8004436 <leds_InitTask+0x432>
 8004408:	4949      	ldr	r1, [pc, #292]	; (8004530 <leds_InitTask+0x52c>)
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	4613      	mov	r3, r2
 800440e:	011b      	lsls	r3, r3, #4
 8004410:	4413      	add	r3, r2
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	440b      	add	r3, r1
 8004416:	330c      	adds	r3, #12
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	b2d8      	uxtb	r0, r3
 800441c:	4944      	ldr	r1, [pc, #272]	; (8004530 <leds_InitTask+0x52c>)
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	4613      	mov	r3, r2
 8004422:	011b      	lsls	r3, r3, #4
 8004424:	4413      	add	r3, r2
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	440b      	add	r3, r1
 800442a:	3344      	adds	r3, #68	; 0x44
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4602      	mov	r2, r0
 8004432:	635a      	str	r2, [r3, #52]	; 0x34
 8004434:	e059      	b.n	80044ea <leds_InitTask+0x4e6>
 8004436:	493e      	ldr	r1, [pc, #248]	; (8004530 <leds_InitTask+0x52c>)
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	4613      	mov	r3, r2
 800443c:	011b      	lsls	r3, r3, #4
 800443e:	4413      	add	r3, r2
 8004440:	00db      	lsls	r3, r3, #3
 8004442:	440b      	add	r3, r1
 8004444:	3348      	adds	r3, #72	; 0x48
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2b04      	cmp	r3, #4
 800444a:	d116      	bne.n	800447a <leds_InitTask+0x476>
 800444c:	4938      	ldr	r1, [pc, #224]	; (8004530 <leds_InitTask+0x52c>)
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	4613      	mov	r3, r2
 8004452:	011b      	lsls	r3, r3, #4
 8004454:	4413      	add	r3, r2
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	440b      	add	r3, r1
 800445a:	330c      	adds	r3, #12
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	b2d8      	uxtb	r0, r3
 8004460:	4933      	ldr	r1, [pc, #204]	; (8004530 <leds_InitTask+0x52c>)
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	4613      	mov	r3, r2
 8004466:	011b      	lsls	r3, r3, #4
 8004468:	4413      	add	r3, r2
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	440b      	add	r3, r1
 800446e:	3344      	adds	r3, #68	; 0x44
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	4603      	mov	r3, r0
 8004476:	6393      	str	r3, [r2, #56]	; 0x38
 8004478:	e037      	b.n	80044ea <leds_InitTask+0x4e6>
 800447a:	492d      	ldr	r1, [pc, #180]	; (8004530 <leds_InitTask+0x52c>)
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	4613      	mov	r3, r2
 8004480:	011b      	lsls	r3, r3, #4
 8004482:	4413      	add	r3, r2
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	440b      	add	r3, r1
 8004488:	3348      	adds	r3, #72	; 0x48
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2b08      	cmp	r3, #8
 800448e:	d116      	bne.n	80044be <leds_InitTask+0x4ba>
 8004490:	4927      	ldr	r1, [pc, #156]	; (8004530 <leds_InitTask+0x52c>)
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	4613      	mov	r3, r2
 8004496:	011b      	lsls	r3, r3, #4
 8004498:	4413      	add	r3, r2
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	440b      	add	r3, r1
 800449e:	330c      	adds	r3, #12
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	b2d8      	uxtb	r0, r3
 80044a4:	4922      	ldr	r1, [pc, #136]	; (8004530 <leds_InitTask+0x52c>)
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	4613      	mov	r3, r2
 80044aa:	011b      	lsls	r3, r3, #4
 80044ac:	4413      	add	r3, r2
 80044ae:	00db      	lsls	r3, r3, #3
 80044b0:	440b      	add	r3, r1
 80044b2:	3344      	adds	r3, #68	; 0x44
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	4603      	mov	r3, r0
 80044ba:	63d3      	str	r3, [r2, #60]	; 0x3c
 80044bc:	e015      	b.n	80044ea <leds_InitTask+0x4e6>
 80044be:	491c      	ldr	r1, [pc, #112]	; (8004530 <leds_InitTask+0x52c>)
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	4613      	mov	r3, r2
 80044c4:	011b      	lsls	r3, r3, #4
 80044c6:	4413      	add	r3, r2
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	440b      	add	r3, r1
 80044cc:	330c      	adds	r3, #12
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	b2d8      	uxtb	r0, r3
 80044d2:	4917      	ldr	r1, [pc, #92]	; (8004530 <leds_InitTask+0x52c>)
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	4613      	mov	r3, r2
 80044d8:	011b      	lsls	r3, r3, #4
 80044da:	4413      	add	r3, r2
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	440b      	add	r3, r1
 80044e0:	3344      	adds	r3, #68	; 0x44
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	4603      	mov	r3, r0
 80044e8:	6413      	str	r3, [r2, #64]	; 0x40
				__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch1_tim, leds_info.leds[i].pwmch1_timch, leds_info.leds[i].pwmch1_value0);
 80044ea:	4911      	ldr	r1, [pc, #68]	; (8004530 <leds_InitTask+0x52c>)
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	4613      	mov	r3, r2
 80044f0:	011b      	lsls	r3, r3, #4
 80044f2:	4413      	add	r3, r2
 80044f4:	00db      	lsls	r3, r3, #3
 80044f6:	440b      	add	r3, r1
 80044f8:	3350      	adds	r3, #80	; 0x50
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d119      	bne.n	8004534 <leds_InitTask+0x530>
 8004500:	490b      	ldr	r1, [pc, #44]	; (8004530 <leds_InitTask+0x52c>)
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	4613      	mov	r3, r2
 8004506:	011b      	lsls	r3, r3, #4
 8004508:	4413      	add	r3, r2
 800450a:	00db      	lsls	r3, r3, #3
 800450c:	440b      	add	r3, r1
 800450e:	3318      	adds	r3, #24
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	b2d8      	uxtb	r0, r3
 8004514:	4906      	ldr	r1, [pc, #24]	; (8004530 <leds_InitTask+0x52c>)
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	4613      	mov	r3, r2
 800451a:	011b      	lsls	r3, r3, #4
 800451c:	4413      	add	r3, r2
 800451e:	00db      	lsls	r3, r3, #3
 8004520:	440b      	add	r3, r1
 8004522:	334c      	adds	r3, #76	; 0x4c
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4602      	mov	r2, r0
 800452a:	635a      	str	r2, [r3, #52]	; 0x34
 800452c:	e05c      	b.n	80045e8 <leds_InitTask+0x5e4>
 800452e:	bf00      	nop
 8004530:	20000a44 	.word	0x20000a44
 8004534:	4972      	ldr	r1, [pc, #456]	; (8004700 <leds_InitTask+0x6fc>)
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	4613      	mov	r3, r2
 800453a:	011b      	lsls	r3, r3, #4
 800453c:	4413      	add	r3, r2
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	440b      	add	r3, r1
 8004542:	3350      	adds	r3, #80	; 0x50
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2b04      	cmp	r3, #4
 8004548:	d116      	bne.n	8004578 <leds_InitTask+0x574>
 800454a:	496d      	ldr	r1, [pc, #436]	; (8004700 <leds_InitTask+0x6fc>)
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	4613      	mov	r3, r2
 8004550:	011b      	lsls	r3, r3, #4
 8004552:	4413      	add	r3, r2
 8004554:	00db      	lsls	r3, r3, #3
 8004556:	440b      	add	r3, r1
 8004558:	3318      	adds	r3, #24
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	b2d8      	uxtb	r0, r3
 800455e:	4968      	ldr	r1, [pc, #416]	; (8004700 <leds_InitTask+0x6fc>)
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	4613      	mov	r3, r2
 8004564:	011b      	lsls	r3, r3, #4
 8004566:	4413      	add	r3, r2
 8004568:	00db      	lsls	r3, r3, #3
 800456a:	440b      	add	r3, r1
 800456c:	334c      	adds	r3, #76	; 0x4c
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	4603      	mov	r3, r0
 8004574:	6393      	str	r3, [r2, #56]	; 0x38
 8004576:	e037      	b.n	80045e8 <leds_InitTask+0x5e4>
 8004578:	4961      	ldr	r1, [pc, #388]	; (8004700 <leds_InitTask+0x6fc>)
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	4613      	mov	r3, r2
 800457e:	011b      	lsls	r3, r3, #4
 8004580:	4413      	add	r3, r2
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	440b      	add	r3, r1
 8004586:	3350      	adds	r3, #80	; 0x50
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b08      	cmp	r3, #8
 800458c:	d116      	bne.n	80045bc <leds_InitTask+0x5b8>
 800458e:	495c      	ldr	r1, [pc, #368]	; (8004700 <leds_InitTask+0x6fc>)
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	4613      	mov	r3, r2
 8004594:	011b      	lsls	r3, r3, #4
 8004596:	4413      	add	r3, r2
 8004598:	00db      	lsls	r3, r3, #3
 800459a:	440b      	add	r3, r1
 800459c:	3318      	adds	r3, #24
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	b2d8      	uxtb	r0, r3
 80045a2:	4957      	ldr	r1, [pc, #348]	; (8004700 <leds_InitTask+0x6fc>)
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	4613      	mov	r3, r2
 80045a8:	011b      	lsls	r3, r3, #4
 80045aa:	4413      	add	r3, r2
 80045ac:	00db      	lsls	r3, r3, #3
 80045ae:	440b      	add	r3, r1
 80045b0:	334c      	adds	r3, #76	; 0x4c
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	4603      	mov	r3, r0
 80045b8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80045ba:	e015      	b.n	80045e8 <leds_InitTask+0x5e4>
 80045bc:	4950      	ldr	r1, [pc, #320]	; (8004700 <leds_InitTask+0x6fc>)
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	4613      	mov	r3, r2
 80045c2:	011b      	lsls	r3, r3, #4
 80045c4:	4413      	add	r3, r2
 80045c6:	00db      	lsls	r3, r3, #3
 80045c8:	440b      	add	r3, r1
 80045ca:	3318      	adds	r3, #24
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	b2d8      	uxtb	r0, r3
 80045d0:	494b      	ldr	r1, [pc, #300]	; (8004700 <leds_InitTask+0x6fc>)
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	4613      	mov	r3, r2
 80045d6:	011b      	lsls	r3, r3, #4
 80045d8:	4413      	add	r3, r2
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	440b      	add	r3, r1
 80045de:	334c      	adds	r3, #76	; 0x4c
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	4603      	mov	r3, r0
 80045e6:	6413      	str	r3, [r2, #64]	; 0x40
				__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch2_tim, leds_info.leds[i].pwmch2_timch, leds_info.leds[i].pwmch2_value0);
 80045e8:	4945      	ldr	r1, [pc, #276]	; (8004700 <leds_InitTask+0x6fc>)
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	4613      	mov	r3, r2
 80045ee:	011b      	lsls	r3, r3, #4
 80045f0:	4413      	add	r3, r2
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	440b      	add	r3, r1
 80045f6:	3358      	adds	r3, #88	; 0x58
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d116      	bne.n	800462c <leds_InitTask+0x628>
 80045fe:	4940      	ldr	r1, [pc, #256]	; (8004700 <leds_InitTask+0x6fc>)
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	4613      	mov	r3, r2
 8004604:	011b      	lsls	r3, r3, #4
 8004606:	4413      	add	r3, r2
 8004608:	00db      	lsls	r3, r3, #3
 800460a:	440b      	add	r3, r1
 800460c:	3324      	adds	r3, #36	; 0x24
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	b2d8      	uxtb	r0, r3
 8004612:	493b      	ldr	r1, [pc, #236]	; (8004700 <leds_InitTask+0x6fc>)
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	4613      	mov	r3, r2
 8004618:	011b      	lsls	r3, r3, #4
 800461a:	4413      	add	r3, r2
 800461c:	00db      	lsls	r3, r3, #3
 800461e:	440b      	add	r3, r1
 8004620:	3354      	adds	r3, #84	; 0x54
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4602      	mov	r2, r0
 8004628:	635a      	str	r2, [r3, #52]	; 0x34
 800462a:	e05c      	b.n	80046e6 <leds_InitTask+0x6e2>
 800462c:	4934      	ldr	r1, [pc, #208]	; (8004700 <leds_InitTask+0x6fc>)
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	4613      	mov	r3, r2
 8004632:	011b      	lsls	r3, r3, #4
 8004634:	4413      	add	r3, r2
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	440b      	add	r3, r1
 800463a:	3358      	adds	r3, #88	; 0x58
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b04      	cmp	r3, #4
 8004640:	d116      	bne.n	8004670 <leds_InitTask+0x66c>
 8004642:	492f      	ldr	r1, [pc, #188]	; (8004700 <leds_InitTask+0x6fc>)
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	4613      	mov	r3, r2
 8004648:	011b      	lsls	r3, r3, #4
 800464a:	4413      	add	r3, r2
 800464c:	00db      	lsls	r3, r3, #3
 800464e:	440b      	add	r3, r1
 8004650:	3324      	adds	r3, #36	; 0x24
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	b2d8      	uxtb	r0, r3
 8004656:	492a      	ldr	r1, [pc, #168]	; (8004700 <leds_InitTask+0x6fc>)
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	4613      	mov	r3, r2
 800465c:	011b      	lsls	r3, r3, #4
 800465e:	4413      	add	r3, r2
 8004660:	00db      	lsls	r3, r3, #3
 8004662:	440b      	add	r3, r1
 8004664:	3354      	adds	r3, #84	; 0x54
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	4603      	mov	r3, r0
 800466c:	6393      	str	r3, [r2, #56]	; 0x38
 800466e:	e03a      	b.n	80046e6 <leds_InitTask+0x6e2>
 8004670:	4923      	ldr	r1, [pc, #140]	; (8004700 <leds_InitTask+0x6fc>)
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	4613      	mov	r3, r2
 8004676:	011b      	lsls	r3, r3, #4
 8004678:	4413      	add	r3, r2
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	440b      	add	r3, r1
 800467e:	3358      	adds	r3, #88	; 0x58
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2b08      	cmp	r3, #8
 8004684:	d116      	bne.n	80046b4 <leds_InitTask+0x6b0>
 8004686:	491e      	ldr	r1, [pc, #120]	; (8004700 <leds_InitTask+0x6fc>)
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	4613      	mov	r3, r2
 800468c:	011b      	lsls	r3, r3, #4
 800468e:	4413      	add	r3, r2
 8004690:	00db      	lsls	r3, r3, #3
 8004692:	440b      	add	r3, r1
 8004694:	3324      	adds	r3, #36	; 0x24
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	b2d8      	uxtb	r0, r3
 800469a:	4919      	ldr	r1, [pc, #100]	; (8004700 <leds_InitTask+0x6fc>)
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	4613      	mov	r3, r2
 80046a0:	011b      	lsls	r3, r3, #4
 80046a2:	4413      	add	r3, r2
 80046a4:	00db      	lsls	r3, r3, #3
 80046a6:	440b      	add	r3, r1
 80046a8:	3354      	adds	r3, #84	; 0x54
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	4603      	mov	r3, r0
 80046b0:	63d3      	str	r3, [r2, #60]	; 0x3c
 80046b2:	e018      	b.n	80046e6 <leds_InitTask+0x6e2>
 80046b4:	4912      	ldr	r1, [pc, #72]	; (8004700 <leds_InitTask+0x6fc>)
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	4613      	mov	r3, r2
 80046ba:	011b      	lsls	r3, r3, #4
 80046bc:	4413      	add	r3, r2
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	440b      	add	r3, r1
 80046c2:	3324      	adds	r3, #36	; 0x24
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	b2d8      	uxtb	r0, r3
 80046c8:	490d      	ldr	r1, [pc, #52]	; (8004700 <leds_InitTask+0x6fc>)
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	4613      	mov	r3, r2
 80046ce:	011b      	lsls	r3, r3, #4
 80046d0:	4413      	add	r3, r2
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	440b      	add	r3, r1
 80046d6:	3354      	adds	r3, #84	; 0x54
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	4603      	mov	r3, r0
 80046de:	6413      	str	r3, [r2, #64]	; 0x40
 80046e0:	e001      	b.n	80046e6 <leds_InitTask+0x6e2>
			}
			else
			{
				return 0;
 80046e2:	2300      	movs	r3, #0
 80046e4:	e007      	b.n	80046f6 <leds_InitTask+0x6f2>
	for( uint32_t i = 0; i < LEDS_NUM; i++ )
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	3301      	adds	r3, #1
 80046ea:	607b      	str	r3, [r7, #4]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f43f ac99 	beq.w	8004026 <leds_InitTask+0x22>
			}
		}
	}

	return 1;
 80046f4:	2301      	movs	r3, #1
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3708      	adds	r7, #8
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	20000a44 	.word	0x20000a44

08004704 <leds_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void leds_Task(void)
{
 8004704:	b590      	push	{r4, r7, lr}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
#ifdef NO_LEDS
	return;
#endif //NO_LEDS

	//Handle leds
	for( uint32_t i = 0; i < LEDS_NUM; i++ )
 800470a:	2300      	movs	r3, #0
 800470c:	60fb      	str	r3, [r7, #12]
 800470e:	f002 bdc6 	b.w	800729e <leds_Task+0x2b9a>
	{
		//Simple led
		//************************************************************************************************
		if( leds_info.leds[i].type == led_simple )
 8004712:	499e      	ldr	r1, [pc, #632]	; (800498c <leds_Task+0x288>)
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	4613      	mov	r3, r2
 8004718:	011b      	lsls	r3, r3, #4
 800471a:	4413      	add	r3, r2
 800471c:	00db      	lsls	r3, r3, #3
 800471e:	440b      	add	r3, r1
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b00      	cmp	r3, #0
 8004726:	f040 8133 	bne.w	8004990 <leds_Task+0x28c>
		{
			//Blink mode
			//----------------------------------------------------------------------------------------------------------------
			if( leds_info.leds[i].mode == led_blink )
 800472a:	4998      	ldr	r1, [pc, #608]	; (800498c <leds_Task+0x288>)
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	4613      	mov	r3, r2
 8004730:	011b      	lsls	r3, r3, #4
 8004732:	4413      	add	r3, r2
 8004734:	00db      	lsls	r3, r3, #3
 8004736:	440b      	add	r3, r1
 8004738:	3302      	adds	r3, #2
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b01      	cmp	r3, #1
 8004740:	f042 85aa 	bne.w	8007298 <leds_Task+0x2b94>
			{
				//Blink state 0
				if( leds_info.leds[i].state == led_st0 )
 8004744:	4991      	ldr	r1, [pc, #580]	; (800498c <leds_Task+0x288>)
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	4613      	mov	r3, r2
 800474a:	011b      	lsls	r3, r3, #4
 800474c:	4413      	add	r3, r2
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	440b      	add	r3, r1
 8004752:	3301      	adds	r3, #1
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b00      	cmp	r3, #0
 800475a:	d164      	bne.n	8004826 <leds_Task+0x122>
				{
					//Wait for the timer
					if( leds_info.leds[i].timer == 0 )
 800475c:	498b      	ldr	r1, [pc, #556]	; (800498c <leds_Task+0x288>)
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	4613      	mov	r3, r2
 8004762:	011b      	lsls	r3, r3, #4
 8004764:	4413      	add	r3, r2
 8004766:	00db      	lsls	r3, r3, #3
 8004768:	440b      	add	r3, r1
 800476a:	3304      	adds	r3, #4
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	f042 8592 	bne.w	8007298 <leds_Task+0x2b94>
					{
						//Switch state
						leds_info.leds[i].state = led_st1;
 8004774:	4985      	ldr	r1, [pc, #532]	; (800498c <leds_Task+0x288>)
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	4613      	mov	r3, r2
 800477a:	011b      	lsls	r3, r3, #4
 800477c:	4413      	add	r3, r2
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	440b      	add	r3, r1
 8004782:	3301      	adds	r3, #1
 8004784:	2201      	movs	r2, #1
 8004786:	701a      	strb	r2, [r3, #0]
						if( leds_info.leds[i].pwmch0_value1 > 0 ) {
 8004788:	4980      	ldr	r1, [pc, #512]	; (800498c <leds_Task+0x288>)
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	4613      	mov	r3, r2
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	4413      	add	r3, r2
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	440b      	add	r3, r1
 8004796:	330d      	adds	r3, #13
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2b00      	cmp	r3, #0
 800479e:	d017      	beq.n	80047d0 <leds_Task+0xcc>
							HAL_GPIO_WritePin(leds_info.leds[i].sim_port, leds_info.leds[i].sim_pin, GPIO_PIN_SET);
 80047a0:	497a      	ldr	r1, [pc, #488]	; (800498c <leds_Task+0x288>)
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	4613      	mov	r3, r2
 80047a6:	011b      	lsls	r3, r3, #4
 80047a8:	4413      	add	r3, r2
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	440b      	add	r3, r1
 80047ae:	333c      	adds	r3, #60	; 0x3c
 80047b0:	6818      	ldr	r0, [r3, #0]
 80047b2:	4976      	ldr	r1, [pc, #472]	; (800498c <leds_Task+0x288>)
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	4613      	mov	r3, r2
 80047b8:	011b      	lsls	r3, r3, #4
 80047ba:	4413      	add	r3, r2
 80047bc:	00db      	lsls	r3, r3, #3
 80047be:	440b      	add	r3, r1
 80047c0:	3340      	adds	r3, #64	; 0x40
 80047c2:	881b      	ldrh	r3, [r3, #0]
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	2201      	movs	r2, #1
 80047c8:	4619      	mov	r1, r3
 80047ca:	f008 fba5 	bl	800cf18 <HAL_GPIO_WritePin>
 80047ce:	e016      	b.n	80047fe <leds_Task+0xfa>
						}
						else {
							HAL_GPIO_WritePin(leds_info.leds[i].sim_port, leds_info.leds[i].sim_pin, GPIO_PIN_RESET);
 80047d0:	496e      	ldr	r1, [pc, #440]	; (800498c <leds_Task+0x288>)
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	4613      	mov	r3, r2
 80047d6:	011b      	lsls	r3, r3, #4
 80047d8:	4413      	add	r3, r2
 80047da:	00db      	lsls	r3, r3, #3
 80047dc:	440b      	add	r3, r1
 80047de:	333c      	adds	r3, #60	; 0x3c
 80047e0:	6818      	ldr	r0, [r3, #0]
 80047e2:	496a      	ldr	r1, [pc, #424]	; (800498c <leds_Task+0x288>)
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	4613      	mov	r3, r2
 80047e8:	011b      	lsls	r3, r3, #4
 80047ea:	4413      	add	r3, r2
 80047ec:	00db      	lsls	r3, r3, #3
 80047ee:	440b      	add	r3, r1
 80047f0:	3340      	adds	r3, #64	; 0x40
 80047f2:	881b      	ldrh	r3, [r3, #0]
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	2200      	movs	r2, #0
 80047f8:	4619      	mov	r1, r3
 80047fa:	f008 fb8d 	bl	800cf18 <HAL_GPIO_WritePin>
						}
						leds_info.leds[i].timer = leds_info.leds[i].anim_time_st1;
 80047fe:	4963      	ldr	r1, [pc, #396]	; (800498c <leds_Task+0x288>)
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	4613      	mov	r3, r2
 8004804:	011b      	lsls	r3, r3, #4
 8004806:	4413      	add	r3, r2
 8004808:	00db      	lsls	r3, r3, #3
 800480a:	440b      	add	r3, r1
 800480c:	3330      	adds	r3, #48	; 0x30
 800480e:	6819      	ldr	r1, [r3, #0]
 8004810:	485e      	ldr	r0, [pc, #376]	; (800498c <leds_Task+0x288>)
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	4613      	mov	r3, r2
 8004816:	011b      	lsls	r3, r3, #4
 8004818:	4413      	add	r3, r2
 800481a:	00db      	lsls	r3, r3, #3
 800481c:	4403      	add	r3, r0
 800481e:	3304      	adds	r3, #4
 8004820:	6019      	str	r1, [r3, #0]
 8004822:	f002 bd39 	b.w	8007298 <leds_Task+0x2b94>
					}
				}
				//Blink state 1
				else if( leds_info.leds[i].state == led_st1 )
 8004826:	4959      	ldr	r1, [pc, #356]	; (800498c <leds_Task+0x288>)
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	4613      	mov	r3, r2
 800482c:	011b      	lsls	r3, r3, #4
 800482e:	4413      	add	r3, r2
 8004830:	00db      	lsls	r3, r3, #3
 8004832:	440b      	add	r3, r1
 8004834:	3301      	adds	r3, #1
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b01      	cmp	r3, #1
 800483c:	f042 852c 	bne.w	8007298 <leds_Task+0x2b94>
				{
					if( leds_info.leds[i].timer == 0 )
 8004840:	4952      	ldr	r1, [pc, #328]	; (800498c <leds_Task+0x288>)
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	4613      	mov	r3, r2
 8004846:	011b      	lsls	r3, r3, #4
 8004848:	4413      	add	r3, r2
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	440b      	add	r3, r1
 800484e:	3304      	adds	r3, #4
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	f042 8520 	bne.w	8007298 <leds_Task+0x2b94>
					{
						//Switch state
						leds_info.leds[i].state = led_st0;
 8004858:	494c      	ldr	r1, [pc, #304]	; (800498c <leds_Task+0x288>)
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	4613      	mov	r3, r2
 800485e:	011b      	lsls	r3, r3, #4
 8004860:	4413      	add	r3, r2
 8004862:	00db      	lsls	r3, r3, #3
 8004864:	440b      	add	r3, r1
 8004866:	3301      	adds	r3, #1
 8004868:	2200      	movs	r2, #0
 800486a:	701a      	strb	r2, [r3, #0]
						if( leds_info.leds[i].pwmch0_value0 > 0 ) {
 800486c:	4947      	ldr	r1, [pc, #284]	; (800498c <leds_Task+0x288>)
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	4613      	mov	r3, r2
 8004872:	011b      	lsls	r3, r3, #4
 8004874:	4413      	add	r3, r2
 8004876:	00db      	lsls	r3, r3, #3
 8004878:	440b      	add	r3, r1
 800487a:	330c      	adds	r3, #12
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b00      	cmp	r3, #0
 8004882:	d017      	beq.n	80048b4 <leds_Task+0x1b0>
							HAL_GPIO_WritePin(leds_info.leds[i].sim_port, leds_info.leds[i].sim_pin, GPIO_PIN_SET);
 8004884:	4941      	ldr	r1, [pc, #260]	; (800498c <leds_Task+0x288>)
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	4613      	mov	r3, r2
 800488a:	011b      	lsls	r3, r3, #4
 800488c:	4413      	add	r3, r2
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	440b      	add	r3, r1
 8004892:	333c      	adds	r3, #60	; 0x3c
 8004894:	6818      	ldr	r0, [r3, #0]
 8004896:	493d      	ldr	r1, [pc, #244]	; (800498c <leds_Task+0x288>)
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	4613      	mov	r3, r2
 800489c:	011b      	lsls	r3, r3, #4
 800489e:	4413      	add	r3, r2
 80048a0:	00db      	lsls	r3, r3, #3
 80048a2:	440b      	add	r3, r1
 80048a4:	3340      	adds	r3, #64	; 0x40
 80048a6:	881b      	ldrh	r3, [r3, #0]
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	2201      	movs	r2, #1
 80048ac:	4619      	mov	r1, r3
 80048ae:	f008 fb33 	bl	800cf18 <HAL_GPIO_WritePin>
 80048b2:	e016      	b.n	80048e2 <leds_Task+0x1de>
						}
						else {
							HAL_GPIO_WritePin(leds_info.leds[i].sim_port, leds_info.leds[i].sim_pin, GPIO_PIN_RESET);
 80048b4:	4935      	ldr	r1, [pc, #212]	; (800498c <leds_Task+0x288>)
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	4613      	mov	r3, r2
 80048ba:	011b      	lsls	r3, r3, #4
 80048bc:	4413      	add	r3, r2
 80048be:	00db      	lsls	r3, r3, #3
 80048c0:	440b      	add	r3, r1
 80048c2:	333c      	adds	r3, #60	; 0x3c
 80048c4:	6818      	ldr	r0, [r3, #0]
 80048c6:	4931      	ldr	r1, [pc, #196]	; (800498c <leds_Task+0x288>)
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	4613      	mov	r3, r2
 80048cc:	011b      	lsls	r3, r3, #4
 80048ce:	4413      	add	r3, r2
 80048d0:	00db      	lsls	r3, r3, #3
 80048d2:	440b      	add	r3, r1
 80048d4:	3340      	adds	r3, #64	; 0x40
 80048d6:	881b      	ldrh	r3, [r3, #0]
 80048d8:	b29b      	uxth	r3, r3
 80048da:	2200      	movs	r2, #0
 80048dc:	4619      	mov	r1, r3
 80048de:	f008 fb1b 	bl	800cf18 <HAL_GPIO_WritePin>
						}
						//Loops
						if( (leds_info.leds[i].loop_cnt > 1) || (leds_info.leds[i].loop_cnt == 0) )
 80048e2:	492a      	ldr	r1, [pc, #168]	; (800498c <leds_Task+0x288>)
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	4613      	mov	r3, r2
 80048e8:	011b      	lsls	r3, r3, #4
 80048ea:	4413      	add	r3, r2
 80048ec:	00db      	lsls	r3, r3, #3
 80048ee:	440b      	add	r3, r1
 80048f0:	3334      	adds	r3, #52	; 0x34
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d80a      	bhi.n	800490e <leds_Task+0x20a>
 80048f8:	4924      	ldr	r1, [pc, #144]	; (800498c <leds_Task+0x288>)
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	4613      	mov	r3, r2
 80048fe:	011b      	lsls	r3, r3, #4
 8004900:	4413      	add	r3, r2
 8004902:	00db      	lsls	r3, r3, #3
 8004904:	440b      	add	r3, r1
 8004906:	3334      	adds	r3, #52	; 0x34
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d131      	bne.n	8004972 <leds_Task+0x26e>
						{
							if( leds_info.leds[i].loop_cnt > 1 )
 800490e:	491f      	ldr	r1, [pc, #124]	; (800498c <leds_Task+0x288>)
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	4613      	mov	r3, r2
 8004914:	011b      	lsls	r3, r3, #4
 8004916:	4413      	add	r3, r2
 8004918:	00db      	lsls	r3, r3, #3
 800491a:	440b      	add	r3, r1
 800491c:	3334      	adds	r3, #52	; 0x34
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d912      	bls.n	800494a <leds_Task+0x246>
								leds_info.leds[i].loop_cnt--;
 8004924:	4919      	ldr	r1, [pc, #100]	; (800498c <leds_Task+0x288>)
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	4613      	mov	r3, r2
 800492a:	011b      	lsls	r3, r3, #4
 800492c:	4413      	add	r3, r2
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	440b      	add	r3, r1
 8004932:	3334      	adds	r3, #52	; 0x34
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	1e59      	subs	r1, r3, #1
 8004938:	4814      	ldr	r0, [pc, #80]	; (800498c <leds_Task+0x288>)
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	4613      	mov	r3, r2
 800493e:	011b      	lsls	r3, r3, #4
 8004940:	4413      	add	r3, r2
 8004942:	00db      	lsls	r3, r3, #3
 8004944:	4403      	add	r3, r0
 8004946:	3334      	adds	r3, #52	; 0x34
 8004948:	6019      	str	r1, [r3, #0]
							leds_info.leds[i].timer = leds_info.leds[i].anim_time_st0;
 800494a:	4910      	ldr	r1, [pc, #64]	; (800498c <leds_Task+0x288>)
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	4613      	mov	r3, r2
 8004950:	011b      	lsls	r3, r3, #4
 8004952:	4413      	add	r3, r2
 8004954:	00db      	lsls	r3, r3, #3
 8004956:	440b      	add	r3, r1
 8004958:	332c      	adds	r3, #44	; 0x2c
 800495a:	6819      	ldr	r1, [r3, #0]
 800495c:	480b      	ldr	r0, [pc, #44]	; (800498c <leds_Task+0x288>)
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	4613      	mov	r3, r2
 8004962:	011b      	lsls	r3, r3, #4
 8004964:	4413      	add	r3, r2
 8004966:	00db      	lsls	r3, r3, #3
 8004968:	4403      	add	r3, r0
 800496a:	3304      	adds	r3, #4
 800496c:	6019      	str	r1, [r3, #0]
 800496e:	f002 bc93 	b.w	8007298 <leds_Task+0x2b94>
						}
						//Stop blinking
						else
							leds_info.leds[i].mode = led_toggle;
 8004972:	4906      	ldr	r1, [pc, #24]	; (800498c <leds_Task+0x288>)
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	4613      	mov	r3, r2
 8004978:	011b      	lsls	r3, r3, #4
 800497a:	4413      	add	r3, r2
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	440b      	add	r3, r1
 8004980:	3302      	adds	r3, #2
 8004982:	2200      	movs	r2, #0
 8004984:	701a      	strb	r2, [r3, #0]
 8004986:	f002 bc87 	b.w	8007298 <leds_Task+0x2b94>
 800498a:	bf00      	nop
 800498c:	20000a44 	.word	0x20000a44
				}
			}
		}
		//PWM led
		//************************************************************************************************
		else if( leds_info.leds[i].type == led_pwm )
 8004990:	49b1      	ldr	r1, [pc, #708]	; (8004c58 <leds_Task+0x554>)
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	4613      	mov	r3, r2
 8004996:	011b      	lsls	r3, r3, #4
 8004998:	4413      	add	r3, r2
 800499a:	00db      	lsls	r3, r3, #3
 800499c:	440b      	add	r3, r1
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	f040 863a 	bne.w	800561c <leds_Task+0xf18>
		{
			//Blink mode
			//----------------------------------------------------------------------------------------------------------------
			if( leds_info.leds[i].mode == led_blink )
 80049a8:	49ab      	ldr	r1, [pc, #684]	; (8004c58 <leds_Task+0x554>)
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	4613      	mov	r3, r2
 80049ae:	011b      	lsls	r3, r3, #4
 80049b0:	4413      	add	r3, r2
 80049b2:	00db      	lsls	r3, r3, #3
 80049b4:	440b      	add	r3, r1
 80049b6:	3302      	adds	r3, #2
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b01      	cmp	r3, #1
 80049be:	f040 81db 	bne.w	8004d78 <leds_Task+0x674>
			{
				//Blink state 0
				if( leds_info.leds[i].state == led_st0 )
 80049c2:	49a5      	ldr	r1, [pc, #660]	; (8004c58 <leds_Task+0x554>)
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	4613      	mov	r3, r2
 80049c8:	011b      	lsls	r3, r3, #4
 80049ca:	4413      	add	r3, r2
 80049cc:	00db      	lsls	r3, r3, #3
 80049ce:	440b      	add	r3, r1
 80049d0:	3301      	adds	r3, #1
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f040 80be 	bne.w	8004b58 <leds_Task+0x454>
				{
					//Wait for the timer
					if( leds_info.leds[i].timer == 0 )
 80049dc:	499e      	ldr	r1, [pc, #632]	; (8004c58 <leds_Task+0x554>)
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	4613      	mov	r3, r2
 80049e2:	011b      	lsls	r3, r3, #4
 80049e4:	4413      	add	r3, r2
 80049e6:	00db      	lsls	r3, r3, #3
 80049e8:	440b      	add	r3, r1
 80049ea:	3304      	adds	r3, #4
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f042 8452 	bne.w	8007298 <leds_Task+0x2b94>
					{
						//Switch state
						leds_info.leds[i].state = led_st1;
 80049f4:	4998      	ldr	r1, [pc, #608]	; (8004c58 <leds_Task+0x554>)
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	4613      	mov	r3, r2
 80049fa:	011b      	lsls	r3, r3, #4
 80049fc:	4413      	add	r3, r2
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	440b      	add	r3, r1
 8004a02:	3301      	adds	r3, #1
 8004a04:	2201      	movs	r2, #1
 8004a06:	701a      	strb	r2, [r3, #0]
						leds_info.leds[i].pwmch0_cur_value = (float)leds_info.leds[i].pwmch0_value1;
 8004a08:	4993      	ldr	r1, [pc, #588]	; (8004c58 <leds_Task+0x554>)
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	011b      	lsls	r3, r3, #4
 8004a10:	4413      	add	r3, r2
 8004a12:	00db      	lsls	r3, r3, #3
 8004a14:	440b      	add	r3, r1
 8004a16:	330d      	adds	r3, #13
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	ee07 3a90 	vmov	s15, r3
 8004a20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a24:	498c      	ldr	r1, [pc, #560]	; (8004c58 <leds_Task+0x554>)
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	011b      	lsls	r3, r3, #4
 8004a2c:	4413      	add	r3, r2
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	440b      	add	r3, r1
 8004a32:	3308      	adds	r3, #8
 8004a34:	edc3 7a00 	vstr	s15, [r3]
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch0_tim,
 8004a38:	4987      	ldr	r1, [pc, #540]	; (8004c58 <leds_Task+0x554>)
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	011b      	lsls	r3, r3, #4
 8004a40:	4413      	add	r3, r2
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	440b      	add	r3, r1
 8004a46:	3348      	adds	r3, #72	; 0x48
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d116      	bne.n	8004a7c <leds_Task+0x378>
 8004a4e:	4982      	ldr	r1, [pc, #520]	; (8004c58 <leds_Task+0x554>)
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	4613      	mov	r3, r2
 8004a54:	011b      	lsls	r3, r3, #4
 8004a56:	4413      	add	r3, r2
 8004a58:	00db      	lsls	r3, r3, #3
 8004a5a:	440b      	add	r3, r1
 8004a5c:	330d      	adds	r3, #13
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	b2d8      	uxtb	r0, r3
 8004a62:	497d      	ldr	r1, [pc, #500]	; (8004c58 <leds_Task+0x554>)
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	4613      	mov	r3, r2
 8004a68:	011b      	lsls	r3, r3, #4
 8004a6a:	4413      	add	r3, r2
 8004a6c:	00db      	lsls	r3, r3, #3
 8004a6e:	440b      	add	r3, r1
 8004a70:	3344      	adds	r3, #68	; 0x44
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4602      	mov	r2, r0
 8004a78:	635a      	str	r2, [r3, #52]	; 0x34
 8004a7a:	e059      	b.n	8004b30 <leds_Task+0x42c>
 8004a7c:	4976      	ldr	r1, [pc, #472]	; (8004c58 <leds_Task+0x554>)
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	4613      	mov	r3, r2
 8004a82:	011b      	lsls	r3, r3, #4
 8004a84:	4413      	add	r3, r2
 8004a86:	00db      	lsls	r3, r3, #3
 8004a88:	440b      	add	r3, r1
 8004a8a:	3348      	adds	r3, #72	; 0x48
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	d116      	bne.n	8004ac0 <leds_Task+0x3bc>
 8004a92:	4971      	ldr	r1, [pc, #452]	; (8004c58 <leds_Task+0x554>)
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	4613      	mov	r3, r2
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	4413      	add	r3, r2
 8004a9c:	00db      	lsls	r3, r3, #3
 8004a9e:	440b      	add	r3, r1
 8004aa0:	330d      	adds	r3, #13
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	b2d8      	uxtb	r0, r3
 8004aa6:	496c      	ldr	r1, [pc, #432]	; (8004c58 <leds_Task+0x554>)
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	011b      	lsls	r3, r3, #4
 8004aae:	4413      	add	r3, r2
 8004ab0:	00db      	lsls	r3, r3, #3
 8004ab2:	440b      	add	r3, r1
 8004ab4:	3344      	adds	r3, #68	; 0x44
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	4603      	mov	r3, r0
 8004abc:	6393      	str	r3, [r2, #56]	; 0x38
 8004abe:	e037      	b.n	8004b30 <leds_Task+0x42c>
 8004ac0:	4965      	ldr	r1, [pc, #404]	; (8004c58 <leds_Task+0x554>)
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	011b      	lsls	r3, r3, #4
 8004ac8:	4413      	add	r3, r2
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	440b      	add	r3, r1
 8004ace:	3348      	adds	r3, #72	; 0x48
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2b08      	cmp	r3, #8
 8004ad4:	d116      	bne.n	8004b04 <leds_Task+0x400>
 8004ad6:	4960      	ldr	r1, [pc, #384]	; (8004c58 <leds_Task+0x554>)
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	4613      	mov	r3, r2
 8004adc:	011b      	lsls	r3, r3, #4
 8004ade:	4413      	add	r3, r2
 8004ae0:	00db      	lsls	r3, r3, #3
 8004ae2:	440b      	add	r3, r1
 8004ae4:	330d      	adds	r3, #13
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	b2d8      	uxtb	r0, r3
 8004aea:	495b      	ldr	r1, [pc, #364]	; (8004c58 <leds_Task+0x554>)
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	4613      	mov	r3, r2
 8004af0:	011b      	lsls	r3, r3, #4
 8004af2:	4413      	add	r3, r2
 8004af4:	00db      	lsls	r3, r3, #3
 8004af6:	440b      	add	r3, r1
 8004af8:	3344      	adds	r3, #68	; 0x44
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	4603      	mov	r3, r0
 8004b00:	63d3      	str	r3, [r2, #60]	; 0x3c
 8004b02:	e015      	b.n	8004b30 <leds_Task+0x42c>
 8004b04:	4954      	ldr	r1, [pc, #336]	; (8004c58 <leds_Task+0x554>)
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	011b      	lsls	r3, r3, #4
 8004b0c:	4413      	add	r3, r2
 8004b0e:	00db      	lsls	r3, r3, #3
 8004b10:	440b      	add	r3, r1
 8004b12:	330d      	adds	r3, #13
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	b2d8      	uxtb	r0, r3
 8004b18:	494f      	ldr	r1, [pc, #316]	; (8004c58 <leds_Task+0x554>)
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	011b      	lsls	r3, r3, #4
 8004b20:	4413      	add	r3, r2
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	440b      	add	r3, r1
 8004b26:	3344      	adds	r3, #68	; 0x44
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	6413      	str	r3, [r2, #64]	; 0x40
												leds_info.leds[i].pwmch0_timch, leds_info.leds[i].pwmch0_value1);
						leds_info.leds[i].timer = leds_info.leds[i].anim_time_st1;
 8004b30:	4949      	ldr	r1, [pc, #292]	; (8004c58 <leds_Task+0x554>)
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	4613      	mov	r3, r2
 8004b36:	011b      	lsls	r3, r3, #4
 8004b38:	4413      	add	r3, r2
 8004b3a:	00db      	lsls	r3, r3, #3
 8004b3c:	440b      	add	r3, r1
 8004b3e:	3330      	adds	r3, #48	; 0x30
 8004b40:	6819      	ldr	r1, [r3, #0]
 8004b42:	4845      	ldr	r0, [pc, #276]	; (8004c58 <leds_Task+0x554>)
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	4613      	mov	r3, r2
 8004b48:	011b      	lsls	r3, r3, #4
 8004b4a:	4413      	add	r3, r2
 8004b4c:	00db      	lsls	r3, r3, #3
 8004b4e:	4403      	add	r3, r0
 8004b50:	3304      	adds	r3, #4
 8004b52:	6019      	str	r1, [r3, #0]
 8004b54:	f002 bba0 	b.w	8007298 <leds_Task+0x2b94>
					}
				}
				//Blink state 1
				else if( leds_info.leds[i].state == led_st1 )
 8004b58:	493f      	ldr	r1, [pc, #252]	; (8004c58 <leds_Task+0x554>)
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	011b      	lsls	r3, r3, #4
 8004b60:	4413      	add	r3, r2
 8004b62:	00db      	lsls	r3, r3, #3
 8004b64:	440b      	add	r3, r1
 8004b66:	3301      	adds	r3, #1
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	f042 8393 	bne.w	8007298 <leds_Task+0x2b94>
				{
					if( leds_info.leds[i].timer == 0 )
 8004b72:	4939      	ldr	r1, [pc, #228]	; (8004c58 <leds_Task+0x554>)
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	4613      	mov	r3, r2
 8004b78:	011b      	lsls	r3, r3, #4
 8004b7a:	4413      	add	r3, r2
 8004b7c:	00db      	lsls	r3, r3, #3
 8004b7e:	440b      	add	r3, r1
 8004b80:	3304      	adds	r3, #4
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f042 8387 	bne.w	8007298 <leds_Task+0x2b94>
					{
						//Switch state
						leds_info.leds[i].state = led_st0;
 8004b8a:	4933      	ldr	r1, [pc, #204]	; (8004c58 <leds_Task+0x554>)
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	011b      	lsls	r3, r3, #4
 8004b92:	4413      	add	r3, r2
 8004b94:	00db      	lsls	r3, r3, #3
 8004b96:	440b      	add	r3, r1
 8004b98:	3301      	adds	r3, #1
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	701a      	strb	r2, [r3, #0]
						leds_info.leds[i].pwmch0_cur_value = (float)leds_info.leds[i].pwmch0_value0;
 8004b9e:	492e      	ldr	r1, [pc, #184]	; (8004c58 <leds_Task+0x554>)
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	011b      	lsls	r3, r3, #4
 8004ba6:	4413      	add	r3, r2
 8004ba8:	00db      	lsls	r3, r3, #3
 8004baa:	440b      	add	r3, r1
 8004bac:	330c      	adds	r3, #12
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	ee07 3a90 	vmov	s15, r3
 8004bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bba:	4927      	ldr	r1, [pc, #156]	; (8004c58 <leds_Task+0x554>)
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	011b      	lsls	r3, r3, #4
 8004bc2:	4413      	add	r3, r2
 8004bc4:	00db      	lsls	r3, r3, #3
 8004bc6:	440b      	add	r3, r1
 8004bc8:	3308      	adds	r3, #8
 8004bca:	edc3 7a00 	vstr	s15, [r3]
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch0_tim,
 8004bce:	4922      	ldr	r1, [pc, #136]	; (8004c58 <leds_Task+0x554>)
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	011b      	lsls	r3, r3, #4
 8004bd6:	4413      	add	r3, r2
 8004bd8:	00db      	lsls	r3, r3, #3
 8004bda:	440b      	add	r3, r1
 8004bdc:	3348      	adds	r3, #72	; 0x48
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d116      	bne.n	8004c12 <leds_Task+0x50e>
 8004be4:	491c      	ldr	r1, [pc, #112]	; (8004c58 <leds_Task+0x554>)
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	4613      	mov	r3, r2
 8004bea:	011b      	lsls	r3, r3, #4
 8004bec:	4413      	add	r3, r2
 8004bee:	00db      	lsls	r3, r3, #3
 8004bf0:	440b      	add	r3, r1
 8004bf2:	330c      	adds	r3, #12
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	b2d8      	uxtb	r0, r3
 8004bf8:	4917      	ldr	r1, [pc, #92]	; (8004c58 <leds_Task+0x554>)
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	011b      	lsls	r3, r3, #4
 8004c00:	4413      	add	r3, r2
 8004c02:	00db      	lsls	r3, r3, #3
 8004c04:	440b      	add	r3, r1
 8004c06:	3344      	adds	r3, #68	; 0x44
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	635a      	str	r2, [r3, #52]	; 0x34
 8004c10:	e05c      	b.n	8004ccc <leds_Task+0x5c8>
 8004c12:	4911      	ldr	r1, [pc, #68]	; (8004c58 <leds_Task+0x554>)
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	4613      	mov	r3, r2
 8004c18:	011b      	lsls	r3, r3, #4
 8004c1a:	4413      	add	r3, r2
 8004c1c:	00db      	lsls	r3, r3, #3
 8004c1e:	440b      	add	r3, r1
 8004c20:	3348      	adds	r3, #72	; 0x48
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2b04      	cmp	r3, #4
 8004c26:	d119      	bne.n	8004c5c <leds_Task+0x558>
 8004c28:	490b      	ldr	r1, [pc, #44]	; (8004c58 <leds_Task+0x554>)
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	011b      	lsls	r3, r3, #4
 8004c30:	4413      	add	r3, r2
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	440b      	add	r3, r1
 8004c36:	330c      	adds	r3, #12
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	b2d8      	uxtb	r0, r3
 8004c3c:	4906      	ldr	r1, [pc, #24]	; (8004c58 <leds_Task+0x554>)
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	4613      	mov	r3, r2
 8004c42:	011b      	lsls	r3, r3, #4
 8004c44:	4413      	add	r3, r2
 8004c46:	00db      	lsls	r3, r3, #3
 8004c48:	440b      	add	r3, r1
 8004c4a:	3344      	adds	r3, #68	; 0x44
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	4603      	mov	r3, r0
 8004c52:	6393      	str	r3, [r2, #56]	; 0x38
 8004c54:	e03a      	b.n	8004ccc <leds_Task+0x5c8>
 8004c56:	bf00      	nop
 8004c58:	20000a44 	.word	0x20000a44
 8004c5c:	4945      	ldr	r1, [pc, #276]	; (8004d74 <leds_Task+0x670>)
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	4613      	mov	r3, r2
 8004c62:	011b      	lsls	r3, r3, #4
 8004c64:	4413      	add	r3, r2
 8004c66:	00db      	lsls	r3, r3, #3
 8004c68:	440b      	add	r3, r1
 8004c6a:	3348      	adds	r3, #72	; 0x48
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2b08      	cmp	r3, #8
 8004c70:	d116      	bne.n	8004ca0 <leds_Task+0x59c>
 8004c72:	4940      	ldr	r1, [pc, #256]	; (8004d74 <leds_Task+0x670>)
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	4613      	mov	r3, r2
 8004c78:	011b      	lsls	r3, r3, #4
 8004c7a:	4413      	add	r3, r2
 8004c7c:	00db      	lsls	r3, r3, #3
 8004c7e:	440b      	add	r3, r1
 8004c80:	330c      	adds	r3, #12
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	b2d8      	uxtb	r0, r3
 8004c86:	493b      	ldr	r1, [pc, #236]	; (8004d74 <leds_Task+0x670>)
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	011b      	lsls	r3, r3, #4
 8004c8e:	4413      	add	r3, r2
 8004c90:	00db      	lsls	r3, r3, #3
 8004c92:	440b      	add	r3, r1
 8004c94:	3344      	adds	r3, #68	; 0x44
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	63d3      	str	r3, [r2, #60]	; 0x3c
 8004c9e:	e015      	b.n	8004ccc <leds_Task+0x5c8>
 8004ca0:	4934      	ldr	r1, [pc, #208]	; (8004d74 <leds_Task+0x670>)
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	011b      	lsls	r3, r3, #4
 8004ca8:	4413      	add	r3, r2
 8004caa:	00db      	lsls	r3, r3, #3
 8004cac:	440b      	add	r3, r1
 8004cae:	330c      	adds	r3, #12
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	b2d8      	uxtb	r0, r3
 8004cb4:	492f      	ldr	r1, [pc, #188]	; (8004d74 <leds_Task+0x670>)
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	011b      	lsls	r3, r3, #4
 8004cbc:	4413      	add	r3, r2
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	440b      	add	r3, r1
 8004cc2:	3344      	adds	r3, #68	; 0x44
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	4603      	mov	r3, r0
 8004cca:	6413      	str	r3, [r2, #64]	; 0x40
												leds_info.leds[i].pwmch0_timch, leds_info.leds[i].pwmch0_value0);
						//Loops
						if( (leds_info.leds[i].loop_cnt > 1) || (leds_info.leds[i].loop_cnt == 0) )
 8004ccc:	4929      	ldr	r1, [pc, #164]	; (8004d74 <leds_Task+0x670>)
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	011b      	lsls	r3, r3, #4
 8004cd4:	4413      	add	r3, r2
 8004cd6:	00db      	lsls	r3, r3, #3
 8004cd8:	440b      	add	r3, r1
 8004cda:	3334      	adds	r3, #52	; 0x34
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d80a      	bhi.n	8004cf8 <leds_Task+0x5f4>
 8004ce2:	4924      	ldr	r1, [pc, #144]	; (8004d74 <leds_Task+0x670>)
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	011b      	lsls	r3, r3, #4
 8004cea:	4413      	add	r3, r2
 8004cec:	00db      	lsls	r3, r3, #3
 8004cee:	440b      	add	r3, r1
 8004cf0:	3334      	adds	r3, #52	; 0x34
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d131      	bne.n	8004d5c <leds_Task+0x658>
						{
							if( leds_info.leds[i].loop_cnt > 1 )
 8004cf8:	491e      	ldr	r1, [pc, #120]	; (8004d74 <leds_Task+0x670>)
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	011b      	lsls	r3, r3, #4
 8004d00:	4413      	add	r3, r2
 8004d02:	00db      	lsls	r3, r3, #3
 8004d04:	440b      	add	r3, r1
 8004d06:	3334      	adds	r3, #52	; 0x34
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d912      	bls.n	8004d34 <leds_Task+0x630>
								leds_info.leds[i].loop_cnt--;
 8004d0e:	4919      	ldr	r1, [pc, #100]	; (8004d74 <leds_Task+0x670>)
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	4613      	mov	r3, r2
 8004d14:	011b      	lsls	r3, r3, #4
 8004d16:	4413      	add	r3, r2
 8004d18:	00db      	lsls	r3, r3, #3
 8004d1a:	440b      	add	r3, r1
 8004d1c:	3334      	adds	r3, #52	; 0x34
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	1e59      	subs	r1, r3, #1
 8004d22:	4814      	ldr	r0, [pc, #80]	; (8004d74 <leds_Task+0x670>)
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	4613      	mov	r3, r2
 8004d28:	011b      	lsls	r3, r3, #4
 8004d2a:	4413      	add	r3, r2
 8004d2c:	00db      	lsls	r3, r3, #3
 8004d2e:	4403      	add	r3, r0
 8004d30:	3334      	adds	r3, #52	; 0x34
 8004d32:	6019      	str	r1, [r3, #0]
							leds_info.leds[i].timer = leds_info.leds[i].anim_time_st0;
 8004d34:	490f      	ldr	r1, [pc, #60]	; (8004d74 <leds_Task+0x670>)
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	011b      	lsls	r3, r3, #4
 8004d3c:	4413      	add	r3, r2
 8004d3e:	00db      	lsls	r3, r3, #3
 8004d40:	440b      	add	r3, r1
 8004d42:	332c      	adds	r3, #44	; 0x2c
 8004d44:	6819      	ldr	r1, [r3, #0]
 8004d46:	480b      	ldr	r0, [pc, #44]	; (8004d74 <leds_Task+0x670>)
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	011b      	lsls	r3, r3, #4
 8004d4e:	4413      	add	r3, r2
 8004d50:	00db      	lsls	r3, r3, #3
 8004d52:	4403      	add	r3, r0
 8004d54:	3304      	adds	r3, #4
 8004d56:	6019      	str	r1, [r3, #0]
 8004d58:	f002 ba9e 	b.w	8007298 <leds_Task+0x2b94>
						}
						//Stop blinking
						else
							leds_info.leds[i].mode = led_toggle;
 8004d5c:	4905      	ldr	r1, [pc, #20]	; (8004d74 <leds_Task+0x670>)
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	4613      	mov	r3, r2
 8004d62:	011b      	lsls	r3, r3, #4
 8004d64:	4413      	add	r3, r2
 8004d66:	00db      	lsls	r3, r3, #3
 8004d68:	440b      	add	r3, r1
 8004d6a:	3302      	adds	r3, #2
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	701a      	strb	r2, [r3, #0]
 8004d70:	f002 ba92 	b.w	8007298 <leds_Task+0x2b94>
 8004d74:	20000a44 	.word	0x20000a44
					}
				}
			}
			//Fade blink mode
			//----------------------------------------------------------------------------------------------------------------
			else if( leds_info.leds[i].mode == led_fadeblink )
 8004d78:	49c1      	ldr	r1, [pc, #772]	; (8005080 <leds_Task+0x97c>)
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	011b      	lsls	r3, r3, #4
 8004d80:	4413      	add	r3, r2
 8004d82:	00db      	lsls	r3, r3, #3
 8004d84:	440b      	add	r3, r1
 8004d86:	3302      	adds	r3, #2
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	f040 8330 	bne.w	80053f2 <leds_Task+0xcee>
			{
				//
				if( leds_info.leds[i].state == led_go_to_st1 )
 8004d92:	49bb      	ldr	r1, [pc, #748]	; (8005080 <leds_Task+0x97c>)
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	4613      	mov	r3, r2
 8004d98:	011b      	lsls	r3, r3, #4
 8004d9a:	4413      	add	r3, r2
 8004d9c:	00db      	lsls	r3, r3, #3
 8004d9e:	440b      	add	r3, r1
 8004da0:	3301      	adds	r3, #1
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b03      	cmp	r3, #3
 8004da8:	f040 816e 	bne.w	8005088 <leds_Task+0x984>
				{
					if( leds_info.leds[i].timer == 0 )
 8004dac:	49b4      	ldr	r1, [pc, #720]	; (8005080 <leds_Task+0x97c>)
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	4613      	mov	r3, r2
 8004db2:	011b      	lsls	r3, r3, #4
 8004db4:	4413      	add	r3, r2
 8004db6:	00db      	lsls	r3, r3, #3
 8004db8:	440b      	add	r3, r1
 8004dba:	3304      	adds	r3, #4
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f042 826a 	bne.w	8007298 <leds_Task+0x2b94>
					{
						leds_info.leds[i].timer = LEDS_FADE_STEP_TIME;
 8004dc4:	49ae      	ldr	r1, [pc, #696]	; (8005080 <leds_Task+0x97c>)
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	011b      	lsls	r3, r3, #4
 8004dcc:	4413      	add	r3, r2
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	440b      	add	r3, r1
 8004dd2:	3304      	adds	r3, #4
 8004dd4:	2214      	movs	r2, #20
 8004dd6:	601a      	str	r2, [r3, #0]
						leds_info.leds[i].pwmch0_cur_value += leds_info.leds[i].pwmch0_step;
 8004dd8:	49a9      	ldr	r1, [pc, #676]	; (8005080 <leds_Task+0x97c>)
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	011b      	lsls	r3, r3, #4
 8004de0:	4413      	add	r3, r2
 8004de2:	00db      	lsls	r3, r3, #3
 8004de4:	440b      	add	r3, r1
 8004de6:	3310      	adds	r3, #16
 8004de8:	ed93 7a00 	vldr	s14, [r3]
 8004dec:	49a4      	ldr	r1, [pc, #656]	; (8005080 <leds_Task+0x97c>)
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	4613      	mov	r3, r2
 8004df2:	011b      	lsls	r3, r3, #4
 8004df4:	4413      	add	r3, r2
 8004df6:	00db      	lsls	r3, r3, #3
 8004df8:	440b      	add	r3, r1
 8004dfa:	3308      	adds	r3, #8
 8004dfc:	edd3 7a00 	vldr	s15, [r3]
 8004e00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e04:	499e      	ldr	r1, [pc, #632]	; (8005080 <leds_Task+0x97c>)
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	011b      	lsls	r3, r3, #4
 8004e0c:	4413      	add	r3, r2
 8004e0e:	00db      	lsls	r3, r3, #3
 8004e10:	440b      	add	r3, r1
 8004e12:	3308      	adds	r3, #8
 8004e14:	edc3 7a00 	vstr	s15, [r3]
						if( leds_info.leds[i].step_cnt-- == 0 )
 8004e18:	4999      	ldr	r1, [pc, #612]	; (8005080 <leds_Task+0x97c>)
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	011b      	lsls	r3, r3, #4
 8004e20:	4413      	add	r3, r2
 8004e22:	00db      	lsls	r3, r3, #3
 8004e24:	440b      	add	r3, r1
 8004e26:	3338      	adds	r3, #56	; 0x38
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	1e50      	subs	r0, r2, #1
 8004e2c:	4c94      	ldr	r4, [pc, #592]	; (8005080 <leds_Task+0x97c>)
 8004e2e:	68f9      	ldr	r1, [r7, #12]
 8004e30:	460b      	mov	r3, r1
 8004e32:	011b      	lsls	r3, r3, #4
 8004e34:	440b      	add	r3, r1
 8004e36:	00db      	lsls	r3, r3, #3
 8004e38:	4423      	add	r3, r4
 8004e3a:	3338      	adds	r3, #56	; 0x38
 8004e3c:	6018      	str	r0, [r3, #0]
 8004e3e:	2a00      	cmp	r2, #0
 8004e40:	f040 8084 	bne.w	8004f4c <leds_Task+0x848>
						{
							leds_info.leds[i].pwmch0_cur_value = (float)leds_info.leds[i].pwmch0_value1;
 8004e44:	498e      	ldr	r1, [pc, #568]	; (8005080 <leds_Task+0x97c>)
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	4613      	mov	r3, r2
 8004e4a:	011b      	lsls	r3, r3, #4
 8004e4c:	4413      	add	r3, r2
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	440b      	add	r3, r1
 8004e52:	330d      	adds	r3, #13
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	ee07 3a90 	vmov	s15, r3
 8004e5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e60:	4987      	ldr	r1, [pc, #540]	; (8005080 <leds_Task+0x97c>)
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	4613      	mov	r3, r2
 8004e66:	011b      	lsls	r3, r3, #4
 8004e68:	4413      	add	r3, r2
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	440b      	add	r3, r1
 8004e6e:	3308      	adds	r3, #8
 8004e70:	edc3 7a00 	vstr	s15, [r3]
							leds_info.leds[i].state = led_go_to_st0;
 8004e74:	4982      	ldr	r1, [pc, #520]	; (8005080 <leds_Task+0x97c>)
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	011b      	lsls	r3, r3, #4
 8004e7c:	4413      	add	r3, r2
 8004e7e:	00db      	lsls	r3, r3, #3
 8004e80:	440b      	add	r3, r1
 8004e82:	3301      	adds	r3, #1
 8004e84:	2202      	movs	r2, #2
 8004e86:	701a      	strb	r2, [r3, #0]
							leds_info.leds[i].step_cnt = leds_info.leds[i].anim_time_st1 / LEDS_FADE_STEP_TIME;
 8004e88:	497d      	ldr	r1, [pc, #500]	; (8005080 <leds_Task+0x97c>)
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	011b      	lsls	r3, r3, #4
 8004e90:	4413      	add	r3, r2
 8004e92:	00db      	lsls	r3, r3, #3
 8004e94:	440b      	add	r3, r1
 8004e96:	3330      	adds	r3, #48	; 0x30
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a7a      	ldr	r2, [pc, #488]	; (8005084 <leds_Task+0x980>)
 8004e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea0:	0919      	lsrs	r1, r3, #4
 8004ea2:	4877      	ldr	r0, [pc, #476]	; (8005080 <leds_Task+0x97c>)
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	011b      	lsls	r3, r3, #4
 8004eaa:	4413      	add	r3, r2
 8004eac:	00db      	lsls	r3, r3, #3
 8004eae:	4403      	add	r3, r0
 8004eb0:	3338      	adds	r3, #56	; 0x38
 8004eb2:	6019      	str	r1, [r3, #0]
							if( leds_info.leds[i].step_cnt == 0 )
 8004eb4:	4972      	ldr	r1, [pc, #456]	; (8005080 <leds_Task+0x97c>)
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	011b      	lsls	r3, r3, #4
 8004ebc:	4413      	add	r3, r2
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	440b      	add	r3, r1
 8004ec2:	3338      	adds	r3, #56	; 0x38
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d109      	bne.n	8004ede <leds_Task+0x7da>
								leds_info.leds[i].step_cnt = 1;
 8004eca:	496d      	ldr	r1, [pc, #436]	; (8005080 <leds_Task+0x97c>)
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	011b      	lsls	r3, r3, #4
 8004ed2:	4413      	add	r3, r2
 8004ed4:	00db      	lsls	r3, r3, #3
 8004ed6:	440b      	add	r3, r1
 8004ed8:	3338      	adds	r3, #56	; 0x38
 8004eda:	2201      	movs	r2, #1
 8004edc:	601a      	str	r2, [r3, #0]
							leds_info.leds[i].pwmch0_step = ((float)leds_info.leds[i].pwmch0_value0 - (float)leds_info.leds[i].pwmch0_value1) / (float)leds_info.leds[i].step_cnt;
 8004ede:	4968      	ldr	r1, [pc, #416]	; (8005080 <leds_Task+0x97c>)
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	011b      	lsls	r3, r3, #4
 8004ee6:	4413      	add	r3, r2
 8004ee8:	00db      	lsls	r3, r3, #3
 8004eea:	440b      	add	r3, r1
 8004eec:	330c      	adds	r3, #12
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	ee07 3a90 	vmov	s15, r3
 8004ef6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004efa:	4961      	ldr	r1, [pc, #388]	; (8005080 <leds_Task+0x97c>)
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	4613      	mov	r3, r2
 8004f00:	011b      	lsls	r3, r3, #4
 8004f02:	4413      	add	r3, r2
 8004f04:	00db      	lsls	r3, r3, #3
 8004f06:	440b      	add	r3, r1
 8004f08:	330d      	adds	r3, #13
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	ee07 3a90 	vmov	s15, r3
 8004f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f16:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004f1a:	4959      	ldr	r1, [pc, #356]	; (8005080 <leds_Task+0x97c>)
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	011b      	lsls	r3, r3, #4
 8004f22:	4413      	add	r3, r2
 8004f24:	00db      	lsls	r3, r3, #3
 8004f26:	440b      	add	r3, r1
 8004f28:	3338      	adds	r3, #56	; 0x38
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	ee07 3a90 	vmov	s15, r3
 8004f30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f38:	4951      	ldr	r1, [pc, #324]	; (8005080 <leds_Task+0x97c>)
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	011b      	lsls	r3, r3, #4
 8004f40:	4413      	add	r3, r2
 8004f42:	00db      	lsls	r3, r3, #3
 8004f44:	440b      	add	r3, r1
 8004f46:	3310      	adds	r3, #16
 8004f48:	edc3 7a00 	vstr	s15, [r3]
						}
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch0_tim,
 8004f4c:	494c      	ldr	r1, [pc, #304]	; (8005080 <leds_Task+0x97c>)
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	4613      	mov	r3, r2
 8004f52:	011b      	lsls	r3, r3, #4
 8004f54:	4413      	add	r3, r2
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	440b      	add	r3, r1
 8004f5a:	3348      	adds	r3, #72	; 0x48
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d11d      	bne.n	8004f9e <leds_Task+0x89a>
 8004f62:	4947      	ldr	r1, [pc, #284]	; (8005080 <leds_Task+0x97c>)
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	4613      	mov	r3, r2
 8004f68:	011b      	lsls	r3, r3, #4
 8004f6a:	4413      	add	r3, r2
 8004f6c:	00db      	lsls	r3, r3, #3
 8004f6e:	440b      	add	r3, r1
 8004f70:	3308      	adds	r3, #8
 8004f72:	edd3 7a00 	vldr	s15, [r3]
 8004f76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f7a:	edc7 7a01 	vstr	s15, [r7, #4]
 8004f7e:	793b      	ldrb	r3, [r7, #4]
 8004f80:	b2d8      	uxtb	r0, r3
 8004f82:	493f      	ldr	r1, [pc, #252]	; (8005080 <leds_Task+0x97c>)
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	4613      	mov	r3, r2
 8004f88:	011b      	lsls	r3, r3, #4
 8004f8a:	4413      	add	r3, r2
 8004f8c:	00db      	lsls	r3, r3, #3
 8004f8e:	440b      	add	r3, r1
 8004f90:	3344      	adds	r3, #68	; 0x44
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4602      	mov	r2, r0
 8004f98:	635a      	str	r2, [r3, #52]	; 0x34
 8004f9a:	f002 b97d 	b.w	8007298 <leds_Task+0x2b94>
 8004f9e:	4938      	ldr	r1, [pc, #224]	; (8005080 <leds_Task+0x97c>)
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	011b      	lsls	r3, r3, #4
 8004fa6:	4413      	add	r3, r2
 8004fa8:	00db      	lsls	r3, r3, #3
 8004faa:	440b      	add	r3, r1
 8004fac:	3348      	adds	r3, #72	; 0x48
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2b04      	cmp	r3, #4
 8004fb2:	d11d      	bne.n	8004ff0 <leds_Task+0x8ec>
 8004fb4:	4932      	ldr	r1, [pc, #200]	; (8005080 <leds_Task+0x97c>)
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	4613      	mov	r3, r2
 8004fba:	011b      	lsls	r3, r3, #4
 8004fbc:	4413      	add	r3, r2
 8004fbe:	00db      	lsls	r3, r3, #3
 8004fc0:	440b      	add	r3, r1
 8004fc2:	3308      	adds	r3, #8
 8004fc4:	edd3 7a00 	vldr	s15, [r3]
 8004fc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fcc:	edc7 7a01 	vstr	s15, [r7, #4]
 8004fd0:	793b      	ldrb	r3, [r7, #4]
 8004fd2:	b2d8      	uxtb	r0, r3
 8004fd4:	492a      	ldr	r1, [pc, #168]	; (8005080 <leds_Task+0x97c>)
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	011b      	lsls	r3, r3, #4
 8004fdc:	4413      	add	r3, r2
 8004fde:	00db      	lsls	r3, r3, #3
 8004fe0:	440b      	add	r3, r1
 8004fe2:	3344      	adds	r3, #68	; 0x44
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	4603      	mov	r3, r0
 8004fea:	6393      	str	r3, [r2, #56]	; 0x38
 8004fec:	f002 b954 	b.w	8007298 <leds_Task+0x2b94>
 8004ff0:	4923      	ldr	r1, [pc, #140]	; (8005080 <leds_Task+0x97c>)
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	011b      	lsls	r3, r3, #4
 8004ff8:	4413      	add	r3, r2
 8004ffa:	00db      	lsls	r3, r3, #3
 8004ffc:	440b      	add	r3, r1
 8004ffe:	3348      	adds	r3, #72	; 0x48
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2b08      	cmp	r3, #8
 8005004:	d11d      	bne.n	8005042 <leds_Task+0x93e>
 8005006:	491e      	ldr	r1, [pc, #120]	; (8005080 <leds_Task+0x97c>)
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	4613      	mov	r3, r2
 800500c:	011b      	lsls	r3, r3, #4
 800500e:	4413      	add	r3, r2
 8005010:	00db      	lsls	r3, r3, #3
 8005012:	440b      	add	r3, r1
 8005014:	3308      	adds	r3, #8
 8005016:	edd3 7a00 	vldr	s15, [r3]
 800501a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800501e:	edc7 7a01 	vstr	s15, [r7, #4]
 8005022:	793b      	ldrb	r3, [r7, #4]
 8005024:	b2d8      	uxtb	r0, r3
 8005026:	4916      	ldr	r1, [pc, #88]	; (8005080 <leds_Task+0x97c>)
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	4613      	mov	r3, r2
 800502c:	011b      	lsls	r3, r3, #4
 800502e:	4413      	add	r3, r2
 8005030:	00db      	lsls	r3, r3, #3
 8005032:	440b      	add	r3, r1
 8005034:	3344      	adds	r3, #68	; 0x44
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	4603      	mov	r3, r0
 800503c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800503e:	f002 b92b 	b.w	8007298 <leds_Task+0x2b94>
 8005042:	490f      	ldr	r1, [pc, #60]	; (8005080 <leds_Task+0x97c>)
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	4613      	mov	r3, r2
 8005048:	011b      	lsls	r3, r3, #4
 800504a:	4413      	add	r3, r2
 800504c:	00db      	lsls	r3, r3, #3
 800504e:	440b      	add	r3, r1
 8005050:	3308      	adds	r3, #8
 8005052:	edd3 7a00 	vldr	s15, [r3]
 8005056:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800505a:	edc7 7a01 	vstr	s15, [r7, #4]
 800505e:	793b      	ldrb	r3, [r7, #4]
 8005060:	b2d8      	uxtb	r0, r3
 8005062:	4907      	ldr	r1, [pc, #28]	; (8005080 <leds_Task+0x97c>)
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	4613      	mov	r3, r2
 8005068:	011b      	lsls	r3, r3, #4
 800506a:	4413      	add	r3, r2
 800506c:	00db      	lsls	r3, r3, #3
 800506e:	440b      	add	r3, r1
 8005070:	3344      	adds	r3, #68	; 0x44
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	4603      	mov	r3, r0
 8005078:	6413      	str	r3, [r2, #64]	; 0x40
 800507a:	f002 b90d 	b.w	8007298 <leds_Task+0x2b94>
 800507e:	bf00      	nop
 8005080:	20000a44 	.word	0x20000a44
 8005084:	cccccccd 	.word	0xcccccccd
											leds_info.leds[i].pwmch0_timch, (uint8_t)leds_info.leds[i].pwmch0_cur_value);
					}
				}
				else if( leds_info.leds[i].state == led_go_to_st0 )
 8005088:	49b4      	ldr	r1, [pc, #720]	; (800535c <leds_Task+0xc58>)
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	4613      	mov	r3, r2
 800508e:	011b      	lsls	r3, r3, #4
 8005090:	4413      	add	r3, r2
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	440b      	add	r3, r1
 8005096:	3301      	adds	r3, #1
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b02      	cmp	r3, #2
 800509e:	f042 80fb 	bne.w	8007298 <leds_Task+0x2b94>
				{
					if( leds_info.leds[i].timer == 0 )
 80050a2:	49ae      	ldr	r1, [pc, #696]	; (800535c <leds_Task+0xc58>)
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	4613      	mov	r3, r2
 80050a8:	011b      	lsls	r3, r3, #4
 80050aa:	4413      	add	r3, r2
 80050ac:	00db      	lsls	r3, r3, #3
 80050ae:	440b      	add	r3, r1
 80050b0:	3304      	adds	r3, #4
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f042 80ef 	bne.w	8007298 <leds_Task+0x2b94>
					{
						leds_info.leds[i].timer = LEDS_FADE_STEP_TIME;
 80050ba:	49a8      	ldr	r1, [pc, #672]	; (800535c <leds_Task+0xc58>)
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	4613      	mov	r3, r2
 80050c0:	011b      	lsls	r3, r3, #4
 80050c2:	4413      	add	r3, r2
 80050c4:	00db      	lsls	r3, r3, #3
 80050c6:	440b      	add	r3, r1
 80050c8:	3304      	adds	r3, #4
 80050ca:	2214      	movs	r2, #20
 80050cc:	601a      	str	r2, [r3, #0]
						leds_info.leds[i].pwmch0_cur_value += leds_info.leds[i].pwmch0_step;
 80050ce:	49a3      	ldr	r1, [pc, #652]	; (800535c <leds_Task+0xc58>)
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	4613      	mov	r3, r2
 80050d4:	011b      	lsls	r3, r3, #4
 80050d6:	4413      	add	r3, r2
 80050d8:	00db      	lsls	r3, r3, #3
 80050da:	440b      	add	r3, r1
 80050dc:	3310      	adds	r3, #16
 80050de:	ed93 7a00 	vldr	s14, [r3]
 80050e2:	499e      	ldr	r1, [pc, #632]	; (800535c <leds_Task+0xc58>)
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	4613      	mov	r3, r2
 80050e8:	011b      	lsls	r3, r3, #4
 80050ea:	4413      	add	r3, r2
 80050ec:	00db      	lsls	r3, r3, #3
 80050ee:	440b      	add	r3, r1
 80050f0:	3308      	adds	r3, #8
 80050f2:	edd3 7a00 	vldr	s15, [r3]
 80050f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050fa:	4998      	ldr	r1, [pc, #608]	; (800535c <leds_Task+0xc58>)
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	4613      	mov	r3, r2
 8005100:	011b      	lsls	r3, r3, #4
 8005102:	4413      	add	r3, r2
 8005104:	00db      	lsls	r3, r3, #3
 8005106:	440b      	add	r3, r1
 8005108:	3308      	adds	r3, #8
 800510a:	edc3 7a00 	vstr	s15, [r3]
						if( leds_info.leds[i].step_cnt-- == 0 )
 800510e:	4993      	ldr	r1, [pc, #588]	; (800535c <leds_Task+0xc58>)
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	4613      	mov	r3, r2
 8005114:	011b      	lsls	r3, r3, #4
 8005116:	4413      	add	r3, r2
 8005118:	00db      	lsls	r3, r3, #3
 800511a:	440b      	add	r3, r1
 800511c:	3338      	adds	r3, #56	; 0x38
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	1e50      	subs	r0, r2, #1
 8005122:	4c8e      	ldr	r4, [pc, #568]	; (800535c <leds_Task+0xc58>)
 8005124:	68f9      	ldr	r1, [r7, #12]
 8005126:	460b      	mov	r3, r1
 8005128:	011b      	lsls	r3, r3, #4
 800512a:	440b      	add	r3, r1
 800512c:	00db      	lsls	r3, r3, #3
 800512e:	4423      	add	r3, r4
 8005130:	3338      	adds	r3, #56	; 0x38
 8005132:	6018      	str	r0, [r3, #0]
 8005134:	2a00      	cmp	r2, #0
 8005136:	f040 80bf 	bne.w	80052b8 <leds_Task+0xbb4>
						{
							if( (leds_info.leds[i].loop_cnt > 1) || (leds_info.leds[i].loop_cnt == 0) )
 800513a:	4988      	ldr	r1, [pc, #544]	; (800535c <leds_Task+0xc58>)
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	4613      	mov	r3, r2
 8005140:	011b      	lsls	r3, r3, #4
 8005142:	4413      	add	r3, r2
 8005144:	00db      	lsls	r3, r3, #3
 8005146:	440b      	add	r3, r1
 8005148:	3334      	adds	r3, #52	; 0x34
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d80b      	bhi.n	8005168 <leds_Task+0xa64>
 8005150:	4982      	ldr	r1, [pc, #520]	; (800535c <leds_Task+0xc58>)
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	4613      	mov	r3, r2
 8005156:	011b      	lsls	r3, r3, #4
 8005158:	4413      	add	r3, r2
 800515a:	00db      	lsls	r3, r3, #3
 800515c:	440b      	add	r3, r1
 800515e:	3334      	adds	r3, #52	; 0x34
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	f040 80a3 	bne.w	80052ae <leds_Task+0xbaa>
							{
								if( leds_info.leds[i].loop_cnt > 1 )
 8005168:	497c      	ldr	r1, [pc, #496]	; (800535c <leds_Task+0xc58>)
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	4613      	mov	r3, r2
 800516e:	011b      	lsls	r3, r3, #4
 8005170:	4413      	add	r3, r2
 8005172:	00db      	lsls	r3, r3, #3
 8005174:	440b      	add	r3, r1
 8005176:	3334      	adds	r3, #52	; 0x34
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2b01      	cmp	r3, #1
 800517c:	d912      	bls.n	80051a4 <leds_Task+0xaa0>
									leds_info.leds[i].loop_cnt--;
 800517e:	4977      	ldr	r1, [pc, #476]	; (800535c <leds_Task+0xc58>)
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	4613      	mov	r3, r2
 8005184:	011b      	lsls	r3, r3, #4
 8005186:	4413      	add	r3, r2
 8005188:	00db      	lsls	r3, r3, #3
 800518a:	440b      	add	r3, r1
 800518c:	3334      	adds	r3, #52	; 0x34
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	1e59      	subs	r1, r3, #1
 8005192:	4872      	ldr	r0, [pc, #456]	; (800535c <leds_Task+0xc58>)
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	4613      	mov	r3, r2
 8005198:	011b      	lsls	r3, r3, #4
 800519a:	4413      	add	r3, r2
 800519c:	00db      	lsls	r3, r3, #3
 800519e:	4403      	add	r3, r0
 80051a0:	3334      	adds	r3, #52	; 0x34
 80051a2:	6019      	str	r1, [r3, #0]
								leds_info.leds[i].pwmch0_cur_value = (float)leds_info.leds[i].pwmch0_value0;
 80051a4:	496d      	ldr	r1, [pc, #436]	; (800535c <leds_Task+0xc58>)
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	4613      	mov	r3, r2
 80051aa:	011b      	lsls	r3, r3, #4
 80051ac:	4413      	add	r3, r2
 80051ae:	00db      	lsls	r3, r3, #3
 80051b0:	440b      	add	r3, r1
 80051b2:	330c      	adds	r3, #12
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	ee07 3a90 	vmov	s15, r3
 80051bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051c0:	4966      	ldr	r1, [pc, #408]	; (800535c <leds_Task+0xc58>)
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	4613      	mov	r3, r2
 80051c6:	011b      	lsls	r3, r3, #4
 80051c8:	4413      	add	r3, r2
 80051ca:	00db      	lsls	r3, r3, #3
 80051cc:	440b      	add	r3, r1
 80051ce:	3308      	adds	r3, #8
 80051d0:	edc3 7a00 	vstr	s15, [r3]
								leds_info.leds[i].state = led_go_to_st1;
 80051d4:	4961      	ldr	r1, [pc, #388]	; (800535c <leds_Task+0xc58>)
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	4613      	mov	r3, r2
 80051da:	011b      	lsls	r3, r3, #4
 80051dc:	4413      	add	r3, r2
 80051de:	00db      	lsls	r3, r3, #3
 80051e0:	440b      	add	r3, r1
 80051e2:	3301      	adds	r3, #1
 80051e4:	2203      	movs	r2, #3
 80051e6:	701a      	strb	r2, [r3, #0]
								leds_info.leds[i].step_cnt = leds_info.leds[i].anim_time_st0 / LEDS_FADE_STEP_TIME;
 80051e8:	495c      	ldr	r1, [pc, #368]	; (800535c <leds_Task+0xc58>)
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	4613      	mov	r3, r2
 80051ee:	011b      	lsls	r3, r3, #4
 80051f0:	4413      	add	r3, r2
 80051f2:	00db      	lsls	r3, r3, #3
 80051f4:	440b      	add	r3, r1
 80051f6:	332c      	adds	r3, #44	; 0x2c
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a59      	ldr	r2, [pc, #356]	; (8005360 <leds_Task+0xc5c>)
 80051fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005200:	0919      	lsrs	r1, r3, #4
 8005202:	4856      	ldr	r0, [pc, #344]	; (800535c <leds_Task+0xc58>)
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	4613      	mov	r3, r2
 8005208:	011b      	lsls	r3, r3, #4
 800520a:	4413      	add	r3, r2
 800520c:	00db      	lsls	r3, r3, #3
 800520e:	4403      	add	r3, r0
 8005210:	3338      	adds	r3, #56	; 0x38
 8005212:	6019      	str	r1, [r3, #0]
								if( leds_info.leds[i].step_cnt == 0 )
 8005214:	4951      	ldr	r1, [pc, #324]	; (800535c <leds_Task+0xc58>)
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	4613      	mov	r3, r2
 800521a:	011b      	lsls	r3, r3, #4
 800521c:	4413      	add	r3, r2
 800521e:	00db      	lsls	r3, r3, #3
 8005220:	440b      	add	r3, r1
 8005222:	3338      	adds	r3, #56	; 0x38
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d109      	bne.n	800523e <leds_Task+0xb3a>
									leds_info.leds[i].step_cnt = 1;
 800522a:	494c      	ldr	r1, [pc, #304]	; (800535c <leds_Task+0xc58>)
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	4613      	mov	r3, r2
 8005230:	011b      	lsls	r3, r3, #4
 8005232:	4413      	add	r3, r2
 8005234:	00db      	lsls	r3, r3, #3
 8005236:	440b      	add	r3, r1
 8005238:	3338      	adds	r3, #56	; 0x38
 800523a:	2201      	movs	r2, #1
 800523c:	601a      	str	r2, [r3, #0]
								leds_info.leds[i].pwmch0_step = ((float)leds_info.leds[i].pwmch0_value1 - (float)leds_info.leds[i].pwmch0_value0) / (float)leds_info.leds[i].step_cnt;
 800523e:	4947      	ldr	r1, [pc, #284]	; (800535c <leds_Task+0xc58>)
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	4613      	mov	r3, r2
 8005244:	011b      	lsls	r3, r3, #4
 8005246:	4413      	add	r3, r2
 8005248:	00db      	lsls	r3, r3, #3
 800524a:	440b      	add	r3, r1
 800524c:	330d      	adds	r3, #13
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	b2db      	uxtb	r3, r3
 8005252:	ee07 3a90 	vmov	s15, r3
 8005256:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800525a:	4940      	ldr	r1, [pc, #256]	; (800535c <leds_Task+0xc58>)
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	4613      	mov	r3, r2
 8005260:	011b      	lsls	r3, r3, #4
 8005262:	4413      	add	r3, r2
 8005264:	00db      	lsls	r3, r3, #3
 8005266:	440b      	add	r3, r1
 8005268:	330c      	adds	r3, #12
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	b2db      	uxtb	r3, r3
 800526e:	ee07 3a90 	vmov	s15, r3
 8005272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005276:	ee77 6a67 	vsub.f32	s13, s14, s15
 800527a:	4938      	ldr	r1, [pc, #224]	; (800535c <leds_Task+0xc58>)
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	4613      	mov	r3, r2
 8005280:	011b      	lsls	r3, r3, #4
 8005282:	4413      	add	r3, r2
 8005284:	00db      	lsls	r3, r3, #3
 8005286:	440b      	add	r3, r1
 8005288:	3338      	adds	r3, #56	; 0x38
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	ee07 3a90 	vmov	s15, r3
 8005290:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005294:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005298:	4930      	ldr	r1, [pc, #192]	; (800535c <leds_Task+0xc58>)
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	4613      	mov	r3, r2
 800529e:	011b      	lsls	r3, r3, #4
 80052a0:	4413      	add	r3, r2
 80052a2:	00db      	lsls	r3, r3, #3
 80052a4:	440b      	add	r3, r1
 80052a6:	3310      	adds	r3, #16
 80052a8:	edc3 7a00 	vstr	s15, [r3]
 80052ac:	e004      	b.n	80052b8 <leds_Task+0xbb4>
							}
							else
								//leds_info.leds[i].mode = led_toggle;
								leds_setFade(i, 200, LEDS_MIN_PWM_VALUE);
 80052ae:	2200      	movs	r2, #0
 80052b0:	21c8      	movs	r1, #200	; 0xc8
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f002 fbde 	bl	8007a74 <leds_setFade>
						}
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch0_tim,
 80052b8:	4928      	ldr	r1, [pc, #160]	; (800535c <leds_Task+0xc58>)
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	4613      	mov	r3, r2
 80052be:	011b      	lsls	r3, r3, #4
 80052c0:	4413      	add	r3, r2
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	440b      	add	r3, r1
 80052c6:	3348      	adds	r3, #72	; 0x48
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d11d      	bne.n	800530a <leds_Task+0xc06>
 80052ce:	4923      	ldr	r1, [pc, #140]	; (800535c <leds_Task+0xc58>)
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	4613      	mov	r3, r2
 80052d4:	011b      	lsls	r3, r3, #4
 80052d6:	4413      	add	r3, r2
 80052d8:	00db      	lsls	r3, r3, #3
 80052da:	440b      	add	r3, r1
 80052dc:	3308      	adds	r3, #8
 80052de:	edd3 7a00 	vldr	s15, [r3]
 80052e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052e6:	edc7 7a01 	vstr	s15, [r7, #4]
 80052ea:	793b      	ldrb	r3, [r7, #4]
 80052ec:	b2d8      	uxtb	r0, r3
 80052ee:	491b      	ldr	r1, [pc, #108]	; (800535c <leds_Task+0xc58>)
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	4613      	mov	r3, r2
 80052f4:	011b      	lsls	r3, r3, #4
 80052f6:	4413      	add	r3, r2
 80052f8:	00db      	lsls	r3, r3, #3
 80052fa:	440b      	add	r3, r1
 80052fc:	3344      	adds	r3, #68	; 0x44
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4602      	mov	r2, r0
 8005304:	635a      	str	r2, [r3, #52]	; 0x34
 8005306:	f001 bfc7 	b.w	8007298 <leds_Task+0x2b94>
 800530a:	4914      	ldr	r1, [pc, #80]	; (800535c <leds_Task+0xc58>)
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	4613      	mov	r3, r2
 8005310:	011b      	lsls	r3, r3, #4
 8005312:	4413      	add	r3, r2
 8005314:	00db      	lsls	r3, r3, #3
 8005316:	440b      	add	r3, r1
 8005318:	3348      	adds	r3, #72	; 0x48
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2b04      	cmp	r3, #4
 800531e:	d121      	bne.n	8005364 <leds_Task+0xc60>
 8005320:	490e      	ldr	r1, [pc, #56]	; (800535c <leds_Task+0xc58>)
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	4613      	mov	r3, r2
 8005326:	011b      	lsls	r3, r3, #4
 8005328:	4413      	add	r3, r2
 800532a:	00db      	lsls	r3, r3, #3
 800532c:	440b      	add	r3, r1
 800532e:	3308      	adds	r3, #8
 8005330:	edd3 7a00 	vldr	s15, [r3]
 8005334:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005338:	edc7 7a01 	vstr	s15, [r7, #4]
 800533c:	793b      	ldrb	r3, [r7, #4]
 800533e:	b2d8      	uxtb	r0, r3
 8005340:	4906      	ldr	r1, [pc, #24]	; (800535c <leds_Task+0xc58>)
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	4613      	mov	r3, r2
 8005346:	011b      	lsls	r3, r3, #4
 8005348:	4413      	add	r3, r2
 800534a:	00db      	lsls	r3, r3, #3
 800534c:	440b      	add	r3, r1
 800534e:	3344      	adds	r3, #68	; 0x44
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	4603      	mov	r3, r0
 8005356:	6393      	str	r3, [r2, #56]	; 0x38
 8005358:	f001 bf9e 	b.w	8007298 <leds_Task+0x2b94>
 800535c:	20000a44 	.word	0x20000a44
 8005360:	cccccccd 	.word	0xcccccccd
 8005364:	49ac      	ldr	r1, [pc, #688]	; (8005618 <leds_Task+0xf14>)
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	4613      	mov	r3, r2
 800536a:	011b      	lsls	r3, r3, #4
 800536c:	4413      	add	r3, r2
 800536e:	00db      	lsls	r3, r3, #3
 8005370:	440b      	add	r3, r1
 8005372:	3348      	adds	r3, #72	; 0x48
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2b08      	cmp	r3, #8
 8005378:	d11d      	bne.n	80053b6 <leds_Task+0xcb2>
 800537a:	49a7      	ldr	r1, [pc, #668]	; (8005618 <leds_Task+0xf14>)
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	4613      	mov	r3, r2
 8005380:	011b      	lsls	r3, r3, #4
 8005382:	4413      	add	r3, r2
 8005384:	00db      	lsls	r3, r3, #3
 8005386:	440b      	add	r3, r1
 8005388:	3308      	adds	r3, #8
 800538a:	edd3 7a00 	vldr	s15, [r3]
 800538e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005392:	edc7 7a01 	vstr	s15, [r7, #4]
 8005396:	793b      	ldrb	r3, [r7, #4]
 8005398:	b2d8      	uxtb	r0, r3
 800539a:	499f      	ldr	r1, [pc, #636]	; (8005618 <leds_Task+0xf14>)
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	4613      	mov	r3, r2
 80053a0:	011b      	lsls	r3, r3, #4
 80053a2:	4413      	add	r3, r2
 80053a4:	00db      	lsls	r3, r3, #3
 80053a6:	440b      	add	r3, r1
 80053a8:	3344      	adds	r3, #68	; 0x44
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	4603      	mov	r3, r0
 80053b0:	63d3      	str	r3, [r2, #60]	; 0x3c
 80053b2:	f001 bf71 	b.w	8007298 <leds_Task+0x2b94>
 80053b6:	4998      	ldr	r1, [pc, #608]	; (8005618 <leds_Task+0xf14>)
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	4613      	mov	r3, r2
 80053bc:	011b      	lsls	r3, r3, #4
 80053be:	4413      	add	r3, r2
 80053c0:	00db      	lsls	r3, r3, #3
 80053c2:	440b      	add	r3, r1
 80053c4:	3308      	adds	r3, #8
 80053c6:	edd3 7a00 	vldr	s15, [r3]
 80053ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053ce:	edc7 7a01 	vstr	s15, [r7, #4]
 80053d2:	793b      	ldrb	r3, [r7, #4]
 80053d4:	b2d8      	uxtb	r0, r3
 80053d6:	4990      	ldr	r1, [pc, #576]	; (8005618 <leds_Task+0xf14>)
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	4613      	mov	r3, r2
 80053dc:	011b      	lsls	r3, r3, #4
 80053de:	4413      	add	r3, r2
 80053e0:	00db      	lsls	r3, r3, #3
 80053e2:	440b      	add	r3, r1
 80053e4:	3344      	adds	r3, #68	; 0x44
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	4603      	mov	r3, r0
 80053ec:	6413      	str	r3, [r2, #64]	; 0x40
 80053ee:	f001 bf53 	b.w	8007298 <leds_Task+0x2b94>
					}
				}
			}
			//Fade mode
			//----------------------------------------------------------------------------------------------------------------
			else if( leds_info.leds[i].mode == led_fade )
 80053f2:	4989      	ldr	r1, [pc, #548]	; (8005618 <leds_Task+0xf14>)
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	4613      	mov	r3, r2
 80053f8:	011b      	lsls	r3, r3, #4
 80053fa:	4413      	add	r3, r2
 80053fc:	00db      	lsls	r3, r3, #3
 80053fe:	440b      	add	r3, r1
 8005400:	3302      	adds	r3, #2
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2b03      	cmp	r3, #3
 8005408:	f041 8746 	bne.w	8007298 <leds_Task+0x2b94>
			{
				if( leds_info.leds[i].timer == 0 )
 800540c:	4982      	ldr	r1, [pc, #520]	; (8005618 <leds_Task+0xf14>)
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	4613      	mov	r3, r2
 8005412:	011b      	lsls	r3, r3, #4
 8005414:	4413      	add	r3, r2
 8005416:	00db      	lsls	r3, r3, #3
 8005418:	440b      	add	r3, r1
 800541a:	3304      	adds	r3, #4
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	f041 873a 	bne.w	8007298 <leds_Task+0x2b94>
				{
					leds_info.leds[i].timer = LEDS_FADE_STEP_TIME;
 8005424:	497c      	ldr	r1, [pc, #496]	; (8005618 <leds_Task+0xf14>)
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	4613      	mov	r3, r2
 800542a:	011b      	lsls	r3, r3, #4
 800542c:	4413      	add	r3, r2
 800542e:	00db      	lsls	r3, r3, #3
 8005430:	440b      	add	r3, r1
 8005432:	3304      	adds	r3, #4
 8005434:	2214      	movs	r2, #20
 8005436:	601a      	str	r2, [r3, #0]
					leds_info.leds[i].pwmch0_cur_value += leds_info.leds[i].pwmch0_step;
 8005438:	4977      	ldr	r1, [pc, #476]	; (8005618 <leds_Task+0xf14>)
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	4613      	mov	r3, r2
 800543e:	011b      	lsls	r3, r3, #4
 8005440:	4413      	add	r3, r2
 8005442:	00db      	lsls	r3, r3, #3
 8005444:	440b      	add	r3, r1
 8005446:	3310      	adds	r3, #16
 8005448:	ed93 7a00 	vldr	s14, [r3]
 800544c:	4972      	ldr	r1, [pc, #456]	; (8005618 <leds_Task+0xf14>)
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	4613      	mov	r3, r2
 8005452:	011b      	lsls	r3, r3, #4
 8005454:	4413      	add	r3, r2
 8005456:	00db      	lsls	r3, r3, #3
 8005458:	440b      	add	r3, r1
 800545a:	3308      	adds	r3, #8
 800545c:	edd3 7a00 	vldr	s15, [r3]
 8005460:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005464:	496c      	ldr	r1, [pc, #432]	; (8005618 <leds_Task+0xf14>)
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	4613      	mov	r3, r2
 800546a:	011b      	lsls	r3, r3, #4
 800546c:	4413      	add	r3, r2
 800546e:	00db      	lsls	r3, r3, #3
 8005470:	440b      	add	r3, r1
 8005472:	3308      	adds	r3, #8
 8005474:	edc3 7a00 	vstr	s15, [r3]
					if( leds_info.leds[i].step_cnt-- == 0 )
 8005478:	4967      	ldr	r1, [pc, #412]	; (8005618 <leds_Task+0xf14>)
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	4613      	mov	r3, r2
 800547e:	011b      	lsls	r3, r3, #4
 8005480:	4413      	add	r3, r2
 8005482:	00db      	lsls	r3, r3, #3
 8005484:	440b      	add	r3, r1
 8005486:	3338      	adds	r3, #56	; 0x38
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	1e50      	subs	r0, r2, #1
 800548c:	4c62      	ldr	r4, [pc, #392]	; (8005618 <leds_Task+0xf14>)
 800548e:	68f9      	ldr	r1, [r7, #12]
 8005490:	460b      	mov	r3, r1
 8005492:	011b      	lsls	r3, r3, #4
 8005494:	440b      	add	r3, r1
 8005496:	00db      	lsls	r3, r3, #3
 8005498:	4423      	add	r3, r4
 800549a:	3338      	adds	r3, #56	; 0x38
 800549c:	6018      	str	r0, [r3, #0]
 800549e:	2a00      	cmp	r2, #0
 80054a0:	d121      	bne.n	80054e6 <leds_Task+0xde2>
					{
						leds_info.leds[i].pwmch0_cur_value = (float)leds_info.leds[i].pwmch0_value1;
 80054a2:	495d      	ldr	r1, [pc, #372]	; (8005618 <leds_Task+0xf14>)
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	4613      	mov	r3, r2
 80054a8:	011b      	lsls	r3, r3, #4
 80054aa:	4413      	add	r3, r2
 80054ac:	00db      	lsls	r3, r3, #3
 80054ae:	440b      	add	r3, r1
 80054b0:	330d      	adds	r3, #13
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	ee07 3a90 	vmov	s15, r3
 80054ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054be:	4956      	ldr	r1, [pc, #344]	; (8005618 <leds_Task+0xf14>)
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	4613      	mov	r3, r2
 80054c4:	011b      	lsls	r3, r3, #4
 80054c6:	4413      	add	r3, r2
 80054c8:	00db      	lsls	r3, r3, #3
 80054ca:	440b      	add	r3, r1
 80054cc:	3308      	adds	r3, #8
 80054ce:	edc3 7a00 	vstr	s15, [r3]
						leds_info.leds[i].mode = led_toggle;
 80054d2:	4951      	ldr	r1, [pc, #324]	; (8005618 <leds_Task+0xf14>)
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	4613      	mov	r3, r2
 80054d8:	011b      	lsls	r3, r3, #4
 80054da:	4413      	add	r3, r2
 80054dc:	00db      	lsls	r3, r3, #3
 80054de:	440b      	add	r3, r1
 80054e0:	3302      	adds	r3, #2
 80054e2:	2200      	movs	r2, #0
 80054e4:	701a      	strb	r2, [r3, #0]
					}
					__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch0_tim,
 80054e6:	494c      	ldr	r1, [pc, #304]	; (8005618 <leds_Task+0xf14>)
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	4613      	mov	r3, r2
 80054ec:	011b      	lsls	r3, r3, #4
 80054ee:	4413      	add	r3, r2
 80054f0:	00db      	lsls	r3, r3, #3
 80054f2:	440b      	add	r3, r1
 80054f4:	3348      	adds	r3, #72	; 0x48
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d11d      	bne.n	8005538 <leds_Task+0xe34>
 80054fc:	4946      	ldr	r1, [pc, #280]	; (8005618 <leds_Task+0xf14>)
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	4613      	mov	r3, r2
 8005502:	011b      	lsls	r3, r3, #4
 8005504:	4413      	add	r3, r2
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	440b      	add	r3, r1
 800550a:	3308      	adds	r3, #8
 800550c:	edd3 7a00 	vldr	s15, [r3]
 8005510:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005514:	edc7 7a01 	vstr	s15, [r7, #4]
 8005518:	793b      	ldrb	r3, [r7, #4]
 800551a:	b2d8      	uxtb	r0, r3
 800551c:	493e      	ldr	r1, [pc, #248]	; (8005618 <leds_Task+0xf14>)
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	4613      	mov	r3, r2
 8005522:	011b      	lsls	r3, r3, #4
 8005524:	4413      	add	r3, r2
 8005526:	00db      	lsls	r3, r3, #3
 8005528:	440b      	add	r3, r1
 800552a:	3344      	adds	r3, #68	; 0x44
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4602      	mov	r2, r0
 8005532:	635a      	str	r2, [r3, #52]	; 0x34
 8005534:	f001 beb0 	b.w	8007298 <leds_Task+0x2b94>
 8005538:	4937      	ldr	r1, [pc, #220]	; (8005618 <leds_Task+0xf14>)
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	4613      	mov	r3, r2
 800553e:	011b      	lsls	r3, r3, #4
 8005540:	4413      	add	r3, r2
 8005542:	00db      	lsls	r3, r3, #3
 8005544:	440b      	add	r3, r1
 8005546:	3348      	adds	r3, #72	; 0x48
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2b04      	cmp	r3, #4
 800554c:	d11d      	bne.n	800558a <leds_Task+0xe86>
 800554e:	4932      	ldr	r1, [pc, #200]	; (8005618 <leds_Task+0xf14>)
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	4613      	mov	r3, r2
 8005554:	011b      	lsls	r3, r3, #4
 8005556:	4413      	add	r3, r2
 8005558:	00db      	lsls	r3, r3, #3
 800555a:	440b      	add	r3, r1
 800555c:	3308      	adds	r3, #8
 800555e:	edd3 7a00 	vldr	s15, [r3]
 8005562:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005566:	edc7 7a01 	vstr	s15, [r7, #4]
 800556a:	793b      	ldrb	r3, [r7, #4]
 800556c:	b2d8      	uxtb	r0, r3
 800556e:	492a      	ldr	r1, [pc, #168]	; (8005618 <leds_Task+0xf14>)
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	4613      	mov	r3, r2
 8005574:	011b      	lsls	r3, r3, #4
 8005576:	4413      	add	r3, r2
 8005578:	00db      	lsls	r3, r3, #3
 800557a:	440b      	add	r3, r1
 800557c:	3344      	adds	r3, #68	; 0x44
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	4603      	mov	r3, r0
 8005584:	6393      	str	r3, [r2, #56]	; 0x38
 8005586:	f001 be87 	b.w	8007298 <leds_Task+0x2b94>
 800558a:	4923      	ldr	r1, [pc, #140]	; (8005618 <leds_Task+0xf14>)
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	4613      	mov	r3, r2
 8005590:	011b      	lsls	r3, r3, #4
 8005592:	4413      	add	r3, r2
 8005594:	00db      	lsls	r3, r3, #3
 8005596:	440b      	add	r3, r1
 8005598:	3348      	adds	r3, #72	; 0x48
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b08      	cmp	r3, #8
 800559e:	d11d      	bne.n	80055dc <leds_Task+0xed8>
 80055a0:	491d      	ldr	r1, [pc, #116]	; (8005618 <leds_Task+0xf14>)
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	4613      	mov	r3, r2
 80055a6:	011b      	lsls	r3, r3, #4
 80055a8:	4413      	add	r3, r2
 80055aa:	00db      	lsls	r3, r3, #3
 80055ac:	440b      	add	r3, r1
 80055ae:	3308      	adds	r3, #8
 80055b0:	edd3 7a00 	vldr	s15, [r3]
 80055b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055b8:	edc7 7a01 	vstr	s15, [r7, #4]
 80055bc:	793b      	ldrb	r3, [r7, #4]
 80055be:	b2d8      	uxtb	r0, r3
 80055c0:	4915      	ldr	r1, [pc, #84]	; (8005618 <leds_Task+0xf14>)
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	4613      	mov	r3, r2
 80055c6:	011b      	lsls	r3, r3, #4
 80055c8:	4413      	add	r3, r2
 80055ca:	00db      	lsls	r3, r3, #3
 80055cc:	440b      	add	r3, r1
 80055ce:	3344      	adds	r3, #68	; 0x44
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	4603      	mov	r3, r0
 80055d6:	63d3      	str	r3, [r2, #60]	; 0x3c
 80055d8:	f001 be5e 	b.w	8007298 <leds_Task+0x2b94>
 80055dc:	490e      	ldr	r1, [pc, #56]	; (8005618 <leds_Task+0xf14>)
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	4613      	mov	r3, r2
 80055e2:	011b      	lsls	r3, r3, #4
 80055e4:	4413      	add	r3, r2
 80055e6:	00db      	lsls	r3, r3, #3
 80055e8:	440b      	add	r3, r1
 80055ea:	3308      	adds	r3, #8
 80055ec:	edd3 7a00 	vldr	s15, [r3]
 80055f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055f4:	edc7 7a01 	vstr	s15, [r7, #4]
 80055f8:	793b      	ldrb	r3, [r7, #4]
 80055fa:	b2d8      	uxtb	r0, r3
 80055fc:	4906      	ldr	r1, [pc, #24]	; (8005618 <leds_Task+0xf14>)
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	4613      	mov	r3, r2
 8005602:	011b      	lsls	r3, r3, #4
 8005604:	4413      	add	r3, r2
 8005606:	00db      	lsls	r3, r3, #3
 8005608:	440b      	add	r3, r1
 800560a:	3344      	adds	r3, #68	; 0x44
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	4603      	mov	r3, r0
 8005612:	6413      	str	r3, [r2, #64]	; 0x40
 8005614:	f001 be40 	b.w	8007298 <leds_Task+0x2b94>
 8005618:	20000a44 	.word	0x20000a44
				}
			}
		}
		//RGB led
		//************************************************************************************************
		else if( leds_info.leds[i].type == led_rgb )
 800561c:	49b2      	ldr	r1, [pc, #712]	; (80058e8 <leds_Task+0x11e4>)
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	4613      	mov	r3, r2
 8005622:	011b      	lsls	r3, r3, #4
 8005624:	4413      	add	r3, r2
 8005626:	00db      	lsls	r3, r3, #3
 8005628:	440b      	add	r3, r1
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b02      	cmp	r3, #2
 8005630:	f041 8632 	bne.w	8007298 <leds_Task+0x2b94>
		{
			//Blink mode
			//----------------------------------------------------------------------------------------------------------------
			if( leds_info.leds[i].mode == led_blink )
 8005634:	49ac      	ldr	r1, [pc, #688]	; (80058e8 <leds_Task+0x11e4>)
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	4613      	mov	r3, r2
 800563a:	011b      	lsls	r3, r3, #4
 800563c:	4413      	add	r3, r2
 800563e:	00db      	lsls	r3, r3, #3
 8005640:	440b      	add	r3, r1
 8005642:	3302      	adds	r3, #2
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	b2db      	uxtb	r3, r3
 8005648:	2b01      	cmp	r3, #1
 800564a:	f040 842d 	bne.w	8005ea8 <leds_Task+0x17a4>
			{
				//Blink state 0
				if( leds_info.leds[i].state == led_st0 )
 800564e:	49a6      	ldr	r1, [pc, #664]	; (80058e8 <leds_Task+0x11e4>)
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	4613      	mov	r3, r2
 8005654:	011b      	lsls	r3, r3, #4
 8005656:	4413      	add	r3, r2
 8005658:	00db      	lsls	r3, r3, #3
 800565a:	440b      	add	r3, r1
 800565c:	3301      	adds	r3, #1
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	f040 81e8 	bne.w	8005a38 <leds_Task+0x1334>
				{
					//Wait for the timer
					if( leds_info.leds[i].timer == 0 )
 8005668:	499f      	ldr	r1, [pc, #636]	; (80058e8 <leds_Task+0x11e4>)
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	4613      	mov	r3, r2
 800566e:	011b      	lsls	r3, r3, #4
 8005670:	4413      	add	r3, r2
 8005672:	00db      	lsls	r3, r3, #3
 8005674:	440b      	add	r3, r1
 8005676:	3304      	adds	r3, #4
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	f041 860c 	bne.w	8007298 <leds_Task+0x2b94>
					{
						//Switch state
						leds_info.leds[i].state = led_st1;
 8005680:	4999      	ldr	r1, [pc, #612]	; (80058e8 <leds_Task+0x11e4>)
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	4613      	mov	r3, r2
 8005686:	011b      	lsls	r3, r3, #4
 8005688:	4413      	add	r3, r2
 800568a:	00db      	lsls	r3, r3, #3
 800568c:	440b      	add	r3, r1
 800568e:	3301      	adds	r3, #1
 8005690:	2201      	movs	r2, #1
 8005692:	701a      	strb	r2, [r3, #0]
						leds_info.leds[i].pwmch0_cur_value = (float)leds_info.leds[i].pwmch0_value1;
 8005694:	4994      	ldr	r1, [pc, #592]	; (80058e8 <leds_Task+0x11e4>)
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	4613      	mov	r3, r2
 800569a:	011b      	lsls	r3, r3, #4
 800569c:	4413      	add	r3, r2
 800569e:	00db      	lsls	r3, r3, #3
 80056a0:	440b      	add	r3, r1
 80056a2:	330d      	adds	r3, #13
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	ee07 3a90 	vmov	s15, r3
 80056ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056b0:	498d      	ldr	r1, [pc, #564]	; (80058e8 <leds_Task+0x11e4>)
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	4613      	mov	r3, r2
 80056b6:	011b      	lsls	r3, r3, #4
 80056b8:	4413      	add	r3, r2
 80056ba:	00db      	lsls	r3, r3, #3
 80056bc:	440b      	add	r3, r1
 80056be:	3308      	adds	r3, #8
 80056c0:	edc3 7a00 	vstr	s15, [r3]
						leds_info.leds[i].pwmch1_cur_value = (float)leds_info.leds[i].pwmch1_value1;
 80056c4:	4988      	ldr	r1, [pc, #544]	; (80058e8 <leds_Task+0x11e4>)
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	4613      	mov	r3, r2
 80056ca:	011b      	lsls	r3, r3, #4
 80056cc:	4413      	add	r3, r2
 80056ce:	00db      	lsls	r3, r3, #3
 80056d0:	440b      	add	r3, r1
 80056d2:	3319      	adds	r3, #25
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	ee07 3a90 	vmov	s15, r3
 80056dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056e0:	4981      	ldr	r1, [pc, #516]	; (80058e8 <leds_Task+0x11e4>)
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	4613      	mov	r3, r2
 80056e6:	011b      	lsls	r3, r3, #4
 80056e8:	4413      	add	r3, r2
 80056ea:	00db      	lsls	r3, r3, #3
 80056ec:	440b      	add	r3, r1
 80056ee:	3314      	adds	r3, #20
 80056f0:	edc3 7a00 	vstr	s15, [r3]
						leds_info.leds[i].pwmch2_cur_value = (float)leds_info.leds[i].pwmch2_value1;
 80056f4:	497c      	ldr	r1, [pc, #496]	; (80058e8 <leds_Task+0x11e4>)
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	4613      	mov	r3, r2
 80056fa:	011b      	lsls	r3, r3, #4
 80056fc:	4413      	add	r3, r2
 80056fe:	00db      	lsls	r3, r3, #3
 8005700:	440b      	add	r3, r1
 8005702:	3325      	adds	r3, #37	; 0x25
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	b2db      	uxtb	r3, r3
 8005708:	ee07 3a90 	vmov	s15, r3
 800570c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005710:	4975      	ldr	r1, [pc, #468]	; (80058e8 <leds_Task+0x11e4>)
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	4613      	mov	r3, r2
 8005716:	011b      	lsls	r3, r3, #4
 8005718:	4413      	add	r3, r2
 800571a:	00db      	lsls	r3, r3, #3
 800571c:	440b      	add	r3, r1
 800571e:	3320      	adds	r3, #32
 8005720:	edc3 7a00 	vstr	s15, [r3]
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch0_tim,
 8005724:	4970      	ldr	r1, [pc, #448]	; (80058e8 <leds_Task+0x11e4>)
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	4613      	mov	r3, r2
 800572a:	011b      	lsls	r3, r3, #4
 800572c:	4413      	add	r3, r2
 800572e:	00db      	lsls	r3, r3, #3
 8005730:	440b      	add	r3, r1
 8005732:	3348      	adds	r3, #72	; 0x48
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d116      	bne.n	8005768 <leds_Task+0x1064>
 800573a:	496b      	ldr	r1, [pc, #428]	; (80058e8 <leds_Task+0x11e4>)
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	4613      	mov	r3, r2
 8005740:	011b      	lsls	r3, r3, #4
 8005742:	4413      	add	r3, r2
 8005744:	00db      	lsls	r3, r3, #3
 8005746:	440b      	add	r3, r1
 8005748:	330d      	adds	r3, #13
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	b2d8      	uxtb	r0, r3
 800574e:	4966      	ldr	r1, [pc, #408]	; (80058e8 <leds_Task+0x11e4>)
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	4613      	mov	r3, r2
 8005754:	011b      	lsls	r3, r3, #4
 8005756:	4413      	add	r3, r2
 8005758:	00db      	lsls	r3, r3, #3
 800575a:	440b      	add	r3, r1
 800575c:	3344      	adds	r3, #68	; 0x44
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4602      	mov	r2, r0
 8005764:	635a      	str	r2, [r3, #52]	; 0x34
 8005766:	e059      	b.n	800581c <leds_Task+0x1118>
 8005768:	495f      	ldr	r1, [pc, #380]	; (80058e8 <leds_Task+0x11e4>)
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	4613      	mov	r3, r2
 800576e:	011b      	lsls	r3, r3, #4
 8005770:	4413      	add	r3, r2
 8005772:	00db      	lsls	r3, r3, #3
 8005774:	440b      	add	r3, r1
 8005776:	3348      	adds	r3, #72	; 0x48
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b04      	cmp	r3, #4
 800577c:	d116      	bne.n	80057ac <leds_Task+0x10a8>
 800577e:	495a      	ldr	r1, [pc, #360]	; (80058e8 <leds_Task+0x11e4>)
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	4613      	mov	r3, r2
 8005784:	011b      	lsls	r3, r3, #4
 8005786:	4413      	add	r3, r2
 8005788:	00db      	lsls	r3, r3, #3
 800578a:	440b      	add	r3, r1
 800578c:	330d      	adds	r3, #13
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	b2d8      	uxtb	r0, r3
 8005792:	4955      	ldr	r1, [pc, #340]	; (80058e8 <leds_Task+0x11e4>)
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	4613      	mov	r3, r2
 8005798:	011b      	lsls	r3, r3, #4
 800579a:	4413      	add	r3, r2
 800579c:	00db      	lsls	r3, r3, #3
 800579e:	440b      	add	r3, r1
 80057a0:	3344      	adds	r3, #68	; 0x44
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	4603      	mov	r3, r0
 80057a8:	6393      	str	r3, [r2, #56]	; 0x38
 80057aa:	e037      	b.n	800581c <leds_Task+0x1118>
 80057ac:	494e      	ldr	r1, [pc, #312]	; (80058e8 <leds_Task+0x11e4>)
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	4613      	mov	r3, r2
 80057b2:	011b      	lsls	r3, r3, #4
 80057b4:	4413      	add	r3, r2
 80057b6:	00db      	lsls	r3, r3, #3
 80057b8:	440b      	add	r3, r1
 80057ba:	3348      	adds	r3, #72	; 0x48
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2b08      	cmp	r3, #8
 80057c0:	d116      	bne.n	80057f0 <leds_Task+0x10ec>
 80057c2:	4949      	ldr	r1, [pc, #292]	; (80058e8 <leds_Task+0x11e4>)
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	4613      	mov	r3, r2
 80057c8:	011b      	lsls	r3, r3, #4
 80057ca:	4413      	add	r3, r2
 80057cc:	00db      	lsls	r3, r3, #3
 80057ce:	440b      	add	r3, r1
 80057d0:	330d      	adds	r3, #13
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	b2d8      	uxtb	r0, r3
 80057d6:	4944      	ldr	r1, [pc, #272]	; (80058e8 <leds_Task+0x11e4>)
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	4613      	mov	r3, r2
 80057dc:	011b      	lsls	r3, r3, #4
 80057de:	4413      	add	r3, r2
 80057e0:	00db      	lsls	r3, r3, #3
 80057e2:	440b      	add	r3, r1
 80057e4:	3344      	adds	r3, #68	; 0x44
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	4603      	mov	r3, r0
 80057ec:	63d3      	str	r3, [r2, #60]	; 0x3c
 80057ee:	e015      	b.n	800581c <leds_Task+0x1118>
 80057f0:	493d      	ldr	r1, [pc, #244]	; (80058e8 <leds_Task+0x11e4>)
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	4613      	mov	r3, r2
 80057f6:	011b      	lsls	r3, r3, #4
 80057f8:	4413      	add	r3, r2
 80057fa:	00db      	lsls	r3, r3, #3
 80057fc:	440b      	add	r3, r1
 80057fe:	330d      	adds	r3, #13
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	b2d8      	uxtb	r0, r3
 8005804:	4938      	ldr	r1, [pc, #224]	; (80058e8 <leds_Task+0x11e4>)
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	4613      	mov	r3, r2
 800580a:	011b      	lsls	r3, r3, #4
 800580c:	4413      	add	r3, r2
 800580e:	00db      	lsls	r3, r3, #3
 8005810:	440b      	add	r3, r1
 8005812:	3344      	adds	r3, #68	; 0x44
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	4603      	mov	r3, r0
 800581a:	6413      	str	r3, [r2, #64]	; 0x40
												leds_info.leds[i].pwmch0_timch, leds_info.leds[i].pwmch0_value1);
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch1_tim,
 800581c:	4932      	ldr	r1, [pc, #200]	; (80058e8 <leds_Task+0x11e4>)
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	4613      	mov	r3, r2
 8005822:	011b      	lsls	r3, r3, #4
 8005824:	4413      	add	r3, r2
 8005826:	00db      	lsls	r3, r3, #3
 8005828:	440b      	add	r3, r1
 800582a:	3350      	adds	r3, #80	; 0x50
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d116      	bne.n	8005860 <leds_Task+0x115c>
 8005832:	492d      	ldr	r1, [pc, #180]	; (80058e8 <leds_Task+0x11e4>)
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	4613      	mov	r3, r2
 8005838:	011b      	lsls	r3, r3, #4
 800583a:	4413      	add	r3, r2
 800583c:	00db      	lsls	r3, r3, #3
 800583e:	440b      	add	r3, r1
 8005840:	3319      	adds	r3, #25
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	b2d8      	uxtb	r0, r3
 8005846:	4928      	ldr	r1, [pc, #160]	; (80058e8 <leds_Task+0x11e4>)
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	4613      	mov	r3, r2
 800584c:	011b      	lsls	r3, r3, #4
 800584e:	4413      	add	r3, r2
 8005850:	00db      	lsls	r3, r3, #3
 8005852:	440b      	add	r3, r1
 8005854:	334c      	adds	r3, #76	; 0x4c
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4602      	mov	r2, r0
 800585c:	635a      	str	r2, [r3, #52]	; 0x34
 800585e:	e05b      	b.n	8005918 <leds_Task+0x1214>
 8005860:	4921      	ldr	r1, [pc, #132]	; (80058e8 <leds_Task+0x11e4>)
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	4613      	mov	r3, r2
 8005866:	011b      	lsls	r3, r3, #4
 8005868:	4413      	add	r3, r2
 800586a:	00db      	lsls	r3, r3, #3
 800586c:	440b      	add	r3, r1
 800586e:	3350      	adds	r3, #80	; 0x50
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2b04      	cmp	r3, #4
 8005874:	d116      	bne.n	80058a4 <leds_Task+0x11a0>
 8005876:	491c      	ldr	r1, [pc, #112]	; (80058e8 <leds_Task+0x11e4>)
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	4613      	mov	r3, r2
 800587c:	011b      	lsls	r3, r3, #4
 800587e:	4413      	add	r3, r2
 8005880:	00db      	lsls	r3, r3, #3
 8005882:	440b      	add	r3, r1
 8005884:	3319      	adds	r3, #25
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	b2d8      	uxtb	r0, r3
 800588a:	4917      	ldr	r1, [pc, #92]	; (80058e8 <leds_Task+0x11e4>)
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	4613      	mov	r3, r2
 8005890:	011b      	lsls	r3, r3, #4
 8005892:	4413      	add	r3, r2
 8005894:	00db      	lsls	r3, r3, #3
 8005896:	440b      	add	r3, r1
 8005898:	334c      	adds	r3, #76	; 0x4c
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	4603      	mov	r3, r0
 80058a0:	6393      	str	r3, [r2, #56]	; 0x38
 80058a2:	e039      	b.n	8005918 <leds_Task+0x1214>
 80058a4:	4910      	ldr	r1, [pc, #64]	; (80058e8 <leds_Task+0x11e4>)
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	4613      	mov	r3, r2
 80058aa:	011b      	lsls	r3, r3, #4
 80058ac:	4413      	add	r3, r2
 80058ae:	00db      	lsls	r3, r3, #3
 80058b0:	440b      	add	r3, r1
 80058b2:	3350      	adds	r3, #80	; 0x50
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2b08      	cmp	r3, #8
 80058b8:	d118      	bne.n	80058ec <leds_Task+0x11e8>
 80058ba:	490b      	ldr	r1, [pc, #44]	; (80058e8 <leds_Task+0x11e4>)
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	4613      	mov	r3, r2
 80058c0:	011b      	lsls	r3, r3, #4
 80058c2:	4413      	add	r3, r2
 80058c4:	00db      	lsls	r3, r3, #3
 80058c6:	440b      	add	r3, r1
 80058c8:	3319      	adds	r3, #25
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	b2d8      	uxtb	r0, r3
 80058ce:	4906      	ldr	r1, [pc, #24]	; (80058e8 <leds_Task+0x11e4>)
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	4613      	mov	r3, r2
 80058d4:	011b      	lsls	r3, r3, #4
 80058d6:	4413      	add	r3, r2
 80058d8:	00db      	lsls	r3, r3, #3
 80058da:	440b      	add	r3, r1
 80058dc:	334c      	adds	r3, #76	; 0x4c
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	4603      	mov	r3, r0
 80058e4:	63d3      	str	r3, [r2, #60]	; 0x3c
 80058e6:	e017      	b.n	8005918 <leds_Task+0x1214>
 80058e8:	20000a44 	.word	0x20000a44
 80058ec:	49bb      	ldr	r1, [pc, #748]	; (8005bdc <leds_Task+0x14d8>)
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	4613      	mov	r3, r2
 80058f2:	011b      	lsls	r3, r3, #4
 80058f4:	4413      	add	r3, r2
 80058f6:	00db      	lsls	r3, r3, #3
 80058f8:	440b      	add	r3, r1
 80058fa:	3319      	adds	r3, #25
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	b2d8      	uxtb	r0, r3
 8005900:	49b6      	ldr	r1, [pc, #728]	; (8005bdc <leds_Task+0x14d8>)
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	4613      	mov	r3, r2
 8005906:	011b      	lsls	r3, r3, #4
 8005908:	4413      	add	r3, r2
 800590a:	00db      	lsls	r3, r3, #3
 800590c:	440b      	add	r3, r1
 800590e:	334c      	adds	r3, #76	; 0x4c
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	4603      	mov	r3, r0
 8005916:	6413      	str	r3, [r2, #64]	; 0x40
												leds_info.leds[i].pwmch1_timch, leds_info.leds[i].pwmch1_value1);
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch2_tim,
 8005918:	49b0      	ldr	r1, [pc, #704]	; (8005bdc <leds_Task+0x14d8>)
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	4613      	mov	r3, r2
 800591e:	011b      	lsls	r3, r3, #4
 8005920:	4413      	add	r3, r2
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	440b      	add	r3, r1
 8005926:	3358      	adds	r3, #88	; 0x58
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d116      	bne.n	800595c <leds_Task+0x1258>
 800592e:	49ab      	ldr	r1, [pc, #684]	; (8005bdc <leds_Task+0x14d8>)
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	4613      	mov	r3, r2
 8005934:	011b      	lsls	r3, r3, #4
 8005936:	4413      	add	r3, r2
 8005938:	00db      	lsls	r3, r3, #3
 800593a:	440b      	add	r3, r1
 800593c:	3325      	adds	r3, #37	; 0x25
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	b2d8      	uxtb	r0, r3
 8005942:	49a6      	ldr	r1, [pc, #664]	; (8005bdc <leds_Task+0x14d8>)
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	4613      	mov	r3, r2
 8005948:	011b      	lsls	r3, r3, #4
 800594a:	4413      	add	r3, r2
 800594c:	00db      	lsls	r3, r3, #3
 800594e:	440b      	add	r3, r1
 8005950:	3354      	adds	r3, #84	; 0x54
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4602      	mov	r2, r0
 8005958:	635a      	str	r2, [r3, #52]	; 0x34
 800595a:	e059      	b.n	8005a10 <leds_Task+0x130c>
 800595c:	499f      	ldr	r1, [pc, #636]	; (8005bdc <leds_Task+0x14d8>)
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	4613      	mov	r3, r2
 8005962:	011b      	lsls	r3, r3, #4
 8005964:	4413      	add	r3, r2
 8005966:	00db      	lsls	r3, r3, #3
 8005968:	440b      	add	r3, r1
 800596a:	3358      	adds	r3, #88	; 0x58
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2b04      	cmp	r3, #4
 8005970:	d116      	bne.n	80059a0 <leds_Task+0x129c>
 8005972:	499a      	ldr	r1, [pc, #616]	; (8005bdc <leds_Task+0x14d8>)
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	4613      	mov	r3, r2
 8005978:	011b      	lsls	r3, r3, #4
 800597a:	4413      	add	r3, r2
 800597c:	00db      	lsls	r3, r3, #3
 800597e:	440b      	add	r3, r1
 8005980:	3325      	adds	r3, #37	; 0x25
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	b2d8      	uxtb	r0, r3
 8005986:	4995      	ldr	r1, [pc, #596]	; (8005bdc <leds_Task+0x14d8>)
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	4613      	mov	r3, r2
 800598c:	011b      	lsls	r3, r3, #4
 800598e:	4413      	add	r3, r2
 8005990:	00db      	lsls	r3, r3, #3
 8005992:	440b      	add	r3, r1
 8005994:	3354      	adds	r3, #84	; 0x54
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	4603      	mov	r3, r0
 800599c:	6393      	str	r3, [r2, #56]	; 0x38
 800599e:	e037      	b.n	8005a10 <leds_Task+0x130c>
 80059a0:	498e      	ldr	r1, [pc, #568]	; (8005bdc <leds_Task+0x14d8>)
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	4613      	mov	r3, r2
 80059a6:	011b      	lsls	r3, r3, #4
 80059a8:	4413      	add	r3, r2
 80059aa:	00db      	lsls	r3, r3, #3
 80059ac:	440b      	add	r3, r1
 80059ae:	3358      	adds	r3, #88	; 0x58
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2b08      	cmp	r3, #8
 80059b4:	d116      	bne.n	80059e4 <leds_Task+0x12e0>
 80059b6:	4989      	ldr	r1, [pc, #548]	; (8005bdc <leds_Task+0x14d8>)
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	4613      	mov	r3, r2
 80059bc:	011b      	lsls	r3, r3, #4
 80059be:	4413      	add	r3, r2
 80059c0:	00db      	lsls	r3, r3, #3
 80059c2:	440b      	add	r3, r1
 80059c4:	3325      	adds	r3, #37	; 0x25
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	b2d8      	uxtb	r0, r3
 80059ca:	4984      	ldr	r1, [pc, #528]	; (8005bdc <leds_Task+0x14d8>)
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	4613      	mov	r3, r2
 80059d0:	011b      	lsls	r3, r3, #4
 80059d2:	4413      	add	r3, r2
 80059d4:	00db      	lsls	r3, r3, #3
 80059d6:	440b      	add	r3, r1
 80059d8:	3354      	adds	r3, #84	; 0x54
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	4603      	mov	r3, r0
 80059e0:	63d3      	str	r3, [r2, #60]	; 0x3c
 80059e2:	e015      	b.n	8005a10 <leds_Task+0x130c>
 80059e4:	497d      	ldr	r1, [pc, #500]	; (8005bdc <leds_Task+0x14d8>)
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	4613      	mov	r3, r2
 80059ea:	011b      	lsls	r3, r3, #4
 80059ec:	4413      	add	r3, r2
 80059ee:	00db      	lsls	r3, r3, #3
 80059f0:	440b      	add	r3, r1
 80059f2:	3325      	adds	r3, #37	; 0x25
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	b2d8      	uxtb	r0, r3
 80059f8:	4978      	ldr	r1, [pc, #480]	; (8005bdc <leds_Task+0x14d8>)
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	4613      	mov	r3, r2
 80059fe:	011b      	lsls	r3, r3, #4
 8005a00:	4413      	add	r3, r2
 8005a02:	00db      	lsls	r3, r3, #3
 8005a04:	440b      	add	r3, r1
 8005a06:	3354      	adds	r3, #84	; 0x54
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	6413      	str	r3, [r2, #64]	; 0x40
												leds_info.leds[i].pwmch2_timch, leds_info.leds[i].pwmch2_value1);
						leds_info.leds[i].timer = leds_info.leds[i].anim_time_st1;
 8005a10:	4972      	ldr	r1, [pc, #456]	; (8005bdc <leds_Task+0x14d8>)
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	4613      	mov	r3, r2
 8005a16:	011b      	lsls	r3, r3, #4
 8005a18:	4413      	add	r3, r2
 8005a1a:	00db      	lsls	r3, r3, #3
 8005a1c:	440b      	add	r3, r1
 8005a1e:	3330      	adds	r3, #48	; 0x30
 8005a20:	6819      	ldr	r1, [r3, #0]
 8005a22:	486e      	ldr	r0, [pc, #440]	; (8005bdc <leds_Task+0x14d8>)
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	4613      	mov	r3, r2
 8005a28:	011b      	lsls	r3, r3, #4
 8005a2a:	4413      	add	r3, r2
 8005a2c:	00db      	lsls	r3, r3, #3
 8005a2e:	4403      	add	r3, r0
 8005a30:	3304      	adds	r3, #4
 8005a32:	6019      	str	r1, [r3, #0]
 8005a34:	f001 bc30 	b.w	8007298 <leds_Task+0x2b94>

					}
				}
				//Blink state 1
				else if( leds_info.leds[i].state == led_st1 )
 8005a38:	4968      	ldr	r1, [pc, #416]	; (8005bdc <leds_Task+0x14d8>)
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	011b      	lsls	r3, r3, #4
 8005a40:	4413      	add	r3, r2
 8005a42:	00db      	lsls	r3, r3, #3
 8005a44:	440b      	add	r3, r1
 8005a46:	3301      	adds	r3, #1
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	f041 8423 	bne.w	8007298 <leds_Task+0x2b94>
				{
					if( leds_info.leds[i].timer == 0 )
 8005a52:	4962      	ldr	r1, [pc, #392]	; (8005bdc <leds_Task+0x14d8>)
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	4613      	mov	r3, r2
 8005a58:	011b      	lsls	r3, r3, #4
 8005a5a:	4413      	add	r3, r2
 8005a5c:	00db      	lsls	r3, r3, #3
 8005a5e:	440b      	add	r3, r1
 8005a60:	3304      	adds	r3, #4
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f041 8417 	bne.w	8007298 <leds_Task+0x2b94>
					{
						//Switch state
						leds_info.leds[i].state = led_st0;
 8005a6a:	495c      	ldr	r1, [pc, #368]	; (8005bdc <leds_Task+0x14d8>)
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	011b      	lsls	r3, r3, #4
 8005a72:	4413      	add	r3, r2
 8005a74:	00db      	lsls	r3, r3, #3
 8005a76:	440b      	add	r3, r1
 8005a78:	3301      	adds	r3, #1
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	701a      	strb	r2, [r3, #0]
						leds_info.leds[i].pwmch0_cur_value = (float)leds_info.leds[i].pwmch0_value0;
 8005a7e:	4957      	ldr	r1, [pc, #348]	; (8005bdc <leds_Task+0x14d8>)
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	4613      	mov	r3, r2
 8005a84:	011b      	lsls	r3, r3, #4
 8005a86:	4413      	add	r3, r2
 8005a88:	00db      	lsls	r3, r3, #3
 8005a8a:	440b      	add	r3, r1
 8005a8c:	330c      	adds	r3, #12
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	ee07 3a90 	vmov	s15, r3
 8005a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a9a:	4950      	ldr	r1, [pc, #320]	; (8005bdc <leds_Task+0x14d8>)
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	011b      	lsls	r3, r3, #4
 8005aa2:	4413      	add	r3, r2
 8005aa4:	00db      	lsls	r3, r3, #3
 8005aa6:	440b      	add	r3, r1
 8005aa8:	3308      	adds	r3, #8
 8005aaa:	edc3 7a00 	vstr	s15, [r3]
						leds_info.leds[i].pwmch1_cur_value = (float)leds_info.leds[i].pwmch1_value0;
 8005aae:	494b      	ldr	r1, [pc, #300]	; (8005bdc <leds_Task+0x14d8>)
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	011b      	lsls	r3, r3, #4
 8005ab6:	4413      	add	r3, r2
 8005ab8:	00db      	lsls	r3, r3, #3
 8005aba:	440b      	add	r3, r1
 8005abc:	3318      	adds	r3, #24
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	ee07 3a90 	vmov	s15, r3
 8005ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aca:	4944      	ldr	r1, [pc, #272]	; (8005bdc <leds_Task+0x14d8>)
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	011b      	lsls	r3, r3, #4
 8005ad2:	4413      	add	r3, r2
 8005ad4:	00db      	lsls	r3, r3, #3
 8005ad6:	440b      	add	r3, r1
 8005ad8:	3314      	adds	r3, #20
 8005ada:	edc3 7a00 	vstr	s15, [r3]
						leds_info.leds[i].pwmch2_cur_value = (float)leds_info.leds[i].pwmch2_value0;
 8005ade:	493f      	ldr	r1, [pc, #252]	; (8005bdc <leds_Task+0x14d8>)
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	011b      	lsls	r3, r3, #4
 8005ae6:	4413      	add	r3, r2
 8005ae8:	00db      	lsls	r3, r3, #3
 8005aea:	440b      	add	r3, r1
 8005aec:	3324      	adds	r3, #36	; 0x24
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	ee07 3a90 	vmov	s15, r3
 8005af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005afa:	4938      	ldr	r1, [pc, #224]	; (8005bdc <leds_Task+0x14d8>)
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	4613      	mov	r3, r2
 8005b00:	011b      	lsls	r3, r3, #4
 8005b02:	4413      	add	r3, r2
 8005b04:	00db      	lsls	r3, r3, #3
 8005b06:	440b      	add	r3, r1
 8005b08:	3320      	adds	r3, #32
 8005b0a:	edc3 7a00 	vstr	s15, [r3]
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch0_tim,
 8005b0e:	4933      	ldr	r1, [pc, #204]	; (8005bdc <leds_Task+0x14d8>)
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	4613      	mov	r3, r2
 8005b14:	011b      	lsls	r3, r3, #4
 8005b16:	4413      	add	r3, r2
 8005b18:	00db      	lsls	r3, r3, #3
 8005b1a:	440b      	add	r3, r1
 8005b1c:	3348      	adds	r3, #72	; 0x48
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d116      	bne.n	8005b52 <leds_Task+0x144e>
 8005b24:	492d      	ldr	r1, [pc, #180]	; (8005bdc <leds_Task+0x14d8>)
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	4613      	mov	r3, r2
 8005b2a:	011b      	lsls	r3, r3, #4
 8005b2c:	4413      	add	r3, r2
 8005b2e:	00db      	lsls	r3, r3, #3
 8005b30:	440b      	add	r3, r1
 8005b32:	330c      	adds	r3, #12
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	b2d8      	uxtb	r0, r3
 8005b38:	4928      	ldr	r1, [pc, #160]	; (8005bdc <leds_Task+0x14d8>)
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	011b      	lsls	r3, r3, #4
 8005b40:	4413      	add	r3, r2
 8005b42:	00db      	lsls	r3, r3, #3
 8005b44:	440b      	add	r3, r1
 8005b46:	3344      	adds	r3, #68	; 0x44
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	635a      	str	r2, [r3, #52]	; 0x34
 8005b50:	e05c      	b.n	8005c0c <leds_Task+0x1508>
 8005b52:	4922      	ldr	r1, [pc, #136]	; (8005bdc <leds_Task+0x14d8>)
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	4613      	mov	r3, r2
 8005b58:	011b      	lsls	r3, r3, #4
 8005b5a:	4413      	add	r3, r2
 8005b5c:	00db      	lsls	r3, r3, #3
 8005b5e:	440b      	add	r3, r1
 8005b60:	3348      	adds	r3, #72	; 0x48
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2b04      	cmp	r3, #4
 8005b66:	d116      	bne.n	8005b96 <leds_Task+0x1492>
 8005b68:	491c      	ldr	r1, [pc, #112]	; (8005bdc <leds_Task+0x14d8>)
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	011b      	lsls	r3, r3, #4
 8005b70:	4413      	add	r3, r2
 8005b72:	00db      	lsls	r3, r3, #3
 8005b74:	440b      	add	r3, r1
 8005b76:	330c      	adds	r3, #12
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	b2d8      	uxtb	r0, r3
 8005b7c:	4917      	ldr	r1, [pc, #92]	; (8005bdc <leds_Task+0x14d8>)
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	4613      	mov	r3, r2
 8005b82:	011b      	lsls	r3, r3, #4
 8005b84:	4413      	add	r3, r2
 8005b86:	00db      	lsls	r3, r3, #3
 8005b88:	440b      	add	r3, r1
 8005b8a:	3344      	adds	r3, #68	; 0x44
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	4603      	mov	r3, r0
 8005b92:	6393      	str	r3, [r2, #56]	; 0x38
 8005b94:	e03a      	b.n	8005c0c <leds_Task+0x1508>
 8005b96:	4911      	ldr	r1, [pc, #68]	; (8005bdc <leds_Task+0x14d8>)
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	011b      	lsls	r3, r3, #4
 8005b9e:	4413      	add	r3, r2
 8005ba0:	00db      	lsls	r3, r3, #3
 8005ba2:	440b      	add	r3, r1
 8005ba4:	3348      	adds	r3, #72	; 0x48
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2b08      	cmp	r3, #8
 8005baa:	d119      	bne.n	8005be0 <leds_Task+0x14dc>
 8005bac:	490b      	ldr	r1, [pc, #44]	; (8005bdc <leds_Task+0x14d8>)
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	011b      	lsls	r3, r3, #4
 8005bb4:	4413      	add	r3, r2
 8005bb6:	00db      	lsls	r3, r3, #3
 8005bb8:	440b      	add	r3, r1
 8005bba:	330c      	adds	r3, #12
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	b2d8      	uxtb	r0, r3
 8005bc0:	4906      	ldr	r1, [pc, #24]	; (8005bdc <leds_Task+0x14d8>)
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	011b      	lsls	r3, r3, #4
 8005bc8:	4413      	add	r3, r2
 8005bca:	00db      	lsls	r3, r3, #3
 8005bcc:	440b      	add	r3, r1
 8005bce:	3344      	adds	r3, #68	; 0x44
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	63d3      	str	r3, [r2, #60]	; 0x3c
 8005bd8:	e018      	b.n	8005c0c <leds_Task+0x1508>
 8005bda:	bf00      	nop
 8005bdc:	20000a44 	.word	0x20000a44
 8005be0:	49b0      	ldr	r1, [pc, #704]	; (8005ea4 <leds_Task+0x17a0>)
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	4613      	mov	r3, r2
 8005be6:	011b      	lsls	r3, r3, #4
 8005be8:	4413      	add	r3, r2
 8005bea:	00db      	lsls	r3, r3, #3
 8005bec:	440b      	add	r3, r1
 8005bee:	330c      	adds	r3, #12
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	b2d8      	uxtb	r0, r3
 8005bf4:	49ab      	ldr	r1, [pc, #684]	; (8005ea4 <leds_Task+0x17a0>)
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	011b      	lsls	r3, r3, #4
 8005bfc:	4413      	add	r3, r2
 8005bfe:	00db      	lsls	r3, r3, #3
 8005c00:	440b      	add	r3, r1
 8005c02:	3344      	adds	r3, #68	; 0x44
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	4603      	mov	r3, r0
 8005c0a:	6413      	str	r3, [r2, #64]	; 0x40
												leds_info.leds[i].pwmch0_timch, leds_info.leds[i].pwmch0_value0);
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch1_tim,
 8005c0c:	49a5      	ldr	r1, [pc, #660]	; (8005ea4 <leds_Task+0x17a0>)
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	4613      	mov	r3, r2
 8005c12:	011b      	lsls	r3, r3, #4
 8005c14:	4413      	add	r3, r2
 8005c16:	00db      	lsls	r3, r3, #3
 8005c18:	440b      	add	r3, r1
 8005c1a:	3350      	adds	r3, #80	; 0x50
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d116      	bne.n	8005c50 <leds_Task+0x154c>
 8005c22:	49a0      	ldr	r1, [pc, #640]	; (8005ea4 <leds_Task+0x17a0>)
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	4613      	mov	r3, r2
 8005c28:	011b      	lsls	r3, r3, #4
 8005c2a:	4413      	add	r3, r2
 8005c2c:	00db      	lsls	r3, r3, #3
 8005c2e:	440b      	add	r3, r1
 8005c30:	3318      	adds	r3, #24
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	b2d8      	uxtb	r0, r3
 8005c36:	499b      	ldr	r1, [pc, #620]	; (8005ea4 <leds_Task+0x17a0>)
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	011b      	lsls	r3, r3, #4
 8005c3e:	4413      	add	r3, r2
 8005c40:	00db      	lsls	r3, r3, #3
 8005c42:	440b      	add	r3, r1
 8005c44:	334c      	adds	r3, #76	; 0x4c
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	635a      	str	r2, [r3, #52]	; 0x34
 8005c4e:	e059      	b.n	8005d04 <leds_Task+0x1600>
 8005c50:	4994      	ldr	r1, [pc, #592]	; (8005ea4 <leds_Task+0x17a0>)
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	4613      	mov	r3, r2
 8005c56:	011b      	lsls	r3, r3, #4
 8005c58:	4413      	add	r3, r2
 8005c5a:	00db      	lsls	r3, r3, #3
 8005c5c:	440b      	add	r3, r1
 8005c5e:	3350      	adds	r3, #80	; 0x50
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2b04      	cmp	r3, #4
 8005c64:	d116      	bne.n	8005c94 <leds_Task+0x1590>
 8005c66:	498f      	ldr	r1, [pc, #572]	; (8005ea4 <leds_Task+0x17a0>)
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	011b      	lsls	r3, r3, #4
 8005c6e:	4413      	add	r3, r2
 8005c70:	00db      	lsls	r3, r3, #3
 8005c72:	440b      	add	r3, r1
 8005c74:	3318      	adds	r3, #24
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	b2d8      	uxtb	r0, r3
 8005c7a:	498a      	ldr	r1, [pc, #552]	; (8005ea4 <leds_Task+0x17a0>)
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	011b      	lsls	r3, r3, #4
 8005c82:	4413      	add	r3, r2
 8005c84:	00db      	lsls	r3, r3, #3
 8005c86:	440b      	add	r3, r1
 8005c88:	334c      	adds	r3, #76	; 0x4c
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	4603      	mov	r3, r0
 8005c90:	6393      	str	r3, [r2, #56]	; 0x38
 8005c92:	e037      	b.n	8005d04 <leds_Task+0x1600>
 8005c94:	4983      	ldr	r1, [pc, #524]	; (8005ea4 <leds_Task+0x17a0>)
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	4613      	mov	r3, r2
 8005c9a:	011b      	lsls	r3, r3, #4
 8005c9c:	4413      	add	r3, r2
 8005c9e:	00db      	lsls	r3, r3, #3
 8005ca0:	440b      	add	r3, r1
 8005ca2:	3350      	adds	r3, #80	; 0x50
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2b08      	cmp	r3, #8
 8005ca8:	d116      	bne.n	8005cd8 <leds_Task+0x15d4>
 8005caa:	497e      	ldr	r1, [pc, #504]	; (8005ea4 <leds_Task+0x17a0>)
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	4613      	mov	r3, r2
 8005cb0:	011b      	lsls	r3, r3, #4
 8005cb2:	4413      	add	r3, r2
 8005cb4:	00db      	lsls	r3, r3, #3
 8005cb6:	440b      	add	r3, r1
 8005cb8:	3318      	adds	r3, #24
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	b2d8      	uxtb	r0, r3
 8005cbe:	4979      	ldr	r1, [pc, #484]	; (8005ea4 <leds_Task+0x17a0>)
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	011b      	lsls	r3, r3, #4
 8005cc6:	4413      	add	r3, r2
 8005cc8:	00db      	lsls	r3, r3, #3
 8005cca:	440b      	add	r3, r1
 8005ccc:	334c      	adds	r3, #76	; 0x4c
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	63d3      	str	r3, [r2, #60]	; 0x3c
 8005cd6:	e015      	b.n	8005d04 <leds_Task+0x1600>
 8005cd8:	4972      	ldr	r1, [pc, #456]	; (8005ea4 <leds_Task+0x17a0>)
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	011b      	lsls	r3, r3, #4
 8005ce0:	4413      	add	r3, r2
 8005ce2:	00db      	lsls	r3, r3, #3
 8005ce4:	440b      	add	r3, r1
 8005ce6:	3318      	adds	r3, #24
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	b2d8      	uxtb	r0, r3
 8005cec:	496d      	ldr	r1, [pc, #436]	; (8005ea4 <leds_Task+0x17a0>)
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	011b      	lsls	r3, r3, #4
 8005cf4:	4413      	add	r3, r2
 8005cf6:	00db      	lsls	r3, r3, #3
 8005cf8:	440b      	add	r3, r1
 8005cfa:	334c      	adds	r3, #76	; 0x4c
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	4603      	mov	r3, r0
 8005d02:	6413      	str	r3, [r2, #64]	; 0x40
												leds_info.leds[i].pwmch1_timch, leds_info.leds[i].pwmch1_value0);
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch2_tim,
 8005d04:	4967      	ldr	r1, [pc, #412]	; (8005ea4 <leds_Task+0x17a0>)
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	011b      	lsls	r3, r3, #4
 8005d0c:	4413      	add	r3, r2
 8005d0e:	00db      	lsls	r3, r3, #3
 8005d10:	440b      	add	r3, r1
 8005d12:	3358      	adds	r3, #88	; 0x58
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d116      	bne.n	8005d48 <leds_Task+0x1644>
 8005d1a:	4962      	ldr	r1, [pc, #392]	; (8005ea4 <leds_Task+0x17a0>)
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	4613      	mov	r3, r2
 8005d20:	011b      	lsls	r3, r3, #4
 8005d22:	4413      	add	r3, r2
 8005d24:	00db      	lsls	r3, r3, #3
 8005d26:	440b      	add	r3, r1
 8005d28:	3324      	adds	r3, #36	; 0x24
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	b2d8      	uxtb	r0, r3
 8005d2e:	495d      	ldr	r1, [pc, #372]	; (8005ea4 <leds_Task+0x17a0>)
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	4613      	mov	r3, r2
 8005d34:	011b      	lsls	r3, r3, #4
 8005d36:	4413      	add	r3, r2
 8005d38:	00db      	lsls	r3, r3, #3
 8005d3a:	440b      	add	r3, r1
 8005d3c:	3354      	adds	r3, #84	; 0x54
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4602      	mov	r2, r0
 8005d44:	635a      	str	r2, [r3, #52]	; 0x34
 8005d46:	e059      	b.n	8005dfc <leds_Task+0x16f8>
 8005d48:	4956      	ldr	r1, [pc, #344]	; (8005ea4 <leds_Task+0x17a0>)
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	011b      	lsls	r3, r3, #4
 8005d50:	4413      	add	r3, r2
 8005d52:	00db      	lsls	r3, r3, #3
 8005d54:	440b      	add	r3, r1
 8005d56:	3358      	adds	r3, #88	; 0x58
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2b04      	cmp	r3, #4
 8005d5c:	d116      	bne.n	8005d8c <leds_Task+0x1688>
 8005d5e:	4951      	ldr	r1, [pc, #324]	; (8005ea4 <leds_Task+0x17a0>)
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	4613      	mov	r3, r2
 8005d64:	011b      	lsls	r3, r3, #4
 8005d66:	4413      	add	r3, r2
 8005d68:	00db      	lsls	r3, r3, #3
 8005d6a:	440b      	add	r3, r1
 8005d6c:	3324      	adds	r3, #36	; 0x24
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	b2d8      	uxtb	r0, r3
 8005d72:	494c      	ldr	r1, [pc, #304]	; (8005ea4 <leds_Task+0x17a0>)
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	4613      	mov	r3, r2
 8005d78:	011b      	lsls	r3, r3, #4
 8005d7a:	4413      	add	r3, r2
 8005d7c:	00db      	lsls	r3, r3, #3
 8005d7e:	440b      	add	r3, r1
 8005d80:	3354      	adds	r3, #84	; 0x54
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	4603      	mov	r3, r0
 8005d88:	6393      	str	r3, [r2, #56]	; 0x38
 8005d8a:	e037      	b.n	8005dfc <leds_Task+0x16f8>
 8005d8c:	4945      	ldr	r1, [pc, #276]	; (8005ea4 <leds_Task+0x17a0>)
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	4613      	mov	r3, r2
 8005d92:	011b      	lsls	r3, r3, #4
 8005d94:	4413      	add	r3, r2
 8005d96:	00db      	lsls	r3, r3, #3
 8005d98:	440b      	add	r3, r1
 8005d9a:	3358      	adds	r3, #88	; 0x58
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2b08      	cmp	r3, #8
 8005da0:	d116      	bne.n	8005dd0 <leds_Task+0x16cc>
 8005da2:	4940      	ldr	r1, [pc, #256]	; (8005ea4 <leds_Task+0x17a0>)
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	4613      	mov	r3, r2
 8005da8:	011b      	lsls	r3, r3, #4
 8005daa:	4413      	add	r3, r2
 8005dac:	00db      	lsls	r3, r3, #3
 8005dae:	440b      	add	r3, r1
 8005db0:	3324      	adds	r3, #36	; 0x24
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	b2d8      	uxtb	r0, r3
 8005db6:	493b      	ldr	r1, [pc, #236]	; (8005ea4 <leds_Task+0x17a0>)
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	4613      	mov	r3, r2
 8005dbc:	011b      	lsls	r3, r3, #4
 8005dbe:	4413      	add	r3, r2
 8005dc0:	00db      	lsls	r3, r3, #3
 8005dc2:	440b      	add	r3, r1
 8005dc4:	3354      	adds	r3, #84	; 0x54
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	4603      	mov	r3, r0
 8005dcc:	63d3      	str	r3, [r2, #60]	; 0x3c
 8005dce:	e015      	b.n	8005dfc <leds_Task+0x16f8>
 8005dd0:	4934      	ldr	r1, [pc, #208]	; (8005ea4 <leds_Task+0x17a0>)
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	011b      	lsls	r3, r3, #4
 8005dd8:	4413      	add	r3, r2
 8005dda:	00db      	lsls	r3, r3, #3
 8005ddc:	440b      	add	r3, r1
 8005dde:	3324      	adds	r3, #36	; 0x24
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	b2d8      	uxtb	r0, r3
 8005de4:	492f      	ldr	r1, [pc, #188]	; (8005ea4 <leds_Task+0x17a0>)
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	4613      	mov	r3, r2
 8005dea:	011b      	lsls	r3, r3, #4
 8005dec:	4413      	add	r3, r2
 8005dee:	00db      	lsls	r3, r3, #3
 8005df0:	440b      	add	r3, r1
 8005df2:	3354      	adds	r3, #84	; 0x54
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	4603      	mov	r3, r0
 8005dfa:	6413      	str	r3, [r2, #64]	; 0x40
												leds_info.leds[i].pwmch2_timch, leds_info.leds[i].pwmch2_value0);
						//Loops
						if( (leds_info.leds[i].loop_cnt > 1) || (leds_info.leds[i].loop_cnt == 0) )
 8005dfc:	4929      	ldr	r1, [pc, #164]	; (8005ea4 <leds_Task+0x17a0>)
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	4613      	mov	r3, r2
 8005e02:	011b      	lsls	r3, r3, #4
 8005e04:	4413      	add	r3, r2
 8005e06:	00db      	lsls	r3, r3, #3
 8005e08:	440b      	add	r3, r1
 8005e0a:	3334      	adds	r3, #52	; 0x34
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d80a      	bhi.n	8005e28 <leds_Task+0x1724>
 8005e12:	4924      	ldr	r1, [pc, #144]	; (8005ea4 <leds_Task+0x17a0>)
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	4613      	mov	r3, r2
 8005e18:	011b      	lsls	r3, r3, #4
 8005e1a:	4413      	add	r3, r2
 8005e1c:	00db      	lsls	r3, r3, #3
 8005e1e:	440b      	add	r3, r1
 8005e20:	3334      	adds	r3, #52	; 0x34
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d131      	bne.n	8005e8c <leds_Task+0x1788>
						{
							if( leds_info.leds[i].loop_cnt > 1 )
 8005e28:	491e      	ldr	r1, [pc, #120]	; (8005ea4 <leds_Task+0x17a0>)
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	011b      	lsls	r3, r3, #4
 8005e30:	4413      	add	r3, r2
 8005e32:	00db      	lsls	r3, r3, #3
 8005e34:	440b      	add	r3, r1
 8005e36:	3334      	adds	r3, #52	; 0x34
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d912      	bls.n	8005e64 <leds_Task+0x1760>
								leds_info.leds[i].loop_cnt--;
 8005e3e:	4919      	ldr	r1, [pc, #100]	; (8005ea4 <leds_Task+0x17a0>)
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	4613      	mov	r3, r2
 8005e44:	011b      	lsls	r3, r3, #4
 8005e46:	4413      	add	r3, r2
 8005e48:	00db      	lsls	r3, r3, #3
 8005e4a:	440b      	add	r3, r1
 8005e4c:	3334      	adds	r3, #52	; 0x34
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	1e59      	subs	r1, r3, #1
 8005e52:	4814      	ldr	r0, [pc, #80]	; (8005ea4 <leds_Task+0x17a0>)
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	4613      	mov	r3, r2
 8005e58:	011b      	lsls	r3, r3, #4
 8005e5a:	4413      	add	r3, r2
 8005e5c:	00db      	lsls	r3, r3, #3
 8005e5e:	4403      	add	r3, r0
 8005e60:	3334      	adds	r3, #52	; 0x34
 8005e62:	6019      	str	r1, [r3, #0]
							leds_info.leds[i].timer = leds_info.leds[i].anim_time_st0;
 8005e64:	490f      	ldr	r1, [pc, #60]	; (8005ea4 <leds_Task+0x17a0>)
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	4613      	mov	r3, r2
 8005e6a:	011b      	lsls	r3, r3, #4
 8005e6c:	4413      	add	r3, r2
 8005e6e:	00db      	lsls	r3, r3, #3
 8005e70:	440b      	add	r3, r1
 8005e72:	332c      	adds	r3, #44	; 0x2c
 8005e74:	6819      	ldr	r1, [r3, #0]
 8005e76:	480b      	ldr	r0, [pc, #44]	; (8005ea4 <leds_Task+0x17a0>)
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	011b      	lsls	r3, r3, #4
 8005e7e:	4413      	add	r3, r2
 8005e80:	00db      	lsls	r3, r3, #3
 8005e82:	4403      	add	r3, r0
 8005e84:	3304      	adds	r3, #4
 8005e86:	6019      	str	r1, [r3, #0]
 8005e88:	f001 ba06 	b.w	8007298 <leds_Task+0x2b94>
						}
						//Stop blinking
						else
							leds_info.leds[i].mode = led_toggle;
 8005e8c:	4905      	ldr	r1, [pc, #20]	; (8005ea4 <leds_Task+0x17a0>)
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	4613      	mov	r3, r2
 8005e92:	011b      	lsls	r3, r3, #4
 8005e94:	4413      	add	r3, r2
 8005e96:	00db      	lsls	r3, r3, #3
 8005e98:	440b      	add	r3, r1
 8005e9a:	3302      	adds	r3, #2
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	701a      	strb	r2, [r3, #0]
 8005ea0:	f001 b9fa 	b.w	8007298 <leds_Task+0x2b94>
 8005ea4:	20000a44 	.word	0x20000a44
					}
				}
			}
			//Fade blink mode
			//----------------------------------------------------------------------------------------------------------------
			else if( leds_info.leds[i].mode == led_fadeblink )
 8005ea8:	49cd      	ldr	r1, [pc, #820]	; (80061e0 <leds_Task+0x1adc>)
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	4613      	mov	r3, r2
 8005eae:	011b      	lsls	r3, r3, #4
 8005eb0:	4413      	add	r3, r2
 8005eb2:	00db      	lsls	r3, r3, #3
 8005eb4:	440b      	add	r3, r1
 8005eb6:	3302      	adds	r3, #2
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	f040 8743 	bne.w	8006d48 <leds_Task+0x2644>
			{
				//
				if( leds_info.leds[i].state == led_go_to_st1 )
 8005ec2:	49c7      	ldr	r1, [pc, #796]	; (80061e0 <leds_Task+0x1adc>)
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	011b      	lsls	r3, r3, #4
 8005eca:	4413      	add	r3, r2
 8005ecc:	00db      	lsls	r3, r3, #3
 8005ece:	440b      	add	r3, r1
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	2b03      	cmp	r3, #3
 8005ed8:	f040 8378 	bne.w	80065cc <leds_Task+0x1ec8>
				{
					if( leds_info.leds[i].timer == 0 )
 8005edc:	49c0      	ldr	r1, [pc, #768]	; (80061e0 <leds_Task+0x1adc>)
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	011b      	lsls	r3, r3, #4
 8005ee4:	4413      	add	r3, r2
 8005ee6:	00db      	lsls	r3, r3, #3
 8005ee8:	440b      	add	r3, r1
 8005eea:	3304      	adds	r3, #4
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f041 81d2 	bne.w	8007298 <leds_Task+0x2b94>
					{
						leds_info.leds[i].timer = LEDS_FADE_STEP_TIME;
 8005ef4:	49ba      	ldr	r1, [pc, #744]	; (80061e0 <leds_Task+0x1adc>)
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	4613      	mov	r3, r2
 8005efa:	011b      	lsls	r3, r3, #4
 8005efc:	4413      	add	r3, r2
 8005efe:	00db      	lsls	r3, r3, #3
 8005f00:	440b      	add	r3, r1
 8005f02:	3304      	adds	r3, #4
 8005f04:	2214      	movs	r2, #20
 8005f06:	601a      	str	r2, [r3, #0]
						leds_info.leds[i].pwmch0_cur_value += leds_info.leds[i].pwmch0_step;
 8005f08:	49b5      	ldr	r1, [pc, #724]	; (80061e0 <leds_Task+0x1adc>)
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	011b      	lsls	r3, r3, #4
 8005f10:	4413      	add	r3, r2
 8005f12:	00db      	lsls	r3, r3, #3
 8005f14:	440b      	add	r3, r1
 8005f16:	3310      	adds	r3, #16
 8005f18:	ed93 7a00 	vldr	s14, [r3]
 8005f1c:	49b0      	ldr	r1, [pc, #704]	; (80061e0 <leds_Task+0x1adc>)
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	4613      	mov	r3, r2
 8005f22:	011b      	lsls	r3, r3, #4
 8005f24:	4413      	add	r3, r2
 8005f26:	00db      	lsls	r3, r3, #3
 8005f28:	440b      	add	r3, r1
 8005f2a:	3308      	adds	r3, #8
 8005f2c:	edd3 7a00 	vldr	s15, [r3]
 8005f30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f34:	49aa      	ldr	r1, [pc, #680]	; (80061e0 <leds_Task+0x1adc>)
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	4613      	mov	r3, r2
 8005f3a:	011b      	lsls	r3, r3, #4
 8005f3c:	4413      	add	r3, r2
 8005f3e:	00db      	lsls	r3, r3, #3
 8005f40:	440b      	add	r3, r1
 8005f42:	3308      	adds	r3, #8
 8005f44:	edc3 7a00 	vstr	s15, [r3]
						leds_info.leds[i].pwmch1_cur_value += leds_info.leds[i].pwmch1_step;
 8005f48:	49a5      	ldr	r1, [pc, #660]	; (80061e0 <leds_Task+0x1adc>)
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	011b      	lsls	r3, r3, #4
 8005f50:	4413      	add	r3, r2
 8005f52:	00db      	lsls	r3, r3, #3
 8005f54:	440b      	add	r3, r1
 8005f56:	331c      	adds	r3, #28
 8005f58:	ed93 7a00 	vldr	s14, [r3]
 8005f5c:	49a0      	ldr	r1, [pc, #640]	; (80061e0 <leds_Task+0x1adc>)
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	4613      	mov	r3, r2
 8005f62:	011b      	lsls	r3, r3, #4
 8005f64:	4413      	add	r3, r2
 8005f66:	00db      	lsls	r3, r3, #3
 8005f68:	440b      	add	r3, r1
 8005f6a:	3314      	adds	r3, #20
 8005f6c:	edd3 7a00 	vldr	s15, [r3]
 8005f70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f74:	499a      	ldr	r1, [pc, #616]	; (80061e0 <leds_Task+0x1adc>)
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	4613      	mov	r3, r2
 8005f7a:	011b      	lsls	r3, r3, #4
 8005f7c:	4413      	add	r3, r2
 8005f7e:	00db      	lsls	r3, r3, #3
 8005f80:	440b      	add	r3, r1
 8005f82:	3314      	adds	r3, #20
 8005f84:	edc3 7a00 	vstr	s15, [r3]
						leds_info.leds[i].pwmch2_cur_value += leds_info.leds[i].pwmch2_step;
 8005f88:	4995      	ldr	r1, [pc, #596]	; (80061e0 <leds_Task+0x1adc>)
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	011b      	lsls	r3, r3, #4
 8005f90:	4413      	add	r3, r2
 8005f92:	00db      	lsls	r3, r3, #3
 8005f94:	440b      	add	r3, r1
 8005f96:	3328      	adds	r3, #40	; 0x28
 8005f98:	ed93 7a00 	vldr	s14, [r3]
 8005f9c:	4990      	ldr	r1, [pc, #576]	; (80061e0 <leds_Task+0x1adc>)
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	011b      	lsls	r3, r3, #4
 8005fa4:	4413      	add	r3, r2
 8005fa6:	00db      	lsls	r3, r3, #3
 8005fa8:	440b      	add	r3, r1
 8005faa:	3320      	adds	r3, #32
 8005fac:	edd3 7a00 	vldr	s15, [r3]
 8005fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fb4:	498a      	ldr	r1, [pc, #552]	; (80061e0 <leds_Task+0x1adc>)
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	4613      	mov	r3, r2
 8005fba:	011b      	lsls	r3, r3, #4
 8005fbc:	4413      	add	r3, r2
 8005fbe:	00db      	lsls	r3, r3, #3
 8005fc0:	440b      	add	r3, r1
 8005fc2:	3320      	adds	r3, #32
 8005fc4:	edc3 7a00 	vstr	s15, [r3]
						if( leds_info.leds[i].step_cnt-- == 0 )
 8005fc8:	4985      	ldr	r1, [pc, #532]	; (80061e0 <leds_Task+0x1adc>)
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	4613      	mov	r3, r2
 8005fce:	011b      	lsls	r3, r3, #4
 8005fd0:	4413      	add	r3, r2
 8005fd2:	00db      	lsls	r3, r3, #3
 8005fd4:	440b      	add	r3, r1
 8005fd6:	3338      	adds	r3, #56	; 0x38
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	1e50      	subs	r0, r2, #1
 8005fdc:	4c80      	ldr	r4, [pc, #512]	; (80061e0 <leds_Task+0x1adc>)
 8005fde:	68f9      	ldr	r1, [r7, #12]
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	011b      	lsls	r3, r3, #4
 8005fe4:	440b      	add	r3, r1
 8005fe6:	00db      	lsls	r3, r3, #3
 8005fe8:	4423      	add	r3, r4
 8005fea:	3338      	adds	r3, #56	; 0x38
 8005fec:	6018      	str	r0, [r3, #0]
 8005fee:	2a00      	cmp	r2, #0
 8005ff0:	f040 8127 	bne.w	8006242 <leds_Task+0x1b3e>
						{
							leds_info.leds[i].pwmch0_cur_value = (float)leds_info.leds[i].pwmch0_value1;
 8005ff4:	497a      	ldr	r1, [pc, #488]	; (80061e0 <leds_Task+0x1adc>)
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	011b      	lsls	r3, r3, #4
 8005ffc:	4413      	add	r3, r2
 8005ffe:	00db      	lsls	r3, r3, #3
 8006000:	440b      	add	r3, r1
 8006002:	330d      	adds	r3, #13
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	b2db      	uxtb	r3, r3
 8006008:	ee07 3a90 	vmov	s15, r3
 800600c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006010:	4973      	ldr	r1, [pc, #460]	; (80061e0 <leds_Task+0x1adc>)
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	4613      	mov	r3, r2
 8006016:	011b      	lsls	r3, r3, #4
 8006018:	4413      	add	r3, r2
 800601a:	00db      	lsls	r3, r3, #3
 800601c:	440b      	add	r3, r1
 800601e:	3308      	adds	r3, #8
 8006020:	edc3 7a00 	vstr	s15, [r3]
							leds_info.leds[i].pwmch1_cur_value = (float)leds_info.leds[i].pwmch1_value1;
 8006024:	496e      	ldr	r1, [pc, #440]	; (80061e0 <leds_Task+0x1adc>)
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	4613      	mov	r3, r2
 800602a:	011b      	lsls	r3, r3, #4
 800602c:	4413      	add	r3, r2
 800602e:	00db      	lsls	r3, r3, #3
 8006030:	440b      	add	r3, r1
 8006032:	3319      	adds	r3, #25
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	b2db      	uxtb	r3, r3
 8006038:	ee07 3a90 	vmov	s15, r3
 800603c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006040:	4967      	ldr	r1, [pc, #412]	; (80061e0 <leds_Task+0x1adc>)
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	4613      	mov	r3, r2
 8006046:	011b      	lsls	r3, r3, #4
 8006048:	4413      	add	r3, r2
 800604a:	00db      	lsls	r3, r3, #3
 800604c:	440b      	add	r3, r1
 800604e:	3314      	adds	r3, #20
 8006050:	edc3 7a00 	vstr	s15, [r3]
							leds_info.leds[i].pwmch2_cur_value = (float)leds_info.leds[i].pwmch2_value1;
 8006054:	4962      	ldr	r1, [pc, #392]	; (80061e0 <leds_Task+0x1adc>)
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	4613      	mov	r3, r2
 800605a:	011b      	lsls	r3, r3, #4
 800605c:	4413      	add	r3, r2
 800605e:	00db      	lsls	r3, r3, #3
 8006060:	440b      	add	r3, r1
 8006062:	3325      	adds	r3, #37	; 0x25
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	b2db      	uxtb	r3, r3
 8006068:	ee07 3a90 	vmov	s15, r3
 800606c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006070:	495b      	ldr	r1, [pc, #364]	; (80061e0 <leds_Task+0x1adc>)
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	4613      	mov	r3, r2
 8006076:	011b      	lsls	r3, r3, #4
 8006078:	4413      	add	r3, r2
 800607a:	00db      	lsls	r3, r3, #3
 800607c:	440b      	add	r3, r1
 800607e:	3320      	adds	r3, #32
 8006080:	edc3 7a00 	vstr	s15, [r3]
							leds_info.leds[i].state = led_go_to_st0;
 8006084:	4956      	ldr	r1, [pc, #344]	; (80061e0 <leds_Task+0x1adc>)
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	4613      	mov	r3, r2
 800608a:	011b      	lsls	r3, r3, #4
 800608c:	4413      	add	r3, r2
 800608e:	00db      	lsls	r3, r3, #3
 8006090:	440b      	add	r3, r1
 8006092:	3301      	adds	r3, #1
 8006094:	2202      	movs	r2, #2
 8006096:	701a      	strb	r2, [r3, #0]
							leds_info.leds[i].step_cnt = leds_info.leds[i].anim_time_st1 / LEDS_FADE_STEP_TIME;
 8006098:	4951      	ldr	r1, [pc, #324]	; (80061e0 <leds_Task+0x1adc>)
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	4613      	mov	r3, r2
 800609e:	011b      	lsls	r3, r3, #4
 80060a0:	4413      	add	r3, r2
 80060a2:	00db      	lsls	r3, r3, #3
 80060a4:	440b      	add	r3, r1
 80060a6:	3330      	adds	r3, #48	; 0x30
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a4e      	ldr	r2, [pc, #312]	; (80061e4 <leds_Task+0x1ae0>)
 80060ac:	fba2 2303 	umull	r2, r3, r2, r3
 80060b0:	0919      	lsrs	r1, r3, #4
 80060b2:	484b      	ldr	r0, [pc, #300]	; (80061e0 <leds_Task+0x1adc>)
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	4613      	mov	r3, r2
 80060b8:	011b      	lsls	r3, r3, #4
 80060ba:	4413      	add	r3, r2
 80060bc:	00db      	lsls	r3, r3, #3
 80060be:	4403      	add	r3, r0
 80060c0:	3338      	adds	r3, #56	; 0x38
 80060c2:	6019      	str	r1, [r3, #0]
							if( leds_info.leds[i].step_cnt == 0 )
 80060c4:	4946      	ldr	r1, [pc, #280]	; (80061e0 <leds_Task+0x1adc>)
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	4613      	mov	r3, r2
 80060ca:	011b      	lsls	r3, r3, #4
 80060cc:	4413      	add	r3, r2
 80060ce:	00db      	lsls	r3, r3, #3
 80060d0:	440b      	add	r3, r1
 80060d2:	3338      	adds	r3, #56	; 0x38
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d109      	bne.n	80060ee <leds_Task+0x19ea>
								leds_info.leds[i].step_cnt = 1;
 80060da:	4941      	ldr	r1, [pc, #260]	; (80061e0 <leds_Task+0x1adc>)
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	4613      	mov	r3, r2
 80060e0:	011b      	lsls	r3, r3, #4
 80060e2:	4413      	add	r3, r2
 80060e4:	00db      	lsls	r3, r3, #3
 80060e6:	440b      	add	r3, r1
 80060e8:	3338      	adds	r3, #56	; 0x38
 80060ea:	2201      	movs	r2, #1
 80060ec:	601a      	str	r2, [r3, #0]
							leds_info.leds[i].pwmch0_step = ((float)leds_info.leds[i].pwmch0_value0 - (float)leds_info.leds[i].pwmch0_value1) / (float)leds_info.leds[i].step_cnt;
 80060ee:	493c      	ldr	r1, [pc, #240]	; (80061e0 <leds_Task+0x1adc>)
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	4613      	mov	r3, r2
 80060f4:	011b      	lsls	r3, r3, #4
 80060f6:	4413      	add	r3, r2
 80060f8:	00db      	lsls	r3, r3, #3
 80060fa:	440b      	add	r3, r1
 80060fc:	330c      	adds	r3, #12
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	b2db      	uxtb	r3, r3
 8006102:	ee07 3a90 	vmov	s15, r3
 8006106:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800610a:	4935      	ldr	r1, [pc, #212]	; (80061e0 <leds_Task+0x1adc>)
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	4613      	mov	r3, r2
 8006110:	011b      	lsls	r3, r3, #4
 8006112:	4413      	add	r3, r2
 8006114:	00db      	lsls	r3, r3, #3
 8006116:	440b      	add	r3, r1
 8006118:	330d      	adds	r3, #13
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	b2db      	uxtb	r3, r3
 800611e:	ee07 3a90 	vmov	s15, r3
 8006122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006126:	ee77 6a67 	vsub.f32	s13, s14, s15
 800612a:	492d      	ldr	r1, [pc, #180]	; (80061e0 <leds_Task+0x1adc>)
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	4613      	mov	r3, r2
 8006130:	011b      	lsls	r3, r3, #4
 8006132:	4413      	add	r3, r2
 8006134:	00db      	lsls	r3, r3, #3
 8006136:	440b      	add	r3, r1
 8006138:	3338      	adds	r3, #56	; 0x38
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	ee07 3a90 	vmov	s15, r3
 8006140:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006144:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006148:	4925      	ldr	r1, [pc, #148]	; (80061e0 <leds_Task+0x1adc>)
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	4613      	mov	r3, r2
 800614e:	011b      	lsls	r3, r3, #4
 8006150:	4413      	add	r3, r2
 8006152:	00db      	lsls	r3, r3, #3
 8006154:	440b      	add	r3, r1
 8006156:	3310      	adds	r3, #16
 8006158:	edc3 7a00 	vstr	s15, [r3]
							leds_info.leds[i].pwmch1_step = ((float)leds_info.leds[i].pwmch1_value0 - (float)leds_info.leds[i].pwmch1_value1) / (float)leds_info.leds[i].step_cnt;
 800615c:	4920      	ldr	r1, [pc, #128]	; (80061e0 <leds_Task+0x1adc>)
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	4613      	mov	r3, r2
 8006162:	011b      	lsls	r3, r3, #4
 8006164:	4413      	add	r3, r2
 8006166:	00db      	lsls	r3, r3, #3
 8006168:	440b      	add	r3, r1
 800616a:	3318      	adds	r3, #24
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	b2db      	uxtb	r3, r3
 8006170:	ee07 3a90 	vmov	s15, r3
 8006174:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006178:	4919      	ldr	r1, [pc, #100]	; (80061e0 <leds_Task+0x1adc>)
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	4613      	mov	r3, r2
 800617e:	011b      	lsls	r3, r3, #4
 8006180:	4413      	add	r3, r2
 8006182:	00db      	lsls	r3, r3, #3
 8006184:	440b      	add	r3, r1
 8006186:	3319      	adds	r3, #25
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	b2db      	uxtb	r3, r3
 800618c:	ee07 3a90 	vmov	s15, r3
 8006190:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006194:	ee77 6a67 	vsub.f32	s13, s14, s15
 8006198:	4911      	ldr	r1, [pc, #68]	; (80061e0 <leds_Task+0x1adc>)
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	4613      	mov	r3, r2
 800619e:	011b      	lsls	r3, r3, #4
 80061a0:	4413      	add	r3, r2
 80061a2:	00db      	lsls	r3, r3, #3
 80061a4:	440b      	add	r3, r1
 80061a6:	3338      	adds	r3, #56	; 0x38
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	ee07 3a90 	vmov	s15, r3
 80061ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80061b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061b6:	490a      	ldr	r1, [pc, #40]	; (80061e0 <leds_Task+0x1adc>)
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	4613      	mov	r3, r2
 80061bc:	011b      	lsls	r3, r3, #4
 80061be:	4413      	add	r3, r2
 80061c0:	00db      	lsls	r3, r3, #3
 80061c2:	440b      	add	r3, r1
 80061c4:	331c      	adds	r3, #28
 80061c6:	edc3 7a00 	vstr	s15, [r3]
							leds_info.leds[i].pwmch2_step = ((float)leds_info.leds[i].pwmch2_value0 - (float)leds_info.leds[i].pwmch2_value1) / (float)leds_info.leds[i].step_cnt;
 80061ca:	4905      	ldr	r1, [pc, #20]	; (80061e0 <leds_Task+0x1adc>)
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	4613      	mov	r3, r2
 80061d0:	011b      	lsls	r3, r3, #4
 80061d2:	4413      	add	r3, r2
 80061d4:	00db      	lsls	r3, r3, #3
 80061d6:	440b      	add	r3, r1
 80061d8:	3324      	adds	r3, #36	; 0x24
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	e003      	b.n	80061e8 <leds_Task+0x1ae4>
 80061e0:	20000a44 	.word	0x20000a44
 80061e4:	cccccccd 	.word	0xcccccccd
 80061e8:	ee07 3a90 	vmov	s15, r3
 80061ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80061f0:	49bc      	ldr	r1, [pc, #752]	; (80064e4 <leds_Task+0x1de0>)
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	4613      	mov	r3, r2
 80061f6:	011b      	lsls	r3, r3, #4
 80061f8:	4413      	add	r3, r2
 80061fa:	00db      	lsls	r3, r3, #3
 80061fc:	440b      	add	r3, r1
 80061fe:	3325      	adds	r3, #37	; 0x25
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	b2db      	uxtb	r3, r3
 8006204:	ee07 3a90 	vmov	s15, r3
 8006208:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800620c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8006210:	49b4      	ldr	r1, [pc, #720]	; (80064e4 <leds_Task+0x1de0>)
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	4613      	mov	r3, r2
 8006216:	011b      	lsls	r3, r3, #4
 8006218:	4413      	add	r3, r2
 800621a:	00db      	lsls	r3, r3, #3
 800621c:	440b      	add	r3, r1
 800621e:	3338      	adds	r3, #56	; 0x38
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	ee07 3a90 	vmov	s15, r3
 8006226:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800622a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800622e:	49ad      	ldr	r1, [pc, #692]	; (80064e4 <leds_Task+0x1de0>)
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	4613      	mov	r3, r2
 8006234:	011b      	lsls	r3, r3, #4
 8006236:	4413      	add	r3, r2
 8006238:	00db      	lsls	r3, r3, #3
 800623a:	440b      	add	r3, r1
 800623c:	3328      	adds	r3, #40	; 0x28
 800623e:	edc3 7a00 	vstr	s15, [r3]
						}
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch0_tim,
 8006242:	49a8      	ldr	r1, [pc, #672]	; (80064e4 <leds_Task+0x1de0>)
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	4613      	mov	r3, r2
 8006248:	011b      	lsls	r3, r3, #4
 800624a:	4413      	add	r3, r2
 800624c:	00db      	lsls	r3, r3, #3
 800624e:	440b      	add	r3, r1
 8006250:	3348      	adds	r3, #72	; 0x48
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d11c      	bne.n	8006292 <leds_Task+0x1b8e>
 8006258:	49a2      	ldr	r1, [pc, #648]	; (80064e4 <leds_Task+0x1de0>)
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	4613      	mov	r3, r2
 800625e:	011b      	lsls	r3, r3, #4
 8006260:	4413      	add	r3, r2
 8006262:	00db      	lsls	r3, r3, #3
 8006264:	440b      	add	r3, r1
 8006266:	3308      	adds	r3, #8
 8006268:	edd3 7a00 	vldr	s15, [r3]
 800626c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006270:	edc7 7a01 	vstr	s15, [r7, #4]
 8006274:	793b      	ldrb	r3, [r7, #4]
 8006276:	b2d8      	uxtb	r0, r3
 8006278:	499a      	ldr	r1, [pc, #616]	; (80064e4 <leds_Task+0x1de0>)
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	4613      	mov	r3, r2
 800627e:	011b      	lsls	r3, r3, #4
 8006280:	4413      	add	r3, r2
 8006282:	00db      	lsls	r3, r3, #3
 8006284:	440b      	add	r3, r1
 8006286:	3344      	adds	r3, #68	; 0x44
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4602      	mov	r2, r0
 800628e:	635a      	str	r2, [r3, #52]	; 0x34
 8006290:	e06b      	b.n	800636a <leds_Task+0x1c66>
 8006292:	4994      	ldr	r1, [pc, #592]	; (80064e4 <leds_Task+0x1de0>)
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	4613      	mov	r3, r2
 8006298:	011b      	lsls	r3, r3, #4
 800629a:	4413      	add	r3, r2
 800629c:	00db      	lsls	r3, r3, #3
 800629e:	440b      	add	r3, r1
 80062a0:	3348      	adds	r3, #72	; 0x48
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2b04      	cmp	r3, #4
 80062a6:	d11c      	bne.n	80062e2 <leds_Task+0x1bde>
 80062a8:	498e      	ldr	r1, [pc, #568]	; (80064e4 <leds_Task+0x1de0>)
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	4613      	mov	r3, r2
 80062ae:	011b      	lsls	r3, r3, #4
 80062b0:	4413      	add	r3, r2
 80062b2:	00db      	lsls	r3, r3, #3
 80062b4:	440b      	add	r3, r1
 80062b6:	3308      	adds	r3, #8
 80062b8:	edd3 7a00 	vldr	s15, [r3]
 80062bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062c0:	edc7 7a01 	vstr	s15, [r7, #4]
 80062c4:	793b      	ldrb	r3, [r7, #4]
 80062c6:	b2d8      	uxtb	r0, r3
 80062c8:	4986      	ldr	r1, [pc, #536]	; (80064e4 <leds_Task+0x1de0>)
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	4613      	mov	r3, r2
 80062ce:	011b      	lsls	r3, r3, #4
 80062d0:	4413      	add	r3, r2
 80062d2:	00db      	lsls	r3, r3, #3
 80062d4:	440b      	add	r3, r1
 80062d6:	3344      	adds	r3, #68	; 0x44
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	4603      	mov	r3, r0
 80062de:	6393      	str	r3, [r2, #56]	; 0x38
 80062e0:	e043      	b.n	800636a <leds_Task+0x1c66>
 80062e2:	4980      	ldr	r1, [pc, #512]	; (80064e4 <leds_Task+0x1de0>)
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	4613      	mov	r3, r2
 80062e8:	011b      	lsls	r3, r3, #4
 80062ea:	4413      	add	r3, r2
 80062ec:	00db      	lsls	r3, r3, #3
 80062ee:	440b      	add	r3, r1
 80062f0:	3348      	adds	r3, #72	; 0x48
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2b08      	cmp	r3, #8
 80062f6:	d11c      	bne.n	8006332 <leds_Task+0x1c2e>
 80062f8:	497a      	ldr	r1, [pc, #488]	; (80064e4 <leds_Task+0x1de0>)
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	4613      	mov	r3, r2
 80062fe:	011b      	lsls	r3, r3, #4
 8006300:	4413      	add	r3, r2
 8006302:	00db      	lsls	r3, r3, #3
 8006304:	440b      	add	r3, r1
 8006306:	3308      	adds	r3, #8
 8006308:	edd3 7a00 	vldr	s15, [r3]
 800630c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006310:	edc7 7a01 	vstr	s15, [r7, #4]
 8006314:	793b      	ldrb	r3, [r7, #4]
 8006316:	b2d8      	uxtb	r0, r3
 8006318:	4972      	ldr	r1, [pc, #456]	; (80064e4 <leds_Task+0x1de0>)
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	4613      	mov	r3, r2
 800631e:	011b      	lsls	r3, r3, #4
 8006320:	4413      	add	r3, r2
 8006322:	00db      	lsls	r3, r3, #3
 8006324:	440b      	add	r3, r1
 8006326:	3344      	adds	r3, #68	; 0x44
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	4603      	mov	r3, r0
 800632e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8006330:	e01b      	b.n	800636a <leds_Task+0x1c66>
 8006332:	496c      	ldr	r1, [pc, #432]	; (80064e4 <leds_Task+0x1de0>)
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	4613      	mov	r3, r2
 8006338:	011b      	lsls	r3, r3, #4
 800633a:	4413      	add	r3, r2
 800633c:	00db      	lsls	r3, r3, #3
 800633e:	440b      	add	r3, r1
 8006340:	3308      	adds	r3, #8
 8006342:	edd3 7a00 	vldr	s15, [r3]
 8006346:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800634a:	edc7 7a01 	vstr	s15, [r7, #4]
 800634e:	793b      	ldrb	r3, [r7, #4]
 8006350:	b2d8      	uxtb	r0, r3
 8006352:	4964      	ldr	r1, [pc, #400]	; (80064e4 <leds_Task+0x1de0>)
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	4613      	mov	r3, r2
 8006358:	011b      	lsls	r3, r3, #4
 800635a:	4413      	add	r3, r2
 800635c:	00db      	lsls	r3, r3, #3
 800635e:	440b      	add	r3, r1
 8006360:	3344      	adds	r3, #68	; 0x44
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	4603      	mov	r3, r0
 8006368:	6413      	str	r3, [r2, #64]	; 0x40
											leds_info.leds[i].pwmch0_timch, (uint8_t)leds_info.leds[i].pwmch0_cur_value);
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch1_tim,
 800636a:	495e      	ldr	r1, [pc, #376]	; (80064e4 <leds_Task+0x1de0>)
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	4613      	mov	r3, r2
 8006370:	011b      	lsls	r3, r3, #4
 8006372:	4413      	add	r3, r2
 8006374:	00db      	lsls	r3, r3, #3
 8006376:	440b      	add	r3, r1
 8006378:	3350      	adds	r3, #80	; 0x50
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d11c      	bne.n	80063ba <leds_Task+0x1cb6>
 8006380:	4958      	ldr	r1, [pc, #352]	; (80064e4 <leds_Task+0x1de0>)
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	4613      	mov	r3, r2
 8006386:	011b      	lsls	r3, r3, #4
 8006388:	4413      	add	r3, r2
 800638a:	00db      	lsls	r3, r3, #3
 800638c:	440b      	add	r3, r1
 800638e:	3314      	adds	r3, #20
 8006390:	edd3 7a00 	vldr	s15, [r3]
 8006394:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006398:	edc7 7a01 	vstr	s15, [r7, #4]
 800639c:	793b      	ldrb	r3, [r7, #4]
 800639e:	b2d8      	uxtb	r0, r3
 80063a0:	4950      	ldr	r1, [pc, #320]	; (80064e4 <leds_Task+0x1de0>)
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	4613      	mov	r3, r2
 80063a6:	011b      	lsls	r3, r3, #4
 80063a8:	4413      	add	r3, r2
 80063aa:	00db      	lsls	r3, r3, #3
 80063ac:	440b      	add	r3, r1
 80063ae:	334c      	adds	r3, #76	; 0x4c
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4602      	mov	r2, r0
 80063b6:	635a      	str	r2, [r3, #52]	; 0x34
 80063b8:	e06b      	b.n	8006492 <leds_Task+0x1d8e>
 80063ba:	494a      	ldr	r1, [pc, #296]	; (80064e4 <leds_Task+0x1de0>)
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	4613      	mov	r3, r2
 80063c0:	011b      	lsls	r3, r3, #4
 80063c2:	4413      	add	r3, r2
 80063c4:	00db      	lsls	r3, r3, #3
 80063c6:	440b      	add	r3, r1
 80063c8:	3350      	adds	r3, #80	; 0x50
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2b04      	cmp	r3, #4
 80063ce:	d11c      	bne.n	800640a <leds_Task+0x1d06>
 80063d0:	4944      	ldr	r1, [pc, #272]	; (80064e4 <leds_Task+0x1de0>)
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	4613      	mov	r3, r2
 80063d6:	011b      	lsls	r3, r3, #4
 80063d8:	4413      	add	r3, r2
 80063da:	00db      	lsls	r3, r3, #3
 80063dc:	440b      	add	r3, r1
 80063de:	3314      	adds	r3, #20
 80063e0:	edd3 7a00 	vldr	s15, [r3]
 80063e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063e8:	edc7 7a01 	vstr	s15, [r7, #4]
 80063ec:	793b      	ldrb	r3, [r7, #4]
 80063ee:	b2d8      	uxtb	r0, r3
 80063f0:	493c      	ldr	r1, [pc, #240]	; (80064e4 <leds_Task+0x1de0>)
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	4613      	mov	r3, r2
 80063f6:	011b      	lsls	r3, r3, #4
 80063f8:	4413      	add	r3, r2
 80063fa:	00db      	lsls	r3, r3, #3
 80063fc:	440b      	add	r3, r1
 80063fe:	334c      	adds	r3, #76	; 0x4c
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	4603      	mov	r3, r0
 8006406:	6393      	str	r3, [r2, #56]	; 0x38
 8006408:	e043      	b.n	8006492 <leds_Task+0x1d8e>
 800640a:	4936      	ldr	r1, [pc, #216]	; (80064e4 <leds_Task+0x1de0>)
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	4613      	mov	r3, r2
 8006410:	011b      	lsls	r3, r3, #4
 8006412:	4413      	add	r3, r2
 8006414:	00db      	lsls	r3, r3, #3
 8006416:	440b      	add	r3, r1
 8006418:	3350      	adds	r3, #80	; 0x50
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2b08      	cmp	r3, #8
 800641e:	d11c      	bne.n	800645a <leds_Task+0x1d56>
 8006420:	4930      	ldr	r1, [pc, #192]	; (80064e4 <leds_Task+0x1de0>)
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	4613      	mov	r3, r2
 8006426:	011b      	lsls	r3, r3, #4
 8006428:	4413      	add	r3, r2
 800642a:	00db      	lsls	r3, r3, #3
 800642c:	440b      	add	r3, r1
 800642e:	3314      	adds	r3, #20
 8006430:	edd3 7a00 	vldr	s15, [r3]
 8006434:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006438:	edc7 7a01 	vstr	s15, [r7, #4]
 800643c:	793b      	ldrb	r3, [r7, #4]
 800643e:	b2d8      	uxtb	r0, r3
 8006440:	4928      	ldr	r1, [pc, #160]	; (80064e4 <leds_Task+0x1de0>)
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	4613      	mov	r3, r2
 8006446:	011b      	lsls	r3, r3, #4
 8006448:	4413      	add	r3, r2
 800644a:	00db      	lsls	r3, r3, #3
 800644c:	440b      	add	r3, r1
 800644e:	334c      	adds	r3, #76	; 0x4c
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	4603      	mov	r3, r0
 8006456:	63d3      	str	r3, [r2, #60]	; 0x3c
 8006458:	e01b      	b.n	8006492 <leds_Task+0x1d8e>
 800645a:	4922      	ldr	r1, [pc, #136]	; (80064e4 <leds_Task+0x1de0>)
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	4613      	mov	r3, r2
 8006460:	011b      	lsls	r3, r3, #4
 8006462:	4413      	add	r3, r2
 8006464:	00db      	lsls	r3, r3, #3
 8006466:	440b      	add	r3, r1
 8006468:	3314      	adds	r3, #20
 800646a:	edd3 7a00 	vldr	s15, [r3]
 800646e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006472:	edc7 7a01 	vstr	s15, [r7, #4]
 8006476:	793b      	ldrb	r3, [r7, #4]
 8006478:	b2d8      	uxtb	r0, r3
 800647a:	491a      	ldr	r1, [pc, #104]	; (80064e4 <leds_Task+0x1de0>)
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	4613      	mov	r3, r2
 8006480:	011b      	lsls	r3, r3, #4
 8006482:	4413      	add	r3, r2
 8006484:	00db      	lsls	r3, r3, #3
 8006486:	440b      	add	r3, r1
 8006488:	334c      	adds	r3, #76	; 0x4c
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	4603      	mov	r3, r0
 8006490:	6413      	str	r3, [r2, #64]	; 0x40
											leds_info.leds[i].pwmch1_timch, (uint8_t)leds_info.leds[i].pwmch1_cur_value);
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch2_tim,
 8006492:	4914      	ldr	r1, [pc, #80]	; (80064e4 <leds_Task+0x1de0>)
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	4613      	mov	r3, r2
 8006498:	011b      	lsls	r3, r3, #4
 800649a:	4413      	add	r3, r2
 800649c:	00db      	lsls	r3, r3, #3
 800649e:	440b      	add	r3, r1
 80064a0:	3358      	adds	r3, #88	; 0x58
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d11f      	bne.n	80064e8 <leds_Task+0x1de4>
 80064a8:	490e      	ldr	r1, [pc, #56]	; (80064e4 <leds_Task+0x1de0>)
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	4613      	mov	r3, r2
 80064ae:	011b      	lsls	r3, r3, #4
 80064b0:	4413      	add	r3, r2
 80064b2:	00db      	lsls	r3, r3, #3
 80064b4:	440b      	add	r3, r1
 80064b6:	3320      	adds	r3, #32
 80064b8:	edd3 7a00 	vldr	s15, [r3]
 80064bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064c0:	edc7 7a01 	vstr	s15, [r7, #4]
 80064c4:	793b      	ldrb	r3, [r7, #4]
 80064c6:	b2d8      	uxtb	r0, r3
 80064c8:	4906      	ldr	r1, [pc, #24]	; (80064e4 <leds_Task+0x1de0>)
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	4613      	mov	r3, r2
 80064ce:	011b      	lsls	r3, r3, #4
 80064d0:	4413      	add	r3, r2
 80064d2:	00db      	lsls	r3, r3, #3
 80064d4:	440b      	add	r3, r1
 80064d6:	3354      	adds	r3, #84	; 0x54
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4602      	mov	r2, r0
 80064de:	635a      	str	r2, [r3, #52]	; 0x34
 80064e0:	f000 beda 	b.w	8007298 <leds_Task+0x2b94>
 80064e4:	20000a44 	.word	0x20000a44
 80064e8:	4937      	ldr	r1, [pc, #220]	; (80065c8 <leds_Task+0x1ec4>)
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	4613      	mov	r3, r2
 80064ee:	011b      	lsls	r3, r3, #4
 80064f0:	4413      	add	r3, r2
 80064f2:	00db      	lsls	r3, r3, #3
 80064f4:	440b      	add	r3, r1
 80064f6:	3358      	adds	r3, #88	; 0x58
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2b04      	cmp	r3, #4
 80064fc:	d11d      	bne.n	800653a <leds_Task+0x1e36>
 80064fe:	4932      	ldr	r1, [pc, #200]	; (80065c8 <leds_Task+0x1ec4>)
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	4613      	mov	r3, r2
 8006504:	011b      	lsls	r3, r3, #4
 8006506:	4413      	add	r3, r2
 8006508:	00db      	lsls	r3, r3, #3
 800650a:	440b      	add	r3, r1
 800650c:	3320      	adds	r3, #32
 800650e:	edd3 7a00 	vldr	s15, [r3]
 8006512:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006516:	edc7 7a01 	vstr	s15, [r7, #4]
 800651a:	793b      	ldrb	r3, [r7, #4]
 800651c:	b2d8      	uxtb	r0, r3
 800651e:	492a      	ldr	r1, [pc, #168]	; (80065c8 <leds_Task+0x1ec4>)
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	4613      	mov	r3, r2
 8006524:	011b      	lsls	r3, r3, #4
 8006526:	4413      	add	r3, r2
 8006528:	00db      	lsls	r3, r3, #3
 800652a:	440b      	add	r3, r1
 800652c:	3354      	adds	r3, #84	; 0x54
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	4603      	mov	r3, r0
 8006534:	6393      	str	r3, [r2, #56]	; 0x38
 8006536:	f000 beaf 	b.w	8007298 <leds_Task+0x2b94>
 800653a:	4923      	ldr	r1, [pc, #140]	; (80065c8 <leds_Task+0x1ec4>)
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	4613      	mov	r3, r2
 8006540:	011b      	lsls	r3, r3, #4
 8006542:	4413      	add	r3, r2
 8006544:	00db      	lsls	r3, r3, #3
 8006546:	440b      	add	r3, r1
 8006548:	3358      	adds	r3, #88	; 0x58
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2b08      	cmp	r3, #8
 800654e:	d11d      	bne.n	800658c <leds_Task+0x1e88>
 8006550:	491d      	ldr	r1, [pc, #116]	; (80065c8 <leds_Task+0x1ec4>)
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	4613      	mov	r3, r2
 8006556:	011b      	lsls	r3, r3, #4
 8006558:	4413      	add	r3, r2
 800655a:	00db      	lsls	r3, r3, #3
 800655c:	440b      	add	r3, r1
 800655e:	3320      	adds	r3, #32
 8006560:	edd3 7a00 	vldr	s15, [r3]
 8006564:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006568:	edc7 7a01 	vstr	s15, [r7, #4]
 800656c:	793b      	ldrb	r3, [r7, #4]
 800656e:	b2d8      	uxtb	r0, r3
 8006570:	4915      	ldr	r1, [pc, #84]	; (80065c8 <leds_Task+0x1ec4>)
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	4613      	mov	r3, r2
 8006576:	011b      	lsls	r3, r3, #4
 8006578:	4413      	add	r3, r2
 800657a:	00db      	lsls	r3, r3, #3
 800657c:	440b      	add	r3, r1
 800657e:	3354      	adds	r3, #84	; 0x54
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	4603      	mov	r3, r0
 8006586:	63d3      	str	r3, [r2, #60]	; 0x3c
 8006588:	f000 be86 	b.w	8007298 <leds_Task+0x2b94>
 800658c:	490e      	ldr	r1, [pc, #56]	; (80065c8 <leds_Task+0x1ec4>)
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	4613      	mov	r3, r2
 8006592:	011b      	lsls	r3, r3, #4
 8006594:	4413      	add	r3, r2
 8006596:	00db      	lsls	r3, r3, #3
 8006598:	440b      	add	r3, r1
 800659a:	3320      	adds	r3, #32
 800659c:	edd3 7a00 	vldr	s15, [r3]
 80065a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065a4:	edc7 7a01 	vstr	s15, [r7, #4]
 80065a8:	793b      	ldrb	r3, [r7, #4]
 80065aa:	b2d8      	uxtb	r0, r3
 80065ac:	4906      	ldr	r1, [pc, #24]	; (80065c8 <leds_Task+0x1ec4>)
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	4613      	mov	r3, r2
 80065b2:	011b      	lsls	r3, r3, #4
 80065b4:	4413      	add	r3, r2
 80065b6:	00db      	lsls	r3, r3, #3
 80065b8:	440b      	add	r3, r1
 80065ba:	3354      	adds	r3, #84	; 0x54
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	4603      	mov	r3, r0
 80065c2:	6413      	str	r3, [r2, #64]	; 0x40
 80065c4:	f000 be68 	b.w	8007298 <leds_Task+0x2b94>
 80065c8:	20000a44 	.word	0x20000a44
											leds_info.leds[i].pwmch2_timch, (uint8_t)leds_info.leds[i].pwmch2_cur_value);
					}
				}
				else if( leds_info.leds[i].state == led_go_to_st0 )
 80065cc:	49ca      	ldr	r1, [pc, #808]	; (80068f8 <leds_Task+0x21f4>)
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	4613      	mov	r3, r2
 80065d2:	011b      	lsls	r3, r3, #4
 80065d4:	4413      	add	r3, r2
 80065d6:	00db      	lsls	r3, r3, #3
 80065d8:	440b      	add	r3, r1
 80065da:	3301      	adds	r3, #1
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	f040 8659 	bne.w	8007298 <leds_Task+0x2b94>
				{
					if( leds_info.leds[i].timer == 0 )
 80065e6:	49c4      	ldr	r1, [pc, #784]	; (80068f8 <leds_Task+0x21f4>)
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	4613      	mov	r3, r2
 80065ec:	011b      	lsls	r3, r3, #4
 80065ee:	4413      	add	r3, r2
 80065f0:	00db      	lsls	r3, r3, #3
 80065f2:	440b      	add	r3, r1
 80065f4:	3304      	adds	r3, #4
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f040 864d 	bne.w	8007298 <leds_Task+0x2b94>
					{
						leds_info.leds[i].timer = LEDS_FADE_STEP_TIME;
 80065fe:	49be      	ldr	r1, [pc, #760]	; (80068f8 <leds_Task+0x21f4>)
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	4613      	mov	r3, r2
 8006604:	011b      	lsls	r3, r3, #4
 8006606:	4413      	add	r3, r2
 8006608:	00db      	lsls	r3, r3, #3
 800660a:	440b      	add	r3, r1
 800660c:	3304      	adds	r3, #4
 800660e:	2214      	movs	r2, #20
 8006610:	601a      	str	r2, [r3, #0]
						leds_info.leds[i].pwmch0_cur_value += leds_info.leds[i].pwmch0_step;
 8006612:	49b9      	ldr	r1, [pc, #740]	; (80068f8 <leds_Task+0x21f4>)
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	4613      	mov	r3, r2
 8006618:	011b      	lsls	r3, r3, #4
 800661a:	4413      	add	r3, r2
 800661c:	00db      	lsls	r3, r3, #3
 800661e:	440b      	add	r3, r1
 8006620:	3310      	adds	r3, #16
 8006622:	ed93 7a00 	vldr	s14, [r3]
 8006626:	49b4      	ldr	r1, [pc, #720]	; (80068f8 <leds_Task+0x21f4>)
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	4613      	mov	r3, r2
 800662c:	011b      	lsls	r3, r3, #4
 800662e:	4413      	add	r3, r2
 8006630:	00db      	lsls	r3, r3, #3
 8006632:	440b      	add	r3, r1
 8006634:	3308      	adds	r3, #8
 8006636:	edd3 7a00 	vldr	s15, [r3]
 800663a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800663e:	49ae      	ldr	r1, [pc, #696]	; (80068f8 <leds_Task+0x21f4>)
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	4613      	mov	r3, r2
 8006644:	011b      	lsls	r3, r3, #4
 8006646:	4413      	add	r3, r2
 8006648:	00db      	lsls	r3, r3, #3
 800664a:	440b      	add	r3, r1
 800664c:	3308      	adds	r3, #8
 800664e:	edc3 7a00 	vstr	s15, [r3]
						leds_info.leds[i].pwmch1_cur_value += leds_info.leds[i].pwmch1_step;
 8006652:	49a9      	ldr	r1, [pc, #676]	; (80068f8 <leds_Task+0x21f4>)
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	4613      	mov	r3, r2
 8006658:	011b      	lsls	r3, r3, #4
 800665a:	4413      	add	r3, r2
 800665c:	00db      	lsls	r3, r3, #3
 800665e:	440b      	add	r3, r1
 8006660:	331c      	adds	r3, #28
 8006662:	ed93 7a00 	vldr	s14, [r3]
 8006666:	49a4      	ldr	r1, [pc, #656]	; (80068f8 <leds_Task+0x21f4>)
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	4613      	mov	r3, r2
 800666c:	011b      	lsls	r3, r3, #4
 800666e:	4413      	add	r3, r2
 8006670:	00db      	lsls	r3, r3, #3
 8006672:	440b      	add	r3, r1
 8006674:	3314      	adds	r3, #20
 8006676:	edd3 7a00 	vldr	s15, [r3]
 800667a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800667e:	499e      	ldr	r1, [pc, #632]	; (80068f8 <leds_Task+0x21f4>)
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	4613      	mov	r3, r2
 8006684:	011b      	lsls	r3, r3, #4
 8006686:	4413      	add	r3, r2
 8006688:	00db      	lsls	r3, r3, #3
 800668a:	440b      	add	r3, r1
 800668c:	3314      	adds	r3, #20
 800668e:	edc3 7a00 	vstr	s15, [r3]
						leds_info.leds[i].pwmch2_cur_value += leds_info.leds[i].pwmch2_step;
 8006692:	4999      	ldr	r1, [pc, #612]	; (80068f8 <leds_Task+0x21f4>)
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	4613      	mov	r3, r2
 8006698:	011b      	lsls	r3, r3, #4
 800669a:	4413      	add	r3, r2
 800669c:	00db      	lsls	r3, r3, #3
 800669e:	440b      	add	r3, r1
 80066a0:	3328      	adds	r3, #40	; 0x28
 80066a2:	ed93 7a00 	vldr	s14, [r3]
 80066a6:	4994      	ldr	r1, [pc, #592]	; (80068f8 <leds_Task+0x21f4>)
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	4613      	mov	r3, r2
 80066ac:	011b      	lsls	r3, r3, #4
 80066ae:	4413      	add	r3, r2
 80066b0:	00db      	lsls	r3, r3, #3
 80066b2:	440b      	add	r3, r1
 80066b4:	3320      	adds	r3, #32
 80066b6:	edd3 7a00 	vldr	s15, [r3]
 80066ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066be:	498e      	ldr	r1, [pc, #568]	; (80068f8 <leds_Task+0x21f4>)
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	4613      	mov	r3, r2
 80066c4:	011b      	lsls	r3, r3, #4
 80066c6:	4413      	add	r3, r2
 80066c8:	00db      	lsls	r3, r3, #3
 80066ca:	440b      	add	r3, r1
 80066cc:	3320      	adds	r3, #32
 80066ce:	edc3 7a00 	vstr	s15, [r3]
						if( leds_info.leds[i].step_cnt-- == 0 )
 80066d2:	4989      	ldr	r1, [pc, #548]	; (80068f8 <leds_Task+0x21f4>)
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	4613      	mov	r3, r2
 80066d8:	011b      	lsls	r3, r3, #4
 80066da:	4413      	add	r3, r2
 80066dc:	00db      	lsls	r3, r3, #3
 80066de:	440b      	add	r3, r1
 80066e0:	3338      	adds	r3, #56	; 0x38
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	1e50      	subs	r0, r2, #1
 80066e6:	4c84      	ldr	r4, [pc, #528]	; (80068f8 <leds_Task+0x21f4>)
 80066e8:	68f9      	ldr	r1, [r7, #12]
 80066ea:	460b      	mov	r3, r1
 80066ec:	011b      	lsls	r3, r3, #4
 80066ee:	440b      	add	r3, r1
 80066f0:	00db      	lsls	r3, r3, #3
 80066f2:	4423      	add	r3, r4
 80066f4:	3338      	adds	r3, #56	; 0x38
 80066f6:	6018      	str	r0, [r3, #0]
 80066f8:	2a00      	cmp	r2, #0
 80066fa:	f040 8163 	bne.w	80069c4 <leds_Task+0x22c0>
						{
							if( (leds_info.leds[i].loop_cnt > 1) || (leds_info.leds[i].loop_cnt == 0) )
 80066fe:	497e      	ldr	r1, [pc, #504]	; (80068f8 <leds_Task+0x21f4>)
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	4613      	mov	r3, r2
 8006704:	011b      	lsls	r3, r3, #4
 8006706:	4413      	add	r3, r2
 8006708:	00db      	lsls	r3, r3, #3
 800670a:	440b      	add	r3, r1
 800670c:	3334      	adds	r3, #52	; 0x34
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2b01      	cmp	r3, #1
 8006712:	d80b      	bhi.n	800672c <leds_Task+0x2028>
 8006714:	4978      	ldr	r1, [pc, #480]	; (80068f8 <leds_Task+0x21f4>)
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	4613      	mov	r3, r2
 800671a:	011b      	lsls	r3, r3, #4
 800671c:	4413      	add	r3, r2
 800671e:	00db      	lsls	r3, r3, #3
 8006720:	440b      	add	r3, r1
 8006722:	3334      	adds	r3, #52	; 0x34
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	f040 8147 	bne.w	80069ba <leds_Task+0x22b6>
							{
								if( leds_info.leds[i].loop_cnt > 1 )
 800672c:	4972      	ldr	r1, [pc, #456]	; (80068f8 <leds_Task+0x21f4>)
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	4613      	mov	r3, r2
 8006732:	011b      	lsls	r3, r3, #4
 8006734:	4413      	add	r3, r2
 8006736:	00db      	lsls	r3, r3, #3
 8006738:	440b      	add	r3, r1
 800673a:	3334      	adds	r3, #52	; 0x34
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d912      	bls.n	8006768 <leds_Task+0x2064>
									leds_info.leds[i].loop_cnt--;
 8006742:	496d      	ldr	r1, [pc, #436]	; (80068f8 <leds_Task+0x21f4>)
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	4613      	mov	r3, r2
 8006748:	011b      	lsls	r3, r3, #4
 800674a:	4413      	add	r3, r2
 800674c:	00db      	lsls	r3, r3, #3
 800674e:	440b      	add	r3, r1
 8006750:	3334      	adds	r3, #52	; 0x34
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	1e59      	subs	r1, r3, #1
 8006756:	4868      	ldr	r0, [pc, #416]	; (80068f8 <leds_Task+0x21f4>)
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	4613      	mov	r3, r2
 800675c:	011b      	lsls	r3, r3, #4
 800675e:	4413      	add	r3, r2
 8006760:	00db      	lsls	r3, r3, #3
 8006762:	4403      	add	r3, r0
 8006764:	3334      	adds	r3, #52	; 0x34
 8006766:	6019      	str	r1, [r3, #0]
								leds_info.leds[i].pwmch0_cur_value = (float)leds_info.leds[i].pwmch0_value0;
 8006768:	4963      	ldr	r1, [pc, #396]	; (80068f8 <leds_Task+0x21f4>)
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	4613      	mov	r3, r2
 800676e:	011b      	lsls	r3, r3, #4
 8006770:	4413      	add	r3, r2
 8006772:	00db      	lsls	r3, r3, #3
 8006774:	440b      	add	r3, r1
 8006776:	330c      	adds	r3, #12
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	b2db      	uxtb	r3, r3
 800677c:	ee07 3a90 	vmov	s15, r3
 8006780:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006784:	495c      	ldr	r1, [pc, #368]	; (80068f8 <leds_Task+0x21f4>)
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	4613      	mov	r3, r2
 800678a:	011b      	lsls	r3, r3, #4
 800678c:	4413      	add	r3, r2
 800678e:	00db      	lsls	r3, r3, #3
 8006790:	440b      	add	r3, r1
 8006792:	3308      	adds	r3, #8
 8006794:	edc3 7a00 	vstr	s15, [r3]
								leds_info.leds[i].pwmch1_cur_value = (float)leds_info.leds[i].pwmch1_value0;
 8006798:	4957      	ldr	r1, [pc, #348]	; (80068f8 <leds_Task+0x21f4>)
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	4613      	mov	r3, r2
 800679e:	011b      	lsls	r3, r3, #4
 80067a0:	4413      	add	r3, r2
 80067a2:	00db      	lsls	r3, r3, #3
 80067a4:	440b      	add	r3, r1
 80067a6:	3318      	adds	r3, #24
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	ee07 3a90 	vmov	s15, r3
 80067b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067b4:	4950      	ldr	r1, [pc, #320]	; (80068f8 <leds_Task+0x21f4>)
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	4613      	mov	r3, r2
 80067ba:	011b      	lsls	r3, r3, #4
 80067bc:	4413      	add	r3, r2
 80067be:	00db      	lsls	r3, r3, #3
 80067c0:	440b      	add	r3, r1
 80067c2:	3314      	adds	r3, #20
 80067c4:	edc3 7a00 	vstr	s15, [r3]
								leds_info.leds[i].pwmch2_cur_value = (float)leds_info.leds[i].pwmch2_value0;
 80067c8:	494b      	ldr	r1, [pc, #300]	; (80068f8 <leds_Task+0x21f4>)
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	4613      	mov	r3, r2
 80067ce:	011b      	lsls	r3, r3, #4
 80067d0:	4413      	add	r3, r2
 80067d2:	00db      	lsls	r3, r3, #3
 80067d4:	440b      	add	r3, r1
 80067d6:	3324      	adds	r3, #36	; 0x24
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	ee07 3a90 	vmov	s15, r3
 80067e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067e4:	4944      	ldr	r1, [pc, #272]	; (80068f8 <leds_Task+0x21f4>)
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	4613      	mov	r3, r2
 80067ea:	011b      	lsls	r3, r3, #4
 80067ec:	4413      	add	r3, r2
 80067ee:	00db      	lsls	r3, r3, #3
 80067f0:	440b      	add	r3, r1
 80067f2:	3320      	adds	r3, #32
 80067f4:	edc3 7a00 	vstr	s15, [r3]
								leds_info.leds[i].state = led_go_to_st1;
 80067f8:	493f      	ldr	r1, [pc, #252]	; (80068f8 <leds_Task+0x21f4>)
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	4613      	mov	r3, r2
 80067fe:	011b      	lsls	r3, r3, #4
 8006800:	4413      	add	r3, r2
 8006802:	00db      	lsls	r3, r3, #3
 8006804:	440b      	add	r3, r1
 8006806:	3301      	adds	r3, #1
 8006808:	2203      	movs	r2, #3
 800680a:	701a      	strb	r2, [r3, #0]
								leds_info.leds[i].step_cnt = leds_info.leds[i].anim_time_st0 / LEDS_FADE_STEP_TIME;
 800680c:	493a      	ldr	r1, [pc, #232]	; (80068f8 <leds_Task+0x21f4>)
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	4613      	mov	r3, r2
 8006812:	011b      	lsls	r3, r3, #4
 8006814:	4413      	add	r3, r2
 8006816:	00db      	lsls	r3, r3, #3
 8006818:	440b      	add	r3, r1
 800681a:	332c      	adds	r3, #44	; 0x2c
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a37      	ldr	r2, [pc, #220]	; (80068fc <leds_Task+0x21f8>)
 8006820:	fba2 2303 	umull	r2, r3, r2, r3
 8006824:	0919      	lsrs	r1, r3, #4
 8006826:	4834      	ldr	r0, [pc, #208]	; (80068f8 <leds_Task+0x21f4>)
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	4613      	mov	r3, r2
 800682c:	011b      	lsls	r3, r3, #4
 800682e:	4413      	add	r3, r2
 8006830:	00db      	lsls	r3, r3, #3
 8006832:	4403      	add	r3, r0
 8006834:	3338      	adds	r3, #56	; 0x38
 8006836:	6019      	str	r1, [r3, #0]
								if( leds_info.leds[i].step_cnt == 0 )
 8006838:	492f      	ldr	r1, [pc, #188]	; (80068f8 <leds_Task+0x21f4>)
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	4613      	mov	r3, r2
 800683e:	011b      	lsls	r3, r3, #4
 8006840:	4413      	add	r3, r2
 8006842:	00db      	lsls	r3, r3, #3
 8006844:	440b      	add	r3, r1
 8006846:	3338      	adds	r3, #56	; 0x38
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d109      	bne.n	8006862 <leds_Task+0x215e>
									leds_info.leds[i].step_cnt = 1;
 800684e:	492a      	ldr	r1, [pc, #168]	; (80068f8 <leds_Task+0x21f4>)
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	4613      	mov	r3, r2
 8006854:	011b      	lsls	r3, r3, #4
 8006856:	4413      	add	r3, r2
 8006858:	00db      	lsls	r3, r3, #3
 800685a:	440b      	add	r3, r1
 800685c:	3338      	adds	r3, #56	; 0x38
 800685e:	2201      	movs	r2, #1
 8006860:	601a      	str	r2, [r3, #0]
								leds_info.leds[i].pwmch0_step = ((float)leds_info.leds[i].pwmch0_value1 - (float)leds_info.leds[i].pwmch0_value0) / (float)leds_info.leds[i].step_cnt;
 8006862:	4925      	ldr	r1, [pc, #148]	; (80068f8 <leds_Task+0x21f4>)
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	4613      	mov	r3, r2
 8006868:	011b      	lsls	r3, r3, #4
 800686a:	4413      	add	r3, r2
 800686c:	00db      	lsls	r3, r3, #3
 800686e:	440b      	add	r3, r1
 8006870:	330d      	adds	r3, #13
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	b2db      	uxtb	r3, r3
 8006876:	ee07 3a90 	vmov	s15, r3
 800687a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800687e:	491e      	ldr	r1, [pc, #120]	; (80068f8 <leds_Task+0x21f4>)
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	4613      	mov	r3, r2
 8006884:	011b      	lsls	r3, r3, #4
 8006886:	4413      	add	r3, r2
 8006888:	00db      	lsls	r3, r3, #3
 800688a:	440b      	add	r3, r1
 800688c:	330c      	adds	r3, #12
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	b2db      	uxtb	r3, r3
 8006892:	ee07 3a90 	vmov	s15, r3
 8006896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800689a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800689e:	4916      	ldr	r1, [pc, #88]	; (80068f8 <leds_Task+0x21f4>)
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	4613      	mov	r3, r2
 80068a4:	011b      	lsls	r3, r3, #4
 80068a6:	4413      	add	r3, r2
 80068a8:	00db      	lsls	r3, r3, #3
 80068aa:	440b      	add	r3, r1
 80068ac:	3338      	adds	r3, #56	; 0x38
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	ee07 3a90 	vmov	s15, r3
 80068b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80068b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068bc:	490e      	ldr	r1, [pc, #56]	; (80068f8 <leds_Task+0x21f4>)
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	4613      	mov	r3, r2
 80068c2:	011b      	lsls	r3, r3, #4
 80068c4:	4413      	add	r3, r2
 80068c6:	00db      	lsls	r3, r3, #3
 80068c8:	440b      	add	r3, r1
 80068ca:	3310      	adds	r3, #16
 80068cc:	edc3 7a00 	vstr	s15, [r3]
								leds_info.leds[i].pwmch1_step = ((float)leds_info.leds[i].pwmch1_value1 - (float)leds_info.leds[i].pwmch1_value0) / (float)leds_info.leds[i].step_cnt;
 80068d0:	4909      	ldr	r1, [pc, #36]	; (80068f8 <leds_Task+0x21f4>)
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	4613      	mov	r3, r2
 80068d6:	011b      	lsls	r3, r3, #4
 80068d8:	4413      	add	r3, r2
 80068da:	00db      	lsls	r3, r3, #3
 80068dc:	440b      	add	r3, r1
 80068de:	3319      	adds	r3, #25
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	ee07 3a90 	vmov	s15, r3
 80068e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80068ec:	4902      	ldr	r1, [pc, #8]	; (80068f8 <leds_Task+0x21f4>)
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	4613      	mov	r3, r2
 80068f2:	011b      	lsls	r3, r3, #4
 80068f4:	e004      	b.n	8006900 <leds_Task+0x21fc>
 80068f6:	bf00      	nop
 80068f8:	20000a44 	.word	0x20000a44
 80068fc:	cccccccd 	.word	0xcccccccd
 8006900:	4413      	add	r3, r2
 8006902:	00db      	lsls	r3, r3, #3
 8006904:	440b      	add	r3, r1
 8006906:	3318      	adds	r3, #24
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	b2db      	uxtb	r3, r3
 800690c:	ee07 3a90 	vmov	s15, r3
 8006910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006914:	ee77 6a67 	vsub.f32	s13, s14, s15
 8006918:	49b0      	ldr	r1, [pc, #704]	; (8006bdc <leds_Task+0x24d8>)
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	4613      	mov	r3, r2
 800691e:	011b      	lsls	r3, r3, #4
 8006920:	4413      	add	r3, r2
 8006922:	00db      	lsls	r3, r3, #3
 8006924:	440b      	add	r3, r1
 8006926:	3338      	adds	r3, #56	; 0x38
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	ee07 3a90 	vmov	s15, r3
 800692e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006932:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006936:	49a9      	ldr	r1, [pc, #676]	; (8006bdc <leds_Task+0x24d8>)
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	4613      	mov	r3, r2
 800693c:	011b      	lsls	r3, r3, #4
 800693e:	4413      	add	r3, r2
 8006940:	00db      	lsls	r3, r3, #3
 8006942:	440b      	add	r3, r1
 8006944:	331c      	adds	r3, #28
 8006946:	edc3 7a00 	vstr	s15, [r3]
								leds_info.leds[i].pwmch2_step = ((float)leds_info.leds[i].pwmch2_value1 - (float)leds_info.leds[i].pwmch2_value0) / (float)leds_info.leds[i].step_cnt;
 800694a:	49a4      	ldr	r1, [pc, #656]	; (8006bdc <leds_Task+0x24d8>)
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	4613      	mov	r3, r2
 8006950:	011b      	lsls	r3, r3, #4
 8006952:	4413      	add	r3, r2
 8006954:	00db      	lsls	r3, r3, #3
 8006956:	440b      	add	r3, r1
 8006958:	3325      	adds	r3, #37	; 0x25
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	b2db      	uxtb	r3, r3
 800695e:	ee07 3a90 	vmov	s15, r3
 8006962:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006966:	499d      	ldr	r1, [pc, #628]	; (8006bdc <leds_Task+0x24d8>)
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	4613      	mov	r3, r2
 800696c:	011b      	lsls	r3, r3, #4
 800696e:	4413      	add	r3, r2
 8006970:	00db      	lsls	r3, r3, #3
 8006972:	440b      	add	r3, r1
 8006974:	3324      	adds	r3, #36	; 0x24
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	b2db      	uxtb	r3, r3
 800697a:	ee07 3a90 	vmov	s15, r3
 800697e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006982:	ee77 6a67 	vsub.f32	s13, s14, s15
 8006986:	4995      	ldr	r1, [pc, #596]	; (8006bdc <leds_Task+0x24d8>)
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	4613      	mov	r3, r2
 800698c:	011b      	lsls	r3, r3, #4
 800698e:	4413      	add	r3, r2
 8006990:	00db      	lsls	r3, r3, #3
 8006992:	440b      	add	r3, r1
 8006994:	3338      	adds	r3, #56	; 0x38
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	ee07 3a90 	vmov	s15, r3
 800699c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80069a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069a4:	498d      	ldr	r1, [pc, #564]	; (8006bdc <leds_Task+0x24d8>)
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	4613      	mov	r3, r2
 80069aa:	011b      	lsls	r3, r3, #4
 80069ac:	4413      	add	r3, r2
 80069ae:	00db      	lsls	r3, r3, #3
 80069b0:	440b      	add	r3, r1
 80069b2:	3328      	adds	r3, #40	; 0x28
 80069b4:	edc3 7a00 	vstr	s15, [r3]
 80069b8:	e004      	b.n	80069c4 <leds_Task+0x22c0>
							}
							else
								//leds_info.leds[i].mode = led_toggle;
								leds_setFade(i, 200, LEDS_MIN_PWM_VALUE);
 80069ba:	2200      	movs	r2, #0
 80069bc:	21c8      	movs	r1, #200	; 0xc8
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f001 f858 	bl	8007a74 <leds_setFade>
						}
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch0_tim,
 80069c4:	4985      	ldr	r1, [pc, #532]	; (8006bdc <leds_Task+0x24d8>)
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	4613      	mov	r3, r2
 80069ca:	011b      	lsls	r3, r3, #4
 80069cc:	4413      	add	r3, r2
 80069ce:	00db      	lsls	r3, r3, #3
 80069d0:	440b      	add	r3, r1
 80069d2:	3348      	adds	r3, #72	; 0x48
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d11c      	bne.n	8006a14 <leds_Task+0x2310>
 80069da:	4980      	ldr	r1, [pc, #512]	; (8006bdc <leds_Task+0x24d8>)
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	4613      	mov	r3, r2
 80069e0:	011b      	lsls	r3, r3, #4
 80069e2:	4413      	add	r3, r2
 80069e4:	00db      	lsls	r3, r3, #3
 80069e6:	440b      	add	r3, r1
 80069e8:	3308      	adds	r3, #8
 80069ea:	edd3 7a00 	vldr	s15, [r3]
 80069ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069f2:	edc7 7a01 	vstr	s15, [r7, #4]
 80069f6:	793b      	ldrb	r3, [r7, #4]
 80069f8:	b2d8      	uxtb	r0, r3
 80069fa:	4978      	ldr	r1, [pc, #480]	; (8006bdc <leds_Task+0x24d8>)
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	4613      	mov	r3, r2
 8006a00:	011b      	lsls	r3, r3, #4
 8006a02:	4413      	add	r3, r2
 8006a04:	00db      	lsls	r3, r3, #3
 8006a06:	440b      	add	r3, r1
 8006a08:	3344      	adds	r3, #68	; 0x44
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4602      	mov	r2, r0
 8006a10:	635a      	str	r2, [r3, #52]	; 0x34
 8006a12:	e06b      	b.n	8006aec <leds_Task+0x23e8>
 8006a14:	4971      	ldr	r1, [pc, #452]	; (8006bdc <leds_Task+0x24d8>)
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	4613      	mov	r3, r2
 8006a1a:	011b      	lsls	r3, r3, #4
 8006a1c:	4413      	add	r3, r2
 8006a1e:	00db      	lsls	r3, r3, #3
 8006a20:	440b      	add	r3, r1
 8006a22:	3348      	adds	r3, #72	; 0x48
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2b04      	cmp	r3, #4
 8006a28:	d11c      	bne.n	8006a64 <leds_Task+0x2360>
 8006a2a:	496c      	ldr	r1, [pc, #432]	; (8006bdc <leds_Task+0x24d8>)
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	4613      	mov	r3, r2
 8006a30:	011b      	lsls	r3, r3, #4
 8006a32:	4413      	add	r3, r2
 8006a34:	00db      	lsls	r3, r3, #3
 8006a36:	440b      	add	r3, r1
 8006a38:	3308      	adds	r3, #8
 8006a3a:	edd3 7a00 	vldr	s15, [r3]
 8006a3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a42:	edc7 7a01 	vstr	s15, [r7, #4]
 8006a46:	793b      	ldrb	r3, [r7, #4]
 8006a48:	b2d8      	uxtb	r0, r3
 8006a4a:	4964      	ldr	r1, [pc, #400]	; (8006bdc <leds_Task+0x24d8>)
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	4613      	mov	r3, r2
 8006a50:	011b      	lsls	r3, r3, #4
 8006a52:	4413      	add	r3, r2
 8006a54:	00db      	lsls	r3, r3, #3
 8006a56:	440b      	add	r3, r1
 8006a58:	3344      	adds	r3, #68	; 0x44
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	4603      	mov	r3, r0
 8006a60:	6393      	str	r3, [r2, #56]	; 0x38
 8006a62:	e043      	b.n	8006aec <leds_Task+0x23e8>
 8006a64:	495d      	ldr	r1, [pc, #372]	; (8006bdc <leds_Task+0x24d8>)
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	4613      	mov	r3, r2
 8006a6a:	011b      	lsls	r3, r3, #4
 8006a6c:	4413      	add	r3, r2
 8006a6e:	00db      	lsls	r3, r3, #3
 8006a70:	440b      	add	r3, r1
 8006a72:	3348      	adds	r3, #72	; 0x48
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2b08      	cmp	r3, #8
 8006a78:	d11c      	bne.n	8006ab4 <leds_Task+0x23b0>
 8006a7a:	4958      	ldr	r1, [pc, #352]	; (8006bdc <leds_Task+0x24d8>)
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	4613      	mov	r3, r2
 8006a80:	011b      	lsls	r3, r3, #4
 8006a82:	4413      	add	r3, r2
 8006a84:	00db      	lsls	r3, r3, #3
 8006a86:	440b      	add	r3, r1
 8006a88:	3308      	adds	r3, #8
 8006a8a:	edd3 7a00 	vldr	s15, [r3]
 8006a8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a92:	edc7 7a01 	vstr	s15, [r7, #4]
 8006a96:	793b      	ldrb	r3, [r7, #4]
 8006a98:	b2d8      	uxtb	r0, r3
 8006a9a:	4950      	ldr	r1, [pc, #320]	; (8006bdc <leds_Task+0x24d8>)
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	011b      	lsls	r3, r3, #4
 8006aa2:	4413      	add	r3, r2
 8006aa4:	00db      	lsls	r3, r3, #3
 8006aa6:	440b      	add	r3, r1
 8006aa8:	3344      	adds	r3, #68	; 0x44
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	4603      	mov	r3, r0
 8006ab0:	63d3      	str	r3, [r2, #60]	; 0x3c
 8006ab2:	e01b      	b.n	8006aec <leds_Task+0x23e8>
 8006ab4:	4949      	ldr	r1, [pc, #292]	; (8006bdc <leds_Task+0x24d8>)
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	4613      	mov	r3, r2
 8006aba:	011b      	lsls	r3, r3, #4
 8006abc:	4413      	add	r3, r2
 8006abe:	00db      	lsls	r3, r3, #3
 8006ac0:	440b      	add	r3, r1
 8006ac2:	3308      	adds	r3, #8
 8006ac4:	edd3 7a00 	vldr	s15, [r3]
 8006ac8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006acc:	edc7 7a01 	vstr	s15, [r7, #4]
 8006ad0:	793b      	ldrb	r3, [r7, #4]
 8006ad2:	b2d8      	uxtb	r0, r3
 8006ad4:	4941      	ldr	r1, [pc, #260]	; (8006bdc <leds_Task+0x24d8>)
 8006ad6:	68fa      	ldr	r2, [r7, #12]
 8006ad8:	4613      	mov	r3, r2
 8006ada:	011b      	lsls	r3, r3, #4
 8006adc:	4413      	add	r3, r2
 8006ade:	00db      	lsls	r3, r3, #3
 8006ae0:	440b      	add	r3, r1
 8006ae2:	3344      	adds	r3, #68	; 0x44
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	4603      	mov	r3, r0
 8006aea:	6413      	str	r3, [r2, #64]	; 0x40
											leds_info.leds[i].pwmch0_timch, (uint8_t)leds_info.leds[i].pwmch0_cur_value);
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch1_tim,
 8006aec:	493b      	ldr	r1, [pc, #236]	; (8006bdc <leds_Task+0x24d8>)
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	4613      	mov	r3, r2
 8006af2:	011b      	lsls	r3, r3, #4
 8006af4:	4413      	add	r3, r2
 8006af6:	00db      	lsls	r3, r3, #3
 8006af8:	440b      	add	r3, r1
 8006afa:	3350      	adds	r3, #80	; 0x50
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d11c      	bne.n	8006b3c <leds_Task+0x2438>
 8006b02:	4936      	ldr	r1, [pc, #216]	; (8006bdc <leds_Task+0x24d8>)
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	4613      	mov	r3, r2
 8006b08:	011b      	lsls	r3, r3, #4
 8006b0a:	4413      	add	r3, r2
 8006b0c:	00db      	lsls	r3, r3, #3
 8006b0e:	440b      	add	r3, r1
 8006b10:	3314      	adds	r3, #20
 8006b12:	edd3 7a00 	vldr	s15, [r3]
 8006b16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b1a:	edc7 7a01 	vstr	s15, [r7, #4]
 8006b1e:	793b      	ldrb	r3, [r7, #4]
 8006b20:	b2d8      	uxtb	r0, r3
 8006b22:	492e      	ldr	r1, [pc, #184]	; (8006bdc <leds_Task+0x24d8>)
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	4613      	mov	r3, r2
 8006b28:	011b      	lsls	r3, r3, #4
 8006b2a:	4413      	add	r3, r2
 8006b2c:	00db      	lsls	r3, r3, #3
 8006b2e:	440b      	add	r3, r1
 8006b30:	334c      	adds	r3, #76	; 0x4c
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4602      	mov	r2, r0
 8006b38:	635a      	str	r2, [r3, #52]	; 0x34
 8006b3a:	e06d      	b.n	8006c18 <leds_Task+0x2514>
 8006b3c:	4927      	ldr	r1, [pc, #156]	; (8006bdc <leds_Task+0x24d8>)
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	4613      	mov	r3, r2
 8006b42:	011b      	lsls	r3, r3, #4
 8006b44:	4413      	add	r3, r2
 8006b46:	00db      	lsls	r3, r3, #3
 8006b48:	440b      	add	r3, r1
 8006b4a:	3350      	adds	r3, #80	; 0x50
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2b04      	cmp	r3, #4
 8006b50:	d11c      	bne.n	8006b8c <leds_Task+0x2488>
 8006b52:	4922      	ldr	r1, [pc, #136]	; (8006bdc <leds_Task+0x24d8>)
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	4613      	mov	r3, r2
 8006b58:	011b      	lsls	r3, r3, #4
 8006b5a:	4413      	add	r3, r2
 8006b5c:	00db      	lsls	r3, r3, #3
 8006b5e:	440b      	add	r3, r1
 8006b60:	3314      	adds	r3, #20
 8006b62:	edd3 7a00 	vldr	s15, [r3]
 8006b66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b6a:	edc7 7a01 	vstr	s15, [r7, #4]
 8006b6e:	793b      	ldrb	r3, [r7, #4]
 8006b70:	b2d8      	uxtb	r0, r3
 8006b72:	491a      	ldr	r1, [pc, #104]	; (8006bdc <leds_Task+0x24d8>)
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	4613      	mov	r3, r2
 8006b78:	011b      	lsls	r3, r3, #4
 8006b7a:	4413      	add	r3, r2
 8006b7c:	00db      	lsls	r3, r3, #3
 8006b7e:	440b      	add	r3, r1
 8006b80:	334c      	adds	r3, #76	; 0x4c
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	4603      	mov	r3, r0
 8006b88:	6393      	str	r3, [r2, #56]	; 0x38
 8006b8a:	e045      	b.n	8006c18 <leds_Task+0x2514>
 8006b8c:	4913      	ldr	r1, [pc, #76]	; (8006bdc <leds_Task+0x24d8>)
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	4613      	mov	r3, r2
 8006b92:	011b      	lsls	r3, r3, #4
 8006b94:	4413      	add	r3, r2
 8006b96:	00db      	lsls	r3, r3, #3
 8006b98:	440b      	add	r3, r1
 8006b9a:	3350      	adds	r3, #80	; 0x50
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2b08      	cmp	r3, #8
 8006ba0:	d11e      	bne.n	8006be0 <leds_Task+0x24dc>
 8006ba2:	490e      	ldr	r1, [pc, #56]	; (8006bdc <leds_Task+0x24d8>)
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	011b      	lsls	r3, r3, #4
 8006baa:	4413      	add	r3, r2
 8006bac:	00db      	lsls	r3, r3, #3
 8006bae:	440b      	add	r3, r1
 8006bb0:	3314      	adds	r3, #20
 8006bb2:	edd3 7a00 	vldr	s15, [r3]
 8006bb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bba:	edc7 7a01 	vstr	s15, [r7, #4]
 8006bbe:	793b      	ldrb	r3, [r7, #4]
 8006bc0:	b2d8      	uxtb	r0, r3
 8006bc2:	4906      	ldr	r1, [pc, #24]	; (8006bdc <leds_Task+0x24d8>)
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	4613      	mov	r3, r2
 8006bc8:	011b      	lsls	r3, r3, #4
 8006bca:	4413      	add	r3, r2
 8006bcc:	00db      	lsls	r3, r3, #3
 8006bce:	440b      	add	r3, r1
 8006bd0:	334c      	adds	r3, #76	; 0x4c
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	63d3      	str	r3, [r2, #60]	; 0x3c
 8006bda:	e01d      	b.n	8006c18 <leds_Task+0x2514>
 8006bdc:	20000a44 	.word	0x20000a44
 8006be0:	4958      	ldr	r1, [pc, #352]	; (8006d44 <leds_Task+0x2640>)
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	4613      	mov	r3, r2
 8006be6:	011b      	lsls	r3, r3, #4
 8006be8:	4413      	add	r3, r2
 8006bea:	00db      	lsls	r3, r3, #3
 8006bec:	440b      	add	r3, r1
 8006bee:	3314      	adds	r3, #20
 8006bf0:	edd3 7a00 	vldr	s15, [r3]
 8006bf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bf8:	edc7 7a01 	vstr	s15, [r7, #4]
 8006bfc:	793b      	ldrb	r3, [r7, #4]
 8006bfe:	b2d8      	uxtb	r0, r3
 8006c00:	4950      	ldr	r1, [pc, #320]	; (8006d44 <leds_Task+0x2640>)
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	4613      	mov	r3, r2
 8006c06:	011b      	lsls	r3, r3, #4
 8006c08:	4413      	add	r3, r2
 8006c0a:	00db      	lsls	r3, r3, #3
 8006c0c:	440b      	add	r3, r1
 8006c0e:	334c      	adds	r3, #76	; 0x4c
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	4603      	mov	r3, r0
 8006c16:	6413      	str	r3, [r2, #64]	; 0x40
											leds_info.leds[i].pwmch1_timch, (uint8_t)leds_info.leds[i].pwmch1_cur_value);
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch2_tim,
 8006c18:	494a      	ldr	r1, [pc, #296]	; (8006d44 <leds_Task+0x2640>)
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	011b      	lsls	r3, r3, #4
 8006c20:	4413      	add	r3, r2
 8006c22:	00db      	lsls	r3, r3, #3
 8006c24:	440b      	add	r3, r1
 8006c26:	3358      	adds	r3, #88	; 0x58
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d11c      	bne.n	8006c68 <leds_Task+0x2564>
 8006c2e:	4945      	ldr	r1, [pc, #276]	; (8006d44 <leds_Task+0x2640>)
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	4613      	mov	r3, r2
 8006c34:	011b      	lsls	r3, r3, #4
 8006c36:	4413      	add	r3, r2
 8006c38:	00db      	lsls	r3, r3, #3
 8006c3a:	440b      	add	r3, r1
 8006c3c:	3320      	adds	r3, #32
 8006c3e:	edd3 7a00 	vldr	s15, [r3]
 8006c42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c46:	edc7 7a01 	vstr	s15, [r7, #4]
 8006c4a:	793b      	ldrb	r3, [r7, #4]
 8006c4c:	b2d8      	uxtb	r0, r3
 8006c4e:	493d      	ldr	r1, [pc, #244]	; (8006d44 <leds_Task+0x2640>)
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	4613      	mov	r3, r2
 8006c54:	011b      	lsls	r3, r3, #4
 8006c56:	4413      	add	r3, r2
 8006c58:	00db      	lsls	r3, r3, #3
 8006c5a:	440b      	add	r3, r1
 8006c5c:	3354      	adds	r3, #84	; 0x54
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4602      	mov	r2, r0
 8006c64:	635a      	str	r2, [r3, #52]	; 0x34
 8006c66:	e317      	b.n	8007298 <leds_Task+0x2b94>
 8006c68:	4936      	ldr	r1, [pc, #216]	; (8006d44 <leds_Task+0x2640>)
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	011b      	lsls	r3, r3, #4
 8006c70:	4413      	add	r3, r2
 8006c72:	00db      	lsls	r3, r3, #3
 8006c74:	440b      	add	r3, r1
 8006c76:	3358      	adds	r3, #88	; 0x58
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2b04      	cmp	r3, #4
 8006c7c:	d11c      	bne.n	8006cb8 <leds_Task+0x25b4>
 8006c7e:	4931      	ldr	r1, [pc, #196]	; (8006d44 <leds_Task+0x2640>)
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	4613      	mov	r3, r2
 8006c84:	011b      	lsls	r3, r3, #4
 8006c86:	4413      	add	r3, r2
 8006c88:	00db      	lsls	r3, r3, #3
 8006c8a:	440b      	add	r3, r1
 8006c8c:	3320      	adds	r3, #32
 8006c8e:	edd3 7a00 	vldr	s15, [r3]
 8006c92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c96:	edc7 7a01 	vstr	s15, [r7, #4]
 8006c9a:	793b      	ldrb	r3, [r7, #4]
 8006c9c:	b2d8      	uxtb	r0, r3
 8006c9e:	4929      	ldr	r1, [pc, #164]	; (8006d44 <leds_Task+0x2640>)
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	011b      	lsls	r3, r3, #4
 8006ca6:	4413      	add	r3, r2
 8006ca8:	00db      	lsls	r3, r3, #3
 8006caa:	440b      	add	r3, r1
 8006cac:	3354      	adds	r3, #84	; 0x54
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	6393      	str	r3, [r2, #56]	; 0x38
 8006cb6:	e2ef      	b.n	8007298 <leds_Task+0x2b94>
 8006cb8:	4922      	ldr	r1, [pc, #136]	; (8006d44 <leds_Task+0x2640>)
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	4613      	mov	r3, r2
 8006cbe:	011b      	lsls	r3, r3, #4
 8006cc0:	4413      	add	r3, r2
 8006cc2:	00db      	lsls	r3, r3, #3
 8006cc4:	440b      	add	r3, r1
 8006cc6:	3358      	adds	r3, #88	; 0x58
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2b08      	cmp	r3, #8
 8006ccc:	d11c      	bne.n	8006d08 <leds_Task+0x2604>
 8006cce:	491d      	ldr	r1, [pc, #116]	; (8006d44 <leds_Task+0x2640>)
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	011b      	lsls	r3, r3, #4
 8006cd6:	4413      	add	r3, r2
 8006cd8:	00db      	lsls	r3, r3, #3
 8006cda:	440b      	add	r3, r1
 8006cdc:	3320      	adds	r3, #32
 8006cde:	edd3 7a00 	vldr	s15, [r3]
 8006ce2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ce6:	edc7 7a01 	vstr	s15, [r7, #4]
 8006cea:	793b      	ldrb	r3, [r7, #4]
 8006cec:	b2d8      	uxtb	r0, r3
 8006cee:	4915      	ldr	r1, [pc, #84]	; (8006d44 <leds_Task+0x2640>)
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	011b      	lsls	r3, r3, #4
 8006cf6:	4413      	add	r3, r2
 8006cf8:	00db      	lsls	r3, r3, #3
 8006cfa:	440b      	add	r3, r1
 8006cfc:	3354      	adds	r3, #84	; 0x54
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	4603      	mov	r3, r0
 8006d04:	63d3      	str	r3, [r2, #60]	; 0x3c
 8006d06:	e2c7      	b.n	8007298 <leds_Task+0x2b94>
 8006d08:	490e      	ldr	r1, [pc, #56]	; (8006d44 <leds_Task+0x2640>)
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	011b      	lsls	r3, r3, #4
 8006d10:	4413      	add	r3, r2
 8006d12:	00db      	lsls	r3, r3, #3
 8006d14:	440b      	add	r3, r1
 8006d16:	3320      	adds	r3, #32
 8006d18:	edd3 7a00 	vldr	s15, [r3]
 8006d1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d20:	edc7 7a01 	vstr	s15, [r7, #4]
 8006d24:	793b      	ldrb	r3, [r7, #4]
 8006d26:	b2d8      	uxtb	r0, r3
 8006d28:	4906      	ldr	r1, [pc, #24]	; (8006d44 <leds_Task+0x2640>)
 8006d2a:	68fa      	ldr	r2, [r7, #12]
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	011b      	lsls	r3, r3, #4
 8006d30:	4413      	add	r3, r2
 8006d32:	00db      	lsls	r3, r3, #3
 8006d34:	440b      	add	r3, r1
 8006d36:	3354      	adds	r3, #84	; 0x54
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	6413      	str	r3, [r2, #64]	; 0x40
 8006d40:	e2aa      	b.n	8007298 <leds_Task+0x2b94>
 8006d42:	bf00      	nop
 8006d44:	20000a44 	.word	0x20000a44
					}
				}
			}
			//Fade mode
			//----------------------------------------------------------------------------------------------------------------
			else if( leds_info.leds[i].mode == led_fade )
 8006d48:	49b0      	ldr	r1, [pc, #704]	; (800700c <leds_Task+0x2908>)
 8006d4a:	68fa      	ldr	r2, [r7, #12]
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	011b      	lsls	r3, r3, #4
 8006d50:	4413      	add	r3, r2
 8006d52:	00db      	lsls	r3, r3, #3
 8006d54:	440b      	add	r3, r1
 8006d56:	3302      	adds	r3, #2
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	2b03      	cmp	r3, #3
 8006d5e:	f040 829b 	bne.w	8007298 <leds_Task+0x2b94>
			{
				if( leds_info.leds[i].timer == 0 )
 8006d62:	49aa      	ldr	r1, [pc, #680]	; (800700c <leds_Task+0x2908>)
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	4613      	mov	r3, r2
 8006d68:	011b      	lsls	r3, r3, #4
 8006d6a:	4413      	add	r3, r2
 8006d6c:	00db      	lsls	r3, r3, #3
 8006d6e:	440b      	add	r3, r1
 8006d70:	3304      	adds	r3, #4
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f040 828f 	bne.w	8007298 <leds_Task+0x2b94>
				{
					leds_info.leds[i].timer = LEDS_FADE_STEP_TIME;
 8006d7a:	49a4      	ldr	r1, [pc, #656]	; (800700c <leds_Task+0x2908>)
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	4613      	mov	r3, r2
 8006d80:	011b      	lsls	r3, r3, #4
 8006d82:	4413      	add	r3, r2
 8006d84:	00db      	lsls	r3, r3, #3
 8006d86:	440b      	add	r3, r1
 8006d88:	3304      	adds	r3, #4
 8006d8a:	2214      	movs	r2, #20
 8006d8c:	601a      	str	r2, [r3, #0]
					leds_info.leds[i].pwmch0_cur_value += leds_info.leds[i].pwmch0_step;
 8006d8e:	499f      	ldr	r1, [pc, #636]	; (800700c <leds_Task+0x2908>)
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	4613      	mov	r3, r2
 8006d94:	011b      	lsls	r3, r3, #4
 8006d96:	4413      	add	r3, r2
 8006d98:	00db      	lsls	r3, r3, #3
 8006d9a:	440b      	add	r3, r1
 8006d9c:	3310      	adds	r3, #16
 8006d9e:	ed93 7a00 	vldr	s14, [r3]
 8006da2:	499a      	ldr	r1, [pc, #616]	; (800700c <leds_Task+0x2908>)
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	4613      	mov	r3, r2
 8006da8:	011b      	lsls	r3, r3, #4
 8006daa:	4413      	add	r3, r2
 8006dac:	00db      	lsls	r3, r3, #3
 8006dae:	440b      	add	r3, r1
 8006db0:	3308      	adds	r3, #8
 8006db2:	edd3 7a00 	vldr	s15, [r3]
 8006db6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006dba:	4994      	ldr	r1, [pc, #592]	; (800700c <leds_Task+0x2908>)
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	011b      	lsls	r3, r3, #4
 8006dc2:	4413      	add	r3, r2
 8006dc4:	00db      	lsls	r3, r3, #3
 8006dc6:	440b      	add	r3, r1
 8006dc8:	3308      	adds	r3, #8
 8006dca:	edc3 7a00 	vstr	s15, [r3]
					leds_info.leds[i].pwmch1_cur_value += leds_info.leds[i].pwmch1_step;
 8006dce:	498f      	ldr	r1, [pc, #572]	; (800700c <leds_Task+0x2908>)
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	011b      	lsls	r3, r3, #4
 8006dd6:	4413      	add	r3, r2
 8006dd8:	00db      	lsls	r3, r3, #3
 8006dda:	440b      	add	r3, r1
 8006ddc:	331c      	adds	r3, #28
 8006dde:	ed93 7a00 	vldr	s14, [r3]
 8006de2:	498a      	ldr	r1, [pc, #552]	; (800700c <leds_Task+0x2908>)
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	4613      	mov	r3, r2
 8006de8:	011b      	lsls	r3, r3, #4
 8006dea:	4413      	add	r3, r2
 8006dec:	00db      	lsls	r3, r3, #3
 8006dee:	440b      	add	r3, r1
 8006df0:	3314      	adds	r3, #20
 8006df2:	edd3 7a00 	vldr	s15, [r3]
 8006df6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006dfa:	4984      	ldr	r1, [pc, #528]	; (800700c <leds_Task+0x2908>)
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	4613      	mov	r3, r2
 8006e00:	011b      	lsls	r3, r3, #4
 8006e02:	4413      	add	r3, r2
 8006e04:	00db      	lsls	r3, r3, #3
 8006e06:	440b      	add	r3, r1
 8006e08:	3314      	adds	r3, #20
 8006e0a:	edc3 7a00 	vstr	s15, [r3]
					leds_info.leds[i].pwmch2_cur_value += leds_info.leds[i].pwmch2_step;
 8006e0e:	497f      	ldr	r1, [pc, #508]	; (800700c <leds_Task+0x2908>)
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	4613      	mov	r3, r2
 8006e14:	011b      	lsls	r3, r3, #4
 8006e16:	4413      	add	r3, r2
 8006e18:	00db      	lsls	r3, r3, #3
 8006e1a:	440b      	add	r3, r1
 8006e1c:	3328      	adds	r3, #40	; 0x28
 8006e1e:	ed93 7a00 	vldr	s14, [r3]
 8006e22:	497a      	ldr	r1, [pc, #488]	; (800700c <leds_Task+0x2908>)
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	4613      	mov	r3, r2
 8006e28:	011b      	lsls	r3, r3, #4
 8006e2a:	4413      	add	r3, r2
 8006e2c:	00db      	lsls	r3, r3, #3
 8006e2e:	440b      	add	r3, r1
 8006e30:	3320      	adds	r3, #32
 8006e32:	edd3 7a00 	vldr	s15, [r3]
 8006e36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e3a:	4974      	ldr	r1, [pc, #464]	; (800700c <leds_Task+0x2908>)
 8006e3c:	68fa      	ldr	r2, [r7, #12]
 8006e3e:	4613      	mov	r3, r2
 8006e40:	011b      	lsls	r3, r3, #4
 8006e42:	4413      	add	r3, r2
 8006e44:	00db      	lsls	r3, r3, #3
 8006e46:	440b      	add	r3, r1
 8006e48:	3320      	adds	r3, #32
 8006e4a:	edc3 7a00 	vstr	s15, [r3]
					if( leds_info.leds[i].step_cnt-- == 0 )
 8006e4e:	496f      	ldr	r1, [pc, #444]	; (800700c <leds_Task+0x2908>)
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	4613      	mov	r3, r2
 8006e54:	011b      	lsls	r3, r3, #4
 8006e56:	4413      	add	r3, r2
 8006e58:	00db      	lsls	r3, r3, #3
 8006e5a:	440b      	add	r3, r1
 8006e5c:	3338      	adds	r3, #56	; 0x38
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	1e50      	subs	r0, r2, #1
 8006e62:	4c6a      	ldr	r4, [pc, #424]	; (800700c <leds_Task+0x2908>)
 8006e64:	68f9      	ldr	r1, [r7, #12]
 8006e66:	460b      	mov	r3, r1
 8006e68:	011b      	lsls	r3, r3, #4
 8006e6a:	440b      	add	r3, r1
 8006e6c:	00db      	lsls	r3, r3, #3
 8006e6e:	4423      	add	r3, r4
 8006e70:	3338      	adds	r3, #56	; 0x38
 8006e72:	6018      	str	r0, [r3, #0]
 8006e74:	2a00      	cmp	r2, #0
 8006e76:	d151      	bne.n	8006f1c <leds_Task+0x2818>
					{
						leds_info.leds[i].pwmch0_cur_value = (float)leds_info.leds[i].pwmch0_value1;
 8006e78:	4964      	ldr	r1, [pc, #400]	; (800700c <leds_Task+0x2908>)
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	011b      	lsls	r3, r3, #4
 8006e80:	4413      	add	r3, r2
 8006e82:	00db      	lsls	r3, r3, #3
 8006e84:	440b      	add	r3, r1
 8006e86:	330d      	adds	r3, #13
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	ee07 3a90 	vmov	s15, r3
 8006e90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e94:	495d      	ldr	r1, [pc, #372]	; (800700c <leds_Task+0x2908>)
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	4613      	mov	r3, r2
 8006e9a:	011b      	lsls	r3, r3, #4
 8006e9c:	4413      	add	r3, r2
 8006e9e:	00db      	lsls	r3, r3, #3
 8006ea0:	440b      	add	r3, r1
 8006ea2:	3308      	adds	r3, #8
 8006ea4:	edc3 7a00 	vstr	s15, [r3]
						leds_info.leds[i].pwmch1_cur_value = (float)leds_info.leds[i].pwmch1_value1;
 8006ea8:	4958      	ldr	r1, [pc, #352]	; (800700c <leds_Task+0x2908>)
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	4613      	mov	r3, r2
 8006eae:	011b      	lsls	r3, r3, #4
 8006eb0:	4413      	add	r3, r2
 8006eb2:	00db      	lsls	r3, r3, #3
 8006eb4:	440b      	add	r3, r1
 8006eb6:	3319      	adds	r3, #25
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	ee07 3a90 	vmov	s15, r3
 8006ec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ec4:	4951      	ldr	r1, [pc, #324]	; (800700c <leds_Task+0x2908>)
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	4613      	mov	r3, r2
 8006eca:	011b      	lsls	r3, r3, #4
 8006ecc:	4413      	add	r3, r2
 8006ece:	00db      	lsls	r3, r3, #3
 8006ed0:	440b      	add	r3, r1
 8006ed2:	3314      	adds	r3, #20
 8006ed4:	edc3 7a00 	vstr	s15, [r3]
						leds_info.leds[i].pwmch2_cur_value = (float)leds_info.leds[i].pwmch2_value1;
 8006ed8:	494c      	ldr	r1, [pc, #304]	; (800700c <leds_Task+0x2908>)
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	4613      	mov	r3, r2
 8006ede:	011b      	lsls	r3, r3, #4
 8006ee0:	4413      	add	r3, r2
 8006ee2:	00db      	lsls	r3, r3, #3
 8006ee4:	440b      	add	r3, r1
 8006ee6:	3325      	adds	r3, #37	; 0x25
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	ee07 3a90 	vmov	s15, r3
 8006ef0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ef4:	4945      	ldr	r1, [pc, #276]	; (800700c <leds_Task+0x2908>)
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	4613      	mov	r3, r2
 8006efa:	011b      	lsls	r3, r3, #4
 8006efc:	4413      	add	r3, r2
 8006efe:	00db      	lsls	r3, r3, #3
 8006f00:	440b      	add	r3, r1
 8006f02:	3320      	adds	r3, #32
 8006f04:	edc3 7a00 	vstr	s15, [r3]
						leds_info.leds[i].mode = led_toggle;
 8006f08:	4940      	ldr	r1, [pc, #256]	; (800700c <leds_Task+0x2908>)
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	011b      	lsls	r3, r3, #4
 8006f10:	4413      	add	r3, r2
 8006f12:	00db      	lsls	r3, r3, #3
 8006f14:	440b      	add	r3, r1
 8006f16:	3302      	adds	r3, #2
 8006f18:	2200      	movs	r2, #0
 8006f1a:	701a      	strb	r2, [r3, #0]
					}
					__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch0_tim,
 8006f1c:	493b      	ldr	r1, [pc, #236]	; (800700c <leds_Task+0x2908>)
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	4613      	mov	r3, r2
 8006f22:	011b      	lsls	r3, r3, #4
 8006f24:	4413      	add	r3, r2
 8006f26:	00db      	lsls	r3, r3, #3
 8006f28:	440b      	add	r3, r1
 8006f2a:	3348      	adds	r3, #72	; 0x48
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d11c      	bne.n	8006f6c <leds_Task+0x2868>
 8006f32:	4936      	ldr	r1, [pc, #216]	; (800700c <leds_Task+0x2908>)
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	4613      	mov	r3, r2
 8006f38:	011b      	lsls	r3, r3, #4
 8006f3a:	4413      	add	r3, r2
 8006f3c:	00db      	lsls	r3, r3, #3
 8006f3e:	440b      	add	r3, r1
 8006f40:	3308      	adds	r3, #8
 8006f42:	edd3 7a00 	vldr	s15, [r3]
 8006f46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f4a:	edc7 7a01 	vstr	s15, [r7, #4]
 8006f4e:	793b      	ldrb	r3, [r7, #4]
 8006f50:	b2d8      	uxtb	r0, r3
 8006f52:	492e      	ldr	r1, [pc, #184]	; (800700c <leds_Task+0x2908>)
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	4613      	mov	r3, r2
 8006f58:	011b      	lsls	r3, r3, #4
 8006f5a:	4413      	add	r3, r2
 8006f5c:	00db      	lsls	r3, r3, #3
 8006f5e:	440b      	add	r3, r1
 8006f60:	3344      	adds	r3, #68	; 0x44
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4602      	mov	r2, r0
 8006f68:	635a      	str	r2, [r3, #52]	; 0x34
 8006f6a:	e06d      	b.n	8007048 <leds_Task+0x2944>
 8006f6c:	4927      	ldr	r1, [pc, #156]	; (800700c <leds_Task+0x2908>)
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	4613      	mov	r3, r2
 8006f72:	011b      	lsls	r3, r3, #4
 8006f74:	4413      	add	r3, r2
 8006f76:	00db      	lsls	r3, r3, #3
 8006f78:	440b      	add	r3, r1
 8006f7a:	3348      	adds	r3, #72	; 0x48
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2b04      	cmp	r3, #4
 8006f80:	d11c      	bne.n	8006fbc <leds_Task+0x28b8>
 8006f82:	4922      	ldr	r1, [pc, #136]	; (800700c <leds_Task+0x2908>)
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	4613      	mov	r3, r2
 8006f88:	011b      	lsls	r3, r3, #4
 8006f8a:	4413      	add	r3, r2
 8006f8c:	00db      	lsls	r3, r3, #3
 8006f8e:	440b      	add	r3, r1
 8006f90:	3308      	adds	r3, #8
 8006f92:	edd3 7a00 	vldr	s15, [r3]
 8006f96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f9a:	edc7 7a01 	vstr	s15, [r7, #4]
 8006f9e:	793b      	ldrb	r3, [r7, #4]
 8006fa0:	b2d8      	uxtb	r0, r3
 8006fa2:	491a      	ldr	r1, [pc, #104]	; (800700c <leds_Task+0x2908>)
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	011b      	lsls	r3, r3, #4
 8006faa:	4413      	add	r3, r2
 8006fac:	00db      	lsls	r3, r3, #3
 8006fae:	440b      	add	r3, r1
 8006fb0:	3344      	adds	r3, #68	; 0x44
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	6393      	str	r3, [r2, #56]	; 0x38
 8006fba:	e045      	b.n	8007048 <leds_Task+0x2944>
 8006fbc:	4913      	ldr	r1, [pc, #76]	; (800700c <leds_Task+0x2908>)
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	4613      	mov	r3, r2
 8006fc2:	011b      	lsls	r3, r3, #4
 8006fc4:	4413      	add	r3, r2
 8006fc6:	00db      	lsls	r3, r3, #3
 8006fc8:	440b      	add	r3, r1
 8006fca:	3348      	adds	r3, #72	; 0x48
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2b08      	cmp	r3, #8
 8006fd0:	d11e      	bne.n	8007010 <leds_Task+0x290c>
 8006fd2:	490e      	ldr	r1, [pc, #56]	; (800700c <leds_Task+0x2908>)
 8006fd4:	68fa      	ldr	r2, [r7, #12]
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	011b      	lsls	r3, r3, #4
 8006fda:	4413      	add	r3, r2
 8006fdc:	00db      	lsls	r3, r3, #3
 8006fde:	440b      	add	r3, r1
 8006fe0:	3308      	adds	r3, #8
 8006fe2:	edd3 7a00 	vldr	s15, [r3]
 8006fe6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fea:	edc7 7a01 	vstr	s15, [r7, #4]
 8006fee:	793b      	ldrb	r3, [r7, #4]
 8006ff0:	b2d8      	uxtb	r0, r3
 8006ff2:	4906      	ldr	r1, [pc, #24]	; (800700c <leds_Task+0x2908>)
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	011b      	lsls	r3, r3, #4
 8006ffa:	4413      	add	r3, r2
 8006ffc:	00db      	lsls	r3, r3, #3
 8006ffe:	440b      	add	r3, r1
 8007000:	3344      	adds	r3, #68	; 0x44
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	4603      	mov	r3, r0
 8007008:	63d3      	str	r3, [r2, #60]	; 0x3c
 800700a:	e01d      	b.n	8007048 <leds_Task+0x2944>
 800700c:	20000a44 	.word	0x20000a44
 8007010:	49a7      	ldr	r1, [pc, #668]	; (80072b0 <leds_Task+0x2bac>)
 8007012:	68fa      	ldr	r2, [r7, #12]
 8007014:	4613      	mov	r3, r2
 8007016:	011b      	lsls	r3, r3, #4
 8007018:	4413      	add	r3, r2
 800701a:	00db      	lsls	r3, r3, #3
 800701c:	440b      	add	r3, r1
 800701e:	3308      	adds	r3, #8
 8007020:	edd3 7a00 	vldr	s15, [r3]
 8007024:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007028:	edc7 7a01 	vstr	s15, [r7, #4]
 800702c:	793b      	ldrb	r3, [r7, #4]
 800702e:	b2d8      	uxtb	r0, r3
 8007030:	499f      	ldr	r1, [pc, #636]	; (80072b0 <leds_Task+0x2bac>)
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	4613      	mov	r3, r2
 8007036:	011b      	lsls	r3, r3, #4
 8007038:	4413      	add	r3, r2
 800703a:	00db      	lsls	r3, r3, #3
 800703c:	440b      	add	r3, r1
 800703e:	3344      	adds	r3, #68	; 0x44
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	4603      	mov	r3, r0
 8007046:	6413      	str	r3, [r2, #64]	; 0x40
										leds_info.leds[i].pwmch0_timch, (uint8_t)leds_info.leds[i].pwmch0_cur_value);
					__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch1_tim,
 8007048:	4999      	ldr	r1, [pc, #612]	; (80072b0 <leds_Task+0x2bac>)
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	4613      	mov	r3, r2
 800704e:	011b      	lsls	r3, r3, #4
 8007050:	4413      	add	r3, r2
 8007052:	00db      	lsls	r3, r3, #3
 8007054:	440b      	add	r3, r1
 8007056:	3350      	adds	r3, #80	; 0x50
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d11c      	bne.n	8007098 <leds_Task+0x2994>
 800705e:	4994      	ldr	r1, [pc, #592]	; (80072b0 <leds_Task+0x2bac>)
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	4613      	mov	r3, r2
 8007064:	011b      	lsls	r3, r3, #4
 8007066:	4413      	add	r3, r2
 8007068:	00db      	lsls	r3, r3, #3
 800706a:	440b      	add	r3, r1
 800706c:	3314      	adds	r3, #20
 800706e:	edd3 7a00 	vldr	s15, [r3]
 8007072:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007076:	edc7 7a01 	vstr	s15, [r7, #4]
 800707a:	793b      	ldrb	r3, [r7, #4]
 800707c:	b2d8      	uxtb	r0, r3
 800707e:	498c      	ldr	r1, [pc, #560]	; (80072b0 <leds_Task+0x2bac>)
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	4613      	mov	r3, r2
 8007084:	011b      	lsls	r3, r3, #4
 8007086:	4413      	add	r3, r2
 8007088:	00db      	lsls	r3, r3, #3
 800708a:	440b      	add	r3, r1
 800708c:	334c      	adds	r3, #76	; 0x4c
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4602      	mov	r2, r0
 8007094:	635a      	str	r2, [r3, #52]	; 0x34
 8007096:	e06b      	b.n	8007170 <leds_Task+0x2a6c>
 8007098:	4985      	ldr	r1, [pc, #532]	; (80072b0 <leds_Task+0x2bac>)
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	4613      	mov	r3, r2
 800709e:	011b      	lsls	r3, r3, #4
 80070a0:	4413      	add	r3, r2
 80070a2:	00db      	lsls	r3, r3, #3
 80070a4:	440b      	add	r3, r1
 80070a6:	3350      	adds	r3, #80	; 0x50
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2b04      	cmp	r3, #4
 80070ac:	d11c      	bne.n	80070e8 <leds_Task+0x29e4>
 80070ae:	4980      	ldr	r1, [pc, #512]	; (80072b0 <leds_Task+0x2bac>)
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	4613      	mov	r3, r2
 80070b4:	011b      	lsls	r3, r3, #4
 80070b6:	4413      	add	r3, r2
 80070b8:	00db      	lsls	r3, r3, #3
 80070ba:	440b      	add	r3, r1
 80070bc:	3314      	adds	r3, #20
 80070be:	edd3 7a00 	vldr	s15, [r3]
 80070c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070c6:	edc7 7a01 	vstr	s15, [r7, #4]
 80070ca:	793b      	ldrb	r3, [r7, #4]
 80070cc:	b2d8      	uxtb	r0, r3
 80070ce:	4978      	ldr	r1, [pc, #480]	; (80072b0 <leds_Task+0x2bac>)
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	4613      	mov	r3, r2
 80070d4:	011b      	lsls	r3, r3, #4
 80070d6:	4413      	add	r3, r2
 80070d8:	00db      	lsls	r3, r3, #3
 80070da:	440b      	add	r3, r1
 80070dc:	334c      	adds	r3, #76	; 0x4c
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	4603      	mov	r3, r0
 80070e4:	6393      	str	r3, [r2, #56]	; 0x38
 80070e6:	e043      	b.n	8007170 <leds_Task+0x2a6c>
 80070e8:	4971      	ldr	r1, [pc, #452]	; (80072b0 <leds_Task+0x2bac>)
 80070ea:	68fa      	ldr	r2, [r7, #12]
 80070ec:	4613      	mov	r3, r2
 80070ee:	011b      	lsls	r3, r3, #4
 80070f0:	4413      	add	r3, r2
 80070f2:	00db      	lsls	r3, r3, #3
 80070f4:	440b      	add	r3, r1
 80070f6:	3350      	adds	r3, #80	; 0x50
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2b08      	cmp	r3, #8
 80070fc:	d11c      	bne.n	8007138 <leds_Task+0x2a34>
 80070fe:	496c      	ldr	r1, [pc, #432]	; (80072b0 <leds_Task+0x2bac>)
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	4613      	mov	r3, r2
 8007104:	011b      	lsls	r3, r3, #4
 8007106:	4413      	add	r3, r2
 8007108:	00db      	lsls	r3, r3, #3
 800710a:	440b      	add	r3, r1
 800710c:	3314      	adds	r3, #20
 800710e:	edd3 7a00 	vldr	s15, [r3]
 8007112:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007116:	edc7 7a01 	vstr	s15, [r7, #4]
 800711a:	793b      	ldrb	r3, [r7, #4]
 800711c:	b2d8      	uxtb	r0, r3
 800711e:	4964      	ldr	r1, [pc, #400]	; (80072b0 <leds_Task+0x2bac>)
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	4613      	mov	r3, r2
 8007124:	011b      	lsls	r3, r3, #4
 8007126:	4413      	add	r3, r2
 8007128:	00db      	lsls	r3, r3, #3
 800712a:	440b      	add	r3, r1
 800712c:	334c      	adds	r3, #76	; 0x4c
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	4603      	mov	r3, r0
 8007134:	63d3      	str	r3, [r2, #60]	; 0x3c
 8007136:	e01b      	b.n	8007170 <leds_Task+0x2a6c>
 8007138:	495d      	ldr	r1, [pc, #372]	; (80072b0 <leds_Task+0x2bac>)
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	4613      	mov	r3, r2
 800713e:	011b      	lsls	r3, r3, #4
 8007140:	4413      	add	r3, r2
 8007142:	00db      	lsls	r3, r3, #3
 8007144:	440b      	add	r3, r1
 8007146:	3314      	adds	r3, #20
 8007148:	edd3 7a00 	vldr	s15, [r3]
 800714c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007150:	edc7 7a01 	vstr	s15, [r7, #4]
 8007154:	793b      	ldrb	r3, [r7, #4]
 8007156:	b2d8      	uxtb	r0, r3
 8007158:	4955      	ldr	r1, [pc, #340]	; (80072b0 <leds_Task+0x2bac>)
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	4613      	mov	r3, r2
 800715e:	011b      	lsls	r3, r3, #4
 8007160:	4413      	add	r3, r2
 8007162:	00db      	lsls	r3, r3, #3
 8007164:	440b      	add	r3, r1
 8007166:	334c      	adds	r3, #76	; 0x4c
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	4603      	mov	r3, r0
 800716e:	6413      	str	r3, [r2, #64]	; 0x40
										leds_info.leds[i].pwmch1_timch, (uint8_t)leds_info.leds[i].pwmch1_cur_value);
					__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch2_tim,
 8007170:	494f      	ldr	r1, [pc, #316]	; (80072b0 <leds_Task+0x2bac>)
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	4613      	mov	r3, r2
 8007176:	011b      	lsls	r3, r3, #4
 8007178:	4413      	add	r3, r2
 800717a:	00db      	lsls	r3, r3, #3
 800717c:	440b      	add	r3, r1
 800717e:	3358      	adds	r3, #88	; 0x58
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d11c      	bne.n	80071c0 <leds_Task+0x2abc>
 8007186:	494a      	ldr	r1, [pc, #296]	; (80072b0 <leds_Task+0x2bac>)
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	4613      	mov	r3, r2
 800718c:	011b      	lsls	r3, r3, #4
 800718e:	4413      	add	r3, r2
 8007190:	00db      	lsls	r3, r3, #3
 8007192:	440b      	add	r3, r1
 8007194:	3320      	adds	r3, #32
 8007196:	edd3 7a00 	vldr	s15, [r3]
 800719a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800719e:	edc7 7a01 	vstr	s15, [r7, #4]
 80071a2:	793b      	ldrb	r3, [r7, #4]
 80071a4:	b2d8      	uxtb	r0, r3
 80071a6:	4942      	ldr	r1, [pc, #264]	; (80072b0 <leds_Task+0x2bac>)
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	4613      	mov	r3, r2
 80071ac:	011b      	lsls	r3, r3, #4
 80071ae:	4413      	add	r3, r2
 80071b0:	00db      	lsls	r3, r3, #3
 80071b2:	440b      	add	r3, r1
 80071b4:	3354      	adds	r3, #84	; 0x54
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4602      	mov	r2, r0
 80071bc:	635a      	str	r2, [r3, #52]	; 0x34
 80071be:	e06b      	b.n	8007298 <leds_Task+0x2b94>
 80071c0:	493b      	ldr	r1, [pc, #236]	; (80072b0 <leds_Task+0x2bac>)
 80071c2:	68fa      	ldr	r2, [r7, #12]
 80071c4:	4613      	mov	r3, r2
 80071c6:	011b      	lsls	r3, r3, #4
 80071c8:	4413      	add	r3, r2
 80071ca:	00db      	lsls	r3, r3, #3
 80071cc:	440b      	add	r3, r1
 80071ce:	3358      	adds	r3, #88	; 0x58
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2b04      	cmp	r3, #4
 80071d4:	d11c      	bne.n	8007210 <leds_Task+0x2b0c>
 80071d6:	4936      	ldr	r1, [pc, #216]	; (80072b0 <leds_Task+0x2bac>)
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	4613      	mov	r3, r2
 80071dc:	011b      	lsls	r3, r3, #4
 80071de:	4413      	add	r3, r2
 80071e0:	00db      	lsls	r3, r3, #3
 80071e2:	440b      	add	r3, r1
 80071e4:	3320      	adds	r3, #32
 80071e6:	edd3 7a00 	vldr	s15, [r3]
 80071ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071ee:	edc7 7a01 	vstr	s15, [r7, #4]
 80071f2:	793b      	ldrb	r3, [r7, #4]
 80071f4:	b2d8      	uxtb	r0, r3
 80071f6:	492e      	ldr	r1, [pc, #184]	; (80072b0 <leds_Task+0x2bac>)
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	4613      	mov	r3, r2
 80071fc:	011b      	lsls	r3, r3, #4
 80071fe:	4413      	add	r3, r2
 8007200:	00db      	lsls	r3, r3, #3
 8007202:	440b      	add	r3, r1
 8007204:	3354      	adds	r3, #84	; 0x54
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	4603      	mov	r3, r0
 800720c:	6393      	str	r3, [r2, #56]	; 0x38
 800720e:	e043      	b.n	8007298 <leds_Task+0x2b94>
 8007210:	4927      	ldr	r1, [pc, #156]	; (80072b0 <leds_Task+0x2bac>)
 8007212:	68fa      	ldr	r2, [r7, #12]
 8007214:	4613      	mov	r3, r2
 8007216:	011b      	lsls	r3, r3, #4
 8007218:	4413      	add	r3, r2
 800721a:	00db      	lsls	r3, r3, #3
 800721c:	440b      	add	r3, r1
 800721e:	3358      	adds	r3, #88	; 0x58
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2b08      	cmp	r3, #8
 8007224:	d11c      	bne.n	8007260 <leds_Task+0x2b5c>
 8007226:	4922      	ldr	r1, [pc, #136]	; (80072b0 <leds_Task+0x2bac>)
 8007228:	68fa      	ldr	r2, [r7, #12]
 800722a:	4613      	mov	r3, r2
 800722c:	011b      	lsls	r3, r3, #4
 800722e:	4413      	add	r3, r2
 8007230:	00db      	lsls	r3, r3, #3
 8007232:	440b      	add	r3, r1
 8007234:	3320      	adds	r3, #32
 8007236:	edd3 7a00 	vldr	s15, [r3]
 800723a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800723e:	edc7 7a01 	vstr	s15, [r7, #4]
 8007242:	793b      	ldrb	r3, [r7, #4]
 8007244:	b2d8      	uxtb	r0, r3
 8007246:	491a      	ldr	r1, [pc, #104]	; (80072b0 <leds_Task+0x2bac>)
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	4613      	mov	r3, r2
 800724c:	011b      	lsls	r3, r3, #4
 800724e:	4413      	add	r3, r2
 8007250:	00db      	lsls	r3, r3, #3
 8007252:	440b      	add	r3, r1
 8007254:	3354      	adds	r3, #84	; 0x54
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	4603      	mov	r3, r0
 800725c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800725e:	e01b      	b.n	8007298 <leds_Task+0x2b94>
 8007260:	4913      	ldr	r1, [pc, #76]	; (80072b0 <leds_Task+0x2bac>)
 8007262:	68fa      	ldr	r2, [r7, #12]
 8007264:	4613      	mov	r3, r2
 8007266:	011b      	lsls	r3, r3, #4
 8007268:	4413      	add	r3, r2
 800726a:	00db      	lsls	r3, r3, #3
 800726c:	440b      	add	r3, r1
 800726e:	3320      	adds	r3, #32
 8007270:	edd3 7a00 	vldr	s15, [r3]
 8007274:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007278:	edc7 7a01 	vstr	s15, [r7, #4]
 800727c:	793b      	ldrb	r3, [r7, #4]
 800727e:	b2d8      	uxtb	r0, r3
 8007280:	490b      	ldr	r1, [pc, #44]	; (80072b0 <leds_Task+0x2bac>)
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	4613      	mov	r3, r2
 8007286:	011b      	lsls	r3, r3, #4
 8007288:	4413      	add	r3, r2
 800728a:	00db      	lsls	r3, r3, #3
 800728c:	440b      	add	r3, r1
 800728e:	3354      	adds	r3, #84	; 0x54
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	4603      	mov	r3, r0
 8007296:	6413      	str	r3, [r2, #64]	; 0x40
	for( uint32_t i = 0; i < LEDS_NUM; i++ )
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	3301      	adds	r3, #1
 800729c:	60fb      	str	r3, [r7, #12]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	f43d aa36 	beq.w	8004712 <leds_Task+0xe>
				}
			}
		}
	}

	return;
 80072a6:	bf00      	nop
}
 80072a8:	3714      	adds	r7, #20
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd90      	pop	{r4, r7, pc}
 80072ae:	bf00      	nop
 80072b0:	20000a44 	.word	0x20000a44

080072b4 <leds_setBlink>:
  * @param  val1 	- pwm value can be for pwm led from LEDS_MIN_PWM_VALUE to LEDS_MAX_PWM_VALUE
  * 					or 0xXXBBGGRR format for RGB led
  * @retval 1 if success, 0 if failed
  */
uint8_t leds_setBlink(uint32_t s_led, uint32_t st0_time, uint32_t st1_time, uint32_t loops, uint32_t val0, uint32_t val1)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	607a      	str	r2, [r7, #4]
 80072c0:	603b      	str	r3, [r7, #0]
#ifdef NO_LEDS
	return 1;
#endif //NO_LEDS

	if( s_led >= LEDS_NUM )
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d001      	beq.n	80072cc <leds_setBlink+0x18>
	{
		return 0;
 80072c8:	2300      	movs	r3, #0
 80072ca:	e3cc      	b.n	8007a66 <leds_setBlink+0x7b2>
	}

	//SIMPLE
	if( leds_info.leds[s_led].type == led_simple )
 80072cc:	49b8      	ldr	r1, [pc, #736]	; (80075b0 <leds_setBlink+0x2fc>)
 80072ce:	68fa      	ldr	r2, [r7, #12]
 80072d0:	4613      	mov	r3, r2
 80072d2:	011b      	lsls	r3, r3, #4
 80072d4:	4413      	add	r3, r2
 80072d6:	00db      	lsls	r3, r3, #3
 80072d8:	440b      	add	r3, r1
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f040 80a5 	bne.w	800742e <leds_setBlink+0x17a>
	{
		leds_info.leds[s_led].pwmch0_value0 = val0;
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	b2d8      	uxtb	r0, r3
 80072e8:	49b1      	ldr	r1, [pc, #708]	; (80075b0 <leds_setBlink+0x2fc>)
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	4613      	mov	r3, r2
 80072ee:	011b      	lsls	r3, r3, #4
 80072f0:	4413      	add	r3, r2
 80072f2:	00db      	lsls	r3, r3, #3
 80072f4:	440b      	add	r3, r1
 80072f6:	330c      	adds	r3, #12
 80072f8:	4602      	mov	r2, r0
 80072fa:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].pwmch0_value1 = val1;
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	b2d8      	uxtb	r0, r3
 8007300:	49ab      	ldr	r1, [pc, #684]	; (80075b0 <leds_setBlink+0x2fc>)
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	4613      	mov	r3, r2
 8007306:	011b      	lsls	r3, r3, #4
 8007308:	4413      	add	r3, r2
 800730a:	00db      	lsls	r3, r3, #3
 800730c:	440b      	add	r3, r1
 800730e:	330d      	adds	r3, #13
 8007310:	4602      	mov	r2, r0
 8007312:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].loop_cnt = loops;
 8007314:	49a6      	ldr	r1, [pc, #664]	; (80075b0 <leds_setBlink+0x2fc>)
 8007316:	68fa      	ldr	r2, [r7, #12]
 8007318:	4613      	mov	r3, r2
 800731a:	011b      	lsls	r3, r3, #4
 800731c:	4413      	add	r3, r2
 800731e:	00db      	lsls	r3, r3, #3
 8007320:	440b      	add	r3, r1
 8007322:	3334      	adds	r3, #52	; 0x34
 8007324:	683a      	ldr	r2, [r7, #0]
 8007326:	601a      	str	r2, [r3, #0]
		leds_info.leds[s_led].anim_time_st0 = st0_time;
 8007328:	49a1      	ldr	r1, [pc, #644]	; (80075b0 <leds_setBlink+0x2fc>)
 800732a:	68fa      	ldr	r2, [r7, #12]
 800732c:	4613      	mov	r3, r2
 800732e:	011b      	lsls	r3, r3, #4
 8007330:	4413      	add	r3, r2
 8007332:	00db      	lsls	r3, r3, #3
 8007334:	440b      	add	r3, r1
 8007336:	332c      	adds	r3, #44	; 0x2c
 8007338:	68ba      	ldr	r2, [r7, #8]
 800733a:	601a      	str	r2, [r3, #0]
		leds_info.leds[s_led].anim_time_st1 = st1_time;
 800733c:	499c      	ldr	r1, [pc, #624]	; (80075b0 <leds_setBlink+0x2fc>)
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	4613      	mov	r3, r2
 8007342:	011b      	lsls	r3, r3, #4
 8007344:	4413      	add	r3, r2
 8007346:	00db      	lsls	r3, r3, #3
 8007348:	440b      	add	r3, r1
 800734a:	3330      	adds	r3, #48	; 0x30
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	601a      	str	r2, [r3, #0]
		if( leds_info.leds[s_led].mode != led_blink )
 8007350:	4997      	ldr	r1, [pc, #604]	; (80075b0 <leds_setBlink+0x2fc>)
 8007352:	68fa      	ldr	r2, [r7, #12]
 8007354:	4613      	mov	r3, r2
 8007356:	011b      	lsls	r3, r3, #4
 8007358:	4413      	add	r3, r2
 800735a:	00db      	lsls	r3, r3, #3
 800735c:	440b      	add	r3, r1
 800735e:	3302      	adds	r3, #2
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	b2db      	uxtb	r3, r3
 8007364:	2b01      	cmp	r3, #1
 8007366:	f000 837d 	beq.w	8007a64 <leds_setBlink+0x7b0>
		{
			leds_info.leds[s_led].state = led_st0;
 800736a:	4991      	ldr	r1, [pc, #580]	; (80075b0 <leds_setBlink+0x2fc>)
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	4613      	mov	r3, r2
 8007370:	011b      	lsls	r3, r3, #4
 8007372:	4413      	add	r3, r2
 8007374:	00db      	lsls	r3, r3, #3
 8007376:	440b      	add	r3, r1
 8007378:	3301      	adds	r3, #1
 800737a:	2200      	movs	r2, #0
 800737c:	701a      	strb	r2, [r3, #0]
			leds_info.leds[s_led].mode = led_blink;
 800737e:	498c      	ldr	r1, [pc, #560]	; (80075b0 <leds_setBlink+0x2fc>)
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	4613      	mov	r3, r2
 8007384:	011b      	lsls	r3, r3, #4
 8007386:	4413      	add	r3, r2
 8007388:	00db      	lsls	r3, r3, #3
 800738a:	440b      	add	r3, r1
 800738c:	3302      	adds	r3, #2
 800738e:	2201      	movs	r2, #1
 8007390:	701a      	strb	r2, [r3, #0]
			leds_info.leds[s_led].timer = leds_info.leds[s_led].anim_time_st0;
 8007392:	4987      	ldr	r1, [pc, #540]	; (80075b0 <leds_setBlink+0x2fc>)
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	4613      	mov	r3, r2
 8007398:	011b      	lsls	r3, r3, #4
 800739a:	4413      	add	r3, r2
 800739c:	00db      	lsls	r3, r3, #3
 800739e:	440b      	add	r3, r1
 80073a0:	332c      	adds	r3, #44	; 0x2c
 80073a2:	6819      	ldr	r1, [r3, #0]
 80073a4:	4882      	ldr	r0, [pc, #520]	; (80075b0 <leds_setBlink+0x2fc>)
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	4613      	mov	r3, r2
 80073aa:	011b      	lsls	r3, r3, #4
 80073ac:	4413      	add	r3, r2
 80073ae:	00db      	lsls	r3, r3, #3
 80073b0:	4403      	add	r3, r0
 80073b2:	3304      	adds	r3, #4
 80073b4:	6019      	str	r1, [r3, #0]
			if( leds_info.leds[s_led].pwmch0_value0 > 0 ) {
 80073b6:	497e      	ldr	r1, [pc, #504]	; (80075b0 <leds_setBlink+0x2fc>)
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	4613      	mov	r3, r2
 80073bc:	011b      	lsls	r3, r3, #4
 80073be:	4413      	add	r3, r2
 80073c0:	00db      	lsls	r3, r3, #3
 80073c2:	440b      	add	r3, r1
 80073c4:	330c      	adds	r3, #12
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d017      	beq.n	80073fe <leds_setBlink+0x14a>
				HAL_GPIO_WritePin(leds_info.leds[s_led].sim_port, leds_info.leds[s_led].sim_pin, GPIO_PIN_SET);
 80073ce:	4978      	ldr	r1, [pc, #480]	; (80075b0 <leds_setBlink+0x2fc>)
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	4613      	mov	r3, r2
 80073d4:	011b      	lsls	r3, r3, #4
 80073d6:	4413      	add	r3, r2
 80073d8:	00db      	lsls	r3, r3, #3
 80073da:	440b      	add	r3, r1
 80073dc:	333c      	adds	r3, #60	; 0x3c
 80073de:	6818      	ldr	r0, [r3, #0]
 80073e0:	4973      	ldr	r1, [pc, #460]	; (80075b0 <leds_setBlink+0x2fc>)
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	4613      	mov	r3, r2
 80073e6:	011b      	lsls	r3, r3, #4
 80073e8:	4413      	add	r3, r2
 80073ea:	00db      	lsls	r3, r3, #3
 80073ec:	440b      	add	r3, r1
 80073ee:	3340      	adds	r3, #64	; 0x40
 80073f0:	881b      	ldrh	r3, [r3, #0]
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	2201      	movs	r2, #1
 80073f6:	4619      	mov	r1, r3
 80073f8:	f005 fd8e 	bl	800cf18 <HAL_GPIO_WritePin>
 80073fc:	e332      	b.n	8007a64 <leds_setBlink+0x7b0>
			}
			else {
				HAL_GPIO_WritePin(leds_info.leds[s_led].sim_port, leds_info.leds[s_led].sim_pin, GPIO_PIN_RESET);
 80073fe:	496c      	ldr	r1, [pc, #432]	; (80075b0 <leds_setBlink+0x2fc>)
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	4613      	mov	r3, r2
 8007404:	011b      	lsls	r3, r3, #4
 8007406:	4413      	add	r3, r2
 8007408:	00db      	lsls	r3, r3, #3
 800740a:	440b      	add	r3, r1
 800740c:	333c      	adds	r3, #60	; 0x3c
 800740e:	6818      	ldr	r0, [r3, #0]
 8007410:	4967      	ldr	r1, [pc, #412]	; (80075b0 <leds_setBlink+0x2fc>)
 8007412:	68fa      	ldr	r2, [r7, #12]
 8007414:	4613      	mov	r3, r2
 8007416:	011b      	lsls	r3, r3, #4
 8007418:	4413      	add	r3, r2
 800741a:	00db      	lsls	r3, r3, #3
 800741c:	440b      	add	r3, r1
 800741e:	3340      	adds	r3, #64	; 0x40
 8007420:	881b      	ldrh	r3, [r3, #0]
 8007422:	b29b      	uxth	r3, r3
 8007424:	2200      	movs	r2, #0
 8007426:	4619      	mov	r1, r3
 8007428:	f005 fd76 	bl	800cf18 <HAL_GPIO_WritePin>
 800742c:	e31a      	b.n	8007a64 <leds_setBlink+0x7b0>
			}
		}
	}
	//PWM
	else if( leds_info.leds[s_led].type == led_pwm )
 800742e:	4960      	ldr	r1, [pc, #384]	; (80075b0 <leds_setBlink+0x2fc>)
 8007430:	68fa      	ldr	r2, [r7, #12]
 8007432:	4613      	mov	r3, r2
 8007434:	011b      	lsls	r3, r3, #4
 8007436:	4413      	add	r3, r2
 8007438:	00db      	lsls	r3, r3, #3
 800743a:	440b      	add	r3, r1
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	b2db      	uxtb	r3, r3
 8007440:	2b01      	cmp	r3, #1
 8007442:	f040 80f0 	bne.w	8007626 <leds_setBlink+0x372>
	{
		if( (val0 < LEDS_MIN_PWM_VALUE) || (val0 > LEDS_MAX_PWM_VALUE) || (val1 < LEDS_MIN_PWM_VALUE) || (val1 > LEDS_MAX_PWM_VALUE) )
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	2bff      	cmp	r3, #255	; 0xff
 800744a:	d802      	bhi.n	8007452 <leds_setBlink+0x19e>
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	2bff      	cmp	r3, #255	; 0xff
 8007450:	d901      	bls.n	8007456 <leds_setBlink+0x1a2>
		{
			return 0;
 8007452:	2300      	movs	r3, #0
 8007454:	e307      	b.n	8007a66 <leds_setBlink+0x7b2>
		}
		leds_info.leds[s_led].pwmch0_value0 = val0;
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	b2d8      	uxtb	r0, r3
 800745a:	4955      	ldr	r1, [pc, #340]	; (80075b0 <leds_setBlink+0x2fc>)
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	4613      	mov	r3, r2
 8007460:	011b      	lsls	r3, r3, #4
 8007462:	4413      	add	r3, r2
 8007464:	00db      	lsls	r3, r3, #3
 8007466:	440b      	add	r3, r1
 8007468:	330c      	adds	r3, #12
 800746a:	4602      	mov	r2, r0
 800746c:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].pwmch0_value1 = val1;
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	b2d8      	uxtb	r0, r3
 8007472:	494f      	ldr	r1, [pc, #316]	; (80075b0 <leds_setBlink+0x2fc>)
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	4613      	mov	r3, r2
 8007478:	011b      	lsls	r3, r3, #4
 800747a:	4413      	add	r3, r2
 800747c:	00db      	lsls	r3, r3, #3
 800747e:	440b      	add	r3, r1
 8007480:	330d      	adds	r3, #13
 8007482:	4602      	mov	r2, r0
 8007484:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].loop_cnt = loops;
 8007486:	494a      	ldr	r1, [pc, #296]	; (80075b0 <leds_setBlink+0x2fc>)
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	4613      	mov	r3, r2
 800748c:	011b      	lsls	r3, r3, #4
 800748e:	4413      	add	r3, r2
 8007490:	00db      	lsls	r3, r3, #3
 8007492:	440b      	add	r3, r1
 8007494:	3334      	adds	r3, #52	; 0x34
 8007496:	683a      	ldr	r2, [r7, #0]
 8007498:	601a      	str	r2, [r3, #0]
		leds_info.leds[s_led].anim_time_st0 = st0_time;
 800749a:	4945      	ldr	r1, [pc, #276]	; (80075b0 <leds_setBlink+0x2fc>)
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	4613      	mov	r3, r2
 80074a0:	011b      	lsls	r3, r3, #4
 80074a2:	4413      	add	r3, r2
 80074a4:	00db      	lsls	r3, r3, #3
 80074a6:	440b      	add	r3, r1
 80074a8:	332c      	adds	r3, #44	; 0x2c
 80074aa:	68ba      	ldr	r2, [r7, #8]
 80074ac:	601a      	str	r2, [r3, #0]
		leds_info.leds[s_led].anim_time_st1 = st1_time;
 80074ae:	4940      	ldr	r1, [pc, #256]	; (80075b0 <leds_setBlink+0x2fc>)
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	4613      	mov	r3, r2
 80074b4:	011b      	lsls	r3, r3, #4
 80074b6:	4413      	add	r3, r2
 80074b8:	00db      	lsls	r3, r3, #3
 80074ba:	440b      	add	r3, r1
 80074bc:	3330      	adds	r3, #48	; 0x30
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	601a      	str	r2, [r3, #0]
		if( leds_info.leds[s_led].mode != led_blink )
 80074c2:	493b      	ldr	r1, [pc, #236]	; (80075b0 <leds_setBlink+0x2fc>)
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	4613      	mov	r3, r2
 80074c8:	011b      	lsls	r3, r3, #4
 80074ca:	4413      	add	r3, r2
 80074cc:	00db      	lsls	r3, r3, #3
 80074ce:	440b      	add	r3, r1
 80074d0:	3302      	adds	r3, #2
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	f000 82c4 	beq.w	8007a64 <leds_setBlink+0x7b0>
		{
			leds_info.leds[s_led].state = led_st0;
 80074dc:	4934      	ldr	r1, [pc, #208]	; (80075b0 <leds_setBlink+0x2fc>)
 80074de:	68fa      	ldr	r2, [r7, #12]
 80074e0:	4613      	mov	r3, r2
 80074e2:	011b      	lsls	r3, r3, #4
 80074e4:	4413      	add	r3, r2
 80074e6:	00db      	lsls	r3, r3, #3
 80074e8:	440b      	add	r3, r1
 80074ea:	3301      	adds	r3, #1
 80074ec:	2200      	movs	r2, #0
 80074ee:	701a      	strb	r2, [r3, #0]
			leds_info.leds[s_led].mode = led_blink;
 80074f0:	492f      	ldr	r1, [pc, #188]	; (80075b0 <leds_setBlink+0x2fc>)
 80074f2:	68fa      	ldr	r2, [r7, #12]
 80074f4:	4613      	mov	r3, r2
 80074f6:	011b      	lsls	r3, r3, #4
 80074f8:	4413      	add	r3, r2
 80074fa:	00db      	lsls	r3, r3, #3
 80074fc:	440b      	add	r3, r1
 80074fe:	3302      	adds	r3, #2
 8007500:	2201      	movs	r2, #1
 8007502:	701a      	strb	r2, [r3, #0]
			leds_info.leds[s_led].timer = leds_info.leds[s_led].anim_time_st0;
 8007504:	492a      	ldr	r1, [pc, #168]	; (80075b0 <leds_setBlink+0x2fc>)
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	4613      	mov	r3, r2
 800750a:	011b      	lsls	r3, r3, #4
 800750c:	4413      	add	r3, r2
 800750e:	00db      	lsls	r3, r3, #3
 8007510:	440b      	add	r3, r1
 8007512:	332c      	adds	r3, #44	; 0x2c
 8007514:	6819      	ldr	r1, [r3, #0]
 8007516:	4826      	ldr	r0, [pc, #152]	; (80075b0 <leds_setBlink+0x2fc>)
 8007518:	68fa      	ldr	r2, [r7, #12]
 800751a:	4613      	mov	r3, r2
 800751c:	011b      	lsls	r3, r3, #4
 800751e:	4413      	add	r3, r2
 8007520:	00db      	lsls	r3, r3, #3
 8007522:	4403      	add	r3, r0
 8007524:	3304      	adds	r3, #4
 8007526:	6019      	str	r1, [r3, #0]
			__HAL_TIM_SET_COMPARE(leds_info.leds[s_led].pwmch0_tim, leds_info.leds[s_led].pwmch0_timch, leds_info.leds[s_led].pwmch0_value0);
 8007528:	4921      	ldr	r1, [pc, #132]	; (80075b0 <leds_setBlink+0x2fc>)
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	4613      	mov	r3, r2
 800752e:	011b      	lsls	r3, r3, #4
 8007530:	4413      	add	r3, r2
 8007532:	00db      	lsls	r3, r3, #3
 8007534:	440b      	add	r3, r1
 8007536:	3348      	adds	r3, #72	; 0x48
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d116      	bne.n	800756c <leds_setBlink+0x2b8>
 800753e:	491c      	ldr	r1, [pc, #112]	; (80075b0 <leds_setBlink+0x2fc>)
 8007540:	68fa      	ldr	r2, [r7, #12]
 8007542:	4613      	mov	r3, r2
 8007544:	011b      	lsls	r3, r3, #4
 8007546:	4413      	add	r3, r2
 8007548:	00db      	lsls	r3, r3, #3
 800754a:	440b      	add	r3, r1
 800754c:	330c      	adds	r3, #12
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	b2d8      	uxtb	r0, r3
 8007552:	4917      	ldr	r1, [pc, #92]	; (80075b0 <leds_setBlink+0x2fc>)
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	4613      	mov	r3, r2
 8007558:	011b      	lsls	r3, r3, #4
 800755a:	4413      	add	r3, r2
 800755c:	00db      	lsls	r3, r3, #3
 800755e:	440b      	add	r3, r1
 8007560:	3344      	adds	r3, #68	; 0x44
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4602      	mov	r2, r0
 8007568:	635a      	str	r2, [r3, #52]	; 0x34
 800756a:	e27b      	b.n	8007a64 <leds_setBlink+0x7b0>
 800756c:	4910      	ldr	r1, [pc, #64]	; (80075b0 <leds_setBlink+0x2fc>)
 800756e:	68fa      	ldr	r2, [r7, #12]
 8007570:	4613      	mov	r3, r2
 8007572:	011b      	lsls	r3, r3, #4
 8007574:	4413      	add	r3, r2
 8007576:	00db      	lsls	r3, r3, #3
 8007578:	440b      	add	r3, r1
 800757a:	3348      	adds	r3, #72	; 0x48
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2b04      	cmp	r3, #4
 8007580:	d118      	bne.n	80075b4 <leds_setBlink+0x300>
 8007582:	490b      	ldr	r1, [pc, #44]	; (80075b0 <leds_setBlink+0x2fc>)
 8007584:	68fa      	ldr	r2, [r7, #12]
 8007586:	4613      	mov	r3, r2
 8007588:	011b      	lsls	r3, r3, #4
 800758a:	4413      	add	r3, r2
 800758c:	00db      	lsls	r3, r3, #3
 800758e:	440b      	add	r3, r1
 8007590:	330c      	adds	r3, #12
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	b2d8      	uxtb	r0, r3
 8007596:	4906      	ldr	r1, [pc, #24]	; (80075b0 <leds_setBlink+0x2fc>)
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	4613      	mov	r3, r2
 800759c:	011b      	lsls	r3, r3, #4
 800759e:	4413      	add	r3, r2
 80075a0:	00db      	lsls	r3, r3, #3
 80075a2:	440b      	add	r3, r1
 80075a4:	3344      	adds	r3, #68	; 0x44
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	4603      	mov	r3, r0
 80075ac:	6393      	str	r3, [r2, #56]	; 0x38
 80075ae:	e259      	b.n	8007a64 <leds_setBlink+0x7b0>
 80075b0:	20000a44 	.word	0x20000a44
 80075b4:	49a3      	ldr	r1, [pc, #652]	; (8007844 <leds_setBlink+0x590>)
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	4613      	mov	r3, r2
 80075ba:	011b      	lsls	r3, r3, #4
 80075bc:	4413      	add	r3, r2
 80075be:	00db      	lsls	r3, r3, #3
 80075c0:	440b      	add	r3, r1
 80075c2:	3348      	adds	r3, #72	; 0x48
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2b08      	cmp	r3, #8
 80075c8:	d116      	bne.n	80075f8 <leds_setBlink+0x344>
 80075ca:	499e      	ldr	r1, [pc, #632]	; (8007844 <leds_setBlink+0x590>)
 80075cc:	68fa      	ldr	r2, [r7, #12]
 80075ce:	4613      	mov	r3, r2
 80075d0:	011b      	lsls	r3, r3, #4
 80075d2:	4413      	add	r3, r2
 80075d4:	00db      	lsls	r3, r3, #3
 80075d6:	440b      	add	r3, r1
 80075d8:	330c      	adds	r3, #12
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	b2d8      	uxtb	r0, r3
 80075de:	4999      	ldr	r1, [pc, #612]	; (8007844 <leds_setBlink+0x590>)
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	4613      	mov	r3, r2
 80075e4:	011b      	lsls	r3, r3, #4
 80075e6:	4413      	add	r3, r2
 80075e8:	00db      	lsls	r3, r3, #3
 80075ea:	440b      	add	r3, r1
 80075ec:	3344      	adds	r3, #68	; 0x44
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	4603      	mov	r3, r0
 80075f4:	63d3      	str	r3, [r2, #60]	; 0x3c
 80075f6:	e235      	b.n	8007a64 <leds_setBlink+0x7b0>
 80075f8:	4992      	ldr	r1, [pc, #584]	; (8007844 <leds_setBlink+0x590>)
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	4613      	mov	r3, r2
 80075fe:	011b      	lsls	r3, r3, #4
 8007600:	4413      	add	r3, r2
 8007602:	00db      	lsls	r3, r3, #3
 8007604:	440b      	add	r3, r1
 8007606:	330c      	adds	r3, #12
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	b2d8      	uxtb	r0, r3
 800760c:	498d      	ldr	r1, [pc, #564]	; (8007844 <leds_setBlink+0x590>)
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	4613      	mov	r3, r2
 8007612:	011b      	lsls	r3, r3, #4
 8007614:	4413      	add	r3, r2
 8007616:	00db      	lsls	r3, r3, #3
 8007618:	440b      	add	r3, r1
 800761a:	3344      	adds	r3, #68	; 0x44
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	4603      	mov	r3, r0
 8007622:	6413      	str	r3, [r2, #64]	; 0x40
 8007624:	e21e      	b.n	8007a64 <leds_setBlink+0x7b0>
		}
	}
	//RGB
	else if( leds_info.leds[s_led].type == led_rgb )
 8007626:	4987      	ldr	r1, [pc, #540]	; (8007844 <leds_setBlink+0x590>)
 8007628:	68fa      	ldr	r2, [r7, #12]
 800762a:	4613      	mov	r3, r2
 800762c:	011b      	lsls	r3, r3, #4
 800762e:	4413      	add	r3, r2
 8007630:	00db      	lsls	r3, r3, #3
 8007632:	440b      	add	r3, r1
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	b2db      	uxtb	r3, r3
 8007638:	2b02      	cmp	r3, #2
 800763a:	f040 8213 	bne.w	8007a64 <leds_setBlink+0x7b0>
	{
		leds_info.leds[s_led].pwmch0_value0 = (uint8_t)(val0 & 0xFF);
 800763e:	69bb      	ldr	r3, [r7, #24]
 8007640:	b2d8      	uxtb	r0, r3
 8007642:	4980      	ldr	r1, [pc, #512]	; (8007844 <leds_setBlink+0x590>)
 8007644:	68fa      	ldr	r2, [r7, #12]
 8007646:	4613      	mov	r3, r2
 8007648:	011b      	lsls	r3, r3, #4
 800764a:	4413      	add	r3, r2
 800764c:	00db      	lsls	r3, r3, #3
 800764e:	440b      	add	r3, r1
 8007650:	330c      	adds	r3, #12
 8007652:	4602      	mov	r2, r0
 8007654:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].pwmch1_value0 = (uint8_t)((val0 >> 8) & 0xFF);
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	0a1b      	lsrs	r3, r3, #8
 800765a:	b2d8      	uxtb	r0, r3
 800765c:	4979      	ldr	r1, [pc, #484]	; (8007844 <leds_setBlink+0x590>)
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	4613      	mov	r3, r2
 8007662:	011b      	lsls	r3, r3, #4
 8007664:	4413      	add	r3, r2
 8007666:	00db      	lsls	r3, r3, #3
 8007668:	440b      	add	r3, r1
 800766a:	3318      	adds	r3, #24
 800766c:	4602      	mov	r2, r0
 800766e:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].pwmch2_value0 = (uint8_t)((val0 >> 16) & 0xFF);
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	0c1b      	lsrs	r3, r3, #16
 8007674:	b2d8      	uxtb	r0, r3
 8007676:	4973      	ldr	r1, [pc, #460]	; (8007844 <leds_setBlink+0x590>)
 8007678:	68fa      	ldr	r2, [r7, #12]
 800767a:	4613      	mov	r3, r2
 800767c:	011b      	lsls	r3, r3, #4
 800767e:	4413      	add	r3, r2
 8007680:	00db      	lsls	r3, r3, #3
 8007682:	440b      	add	r3, r1
 8007684:	3324      	adds	r3, #36	; 0x24
 8007686:	4602      	mov	r2, r0
 8007688:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].pwmch0_value1 = (uint8_t)(val1 & 0xFF);
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	b2d8      	uxtb	r0, r3
 800768e:	496d      	ldr	r1, [pc, #436]	; (8007844 <leds_setBlink+0x590>)
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	4613      	mov	r3, r2
 8007694:	011b      	lsls	r3, r3, #4
 8007696:	4413      	add	r3, r2
 8007698:	00db      	lsls	r3, r3, #3
 800769a:	440b      	add	r3, r1
 800769c:	330d      	adds	r3, #13
 800769e:	4602      	mov	r2, r0
 80076a0:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].pwmch1_value1 = (uint8_t)((val1 >> 8) & 0xFF);
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	0a1b      	lsrs	r3, r3, #8
 80076a6:	b2d8      	uxtb	r0, r3
 80076a8:	4966      	ldr	r1, [pc, #408]	; (8007844 <leds_setBlink+0x590>)
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	4613      	mov	r3, r2
 80076ae:	011b      	lsls	r3, r3, #4
 80076b0:	4413      	add	r3, r2
 80076b2:	00db      	lsls	r3, r3, #3
 80076b4:	440b      	add	r3, r1
 80076b6:	3319      	adds	r3, #25
 80076b8:	4602      	mov	r2, r0
 80076ba:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].pwmch2_value1 = (uint8_t)((val1 >> 16) & 0xFF);
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	0c1b      	lsrs	r3, r3, #16
 80076c0:	b2d8      	uxtb	r0, r3
 80076c2:	4960      	ldr	r1, [pc, #384]	; (8007844 <leds_setBlink+0x590>)
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	4613      	mov	r3, r2
 80076c8:	011b      	lsls	r3, r3, #4
 80076ca:	4413      	add	r3, r2
 80076cc:	00db      	lsls	r3, r3, #3
 80076ce:	440b      	add	r3, r1
 80076d0:	3325      	adds	r3, #37	; 0x25
 80076d2:	4602      	mov	r2, r0
 80076d4:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].loop_cnt = loops;
 80076d6:	495b      	ldr	r1, [pc, #364]	; (8007844 <leds_setBlink+0x590>)
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	4613      	mov	r3, r2
 80076dc:	011b      	lsls	r3, r3, #4
 80076de:	4413      	add	r3, r2
 80076e0:	00db      	lsls	r3, r3, #3
 80076e2:	440b      	add	r3, r1
 80076e4:	3334      	adds	r3, #52	; 0x34
 80076e6:	683a      	ldr	r2, [r7, #0]
 80076e8:	601a      	str	r2, [r3, #0]
		leds_info.leds[s_led].anim_time_st0 = st0_time;
 80076ea:	4956      	ldr	r1, [pc, #344]	; (8007844 <leds_setBlink+0x590>)
 80076ec:	68fa      	ldr	r2, [r7, #12]
 80076ee:	4613      	mov	r3, r2
 80076f0:	011b      	lsls	r3, r3, #4
 80076f2:	4413      	add	r3, r2
 80076f4:	00db      	lsls	r3, r3, #3
 80076f6:	440b      	add	r3, r1
 80076f8:	332c      	adds	r3, #44	; 0x2c
 80076fa:	68ba      	ldr	r2, [r7, #8]
 80076fc:	601a      	str	r2, [r3, #0]
		leds_info.leds[s_led].anim_time_st1 = st1_time;
 80076fe:	4951      	ldr	r1, [pc, #324]	; (8007844 <leds_setBlink+0x590>)
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	4613      	mov	r3, r2
 8007704:	011b      	lsls	r3, r3, #4
 8007706:	4413      	add	r3, r2
 8007708:	00db      	lsls	r3, r3, #3
 800770a:	440b      	add	r3, r1
 800770c:	3330      	adds	r3, #48	; 0x30
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	601a      	str	r2, [r3, #0]
		if( leds_info.leds[s_led].mode != led_blink )
 8007712:	494c      	ldr	r1, [pc, #304]	; (8007844 <leds_setBlink+0x590>)
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	4613      	mov	r3, r2
 8007718:	011b      	lsls	r3, r3, #4
 800771a:	4413      	add	r3, r2
 800771c:	00db      	lsls	r3, r3, #3
 800771e:	440b      	add	r3, r1
 8007720:	3302      	adds	r3, #2
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	b2db      	uxtb	r3, r3
 8007726:	2b01      	cmp	r3, #1
 8007728:	f000 819c 	beq.w	8007a64 <leds_setBlink+0x7b0>
		{
			leds_info.leds[s_led].state = led_st0;
 800772c:	4945      	ldr	r1, [pc, #276]	; (8007844 <leds_setBlink+0x590>)
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	4613      	mov	r3, r2
 8007732:	011b      	lsls	r3, r3, #4
 8007734:	4413      	add	r3, r2
 8007736:	00db      	lsls	r3, r3, #3
 8007738:	440b      	add	r3, r1
 800773a:	3301      	adds	r3, #1
 800773c:	2200      	movs	r2, #0
 800773e:	701a      	strb	r2, [r3, #0]
			leds_info.leds[s_led].mode = led_blink;
 8007740:	4940      	ldr	r1, [pc, #256]	; (8007844 <leds_setBlink+0x590>)
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	4613      	mov	r3, r2
 8007746:	011b      	lsls	r3, r3, #4
 8007748:	4413      	add	r3, r2
 800774a:	00db      	lsls	r3, r3, #3
 800774c:	440b      	add	r3, r1
 800774e:	3302      	adds	r3, #2
 8007750:	2201      	movs	r2, #1
 8007752:	701a      	strb	r2, [r3, #0]
			leds_info.leds[s_led].timer = leds_info.leds[s_led].anim_time_st0;
 8007754:	493b      	ldr	r1, [pc, #236]	; (8007844 <leds_setBlink+0x590>)
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	4613      	mov	r3, r2
 800775a:	011b      	lsls	r3, r3, #4
 800775c:	4413      	add	r3, r2
 800775e:	00db      	lsls	r3, r3, #3
 8007760:	440b      	add	r3, r1
 8007762:	332c      	adds	r3, #44	; 0x2c
 8007764:	6819      	ldr	r1, [r3, #0]
 8007766:	4837      	ldr	r0, [pc, #220]	; (8007844 <leds_setBlink+0x590>)
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	4613      	mov	r3, r2
 800776c:	011b      	lsls	r3, r3, #4
 800776e:	4413      	add	r3, r2
 8007770:	00db      	lsls	r3, r3, #3
 8007772:	4403      	add	r3, r0
 8007774:	3304      	adds	r3, #4
 8007776:	6019      	str	r1, [r3, #0]
			__HAL_TIM_SET_COMPARE(leds_info.leds[s_led].pwmch0_tim, leds_info.leds[s_led].pwmch0_timch, leds_info.leds[s_led].pwmch0_value0);
 8007778:	4932      	ldr	r1, [pc, #200]	; (8007844 <leds_setBlink+0x590>)
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	4613      	mov	r3, r2
 800777e:	011b      	lsls	r3, r3, #4
 8007780:	4413      	add	r3, r2
 8007782:	00db      	lsls	r3, r3, #3
 8007784:	440b      	add	r3, r1
 8007786:	3348      	adds	r3, #72	; 0x48
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d116      	bne.n	80077bc <leds_setBlink+0x508>
 800778e:	492d      	ldr	r1, [pc, #180]	; (8007844 <leds_setBlink+0x590>)
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	4613      	mov	r3, r2
 8007794:	011b      	lsls	r3, r3, #4
 8007796:	4413      	add	r3, r2
 8007798:	00db      	lsls	r3, r3, #3
 800779a:	440b      	add	r3, r1
 800779c:	330c      	adds	r3, #12
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	b2d8      	uxtb	r0, r3
 80077a2:	4928      	ldr	r1, [pc, #160]	; (8007844 <leds_setBlink+0x590>)
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	4613      	mov	r3, r2
 80077a8:	011b      	lsls	r3, r3, #4
 80077aa:	4413      	add	r3, r2
 80077ac:	00db      	lsls	r3, r3, #3
 80077ae:	440b      	add	r3, r1
 80077b0:	3344      	adds	r3, #68	; 0x44
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4602      	mov	r2, r0
 80077b8:	635a      	str	r2, [r3, #52]	; 0x34
 80077ba:	e05b      	b.n	8007874 <leds_setBlink+0x5c0>
 80077bc:	4921      	ldr	r1, [pc, #132]	; (8007844 <leds_setBlink+0x590>)
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	4613      	mov	r3, r2
 80077c2:	011b      	lsls	r3, r3, #4
 80077c4:	4413      	add	r3, r2
 80077c6:	00db      	lsls	r3, r3, #3
 80077c8:	440b      	add	r3, r1
 80077ca:	3348      	adds	r3, #72	; 0x48
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2b04      	cmp	r3, #4
 80077d0:	d116      	bne.n	8007800 <leds_setBlink+0x54c>
 80077d2:	491c      	ldr	r1, [pc, #112]	; (8007844 <leds_setBlink+0x590>)
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	4613      	mov	r3, r2
 80077d8:	011b      	lsls	r3, r3, #4
 80077da:	4413      	add	r3, r2
 80077dc:	00db      	lsls	r3, r3, #3
 80077de:	440b      	add	r3, r1
 80077e0:	330c      	adds	r3, #12
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	b2d8      	uxtb	r0, r3
 80077e6:	4917      	ldr	r1, [pc, #92]	; (8007844 <leds_setBlink+0x590>)
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	4613      	mov	r3, r2
 80077ec:	011b      	lsls	r3, r3, #4
 80077ee:	4413      	add	r3, r2
 80077f0:	00db      	lsls	r3, r3, #3
 80077f2:	440b      	add	r3, r1
 80077f4:	3344      	adds	r3, #68	; 0x44
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	4603      	mov	r3, r0
 80077fc:	6393      	str	r3, [r2, #56]	; 0x38
 80077fe:	e039      	b.n	8007874 <leds_setBlink+0x5c0>
 8007800:	4910      	ldr	r1, [pc, #64]	; (8007844 <leds_setBlink+0x590>)
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	4613      	mov	r3, r2
 8007806:	011b      	lsls	r3, r3, #4
 8007808:	4413      	add	r3, r2
 800780a:	00db      	lsls	r3, r3, #3
 800780c:	440b      	add	r3, r1
 800780e:	3348      	adds	r3, #72	; 0x48
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	2b08      	cmp	r3, #8
 8007814:	d118      	bne.n	8007848 <leds_setBlink+0x594>
 8007816:	490b      	ldr	r1, [pc, #44]	; (8007844 <leds_setBlink+0x590>)
 8007818:	68fa      	ldr	r2, [r7, #12]
 800781a:	4613      	mov	r3, r2
 800781c:	011b      	lsls	r3, r3, #4
 800781e:	4413      	add	r3, r2
 8007820:	00db      	lsls	r3, r3, #3
 8007822:	440b      	add	r3, r1
 8007824:	330c      	adds	r3, #12
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	b2d8      	uxtb	r0, r3
 800782a:	4906      	ldr	r1, [pc, #24]	; (8007844 <leds_setBlink+0x590>)
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	4613      	mov	r3, r2
 8007830:	011b      	lsls	r3, r3, #4
 8007832:	4413      	add	r3, r2
 8007834:	00db      	lsls	r3, r3, #3
 8007836:	440b      	add	r3, r1
 8007838:	3344      	adds	r3, #68	; 0x44
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	4603      	mov	r3, r0
 8007840:	63d3      	str	r3, [r2, #60]	; 0x3c
 8007842:	e017      	b.n	8007874 <leds_setBlink+0x5c0>
 8007844:	20000a44 	.word	0x20000a44
 8007848:	4989      	ldr	r1, [pc, #548]	; (8007a70 <leds_setBlink+0x7bc>)
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	4613      	mov	r3, r2
 800784e:	011b      	lsls	r3, r3, #4
 8007850:	4413      	add	r3, r2
 8007852:	00db      	lsls	r3, r3, #3
 8007854:	440b      	add	r3, r1
 8007856:	330c      	adds	r3, #12
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	b2d8      	uxtb	r0, r3
 800785c:	4984      	ldr	r1, [pc, #528]	; (8007a70 <leds_setBlink+0x7bc>)
 800785e:	68fa      	ldr	r2, [r7, #12]
 8007860:	4613      	mov	r3, r2
 8007862:	011b      	lsls	r3, r3, #4
 8007864:	4413      	add	r3, r2
 8007866:	00db      	lsls	r3, r3, #3
 8007868:	440b      	add	r3, r1
 800786a:	3344      	adds	r3, #68	; 0x44
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	4603      	mov	r3, r0
 8007872:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(leds_info.leds[s_led].pwmch1_tim, leds_info.leds[s_led].pwmch1_timch, leds_info.leds[s_led].pwmch1_value0);
 8007874:	497e      	ldr	r1, [pc, #504]	; (8007a70 <leds_setBlink+0x7bc>)
 8007876:	68fa      	ldr	r2, [r7, #12]
 8007878:	4613      	mov	r3, r2
 800787a:	011b      	lsls	r3, r3, #4
 800787c:	4413      	add	r3, r2
 800787e:	00db      	lsls	r3, r3, #3
 8007880:	440b      	add	r3, r1
 8007882:	3350      	adds	r3, #80	; 0x50
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d116      	bne.n	80078b8 <leds_setBlink+0x604>
 800788a:	4979      	ldr	r1, [pc, #484]	; (8007a70 <leds_setBlink+0x7bc>)
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	4613      	mov	r3, r2
 8007890:	011b      	lsls	r3, r3, #4
 8007892:	4413      	add	r3, r2
 8007894:	00db      	lsls	r3, r3, #3
 8007896:	440b      	add	r3, r1
 8007898:	3318      	adds	r3, #24
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	b2d8      	uxtb	r0, r3
 800789e:	4974      	ldr	r1, [pc, #464]	; (8007a70 <leds_setBlink+0x7bc>)
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	4613      	mov	r3, r2
 80078a4:	011b      	lsls	r3, r3, #4
 80078a6:	4413      	add	r3, r2
 80078a8:	00db      	lsls	r3, r3, #3
 80078aa:	440b      	add	r3, r1
 80078ac:	334c      	adds	r3, #76	; 0x4c
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4602      	mov	r2, r0
 80078b4:	635a      	str	r2, [r3, #52]	; 0x34
 80078b6:	e059      	b.n	800796c <leds_setBlink+0x6b8>
 80078b8:	496d      	ldr	r1, [pc, #436]	; (8007a70 <leds_setBlink+0x7bc>)
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	4613      	mov	r3, r2
 80078be:	011b      	lsls	r3, r3, #4
 80078c0:	4413      	add	r3, r2
 80078c2:	00db      	lsls	r3, r3, #3
 80078c4:	440b      	add	r3, r1
 80078c6:	3350      	adds	r3, #80	; 0x50
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2b04      	cmp	r3, #4
 80078cc:	d116      	bne.n	80078fc <leds_setBlink+0x648>
 80078ce:	4968      	ldr	r1, [pc, #416]	; (8007a70 <leds_setBlink+0x7bc>)
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	4613      	mov	r3, r2
 80078d4:	011b      	lsls	r3, r3, #4
 80078d6:	4413      	add	r3, r2
 80078d8:	00db      	lsls	r3, r3, #3
 80078da:	440b      	add	r3, r1
 80078dc:	3318      	adds	r3, #24
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	b2d8      	uxtb	r0, r3
 80078e2:	4963      	ldr	r1, [pc, #396]	; (8007a70 <leds_setBlink+0x7bc>)
 80078e4:	68fa      	ldr	r2, [r7, #12]
 80078e6:	4613      	mov	r3, r2
 80078e8:	011b      	lsls	r3, r3, #4
 80078ea:	4413      	add	r3, r2
 80078ec:	00db      	lsls	r3, r3, #3
 80078ee:	440b      	add	r3, r1
 80078f0:	334c      	adds	r3, #76	; 0x4c
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	4603      	mov	r3, r0
 80078f8:	6393      	str	r3, [r2, #56]	; 0x38
 80078fa:	e037      	b.n	800796c <leds_setBlink+0x6b8>
 80078fc:	495c      	ldr	r1, [pc, #368]	; (8007a70 <leds_setBlink+0x7bc>)
 80078fe:	68fa      	ldr	r2, [r7, #12]
 8007900:	4613      	mov	r3, r2
 8007902:	011b      	lsls	r3, r3, #4
 8007904:	4413      	add	r3, r2
 8007906:	00db      	lsls	r3, r3, #3
 8007908:	440b      	add	r3, r1
 800790a:	3350      	adds	r3, #80	; 0x50
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	2b08      	cmp	r3, #8
 8007910:	d116      	bne.n	8007940 <leds_setBlink+0x68c>
 8007912:	4957      	ldr	r1, [pc, #348]	; (8007a70 <leds_setBlink+0x7bc>)
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	4613      	mov	r3, r2
 8007918:	011b      	lsls	r3, r3, #4
 800791a:	4413      	add	r3, r2
 800791c:	00db      	lsls	r3, r3, #3
 800791e:	440b      	add	r3, r1
 8007920:	3318      	adds	r3, #24
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	b2d8      	uxtb	r0, r3
 8007926:	4952      	ldr	r1, [pc, #328]	; (8007a70 <leds_setBlink+0x7bc>)
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	4613      	mov	r3, r2
 800792c:	011b      	lsls	r3, r3, #4
 800792e:	4413      	add	r3, r2
 8007930:	00db      	lsls	r3, r3, #3
 8007932:	440b      	add	r3, r1
 8007934:	334c      	adds	r3, #76	; 0x4c
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	4603      	mov	r3, r0
 800793c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800793e:	e015      	b.n	800796c <leds_setBlink+0x6b8>
 8007940:	494b      	ldr	r1, [pc, #300]	; (8007a70 <leds_setBlink+0x7bc>)
 8007942:	68fa      	ldr	r2, [r7, #12]
 8007944:	4613      	mov	r3, r2
 8007946:	011b      	lsls	r3, r3, #4
 8007948:	4413      	add	r3, r2
 800794a:	00db      	lsls	r3, r3, #3
 800794c:	440b      	add	r3, r1
 800794e:	3318      	adds	r3, #24
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	b2d8      	uxtb	r0, r3
 8007954:	4946      	ldr	r1, [pc, #280]	; (8007a70 <leds_setBlink+0x7bc>)
 8007956:	68fa      	ldr	r2, [r7, #12]
 8007958:	4613      	mov	r3, r2
 800795a:	011b      	lsls	r3, r3, #4
 800795c:	4413      	add	r3, r2
 800795e:	00db      	lsls	r3, r3, #3
 8007960:	440b      	add	r3, r1
 8007962:	334c      	adds	r3, #76	; 0x4c
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	4603      	mov	r3, r0
 800796a:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(leds_info.leds[s_led].pwmch2_tim, leds_info.leds[s_led].pwmch2_timch, leds_info.leds[s_led].pwmch2_value0);
 800796c:	4940      	ldr	r1, [pc, #256]	; (8007a70 <leds_setBlink+0x7bc>)
 800796e:	68fa      	ldr	r2, [r7, #12]
 8007970:	4613      	mov	r3, r2
 8007972:	011b      	lsls	r3, r3, #4
 8007974:	4413      	add	r3, r2
 8007976:	00db      	lsls	r3, r3, #3
 8007978:	440b      	add	r3, r1
 800797a:	3358      	adds	r3, #88	; 0x58
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d116      	bne.n	80079b0 <leds_setBlink+0x6fc>
 8007982:	493b      	ldr	r1, [pc, #236]	; (8007a70 <leds_setBlink+0x7bc>)
 8007984:	68fa      	ldr	r2, [r7, #12]
 8007986:	4613      	mov	r3, r2
 8007988:	011b      	lsls	r3, r3, #4
 800798a:	4413      	add	r3, r2
 800798c:	00db      	lsls	r3, r3, #3
 800798e:	440b      	add	r3, r1
 8007990:	3324      	adds	r3, #36	; 0x24
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	b2d8      	uxtb	r0, r3
 8007996:	4936      	ldr	r1, [pc, #216]	; (8007a70 <leds_setBlink+0x7bc>)
 8007998:	68fa      	ldr	r2, [r7, #12]
 800799a:	4613      	mov	r3, r2
 800799c:	011b      	lsls	r3, r3, #4
 800799e:	4413      	add	r3, r2
 80079a0:	00db      	lsls	r3, r3, #3
 80079a2:	440b      	add	r3, r1
 80079a4:	3354      	adds	r3, #84	; 0x54
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4602      	mov	r2, r0
 80079ac:	635a      	str	r2, [r3, #52]	; 0x34
 80079ae:	e059      	b.n	8007a64 <leds_setBlink+0x7b0>
 80079b0:	492f      	ldr	r1, [pc, #188]	; (8007a70 <leds_setBlink+0x7bc>)
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	4613      	mov	r3, r2
 80079b6:	011b      	lsls	r3, r3, #4
 80079b8:	4413      	add	r3, r2
 80079ba:	00db      	lsls	r3, r3, #3
 80079bc:	440b      	add	r3, r1
 80079be:	3358      	adds	r3, #88	; 0x58
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2b04      	cmp	r3, #4
 80079c4:	d116      	bne.n	80079f4 <leds_setBlink+0x740>
 80079c6:	492a      	ldr	r1, [pc, #168]	; (8007a70 <leds_setBlink+0x7bc>)
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	4613      	mov	r3, r2
 80079cc:	011b      	lsls	r3, r3, #4
 80079ce:	4413      	add	r3, r2
 80079d0:	00db      	lsls	r3, r3, #3
 80079d2:	440b      	add	r3, r1
 80079d4:	3324      	adds	r3, #36	; 0x24
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	b2d8      	uxtb	r0, r3
 80079da:	4925      	ldr	r1, [pc, #148]	; (8007a70 <leds_setBlink+0x7bc>)
 80079dc:	68fa      	ldr	r2, [r7, #12]
 80079de:	4613      	mov	r3, r2
 80079e0:	011b      	lsls	r3, r3, #4
 80079e2:	4413      	add	r3, r2
 80079e4:	00db      	lsls	r3, r3, #3
 80079e6:	440b      	add	r3, r1
 80079e8:	3354      	adds	r3, #84	; 0x54
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	4603      	mov	r3, r0
 80079f0:	6393      	str	r3, [r2, #56]	; 0x38
 80079f2:	e037      	b.n	8007a64 <leds_setBlink+0x7b0>
 80079f4:	491e      	ldr	r1, [pc, #120]	; (8007a70 <leds_setBlink+0x7bc>)
 80079f6:	68fa      	ldr	r2, [r7, #12]
 80079f8:	4613      	mov	r3, r2
 80079fa:	011b      	lsls	r3, r3, #4
 80079fc:	4413      	add	r3, r2
 80079fe:	00db      	lsls	r3, r3, #3
 8007a00:	440b      	add	r3, r1
 8007a02:	3358      	adds	r3, #88	; 0x58
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2b08      	cmp	r3, #8
 8007a08:	d116      	bne.n	8007a38 <leds_setBlink+0x784>
 8007a0a:	4919      	ldr	r1, [pc, #100]	; (8007a70 <leds_setBlink+0x7bc>)
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	4613      	mov	r3, r2
 8007a10:	011b      	lsls	r3, r3, #4
 8007a12:	4413      	add	r3, r2
 8007a14:	00db      	lsls	r3, r3, #3
 8007a16:	440b      	add	r3, r1
 8007a18:	3324      	adds	r3, #36	; 0x24
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	b2d8      	uxtb	r0, r3
 8007a1e:	4914      	ldr	r1, [pc, #80]	; (8007a70 <leds_setBlink+0x7bc>)
 8007a20:	68fa      	ldr	r2, [r7, #12]
 8007a22:	4613      	mov	r3, r2
 8007a24:	011b      	lsls	r3, r3, #4
 8007a26:	4413      	add	r3, r2
 8007a28:	00db      	lsls	r3, r3, #3
 8007a2a:	440b      	add	r3, r1
 8007a2c:	3354      	adds	r3, #84	; 0x54
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	4603      	mov	r3, r0
 8007a34:	63d3      	str	r3, [r2, #60]	; 0x3c
 8007a36:	e015      	b.n	8007a64 <leds_setBlink+0x7b0>
 8007a38:	490d      	ldr	r1, [pc, #52]	; (8007a70 <leds_setBlink+0x7bc>)
 8007a3a:	68fa      	ldr	r2, [r7, #12]
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	011b      	lsls	r3, r3, #4
 8007a40:	4413      	add	r3, r2
 8007a42:	00db      	lsls	r3, r3, #3
 8007a44:	440b      	add	r3, r1
 8007a46:	3324      	adds	r3, #36	; 0x24
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	b2d8      	uxtb	r0, r3
 8007a4c:	4908      	ldr	r1, [pc, #32]	; (8007a70 <leds_setBlink+0x7bc>)
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	4613      	mov	r3, r2
 8007a52:	011b      	lsls	r3, r3, #4
 8007a54:	4413      	add	r3, r2
 8007a56:	00db      	lsls	r3, r3, #3
 8007a58:	440b      	add	r3, r1
 8007a5a:	3354      	adds	r3, #84	; 0x54
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	4603      	mov	r3, r0
 8007a62:	6413      	str	r3, [r2, #64]	; 0x40
		}
	}

	return 1;
 8007a64:	2301      	movs	r3, #1
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3710      	adds	r7, #16
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	20000a44 	.word	0x20000a44

08007a74 <leds_setFade>:
  * @param  pwm_val - pwm value can be for pwm led from LEDS_MIN_PWM_VALUE to LEDS_MAX_PWM_VALUE
  * 					or 0xXXBBGGRR format for RGB led
  * @retval 1 if success, 0 if failed
  */
uint8_t leds_setFade(uint32_t s_led, uint32_t fade_time, uint32_t pwm_val)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	60b9      	str	r1, [r7, #8]
 8007a7e:	607a      	str	r2, [r7, #4]
#ifdef NO_LEDS
	return 1;
#endif //NO_LEDS

	if( s_led >= LEDS_NUM )
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d002      	beq.n	8007a8c <leds_setFade+0x18>
	{
		return 0;
 8007a86:	2300      	movs	r3, #0
 8007a88:	f000 bc27 	b.w	80082da <leds_setFade+0x866>
	}

	//PWM led
	if( leds_info.leds[s_led].type == led_pwm )
 8007a8c:	4998      	ldr	r1, [pc, #608]	; (8007cf0 <leds_setFade+0x27c>)
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	4613      	mov	r3, r2
 8007a92:	011b      	lsls	r3, r3, #4
 8007a94:	4413      	add	r3, r2
 8007a96:	00db      	lsls	r3, r3, #3
 8007a98:	440b      	add	r3, r1
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	f040 812a 	bne.w	8007cf8 <leds_setFade+0x284>
	{
		if( (pwm_val < LEDS_MIN_PWM_VALUE) || (pwm_val > LEDS_MAX_PWM_VALUE) )
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2bff      	cmp	r3, #255	; 0xff
 8007aa8:	d902      	bls.n	8007ab0 <leds_setFade+0x3c>
		{
			return 0;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	f000 bc15 	b.w	80082da <leds_setFade+0x866>
		}
		leds_info.leds[s_led].pwmch0_value0 = (uint8_t)leds_info.leds[s_led].pwmch0_cur_value;
 8007ab0:	498f      	ldr	r1, [pc, #572]	; (8007cf0 <leds_setFade+0x27c>)
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	4613      	mov	r3, r2
 8007ab6:	011b      	lsls	r3, r3, #4
 8007ab8:	4413      	add	r3, r2
 8007aba:	00db      	lsls	r3, r3, #3
 8007abc:	440b      	add	r3, r1
 8007abe:	3308      	adds	r3, #8
 8007ac0:	edd3 7a00 	vldr	s15, [r3]
 8007ac4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ac8:	edc7 7a00 	vstr	s15, [r7]
 8007acc:	783b      	ldrb	r3, [r7, #0]
 8007ace:	b2d8      	uxtb	r0, r3
 8007ad0:	4987      	ldr	r1, [pc, #540]	; (8007cf0 <leds_setFade+0x27c>)
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	4613      	mov	r3, r2
 8007ad6:	011b      	lsls	r3, r3, #4
 8007ad8:	4413      	add	r3, r2
 8007ada:	00db      	lsls	r3, r3, #3
 8007adc:	440b      	add	r3, r1
 8007ade:	330c      	adds	r3, #12
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].pwmch0_value1 = (uint8_t)pwm_val;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	b2d8      	uxtb	r0, r3
 8007ae8:	4981      	ldr	r1, [pc, #516]	; (8007cf0 <leds_setFade+0x27c>)
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	4613      	mov	r3, r2
 8007aee:	011b      	lsls	r3, r3, #4
 8007af0:	4413      	add	r3, r2
 8007af2:	00db      	lsls	r3, r3, #3
 8007af4:	440b      	add	r3, r1
 8007af6:	330d      	adds	r3, #13
 8007af8:	4602      	mov	r2, r0
 8007afa:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].anim_time_st0 = fade_time;
 8007afc:	497c      	ldr	r1, [pc, #496]	; (8007cf0 <leds_setFade+0x27c>)
 8007afe:	68fa      	ldr	r2, [r7, #12]
 8007b00:	4613      	mov	r3, r2
 8007b02:	011b      	lsls	r3, r3, #4
 8007b04:	4413      	add	r3, r2
 8007b06:	00db      	lsls	r3, r3, #3
 8007b08:	440b      	add	r3, r1
 8007b0a:	332c      	adds	r3, #44	; 0x2c
 8007b0c:	68ba      	ldr	r2, [r7, #8]
 8007b0e:	601a      	str	r2, [r3, #0]
		if( leds_info.leds[s_led].mode != led_fade )
 8007b10:	4977      	ldr	r1, [pc, #476]	; (8007cf0 <leds_setFade+0x27c>)
 8007b12:	68fa      	ldr	r2, [r7, #12]
 8007b14:	4613      	mov	r3, r2
 8007b16:	011b      	lsls	r3, r3, #4
 8007b18:	4413      	add	r3, r2
 8007b1a:	00db      	lsls	r3, r3, #3
 8007b1c:	440b      	add	r3, r1
 8007b1e:	3302      	adds	r3, #2
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	2b03      	cmp	r3, #3
 8007b26:	f000 83d7 	beq.w	80082d8 <leds_setFade+0x864>
		{
			leds_info.leds[s_led].step_cnt = fade_time / LEDS_FADE_STEP_TIME;
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	4a71      	ldr	r2, [pc, #452]	; (8007cf4 <leds_setFade+0x280>)
 8007b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b32:	0919      	lsrs	r1, r3, #4
 8007b34:	486e      	ldr	r0, [pc, #440]	; (8007cf0 <leds_setFade+0x27c>)
 8007b36:	68fa      	ldr	r2, [r7, #12]
 8007b38:	4613      	mov	r3, r2
 8007b3a:	011b      	lsls	r3, r3, #4
 8007b3c:	4413      	add	r3, r2
 8007b3e:	00db      	lsls	r3, r3, #3
 8007b40:	4403      	add	r3, r0
 8007b42:	3338      	adds	r3, #56	; 0x38
 8007b44:	6019      	str	r1, [r3, #0]
			if( leds_info.leds[s_led].step_cnt == 0 )
 8007b46:	496a      	ldr	r1, [pc, #424]	; (8007cf0 <leds_setFade+0x27c>)
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	011b      	lsls	r3, r3, #4
 8007b4e:	4413      	add	r3, r2
 8007b50:	00db      	lsls	r3, r3, #3
 8007b52:	440b      	add	r3, r1
 8007b54:	3338      	adds	r3, #56	; 0x38
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d109      	bne.n	8007b70 <leds_setFade+0xfc>
				leds_info.leds[s_led].step_cnt = 1;
 8007b5c:	4964      	ldr	r1, [pc, #400]	; (8007cf0 <leds_setFade+0x27c>)
 8007b5e:	68fa      	ldr	r2, [r7, #12]
 8007b60:	4613      	mov	r3, r2
 8007b62:	011b      	lsls	r3, r3, #4
 8007b64:	4413      	add	r3, r2
 8007b66:	00db      	lsls	r3, r3, #3
 8007b68:	440b      	add	r3, r1
 8007b6a:	3338      	adds	r3, #56	; 0x38
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	601a      	str	r2, [r3, #0]
			leds_info.leds[s_led].pwmch0_step = ((float)pwm_val - (float)leds_info.leds[s_led].pwmch0_value0) / (float)leds_info.leds[s_led].step_cnt;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	ee07 3a90 	vmov	s15, r3
 8007b76:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007b7a:	495d      	ldr	r1, [pc, #372]	; (8007cf0 <leds_setFade+0x27c>)
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	4613      	mov	r3, r2
 8007b80:	011b      	lsls	r3, r3, #4
 8007b82:	4413      	add	r3, r2
 8007b84:	00db      	lsls	r3, r3, #3
 8007b86:	440b      	add	r3, r1
 8007b88:	330c      	adds	r3, #12
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	ee07 3a90 	vmov	s15, r3
 8007b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b96:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007b9a:	4955      	ldr	r1, [pc, #340]	; (8007cf0 <leds_setFade+0x27c>)
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	4613      	mov	r3, r2
 8007ba0:	011b      	lsls	r3, r3, #4
 8007ba2:	4413      	add	r3, r2
 8007ba4:	00db      	lsls	r3, r3, #3
 8007ba6:	440b      	add	r3, r1
 8007ba8:	3338      	adds	r3, #56	; 0x38
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	ee07 3a90 	vmov	s15, r3
 8007bb0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007bb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bb8:	494d      	ldr	r1, [pc, #308]	; (8007cf0 <leds_setFade+0x27c>)
 8007bba:	68fa      	ldr	r2, [r7, #12]
 8007bbc:	4613      	mov	r3, r2
 8007bbe:	011b      	lsls	r3, r3, #4
 8007bc0:	4413      	add	r3, r2
 8007bc2:	00db      	lsls	r3, r3, #3
 8007bc4:	440b      	add	r3, r1
 8007bc6:	3310      	adds	r3, #16
 8007bc8:	edc3 7a00 	vstr	s15, [r3]
			leds_info.leds[s_led].mode = led_fade;
 8007bcc:	4948      	ldr	r1, [pc, #288]	; (8007cf0 <leds_setFade+0x27c>)
 8007bce:	68fa      	ldr	r2, [r7, #12]
 8007bd0:	4613      	mov	r3, r2
 8007bd2:	011b      	lsls	r3, r3, #4
 8007bd4:	4413      	add	r3, r2
 8007bd6:	00db      	lsls	r3, r3, #3
 8007bd8:	440b      	add	r3, r1
 8007bda:	3302      	adds	r3, #2
 8007bdc:	2203      	movs	r2, #3
 8007bde:	701a      	strb	r2, [r3, #0]
			leds_info.leds[s_led].timer = LEDS_FADE_STEP_TIME;
 8007be0:	4943      	ldr	r1, [pc, #268]	; (8007cf0 <leds_setFade+0x27c>)
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	4613      	mov	r3, r2
 8007be6:	011b      	lsls	r3, r3, #4
 8007be8:	4413      	add	r3, r2
 8007bea:	00db      	lsls	r3, r3, #3
 8007bec:	440b      	add	r3, r1
 8007bee:	3304      	adds	r3, #4
 8007bf0:	2214      	movs	r2, #20
 8007bf2:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(leds_info.leds[s_led].pwmch0_tim, leds_info.leds[s_led].pwmch0_timch, leds_info.leds[s_led].pwmch0_value0);
 8007bf4:	493e      	ldr	r1, [pc, #248]	; (8007cf0 <leds_setFade+0x27c>)
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	4613      	mov	r3, r2
 8007bfa:	011b      	lsls	r3, r3, #4
 8007bfc:	4413      	add	r3, r2
 8007bfe:	00db      	lsls	r3, r3, #3
 8007c00:	440b      	add	r3, r1
 8007c02:	3348      	adds	r3, #72	; 0x48
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d116      	bne.n	8007c38 <leds_setFade+0x1c4>
 8007c0a:	4939      	ldr	r1, [pc, #228]	; (8007cf0 <leds_setFade+0x27c>)
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	4613      	mov	r3, r2
 8007c10:	011b      	lsls	r3, r3, #4
 8007c12:	4413      	add	r3, r2
 8007c14:	00db      	lsls	r3, r3, #3
 8007c16:	440b      	add	r3, r1
 8007c18:	330c      	adds	r3, #12
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	b2d8      	uxtb	r0, r3
 8007c1e:	4934      	ldr	r1, [pc, #208]	; (8007cf0 <leds_setFade+0x27c>)
 8007c20:	68fa      	ldr	r2, [r7, #12]
 8007c22:	4613      	mov	r3, r2
 8007c24:	011b      	lsls	r3, r3, #4
 8007c26:	4413      	add	r3, r2
 8007c28:	00db      	lsls	r3, r3, #3
 8007c2a:	440b      	add	r3, r1
 8007c2c:	3344      	adds	r3, #68	; 0x44
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4602      	mov	r2, r0
 8007c34:	635a      	str	r2, [r3, #52]	; 0x34
 8007c36:	e34f      	b.n	80082d8 <leds_setFade+0x864>
 8007c38:	492d      	ldr	r1, [pc, #180]	; (8007cf0 <leds_setFade+0x27c>)
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	4613      	mov	r3, r2
 8007c3e:	011b      	lsls	r3, r3, #4
 8007c40:	4413      	add	r3, r2
 8007c42:	00db      	lsls	r3, r3, #3
 8007c44:	440b      	add	r3, r1
 8007c46:	3348      	adds	r3, #72	; 0x48
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2b04      	cmp	r3, #4
 8007c4c:	d116      	bne.n	8007c7c <leds_setFade+0x208>
 8007c4e:	4928      	ldr	r1, [pc, #160]	; (8007cf0 <leds_setFade+0x27c>)
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	4613      	mov	r3, r2
 8007c54:	011b      	lsls	r3, r3, #4
 8007c56:	4413      	add	r3, r2
 8007c58:	00db      	lsls	r3, r3, #3
 8007c5a:	440b      	add	r3, r1
 8007c5c:	330c      	adds	r3, #12
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	b2d8      	uxtb	r0, r3
 8007c62:	4923      	ldr	r1, [pc, #140]	; (8007cf0 <leds_setFade+0x27c>)
 8007c64:	68fa      	ldr	r2, [r7, #12]
 8007c66:	4613      	mov	r3, r2
 8007c68:	011b      	lsls	r3, r3, #4
 8007c6a:	4413      	add	r3, r2
 8007c6c:	00db      	lsls	r3, r3, #3
 8007c6e:	440b      	add	r3, r1
 8007c70:	3344      	adds	r3, #68	; 0x44
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	4603      	mov	r3, r0
 8007c78:	6393      	str	r3, [r2, #56]	; 0x38
 8007c7a:	e32d      	b.n	80082d8 <leds_setFade+0x864>
 8007c7c:	491c      	ldr	r1, [pc, #112]	; (8007cf0 <leds_setFade+0x27c>)
 8007c7e:	68fa      	ldr	r2, [r7, #12]
 8007c80:	4613      	mov	r3, r2
 8007c82:	011b      	lsls	r3, r3, #4
 8007c84:	4413      	add	r3, r2
 8007c86:	00db      	lsls	r3, r3, #3
 8007c88:	440b      	add	r3, r1
 8007c8a:	3348      	adds	r3, #72	; 0x48
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2b08      	cmp	r3, #8
 8007c90:	d116      	bne.n	8007cc0 <leds_setFade+0x24c>
 8007c92:	4917      	ldr	r1, [pc, #92]	; (8007cf0 <leds_setFade+0x27c>)
 8007c94:	68fa      	ldr	r2, [r7, #12]
 8007c96:	4613      	mov	r3, r2
 8007c98:	011b      	lsls	r3, r3, #4
 8007c9a:	4413      	add	r3, r2
 8007c9c:	00db      	lsls	r3, r3, #3
 8007c9e:	440b      	add	r3, r1
 8007ca0:	330c      	adds	r3, #12
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	b2d8      	uxtb	r0, r3
 8007ca6:	4912      	ldr	r1, [pc, #72]	; (8007cf0 <leds_setFade+0x27c>)
 8007ca8:	68fa      	ldr	r2, [r7, #12]
 8007caa:	4613      	mov	r3, r2
 8007cac:	011b      	lsls	r3, r3, #4
 8007cae:	4413      	add	r3, r2
 8007cb0:	00db      	lsls	r3, r3, #3
 8007cb2:	440b      	add	r3, r1
 8007cb4:	3344      	adds	r3, #68	; 0x44
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	4603      	mov	r3, r0
 8007cbc:	63d3      	str	r3, [r2, #60]	; 0x3c
 8007cbe:	e30b      	b.n	80082d8 <leds_setFade+0x864>
 8007cc0:	490b      	ldr	r1, [pc, #44]	; (8007cf0 <leds_setFade+0x27c>)
 8007cc2:	68fa      	ldr	r2, [r7, #12]
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	011b      	lsls	r3, r3, #4
 8007cc8:	4413      	add	r3, r2
 8007cca:	00db      	lsls	r3, r3, #3
 8007ccc:	440b      	add	r3, r1
 8007cce:	330c      	adds	r3, #12
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	b2d8      	uxtb	r0, r3
 8007cd4:	4906      	ldr	r1, [pc, #24]	; (8007cf0 <leds_setFade+0x27c>)
 8007cd6:	68fa      	ldr	r2, [r7, #12]
 8007cd8:	4613      	mov	r3, r2
 8007cda:	011b      	lsls	r3, r3, #4
 8007cdc:	4413      	add	r3, r2
 8007cde:	00db      	lsls	r3, r3, #3
 8007ce0:	440b      	add	r3, r1
 8007ce2:	3344      	adds	r3, #68	; 0x44
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	4603      	mov	r3, r0
 8007cea:	6413      	str	r3, [r2, #64]	; 0x40
 8007cec:	e2f4      	b.n	80082d8 <leds_setFade+0x864>
 8007cee:	bf00      	nop
 8007cf0:	20000a44 	.word	0x20000a44
 8007cf4:	cccccccd 	.word	0xcccccccd
		}
	}
	//RGB
	else if( leds_info.leds[s_led].type == led_rgb )
 8007cf8:	49ca      	ldr	r1, [pc, #808]	; (8008024 <leds_setFade+0x5b0>)
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	4613      	mov	r3, r2
 8007cfe:	011b      	lsls	r3, r3, #4
 8007d00:	4413      	add	r3, r2
 8007d02:	00db      	lsls	r3, r3, #3
 8007d04:	440b      	add	r3, r1
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	f040 82e2 	bne.w	80082d4 <leds_setFade+0x860>
	{
		leds_info.leds[s_led].pwmch0_value0 = (uint8_t)leds_info.leds[s_led].pwmch0_cur_value;
 8007d10:	49c4      	ldr	r1, [pc, #784]	; (8008024 <leds_setFade+0x5b0>)
 8007d12:	68fa      	ldr	r2, [r7, #12]
 8007d14:	4613      	mov	r3, r2
 8007d16:	011b      	lsls	r3, r3, #4
 8007d18:	4413      	add	r3, r2
 8007d1a:	00db      	lsls	r3, r3, #3
 8007d1c:	440b      	add	r3, r1
 8007d1e:	3308      	adds	r3, #8
 8007d20:	edd3 7a00 	vldr	s15, [r3]
 8007d24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d28:	edc7 7a00 	vstr	s15, [r7]
 8007d2c:	783b      	ldrb	r3, [r7, #0]
 8007d2e:	b2d8      	uxtb	r0, r3
 8007d30:	49bc      	ldr	r1, [pc, #752]	; (8008024 <leds_setFade+0x5b0>)
 8007d32:	68fa      	ldr	r2, [r7, #12]
 8007d34:	4613      	mov	r3, r2
 8007d36:	011b      	lsls	r3, r3, #4
 8007d38:	4413      	add	r3, r2
 8007d3a:	00db      	lsls	r3, r3, #3
 8007d3c:	440b      	add	r3, r1
 8007d3e:	330c      	adds	r3, #12
 8007d40:	4602      	mov	r2, r0
 8007d42:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].pwmch0_value1 = (uint8_t)(pwm_val & 0xFF);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	b2d8      	uxtb	r0, r3
 8007d48:	49b6      	ldr	r1, [pc, #728]	; (8008024 <leds_setFade+0x5b0>)
 8007d4a:	68fa      	ldr	r2, [r7, #12]
 8007d4c:	4613      	mov	r3, r2
 8007d4e:	011b      	lsls	r3, r3, #4
 8007d50:	4413      	add	r3, r2
 8007d52:	00db      	lsls	r3, r3, #3
 8007d54:	440b      	add	r3, r1
 8007d56:	330d      	adds	r3, #13
 8007d58:	4602      	mov	r2, r0
 8007d5a:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].pwmch1_value0 = (uint8_t)leds_info.leds[s_led].pwmch1_cur_value;
 8007d5c:	49b1      	ldr	r1, [pc, #708]	; (8008024 <leds_setFade+0x5b0>)
 8007d5e:	68fa      	ldr	r2, [r7, #12]
 8007d60:	4613      	mov	r3, r2
 8007d62:	011b      	lsls	r3, r3, #4
 8007d64:	4413      	add	r3, r2
 8007d66:	00db      	lsls	r3, r3, #3
 8007d68:	440b      	add	r3, r1
 8007d6a:	3314      	adds	r3, #20
 8007d6c:	edd3 7a00 	vldr	s15, [r3]
 8007d70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d74:	edc7 7a00 	vstr	s15, [r7]
 8007d78:	783b      	ldrb	r3, [r7, #0]
 8007d7a:	b2d8      	uxtb	r0, r3
 8007d7c:	49a9      	ldr	r1, [pc, #676]	; (8008024 <leds_setFade+0x5b0>)
 8007d7e:	68fa      	ldr	r2, [r7, #12]
 8007d80:	4613      	mov	r3, r2
 8007d82:	011b      	lsls	r3, r3, #4
 8007d84:	4413      	add	r3, r2
 8007d86:	00db      	lsls	r3, r3, #3
 8007d88:	440b      	add	r3, r1
 8007d8a:	3318      	adds	r3, #24
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].pwmch1_value1 = (uint8_t)((pwm_val >> 8) & 0xFF);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	0a1b      	lsrs	r3, r3, #8
 8007d94:	b2d8      	uxtb	r0, r3
 8007d96:	49a3      	ldr	r1, [pc, #652]	; (8008024 <leds_setFade+0x5b0>)
 8007d98:	68fa      	ldr	r2, [r7, #12]
 8007d9a:	4613      	mov	r3, r2
 8007d9c:	011b      	lsls	r3, r3, #4
 8007d9e:	4413      	add	r3, r2
 8007da0:	00db      	lsls	r3, r3, #3
 8007da2:	440b      	add	r3, r1
 8007da4:	3319      	adds	r3, #25
 8007da6:	4602      	mov	r2, r0
 8007da8:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].pwmch2_value0 = (uint8_t)leds_info.leds[s_led].pwmch2_cur_value;
 8007daa:	499e      	ldr	r1, [pc, #632]	; (8008024 <leds_setFade+0x5b0>)
 8007dac:	68fa      	ldr	r2, [r7, #12]
 8007dae:	4613      	mov	r3, r2
 8007db0:	011b      	lsls	r3, r3, #4
 8007db2:	4413      	add	r3, r2
 8007db4:	00db      	lsls	r3, r3, #3
 8007db6:	440b      	add	r3, r1
 8007db8:	3320      	adds	r3, #32
 8007dba:	edd3 7a00 	vldr	s15, [r3]
 8007dbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dc2:	edc7 7a00 	vstr	s15, [r7]
 8007dc6:	783b      	ldrb	r3, [r7, #0]
 8007dc8:	b2d8      	uxtb	r0, r3
 8007dca:	4996      	ldr	r1, [pc, #600]	; (8008024 <leds_setFade+0x5b0>)
 8007dcc:	68fa      	ldr	r2, [r7, #12]
 8007dce:	4613      	mov	r3, r2
 8007dd0:	011b      	lsls	r3, r3, #4
 8007dd2:	4413      	add	r3, r2
 8007dd4:	00db      	lsls	r3, r3, #3
 8007dd6:	440b      	add	r3, r1
 8007dd8:	3324      	adds	r3, #36	; 0x24
 8007dda:	4602      	mov	r2, r0
 8007ddc:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].pwmch2_value1 = (uint8_t)((pwm_val >> 16) & 0xFF);;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	0c1b      	lsrs	r3, r3, #16
 8007de2:	b2d8      	uxtb	r0, r3
 8007de4:	498f      	ldr	r1, [pc, #572]	; (8008024 <leds_setFade+0x5b0>)
 8007de6:	68fa      	ldr	r2, [r7, #12]
 8007de8:	4613      	mov	r3, r2
 8007dea:	011b      	lsls	r3, r3, #4
 8007dec:	4413      	add	r3, r2
 8007dee:	00db      	lsls	r3, r3, #3
 8007df0:	440b      	add	r3, r1
 8007df2:	3325      	adds	r3, #37	; 0x25
 8007df4:	4602      	mov	r2, r0
 8007df6:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].anim_time_st0 = fade_time;
 8007df8:	498a      	ldr	r1, [pc, #552]	; (8008024 <leds_setFade+0x5b0>)
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	4613      	mov	r3, r2
 8007dfe:	011b      	lsls	r3, r3, #4
 8007e00:	4413      	add	r3, r2
 8007e02:	00db      	lsls	r3, r3, #3
 8007e04:	440b      	add	r3, r1
 8007e06:	332c      	adds	r3, #44	; 0x2c
 8007e08:	68ba      	ldr	r2, [r7, #8]
 8007e0a:	601a      	str	r2, [r3, #0]
		if( leds_info.leds[s_led].mode != led_fade )
 8007e0c:	4985      	ldr	r1, [pc, #532]	; (8008024 <leds_setFade+0x5b0>)
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	4613      	mov	r3, r2
 8007e12:	011b      	lsls	r3, r3, #4
 8007e14:	4413      	add	r3, r2
 8007e16:	00db      	lsls	r3, r3, #3
 8007e18:	440b      	add	r3, r1
 8007e1a:	3302      	adds	r3, #2
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	2b03      	cmp	r3, #3
 8007e22:	f000 8259 	beq.w	80082d8 <leds_setFade+0x864>
		{
			leds_info.leds[s_led].step_cnt = fade_time / LEDS_FADE_STEP_TIME;
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	4a7f      	ldr	r2, [pc, #508]	; (8008028 <leds_setFade+0x5b4>)
 8007e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e2e:	0919      	lsrs	r1, r3, #4
 8007e30:	487c      	ldr	r0, [pc, #496]	; (8008024 <leds_setFade+0x5b0>)
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	4613      	mov	r3, r2
 8007e36:	011b      	lsls	r3, r3, #4
 8007e38:	4413      	add	r3, r2
 8007e3a:	00db      	lsls	r3, r3, #3
 8007e3c:	4403      	add	r3, r0
 8007e3e:	3338      	adds	r3, #56	; 0x38
 8007e40:	6019      	str	r1, [r3, #0]
			if( leds_info.leds[s_led].step_cnt == 0 )
 8007e42:	4978      	ldr	r1, [pc, #480]	; (8008024 <leds_setFade+0x5b0>)
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	4613      	mov	r3, r2
 8007e48:	011b      	lsls	r3, r3, #4
 8007e4a:	4413      	add	r3, r2
 8007e4c:	00db      	lsls	r3, r3, #3
 8007e4e:	440b      	add	r3, r1
 8007e50:	3338      	adds	r3, #56	; 0x38
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d109      	bne.n	8007e6c <leds_setFade+0x3f8>
				leds_info.leds[s_led].step_cnt = 1;
 8007e58:	4972      	ldr	r1, [pc, #456]	; (8008024 <leds_setFade+0x5b0>)
 8007e5a:	68fa      	ldr	r2, [r7, #12]
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	011b      	lsls	r3, r3, #4
 8007e60:	4413      	add	r3, r2
 8007e62:	00db      	lsls	r3, r3, #3
 8007e64:	440b      	add	r3, r1
 8007e66:	3338      	adds	r3, #56	; 0x38
 8007e68:	2201      	movs	r2, #1
 8007e6a:	601a      	str	r2, [r3, #0]
			leds_info.leds[s_led].pwmch0_step = ((float)leds_info.leds[s_led].pwmch0_value1 - (float)leds_info.leds[s_led].pwmch0_value0) / (float)leds_info.leds[s_led].step_cnt;
 8007e6c:	496d      	ldr	r1, [pc, #436]	; (8008024 <leds_setFade+0x5b0>)
 8007e6e:	68fa      	ldr	r2, [r7, #12]
 8007e70:	4613      	mov	r3, r2
 8007e72:	011b      	lsls	r3, r3, #4
 8007e74:	4413      	add	r3, r2
 8007e76:	00db      	lsls	r3, r3, #3
 8007e78:	440b      	add	r3, r1
 8007e7a:	330d      	adds	r3, #13
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	ee07 3a90 	vmov	s15, r3
 8007e84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007e88:	4966      	ldr	r1, [pc, #408]	; (8008024 <leds_setFade+0x5b0>)
 8007e8a:	68fa      	ldr	r2, [r7, #12]
 8007e8c:	4613      	mov	r3, r2
 8007e8e:	011b      	lsls	r3, r3, #4
 8007e90:	4413      	add	r3, r2
 8007e92:	00db      	lsls	r3, r3, #3
 8007e94:	440b      	add	r3, r1
 8007e96:	330c      	adds	r3, #12
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	ee07 3a90 	vmov	s15, r3
 8007ea0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ea4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007ea8:	495e      	ldr	r1, [pc, #376]	; (8008024 <leds_setFade+0x5b0>)
 8007eaa:	68fa      	ldr	r2, [r7, #12]
 8007eac:	4613      	mov	r3, r2
 8007eae:	011b      	lsls	r3, r3, #4
 8007eb0:	4413      	add	r3, r2
 8007eb2:	00db      	lsls	r3, r3, #3
 8007eb4:	440b      	add	r3, r1
 8007eb6:	3338      	adds	r3, #56	; 0x38
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	ee07 3a90 	vmov	s15, r3
 8007ebe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007ec2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ec6:	4957      	ldr	r1, [pc, #348]	; (8008024 <leds_setFade+0x5b0>)
 8007ec8:	68fa      	ldr	r2, [r7, #12]
 8007eca:	4613      	mov	r3, r2
 8007ecc:	011b      	lsls	r3, r3, #4
 8007ece:	4413      	add	r3, r2
 8007ed0:	00db      	lsls	r3, r3, #3
 8007ed2:	440b      	add	r3, r1
 8007ed4:	3310      	adds	r3, #16
 8007ed6:	edc3 7a00 	vstr	s15, [r3]
			leds_info.leds[s_led].pwmch1_step = ((float)leds_info.leds[s_led].pwmch1_value1 - (float)leds_info.leds[s_led].pwmch1_value0) / (float)leds_info.leds[s_led].step_cnt;
 8007eda:	4952      	ldr	r1, [pc, #328]	; (8008024 <leds_setFade+0x5b0>)
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	4613      	mov	r3, r2
 8007ee0:	011b      	lsls	r3, r3, #4
 8007ee2:	4413      	add	r3, r2
 8007ee4:	00db      	lsls	r3, r3, #3
 8007ee6:	440b      	add	r3, r1
 8007ee8:	3319      	adds	r3, #25
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	ee07 3a90 	vmov	s15, r3
 8007ef2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007ef6:	494b      	ldr	r1, [pc, #300]	; (8008024 <leds_setFade+0x5b0>)
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	4613      	mov	r3, r2
 8007efc:	011b      	lsls	r3, r3, #4
 8007efe:	4413      	add	r3, r2
 8007f00:	00db      	lsls	r3, r3, #3
 8007f02:	440b      	add	r3, r1
 8007f04:	3318      	adds	r3, #24
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	ee07 3a90 	vmov	s15, r3
 8007f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f12:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007f16:	4943      	ldr	r1, [pc, #268]	; (8008024 <leds_setFade+0x5b0>)
 8007f18:	68fa      	ldr	r2, [r7, #12]
 8007f1a:	4613      	mov	r3, r2
 8007f1c:	011b      	lsls	r3, r3, #4
 8007f1e:	4413      	add	r3, r2
 8007f20:	00db      	lsls	r3, r3, #3
 8007f22:	440b      	add	r3, r1
 8007f24:	3338      	adds	r3, #56	; 0x38
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	ee07 3a90 	vmov	s15, r3
 8007f2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007f30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f34:	493b      	ldr	r1, [pc, #236]	; (8008024 <leds_setFade+0x5b0>)
 8007f36:	68fa      	ldr	r2, [r7, #12]
 8007f38:	4613      	mov	r3, r2
 8007f3a:	011b      	lsls	r3, r3, #4
 8007f3c:	4413      	add	r3, r2
 8007f3e:	00db      	lsls	r3, r3, #3
 8007f40:	440b      	add	r3, r1
 8007f42:	331c      	adds	r3, #28
 8007f44:	edc3 7a00 	vstr	s15, [r3]
			leds_info.leds[s_led].pwmch2_step = ((float)leds_info.leds[s_led].pwmch2_value1 - (float)leds_info.leds[s_led].pwmch2_value0) / (float)leds_info.leds[s_led].step_cnt;
 8007f48:	4936      	ldr	r1, [pc, #216]	; (8008024 <leds_setFade+0x5b0>)
 8007f4a:	68fa      	ldr	r2, [r7, #12]
 8007f4c:	4613      	mov	r3, r2
 8007f4e:	011b      	lsls	r3, r3, #4
 8007f50:	4413      	add	r3, r2
 8007f52:	00db      	lsls	r3, r3, #3
 8007f54:	440b      	add	r3, r1
 8007f56:	3325      	adds	r3, #37	; 0x25
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	ee07 3a90 	vmov	s15, r3
 8007f60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007f64:	492f      	ldr	r1, [pc, #188]	; (8008024 <leds_setFade+0x5b0>)
 8007f66:	68fa      	ldr	r2, [r7, #12]
 8007f68:	4613      	mov	r3, r2
 8007f6a:	011b      	lsls	r3, r3, #4
 8007f6c:	4413      	add	r3, r2
 8007f6e:	00db      	lsls	r3, r3, #3
 8007f70:	440b      	add	r3, r1
 8007f72:	3324      	adds	r3, #36	; 0x24
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	ee07 3a90 	vmov	s15, r3
 8007f7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f80:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007f84:	4927      	ldr	r1, [pc, #156]	; (8008024 <leds_setFade+0x5b0>)
 8007f86:	68fa      	ldr	r2, [r7, #12]
 8007f88:	4613      	mov	r3, r2
 8007f8a:	011b      	lsls	r3, r3, #4
 8007f8c:	4413      	add	r3, r2
 8007f8e:	00db      	lsls	r3, r3, #3
 8007f90:	440b      	add	r3, r1
 8007f92:	3338      	adds	r3, #56	; 0x38
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	ee07 3a90 	vmov	s15, r3
 8007f9a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007f9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fa2:	4920      	ldr	r1, [pc, #128]	; (8008024 <leds_setFade+0x5b0>)
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	011b      	lsls	r3, r3, #4
 8007faa:	4413      	add	r3, r2
 8007fac:	00db      	lsls	r3, r3, #3
 8007fae:	440b      	add	r3, r1
 8007fb0:	3328      	adds	r3, #40	; 0x28
 8007fb2:	edc3 7a00 	vstr	s15, [r3]
			leds_info.leds[s_led].mode = led_fade;
 8007fb6:	491b      	ldr	r1, [pc, #108]	; (8008024 <leds_setFade+0x5b0>)
 8007fb8:	68fa      	ldr	r2, [r7, #12]
 8007fba:	4613      	mov	r3, r2
 8007fbc:	011b      	lsls	r3, r3, #4
 8007fbe:	4413      	add	r3, r2
 8007fc0:	00db      	lsls	r3, r3, #3
 8007fc2:	440b      	add	r3, r1
 8007fc4:	3302      	adds	r3, #2
 8007fc6:	2203      	movs	r2, #3
 8007fc8:	701a      	strb	r2, [r3, #0]
			leds_info.leds[s_led].timer = LEDS_FADE_STEP_TIME;
 8007fca:	4916      	ldr	r1, [pc, #88]	; (8008024 <leds_setFade+0x5b0>)
 8007fcc:	68fa      	ldr	r2, [r7, #12]
 8007fce:	4613      	mov	r3, r2
 8007fd0:	011b      	lsls	r3, r3, #4
 8007fd2:	4413      	add	r3, r2
 8007fd4:	00db      	lsls	r3, r3, #3
 8007fd6:	440b      	add	r3, r1
 8007fd8:	3304      	adds	r3, #4
 8007fda:	2214      	movs	r2, #20
 8007fdc:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(leds_info.leds[s_led].pwmch0_tim, leds_info.leds[s_led].pwmch0_timch, leds_info.leds[s_led].pwmch0_value0);
 8007fde:	4911      	ldr	r1, [pc, #68]	; (8008024 <leds_setFade+0x5b0>)
 8007fe0:	68fa      	ldr	r2, [r7, #12]
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	011b      	lsls	r3, r3, #4
 8007fe6:	4413      	add	r3, r2
 8007fe8:	00db      	lsls	r3, r3, #3
 8007fea:	440b      	add	r3, r1
 8007fec:	3348      	adds	r3, #72	; 0x48
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d11c      	bne.n	800802e <leds_setFade+0x5ba>
 8007ff4:	490b      	ldr	r1, [pc, #44]	; (8008024 <leds_setFade+0x5b0>)
 8007ff6:	68fa      	ldr	r2, [r7, #12]
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	011b      	lsls	r3, r3, #4
 8007ffc:	4413      	add	r3, r2
 8007ffe:	00db      	lsls	r3, r3, #3
 8008000:	440b      	add	r3, r1
 8008002:	330c      	adds	r3, #12
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	b2d8      	uxtb	r0, r3
 8008008:	4906      	ldr	r1, [pc, #24]	; (8008024 <leds_setFade+0x5b0>)
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	4613      	mov	r3, r2
 800800e:	011b      	lsls	r3, r3, #4
 8008010:	4413      	add	r3, r2
 8008012:	00db      	lsls	r3, r3, #3
 8008014:	440b      	add	r3, r1
 8008016:	3344      	adds	r3, #68	; 0x44
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4602      	mov	r2, r0
 800801e:	635a      	str	r2, [r3, #52]	; 0x34
 8008020:	e004      	b.n	800802c <leds_setFade+0x5b8>
 8008022:	bf00      	nop
 8008024:	20000a44 	.word	0x20000a44
 8008028:	cccccccd 	.word	0xcccccccd
 800802c:	e059      	b.n	80080e2 <leds_setFade+0x66e>
 800802e:	49ae      	ldr	r1, [pc, #696]	; (80082e8 <leds_setFade+0x874>)
 8008030:	68fa      	ldr	r2, [r7, #12]
 8008032:	4613      	mov	r3, r2
 8008034:	011b      	lsls	r3, r3, #4
 8008036:	4413      	add	r3, r2
 8008038:	00db      	lsls	r3, r3, #3
 800803a:	440b      	add	r3, r1
 800803c:	3348      	adds	r3, #72	; 0x48
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2b04      	cmp	r3, #4
 8008042:	d116      	bne.n	8008072 <leds_setFade+0x5fe>
 8008044:	49a8      	ldr	r1, [pc, #672]	; (80082e8 <leds_setFade+0x874>)
 8008046:	68fa      	ldr	r2, [r7, #12]
 8008048:	4613      	mov	r3, r2
 800804a:	011b      	lsls	r3, r3, #4
 800804c:	4413      	add	r3, r2
 800804e:	00db      	lsls	r3, r3, #3
 8008050:	440b      	add	r3, r1
 8008052:	330c      	adds	r3, #12
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	b2d8      	uxtb	r0, r3
 8008058:	49a3      	ldr	r1, [pc, #652]	; (80082e8 <leds_setFade+0x874>)
 800805a:	68fa      	ldr	r2, [r7, #12]
 800805c:	4613      	mov	r3, r2
 800805e:	011b      	lsls	r3, r3, #4
 8008060:	4413      	add	r3, r2
 8008062:	00db      	lsls	r3, r3, #3
 8008064:	440b      	add	r3, r1
 8008066:	3344      	adds	r3, #68	; 0x44
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	4603      	mov	r3, r0
 800806e:	6393      	str	r3, [r2, #56]	; 0x38
 8008070:	e037      	b.n	80080e2 <leds_setFade+0x66e>
 8008072:	499d      	ldr	r1, [pc, #628]	; (80082e8 <leds_setFade+0x874>)
 8008074:	68fa      	ldr	r2, [r7, #12]
 8008076:	4613      	mov	r3, r2
 8008078:	011b      	lsls	r3, r3, #4
 800807a:	4413      	add	r3, r2
 800807c:	00db      	lsls	r3, r3, #3
 800807e:	440b      	add	r3, r1
 8008080:	3348      	adds	r3, #72	; 0x48
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2b08      	cmp	r3, #8
 8008086:	d116      	bne.n	80080b6 <leds_setFade+0x642>
 8008088:	4997      	ldr	r1, [pc, #604]	; (80082e8 <leds_setFade+0x874>)
 800808a:	68fa      	ldr	r2, [r7, #12]
 800808c:	4613      	mov	r3, r2
 800808e:	011b      	lsls	r3, r3, #4
 8008090:	4413      	add	r3, r2
 8008092:	00db      	lsls	r3, r3, #3
 8008094:	440b      	add	r3, r1
 8008096:	330c      	adds	r3, #12
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	b2d8      	uxtb	r0, r3
 800809c:	4992      	ldr	r1, [pc, #584]	; (80082e8 <leds_setFade+0x874>)
 800809e:	68fa      	ldr	r2, [r7, #12]
 80080a0:	4613      	mov	r3, r2
 80080a2:	011b      	lsls	r3, r3, #4
 80080a4:	4413      	add	r3, r2
 80080a6:	00db      	lsls	r3, r3, #3
 80080a8:	440b      	add	r3, r1
 80080aa:	3344      	adds	r3, #68	; 0x44
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	4603      	mov	r3, r0
 80080b2:	63d3      	str	r3, [r2, #60]	; 0x3c
 80080b4:	e015      	b.n	80080e2 <leds_setFade+0x66e>
 80080b6:	498c      	ldr	r1, [pc, #560]	; (80082e8 <leds_setFade+0x874>)
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	4613      	mov	r3, r2
 80080bc:	011b      	lsls	r3, r3, #4
 80080be:	4413      	add	r3, r2
 80080c0:	00db      	lsls	r3, r3, #3
 80080c2:	440b      	add	r3, r1
 80080c4:	330c      	adds	r3, #12
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	b2d8      	uxtb	r0, r3
 80080ca:	4987      	ldr	r1, [pc, #540]	; (80082e8 <leds_setFade+0x874>)
 80080cc:	68fa      	ldr	r2, [r7, #12]
 80080ce:	4613      	mov	r3, r2
 80080d0:	011b      	lsls	r3, r3, #4
 80080d2:	4413      	add	r3, r2
 80080d4:	00db      	lsls	r3, r3, #3
 80080d6:	440b      	add	r3, r1
 80080d8:	3344      	adds	r3, #68	; 0x44
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	4603      	mov	r3, r0
 80080e0:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(leds_info.leds[s_led].pwmch1_tim, leds_info.leds[s_led].pwmch1_timch, leds_info.leds[s_led].pwmch1_value0);
 80080e2:	4981      	ldr	r1, [pc, #516]	; (80082e8 <leds_setFade+0x874>)
 80080e4:	68fa      	ldr	r2, [r7, #12]
 80080e6:	4613      	mov	r3, r2
 80080e8:	011b      	lsls	r3, r3, #4
 80080ea:	4413      	add	r3, r2
 80080ec:	00db      	lsls	r3, r3, #3
 80080ee:	440b      	add	r3, r1
 80080f0:	3350      	adds	r3, #80	; 0x50
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d116      	bne.n	8008126 <leds_setFade+0x6b2>
 80080f8:	497b      	ldr	r1, [pc, #492]	; (80082e8 <leds_setFade+0x874>)
 80080fa:	68fa      	ldr	r2, [r7, #12]
 80080fc:	4613      	mov	r3, r2
 80080fe:	011b      	lsls	r3, r3, #4
 8008100:	4413      	add	r3, r2
 8008102:	00db      	lsls	r3, r3, #3
 8008104:	440b      	add	r3, r1
 8008106:	3318      	adds	r3, #24
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	b2d8      	uxtb	r0, r3
 800810c:	4976      	ldr	r1, [pc, #472]	; (80082e8 <leds_setFade+0x874>)
 800810e:	68fa      	ldr	r2, [r7, #12]
 8008110:	4613      	mov	r3, r2
 8008112:	011b      	lsls	r3, r3, #4
 8008114:	4413      	add	r3, r2
 8008116:	00db      	lsls	r3, r3, #3
 8008118:	440b      	add	r3, r1
 800811a:	334c      	adds	r3, #76	; 0x4c
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4602      	mov	r2, r0
 8008122:	635a      	str	r2, [r3, #52]	; 0x34
 8008124:	e059      	b.n	80081da <leds_setFade+0x766>
 8008126:	4970      	ldr	r1, [pc, #448]	; (80082e8 <leds_setFade+0x874>)
 8008128:	68fa      	ldr	r2, [r7, #12]
 800812a:	4613      	mov	r3, r2
 800812c:	011b      	lsls	r3, r3, #4
 800812e:	4413      	add	r3, r2
 8008130:	00db      	lsls	r3, r3, #3
 8008132:	440b      	add	r3, r1
 8008134:	3350      	adds	r3, #80	; 0x50
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	2b04      	cmp	r3, #4
 800813a:	d116      	bne.n	800816a <leds_setFade+0x6f6>
 800813c:	496a      	ldr	r1, [pc, #424]	; (80082e8 <leds_setFade+0x874>)
 800813e:	68fa      	ldr	r2, [r7, #12]
 8008140:	4613      	mov	r3, r2
 8008142:	011b      	lsls	r3, r3, #4
 8008144:	4413      	add	r3, r2
 8008146:	00db      	lsls	r3, r3, #3
 8008148:	440b      	add	r3, r1
 800814a:	3318      	adds	r3, #24
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	b2d8      	uxtb	r0, r3
 8008150:	4965      	ldr	r1, [pc, #404]	; (80082e8 <leds_setFade+0x874>)
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	4613      	mov	r3, r2
 8008156:	011b      	lsls	r3, r3, #4
 8008158:	4413      	add	r3, r2
 800815a:	00db      	lsls	r3, r3, #3
 800815c:	440b      	add	r3, r1
 800815e:	334c      	adds	r3, #76	; 0x4c
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	4603      	mov	r3, r0
 8008166:	6393      	str	r3, [r2, #56]	; 0x38
 8008168:	e037      	b.n	80081da <leds_setFade+0x766>
 800816a:	495f      	ldr	r1, [pc, #380]	; (80082e8 <leds_setFade+0x874>)
 800816c:	68fa      	ldr	r2, [r7, #12]
 800816e:	4613      	mov	r3, r2
 8008170:	011b      	lsls	r3, r3, #4
 8008172:	4413      	add	r3, r2
 8008174:	00db      	lsls	r3, r3, #3
 8008176:	440b      	add	r3, r1
 8008178:	3350      	adds	r3, #80	; 0x50
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2b08      	cmp	r3, #8
 800817e:	d116      	bne.n	80081ae <leds_setFade+0x73a>
 8008180:	4959      	ldr	r1, [pc, #356]	; (80082e8 <leds_setFade+0x874>)
 8008182:	68fa      	ldr	r2, [r7, #12]
 8008184:	4613      	mov	r3, r2
 8008186:	011b      	lsls	r3, r3, #4
 8008188:	4413      	add	r3, r2
 800818a:	00db      	lsls	r3, r3, #3
 800818c:	440b      	add	r3, r1
 800818e:	3318      	adds	r3, #24
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	b2d8      	uxtb	r0, r3
 8008194:	4954      	ldr	r1, [pc, #336]	; (80082e8 <leds_setFade+0x874>)
 8008196:	68fa      	ldr	r2, [r7, #12]
 8008198:	4613      	mov	r3, r2
 800819a:	011b      	lsls	r3, r3, #4
 800819c:	4413      	add	r3, r2
 800819e:	00db      	lsls	r3, r3, #3
 80081a0:	440b      	add	r3, r1
 80081a2:	334c      	adds	r3, #76	; 0x4c
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	4603      	mov	r3, r0
 80081aa:	63d3      	str	r3, [r2, #60]	; 0x3c
 80081ac:	e015      	b.n	80081da <leds_setFade+0x766>
 80081ae:	494e      	ldr	r1, [pc, #312]	; (80082e8 <leds_setFade+0x874>)
 80081b0:	68fa      	ldr	r2, [r7, #12]
 80081b2:	4613      	mov	r3, r2
 80081b4:	011b      	lsls	r3, r3, #4
 80081b6:	4413      	add	r3, r2
 80081b8:	00db      	lsls	r3, r3, #3
 80081ba:	440b      	add	r3, r1
 80081bc:	3318      	adds	r3, #24
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	b2d8      	uxtb	r0, r3
 80081c2:	4949      	ldr	r1, [pc, #292]	; (80082e8 <leds_setFade+0x874>)
 80081c4:	68fa      	ldr	r2, [r7, #12]
 80081c6:	4613      	mov	r3, r2
 80081c8:	011b      	lsls	r3, r3, #4
 80081ca:	4413      	add	r3, r2
 80081cc:	00db      	lsls	r3, r3, #3
 80081ce:	440b      	add	r3, r1
 80081d0:	334c      	adds	r3, #76	; 0x4c
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	4603      	mov	r3, r0
 80081d8:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(leds_info.leds[s_led].pwmch2_tim, leds_info.leds[s_led].pwmch2_timch, leds_info.leds[s_led].pwmch2_value0);
 80081da:	4943      	ldr	r1, [pc, #268]	; (80082e8 <leds_setFade+0x874>)
 80081dc:	68fa      	ldr	r2, [r7, #12]
 80081de:	4613      	mov	r3, r2
 80081e0:	011b      	lsls	r3, r3, #4
 80081e2:	4413      	add	r3, r2
 80081e4:	00db      	lsls	r3, r3, #3
 80081e6:	440b      	add	r3, r1
 80081e8:	3358      	adds	r3, #88	; 0x58
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d116      	bne.n	800821e <leds_setFade+0x7aa>
 80081f0:	493d      	ldr	r1, [pc, #244]	; (80082e8 <leds_setFade+0x874>)
 80081f2:	68fa      	ldr	r2, [r7, #12]
 80081f4:	4613      	mov	r3, r2
 80081f6:	011b      	lsls	r3, r3, #4
 80081f8:	4413      	add	r3, r2
 80081fa:	00db      	lsls	r3, r3, #3
 80081fc:	440b      	add	r3, r1
 80081fe:	3324      	adds	r3, #36	; 0x24
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	b2d8      	uxtb	r0, r3
 8008204:	4938      	ldr	r1, [pc, #224]	; (80082e8 <leds_setFade+0x874>)
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	4613      	mov	r3, r2
 800820a:	011b      	lsls	r3, r3, #4
 800820c:	4413      	add	r3, r2
 800820e:	00db      	lsls	r3, r3, #3
 8008210:	440b      	add	r3, r1
 8008212:	3354      	adds	r3, #84	; 0x54
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4602      	mov	r2, r0
 800821a:	635a      	str	r2, [r3, #52]	; 0x34
 800821c:	e05c      	b.n	80082d8 <leds_setFade+0x864>
 800821e:	4932      	ldr	r1, [pc, #200]	; (80082e8 <leds_setFade+0x874>)
 8008220:	68fa      	ldr	r2, [r7, #12]
 8008222:	4613      	mov	r3, r2
 8008224:	011b      	lsls	r3, r3, #4
 8008226:	4413      	add	r3, r2
 8008228:	00db      	lsls	r3, r3, #3
 800822a:	440b      	add	r3, r1
 800822c:	3358      	adds	r3, #88	; 0x58
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2b04      	cmp	r3, #4
 8008232:	d116      	bne.n	8008262 <leds_setFade+0x7ee>
 8008234:	492c      	ldr	r1, [pc, #176]	; (80082e8 <leds_setFade+0x874>)
 8008236:	68fa      	ldr	r2, [r7, #12]
 8008238:	4613      	mov	r3, r2
 800823a:	011b      	lsls	r3, r3, #4
 800823c:	4413      	add	r3, r2
 800823e:	00db      	lsls	r3, r3, #3
 8008240:	440b      	add	r3, r1
 8008242:	3324      	adds	r3, #36	; 0x24
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	b2d8      	uxtb	r0, r3
 8008248:	4927      	ldr	r1, [pc, #156]	; (80082e8 <leds_setFade+0x874>)
 800824a:	68fa      	ldr	r2, [r7, #12]
 800824c:	4613      	mov	r3, r2
 800824e:	011b      	lsls	r3, r3, #4
 8008250:	4413      	add	r3, r2
 8008252:	00db      	lsls	r3, r3, #3
 8008254:	440b      	add	r3, r1
 8008256:	3354      	adds	r3, #84	; 0x54
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	4603      	mov	r3, r0
 800825e:	6393      	str	r3, [r2, #56]	; 0x38
 8008260:	e03a      	b.n	80082d8 <leds_setFade+0x864>
 8008262:	4921      	ldr	r1, [pc, #132]	; (80082e8 <leds_setFade+0x874>)
 8008264:	68fa      	ldr	r2, [r7, #12]
 8008266:	4613      	mov	r3, r2
 8008268:	011b      	lsls	r3, r3, #4
 800826a:	4413      	add	r3, r2
 800826c:	00db      	lsls	r3, r3, #3
 800826e:	440b      	add	r3, r1
 8008270:	3358      	adds	r3, #88	; 0x58
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	2b08      	cmp	r3, #8
 8008276:	d116      	bne.n	80082a6 <leds_setFade+0x832>
 8008278:	491b      	ldr	r1, [pc, #108]	; (80082e8 <leds_setFade+0x874>)
 800827a:	68fa      	ldr	r2, [r7, #12]
 800827c:	4613      	mov	r3, r2
 800827e:	011b      	lsls	r3, r3, #4
 8008280:	4413      	add	r3, r2
 8008282:	00db      	lsls	r3, r3, #3
 8008284:	440b      	add	r3, r1
 8008286:	3324      	adds	r3, #36	; 0x24
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	b2d8      	uxtb	r0, r3
 800828c:	4916      	ldr	r1, [pc, #88]	; (80082e8 <leds_setFade+0x874>)
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	4613      	mov	r3, r2
 8008292:	011b      	lsls	r3, r3, #4
 8008294:	4413      	add	r3, r2
 8008296:	00db      	lsls	r3, r3, #3
 8008298:	440b      	add	r3, r1
 800829a:	3354      	adds	r3, #84	; 0x54
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	4603      	mov	r3, r0
 80082a2:	63d3      	str	r3, [r2, #60]	; 0x3c
 80082a4:	e018      	b.n	80082d8 <leds_setFade+0x864>
 80082a6:	4910      	ldr	r1, [pc, #64]	; (80082e8 <leds_setFade+0x874>)
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	4613      	mov	r3, r2
 80082ac:	011b      	lsls	r3, r3, #4
 80082ae:	4413      	add	r3, r2
 80082b0:	00db      	lsls	r3, r3, #3
 80082b2:	440b      	add	r3, r1
 80082b4:	3324      	adds	r3, #36	; 0x24
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	b2d8      	uxtb	r0, r3
 80082ba:	490b      	ldr	r1, [pc, #44]	; (80082e8 <leds_setFade+0x874>)
 80082bc:	68fa      	ldr	r2, [r7, #12]
 80082be:	4613      	mov	r3, r2
 80082c0:	011b      	lsls	r3, r3, #4
 80082c2:	4413      	add	r3, r2
 80082c4:	00db      	lsls	r3, r3, #3
 80082c6:	440b      	add	r3, r1
 80082c8:	3354      	adds	r3, #84	; 0x54
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	4603      	mov	r3, r0
 80082d0:	6413      	str	r3, [r2, #64]	; 0x40
 80082d2:	e001      	b.n	80082d8 <leds_setFade+0x864>
		}
	}
	else
	{
		return 0;
 80082d4:	2300      	movs	r3, #0
 80082d6:	e000      	b.n	80082da <leds_setFade+0x866>
	}

	return 1;
 80082d8:	2301      	movs	r3, #1
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3714      	adds	r7, #20
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr
 80082e6:	bf00      	nop
 80082e8:	20000a44 	.word	0x20000a44

080082ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80082f0:	f003 fb0c 	bl	800b90c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80082f4:	f000 f814 	bl	8008320 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80082f8:	f000 f9be 	bl	8008678 <MX_GPIO_Init>
  MX_I2C1_Init();
 80082fc:	f000 f8ca 	bl	8008494 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8008300:	f000 f966 	bl	80085d0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8008304:	f000 f98e 	bl	8008624 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8008308:	f000 f8f2 	bl	80084f0 <MX_TIM3_Init>
  MX_ADC1_Init();
 800830c:	f000 f870 	bl	80083f0 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8008310:	f00d f97e 	bl	8015610 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  system_Init();
 8008314:	f003 f97a 	bl	800b60c <system_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  system_Task();
 8008318:	f003 f9a8 	bl	800b66c <system_Task>
 800831c:	e7fc      	b.n	8008318 <main+0x2c>
	...

08008320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b094      	sub	sp, #80	; 0x50
 8008324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008326:	f107 0320 	add.w	r3, r7, #32
 800832a:	2230      	movs	r2, #48	; 0x30
 800832c:	2100      	movs	r1, #0
 800832e:	4618      	mov	r0, r3
 8008330:	f00d fe96 	bl	8016060 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008334:	f107 030c 	add.w	r3, r7, #12
 8008338:	2200      	movs	r2, #0
 800833a:	601a      	str	r2, [r3, #0]
 800833c:	605a      	str	r2, [r3, #4]
 800833e:	609a      	str	r2, [r3, #8]
 8008340:	60da      	str	r2, [r3, #12]
 8008342:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008344:	2300      	movs	r3, #0
 8008346:	60bb      	str	r3, [r7, #8]
 8008348:	4b27      	ldr	r3, [pc, #156]	; (80083e8 <SystemClock_Config+0xc8>)
 800834a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800834c:	4a26      	ldr	r2, [pc, #152]	; (80083e8 <SystemClock_Config+0xc8>)
 800834e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008352:	6413      	str	r3, [r2, #64]	; 0x40
 8008354:	4b24      	ldr	r3, [pc, #144]	; (80083e8 <SystemClock_Config+0xc8>)
 8008356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800835c:	60bb      	str	r3, [r7, #8]
 800835e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008360:	2300      	movs	r3, #0
 8008362:	607b      	str	r3, [r7, #4]
 8008364:	4b21      	ldr	r3, [pc, #132]	; (80083ec <SystemClock_Config+0xcc>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a20      	ldr	r2, [pc, #128]	; (80083ec <SystemClock_Config+0xcc>)
 800836a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800836e:	6013      	str	r3, [r2, #0]
 8008370:	4b1e      	ldr	r3, [pc, #120]	; (80083ec <SystemClock_Config+0xcc>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008378:	607b      	str	r3, [r7, #4]
 800837a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800837c:	2301      	movs	r3, #1
 800837e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008380:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008384:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008386:	2302      	movs	r3, #2
 8008388:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800838a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800838e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8008390:	230f      	movs	r3, #15
 8008392:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8008394:	2390      	movs	r3, #144	; 0x90
 8008396:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8008398:	2304      	movs	r3, #4
 800839a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800839c:	2305      	movs	r3, #5
 800839e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80083a0:	f107 0320 	add.w	r3, r7, #32
 80083a4:	4618      	mov	r0, r3
 80083a6:	f007 f80d 	bl	800f3c4 <HAL_RCC_OscConfig>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d001      	beq.n	80083b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80083b0:	f000 fa68 	bl	8008884 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80083b4:	230f      	movs	r3, #15
 80083b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80083b8:	2302      	movs	r3, #2
 80083ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80083bc:	2300      	movs	r3, #0
 80083be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80083c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80083c6:	2300      	movs	r3, #0
 80083c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80083ca:	f107 030c 	add.w	r3, r7, #12
 80083ce:	2101      	movs	r1, #1
 80083d0:	4618      	mov	r0, r3
 80083d2:	f007 fa6f 	bl	800f8b4 <HAL_RCC_ClockConfig>
 80083d6:	4603      	mov	r3, r0
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d001      	beq.n	80083e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80083dc:	f000 fa52 	bl	8008884 <Error_Handler>
  }
}
 80083e0:	bf00      	nop
 80083e2:	3750      	adds	r7, #80	; 0x50
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	40023800 	.word	0x40023800
 80083ec:	40007000 	.word	0x40007000

080083f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80083f6:	463b      	mov	r3, r7
 80083f8:	2200      	movs	r2, #0
 80083fa:	601a      	str	r2, [r3, #0]
 80083fc:	605a      	str	r2, [r3, #4]
 80083fe:	609a      	str	r2, [r3, #8]
 8008400:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8008402:	4b21      	ldr	r3, [pc, #132]	; (8008488 <MX_ADC1_Init+0x98>)
 8008404:	4a21      	ldr	r2, [pc, #132]	; (800848c <MX_ADC1_Init+0x9c>)
 8008406:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8008408:	4b1f      	ldr	r3, [pc, #124]	; (8008488 <MX_ADC1_Init+0x98>)
 800840a:	2200      	movs	r2, #0
 800840c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800840e:	4b1e      	ldr	r3, [pc, #120]	; (8008488 <MX_ADC1_Init+0x98>)
 8008410:	2200      	movs	r2, #0
 8008412:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8008414:	4b1c      	ldr	r3, [pc, #112]	; (8008488 <MX_ADC1_Init+0x98>)
 8008416:	2200      	movs	r2, #0
 8008418:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800841a:	4b1b      	ldr	r3, [pc, #108]	; (8008488 <MX_ADC1_Init+0x98>)
 800841c:	2200      	movs	r2, #0
 800841e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008420:	4b19      	ldr	r3, [pc, #100]	; (8008488 <MX_ADC1_Init+0x98>)
 8008422:	2200      	movs	r2, #0
 8008424:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008428:	4b17      	ldr	r3, [pc, #92]	; (8008488 <MX_ADC1_Init+0x98>)
 800842a:	2200      	movs	r2, #0
 800842c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800842e:	4b16      	ldr	r3, [pc, #88]	; (8008488 <MX_ADC1_Init+0x98>)
 8008430:	4a17      	ldr	r2, [pc, #92]	; (8008490 <MX_ADC1_Init+0xa0>)
 8008432:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008434:	4b14      	ldr	r3, [pc, #80]	; (8008488 <MX_ADC1_Init+0x98>)
 8008436:	2200      	movs	r2, #0
 8008438:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800843a:	4b13      	ldr	r3, [pc, #76]	; (8008488 <MX_ADC1_Init+0x98>)
 800843c:	2201      	movs	r2, #1
 800843e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8008440:	4b11      	ldr	r3, [pc, #68]	; (8008488 <MX_ADC1_Init+0x98>)
 8008442:	2200      	movs	r2, #0
 8008444:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008448:	4b0f      	ldr	r3, [pc, #60]	; (8008488 <MX_ADC1_Init+0x98>)
 800844a:	2201      	movs	r2, #1
 800844c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800844e:	480e      	ldr	r0, [pc, #56]	; (8008488 <MX_ADC1_Init+0x98>)
 8008450:	f003 fac2 	bl	800b9d8 <HAL_ADC_Init>
 8008454:	4603      	mov	r3, r0
 8008456:	2b00      	cmp	r3, #0
 8008458:	d001      	beq.n	800845e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800845a:	f000 fa13 	bl	8008884 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800845e:	2300      	movs	r3, #0
 8008460:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8008462:	2301      	movs	r3, #1
 8008464:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8008466:	2300      	movs	r3, #0
 8008468:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800846a:	463b      	mov	r3, r7
 800846c:	4619      	mov	r1, r3
 800846e:	4806      	ldr	r0, [pc, #24]	; (8008488 <MX_ADC1_Init+0x98>)
 8008470:	f003 fce6 	bl	800be40 <HAL_ADC_ConfigChannel>
 8008474:	4603      	mov	r3, r0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d001      	beq.n	800847e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800847a:	f000 fa03 	bl	8008884 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800847e:	bf00      	nop
 8008480:	3710      	adds	r7, #16
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop
 8008488:	20000adc 	.word	0x20000adc
 800848c:	40012000 	.word	0x40012000
 8008490:	0f000001 	.word	0x0f000001

08008494 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008498:	4b12      	ldr	r3, [pc, #72]	; (80084e4 <MX_I2C1_Init+0x50>)
 800849a:	4a13      	ldr	r2, [pc, #76]	; (80084e8 <MX_I2C1_Init+0x54>)
 800849c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800849e:	4b11      	ldr	r3, [pc, #68]	; (80084e4 <MX_I2C1_Init+0x50>)
 80084a0:	4a12      	ldr	r2, [pc, #72]	; (80084ec <MX_I2C1_Init+0x58>)
 80084a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80084a4:	4b0f      	ldr	r3, [pc, #60]	; (80084e4 <MX_I2C1_Init+0x50>)
 80084a6:	2200      	movs	r2, #0
 80084a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80084aa:	4b0e      	ldr	r3, [pc, #56]	; (80084e4 <MX_I2C1_Init+0x50>)
 80084ac:	2200      	movs	r2, #0
 80084ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80084b0:	4b0c      	ldr	r3, [pc, #48]	; (80084e4 <MX_I2C1_Init+0x50>)
 80084b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80084b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80084b8:	4b0a      	ldr	r3, [pc, #40]	; (80084e4 <MX_I2C1_Init+0x50>)
 80084ba:	2200      	movs	r2, #0
 80084bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80084be:	4b09      	ldr	r3, [pc, #36]	; (80084e4 <MX_I2C1_Init+0x50>)
 80084c0:	2200      	movs	r2, #0
 80084c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80084c4:	4b07      	ldr	r3, [pc, #28]	; (80084e4 <MX_I2C1_Init+0x50>)
 80084c6:	2200      	movs	r2, #0
 80084c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80084ca:	4b06      	ldr	r3, [pc, #24]	; (80084e4 <MX_I2C1_Init+0x50>)
 80084cc:	2200      	movs	r2, #0
 80084ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80084d0:	4804      	ldr	r0, [pc, #16]	; (80084e4 <MX_I2C1_Init+0x50>)
 80084d2:	f004 fd3b 	bl	800cf4c <HAL_I2C_Init>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d001      	beq.n	80084e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80084dc:	f000 f9d2 	bl	8008884 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80084e0:	bf00      	nop
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	20000b24 	.word	0x20000b24
 80084e8:	40005400 	.word	0x40005400
 80084ec:	000186a0 	.word	0x000186a0

080084f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b08a      	sub	sp, #40	; 0x28
 80084f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80084f6:	f107 0320 	add.w	r3, r7, #32
 80084fa:	2200      	movs	r2, #0
 80084fc:	601a      	str	r2, [r3, #0]
 80084fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008500:	1d3b      	adds	r3, r7, #4
 8008502:	2200      	movs	r2, #0
 8008504:	601a      	str	r2, [r3, #0]
 8008506:	605a      	str	r2, [r3, #4]
 8008508:	609a      	str	r2, [r3, #8]
 800850a:	60da      	str	r2, [r3, #12]
 800850c:	611a      	str	r2, [r3, #16]
 800850e:	615a      	str	r2, [r3, #20]
 8008510:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008512:	4b2d      	ldr	r3, [pc, #180]	; (80085c8 <MX_TIM3_Init+0xd8>)
 8008514:	4a2d      	ldr	r2, [pc, #180]	; (80085cc <MX_TIM3_Init+0xdc>)
 8008516:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 119;
 8008518:	4b2b      	ldr	r3, [pc, #172]	; (80085c8 <MX_TIM3_Init+0xd8>)
 800851a:	2277      	movs	r2, #119	; 0x77
 800851c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800851e:	4b2a      	ldr	r3, [pc, #168]	; (80085c8 <MX_TIM3_Init+0xd8>)
 8008520:	2200      	movs	r2, #0
 8008522:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8008524:	4b28      	ldr	r3, [pc, #160]	; (80085c8 <MX_TIM3_Init+0xd8>)
 8008526:	f242 720f 	movw	r2, #9999	; 0x270f
 800852a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800852c:	4b26      	ldr	r3, [pc, #152]	; (80085c8 <MX_TIM3_Init+0xd8>)
 800852e:	2200      	movs	r2, #0
 8008530:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008532:	4b25      	ldr	r3, [pc, #148]	; (80085c8 <MX_TIM3_Init+0xd8>)
 8008534:	2200      	movs	r2, #0
 8008536:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8008538:	4823      	ldr	r0, [pc, #140]	; (80085c8 <MX_TIM3_Init+0xd8>)
 800853a:	f007 fc89 	bl	800fe50 <HAL_TIM_PWM_Init>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d001      	beq.n	8008548 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8008544:	f000 f99e 	bl	8008884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008548:	2300      	movs	r3, #0
 800854a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800854c:	2300      	movs	r3, #0
 800854e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008550:	f107 0320 	add.w	r3, r7, #32
 8008554:	4619      	mov	r1, r3
 8008556:	481c      	ldr	r0, [pc, #112]	; (80085c8 <MX_TIM3_Init+0xd8>)
 8008558:	f008 f99e 	bl	8010898 <HAL_TIMEx_MasterConfigSynchronization>
 800855c:	4603      	mov	r3, r0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d001      	beq.n	8008566 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8008562:	f000 f98f 	bl	8008884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008566:	2360      	movs	r3, #96	; 0x60
 8008568:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800856a:	2300      	movs	r3, #0
 800856c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800856e:	2300      	movs	r3, #0
 8008570:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008572:	2300      	movs	r3, #0
 8008574:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008576:	1d3b      	adds	r3, r7, #4
 8008578:	2200      	movs	r2, #0
 800857a:	4619      	mov	r1, r3
 800857c:	4812      	ldr	r0, [pc, #72]	; (80085c8 <MX_TIM3_Init+0xd8>)
 800857e:	f007 fe6f 	bl	8010260 <HAL_TIM_PWM_ConfigChannel>
 8008582:	4603      	mov	r3, r0
 8008584:	2b00      	cmp	r3, #0
 8008586:	d001      	beq.n	800858c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8008588:	f000 f97c 	bl	8008884 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800858c:	1d3b      	adds	r3, r7, #4
 800858e:	2204      	movs	r2, #4
 8008590:	4619      	mov	r1, r3
 8008592:	480d      	ldr	r0, [pc, #52]	; (80085c8 <MX_TIM3_Init+0xd8>)
 8008594:	f007 fe64 	bl	8010260 <HAL_TIM_PWM_ConfigChannel>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d001      	beq.n	80085a2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800859e:	f000 f971 	bl	8008884 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80085a2:	1d3b      	adds	r3, r7, #4
 80085a4:	2208      	movs	r2, #8
 80085a6:	4619      	mov	r1, r3
 80085a8:	4807      	ldr	r0, [pc, #28]	; (80085c8 <MX_TIM3_Init+0xd8>)
 80085aa:	f007 fe59 	bl	8010260 <HAL_TIM_PWM_ConfigChannel>
 80085ae:	4603      	mov	r3, r0
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d001      	beq.n	80085b8 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80085b4:	f000 f966 	bl	8008884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80085b8:	4803      	ldr	r0, [pc, #12]	; (80085c8 <MX_TIM3_Init+0xd8>)
 80085ba:	f000 fa47 	bl	8008a4c <HAL_TIM_MspPostInit>

}
 80085be:	bf00      	nop
 80085c0:	3728      	adds	r7, #40	; 0x28
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	20000b78 	.word	0x20000b78
 80085cc:	40000400 	.word	0x40000400

080085d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80085d4:	4b11      	ldr	r3, [pc, #68]	; (800861c <MX_USART1_UART_Init+0x4c>)
 80085d6:	4a12      	ldr	r2, [pc, #72]	; (8008620 <MX_USART1_UART_Init+0x50>)
 80085d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80085da:	4b10      	ldr	r3, [pc, #64]	; (800861c <MX_USART1_UART_Init+0x4c>)
 80085dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80085e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80085e2:	4b0e      	ldr	r3, [pc, #56]	; (800861c <MX_USART1_UART_Init+0x4c>)
 80085e4:	2200      	movs	r2, #0
 80085e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80085e8:	4b0c      	ldr	r3, [pc, #48]	; (800861c <MX_USART1_UART_Init+0x4c>)
 80085ea:	2200      	movs	r2, #0
 80085ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80085ee:	4b0b      	ldr	r3, [pc, #44]	; (800861c <MX_USART1_UART_Init+0x4c>)
 80085f0:	2200      	movs	r2, #0
 80085f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80085f4:	4b09      	ldr	r3, [pc, #36]	; (800861c <MX_USART1_UART_Init+0x4c>)
 80085f6:	220c      	movs	r2, #12
 80085f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80085fa:	4b08      	ldr	r3, [pc, #32]	; (800861c <MX_USART1_UART_Init+0x4c>)
 80085fc:	2200      	movs	r2, #0
 80085fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008600:	4b06      	ldr	r3, [pc, #24]	; (800861c <MX_USART1_UART_Init+0x4c>)
 8008602:	2200      	movs	r2, #0
 8008604:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008606:	4805      	ldr	r0, [pc, #20]	; (800861c <MX_USART1_UART_Init+0x4c>)
 8008608:	f008 f9c8 	bl	801099c <HAL_UART_Init>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d001      	beq.n	8008616 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008612:	f000 f937 	bl	8008884 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008616:	bf00      	nop
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	20000bc0 	.word	0x20000bc0
 8008620:	40011000 	.word	0x40011000

08008624 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008628:	4b11      	ldr	r3, [pc, #68]	; (8008670 <MX_USART2_UART_Init+0x4c>)
 800862a:	4a12      	ldr	r2, [pc, #72]	; (8008674 <MX_USART2_UART_Init+0x50>)
 800862c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800862e:	4b10      	ldr	r3, [pc, #64]	; (8008670 <MX_USART2_UART_Init+0x4c>)
 8008630:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8008634:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008636:	4b0e      	ldr	r3, [pc, #56]	; (8008670 <MX_USART2_UART_Init+0x4c>)
 8008638:	2200      	movs	r2, #0
 800863a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800863c:	4b0c      	ldr	r3, [pc, #48]	; (8008670 <MX_USART2_UART_Init+0x4c>)
 800863e:	2200      	movs	r2, #0
 8008640:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008642:	4b0b      	ldr	r3, [pc, #44]	; (8008670 <MX_USART2_UART_Init+0x4c>)
 8008644:	2200      	movs	r2, #0
 8008646:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008648:	4b09      	ldr	r3, [pc, #36]	; (8008670 <MX_USART2_UART_Init+0x4c>)
 800864a:	220c      	movs	r2, #12
 800864c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800864e:	4b08      	ldr	r3, [pc, #32]	; (8008670 <MX_USART2_UART_Init+0x4c>)
 8008650:	2200      	movs	r2, #0
 8008652:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008654:	4b06      	ldr	r3, [pc, #24]	; (8008670 <MX_USART2_UART_Init+0x4c>)
 8008656:	2200      	movs	r2, #0
 8008658:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800865a:	4805      	ldr	r0, [pc, #20]	; (8008670 <MX_USART2_UART_Init+0x4c>)
 800865c:	f008 f99e 	bl	801099c <HAL_UART_Init>
 8008660:	4603      	mov	r3, r0
 8008662:	2b00      	cmp	r3, #0
 8008664:	d001      	beq.n	800866a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8008666:	f000 f90d 	bl	8008884 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800866a:	bf00      	nop
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	20000c04 	.word	0x20000c04
 8008674:	40004400 	.word	0x40004400

08008678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b08a      	sub	sp, #40	; 0x28
 800867c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800867e:	f107 0314 	add.w	r3, r7, #20
 8008682:	2200      	movs	r2, #0
 8008684:	601a      	str	r2, [r3, #0]
 8008686:	605a      	str	r2, [r3, #4]
 8008688:	609a      	str	r2, [r3, #8]
 800868a:	60da      	str	r2, [r3, #12]
 800868c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800868e:	2300      	movs	r3, #0
 8008690:	613b      	str	r3, [r7, #16]
 8008692:	4b45      	ldr	r3, [pc, #276]	; (80087a8 <MX_GPIO_Init+0x130>)
 8008694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008696:	4a44      	ldr	r2, [pc, #272]	; (80087a8 <MX_GPIO_Init+0x130>)
 8008698:	f043 0304 	orr.w	r3, r3, #4
 800869c:	6313      	str	r3, [r2, #48]	; 0x30
 800869e:	4b42      	ldr	r3, [pc, #264]	; (80087a8 <MX_GPIO_Init+0x130>)
 80086a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a2:	f003 0304 	and.w	r3, r3, #4
 80086a6:	613b      	str	r3, [r7, #16]
 80086a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80086aa:	2300      	movs	r3, #0
 80086ac:	60fb      	str	r3, [r7, #12]
 80086ae:	4b3e      	ldr	r3, [pc, #248]	; (80087a8 <MX_GPIO_Init+0x130>)
 80086b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086b2:	4a3d      	ldr	r2, [pc, #244]	; (80087a8 <MX_GPIO_Init+0x130>)
 80086b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086b8:	6313      	str	r3, [r2, #48]	; 0x30
 80086ba:	4b3b      	ldr	r3, [pc, #236]	; (80087a8 <MX_GPIO_Init+0x130>)
 80086bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086c2:	60fb      	str	r3, [r7, #12]
 80086c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80086c6:	2300      	movs	r3, #0
 80086c8:	60bb      	str	r3, [r7, #8]
 80086ca:	4b37      	ldr	r3, [pc, #220]	; (80087a8 <MX_GPIO_Init+0x130>)
 80086cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ce:	4a36      	ldr	r2, [pc, #216]	; (80087a8 <MX_GPIO_Init+0x130>)
 80086d0:	f043 0301 	orr.w	r3, r3, #1
 80086d4:	6313      	str	r3, [r2, #48]	; 0x30
 80086d6:	4b34      	ldr	r3, [pc, #208]	; (80087a8 <MX_GPIO_Init+0x130>)
 80086d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086da:	f003 0301 	and.w	r3, r3, #1
 80086de:	60bb      	str	r3, [r7, #8]
 80086e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80086e2:	2300      	movs	r3, #0
 80086e4:	607b      	str	r3, [r7, #4]
 80086e6:	4b30      	ldr	r3, [pc, #192]	; (80087a8 <MX_GPIO_Init+0x130>)
 80086e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ea:	4a2f      	ldr	r2, [pc, #188]	; (80087a8 <MX_GPIO_Init+0x130>)
 80086ec:	f043 0302 	orr.w	r3, r3, #2
 80086f0:	6313      	str	r3, [r2, #48]	; 0x30
 80086f2:	4b2d      	ldr	r3, [pc, #180]	; (80087a8 <MX_GPIO_Init+0x130>)
 80086f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f6:	f003 0302 	and.w	r3, r3, #2
 80086fa:	607b      	str	r3, [r7, #4]
 80086fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 80086fe:	2200      	movs	r2, #0
 8008700:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008704:	4829      	ldr	r0, [pc, #164]	; (80087ac <MX_GPIO_Init+0x134>)
 8008706:	f004 fc07 	bl	800cf18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MODEM_M0_GPIO_Port, MODEM_M0_Pin, GPIO_PIN_RESET);
 800870a:	2200      	movs	r2, #0
 800870c:	2120      	movs	r1, #32
 800870e:	4828      	ldr	r0, [pc, #160]	; (80087b0 <MX_GPIO_Init+0x138>)
 8008710:	f004 fc02 	bl	800cf18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MODEM_LED_GPIO_Port, MODEM_LED_Pin, GPIO_PIN_RESET);
 8008714:	2200      	movs	r2, #0
 8008716:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800871a:	4826      	ldr	r0, [pc, #152]	; (80087b4 <MX_GPIO_Init+0x13c>)
 800871c:	f004 fbfc 	bl	800cf18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MODEM_M1_GPIO_Port, MODEM_M1_Pin, GPIO_PIN_SET);
 8008720:	2201      	movs	r2, #1
 8008722:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008726:	4822      	ldr	r0, [pc, #136]	; (80087b0 <MX_GPIO_Init+0x138>)
 8008728:	f004 fbf6 	bl	800cf18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 800872c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008732:	2301      	movs	r3, #1
 8008734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008736:	2300      	movs	r3, #0
 8008738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800873a:	2300      	movs	r3, #0
 800873c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 800873e:	f107 0314 	add.w	r3, r7, #20
 8008742:	4619      	mov	r1, r3
 8008744:	4819      	ldr	r0, [pc, #100]	; (80087ac <MX_GPIO_Init+0x134>)
 8008746:	f004 f967 	bl	800ca18 <HAL_GPIO_Init>

  /*Configure GPIO pins : MODEM_M0_Pin MODEM_M1_Pin */
  GPIO_InitStruct.Pin = MODEM_M0_Pin|MODEM_M1_Pin;
 800874a:	f248 0320 	movw	r3, #32800	; 0x8020
 800874e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008750:	2301      	movs	r3, #1
 8008752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008754:	2301      	movs	r3, #1
 8008756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008758:	2300      	movs	r3, #0
 800875a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800875c:	f107 0314 	add.w	r3, r7, #20
 8008760:	4619      	mov	r1, r3
 8008762:	4813      	ldr	r0, [pc, #76]	; (80087b0 <MX_GPIO_Init+0x138>)
 8008764:	f004 f958 	bl	800ca18 <HAL_GPIO_Init>

  /*Configure GPIO pin : MODEM_AUX_Pin */
  GPIO_InitStruct.Pin = MODEM_AUX_Pin;
 8008768:	2340      	movs	r3, #64	; 0x40
 800876a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800876c:	2300      	movs	r3, #0
 800876e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008770:	2300      	movs	r3, #0
 8008772:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MODEM_AUX_GPIO_Port, &GPIO_InitStruct);
 8008774:	f107 0314 	add.w	r3, r7, #20
 8008778:	4619      	mov	r1, r3
 800877a:	480d      	ldr	r0, [pc, #52]	; (80087b0 <MX_GPIO_Init+0x138>)
 800877c:	f004 f94c 	bl	800ca18 <HAL_GPIO_Init>

  /*Configure GPIO pin : MODEM_LED_Pin */
  GPIO_InitStruct.Pin = MODEM_LED_Pin;
 8008780:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008786:	2301      	movs	r3, #1
 8008788:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800878a:	2300      	movs	r3, #0
 800878c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800878e:	2300      	movs	r3, #0
 8008790:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MODEM_LED_GPIO_Port, &GPIO_InitStruct);
 8008792:	f107 0314 	add.w	r3, r7, #20
 8008796:	4619      	mov	r1, r3
 8008798:	4806      	ldr	r0, [pc, #24]	; (80087b4 <MX_GPIO_Init+0x13c>)
 800879a:	f004 f93d 	bl	800ca18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800879e:	bf00      	nop
 80087a0:	3728      	adds	r7, #40	; 0x28
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	40023800 	.word	0x40023800
 80087ac:	40020800 	.word	0x40020800
 80087b0:	40020000 	.word	0x40020000
 80087b4:	40020400 	.word	0x40020400

080087b8 <MX_USART1_UART_Init115200>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init115200(void)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 80087bc:	4b11      	ldr	r3, [pc, #68]	; (8008804 <MX_USART1_UART_Init115200+0x4c>)
 80087be:	4a12      	ldr	r2, [pc, #72]	; (8008808 <MX_USART1_UART_Init115200+0x50>)
 80087c0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80087c2:	4b10      	ldr	r3, [pc, #64]	; (8008804 <MX_USART1_UART_Init115200+0x4c>)
 80087c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80087c8:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80087ca:	4b0e      	ldr	r3, [pc, #56]	; (8008804 <MX_USART1_UART_Init115200+0x4c>)
 80087cc:	2200      	movs	r2, #0
 80087ce:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80087d0:	4b0c      	ldr	r3, [pc, #48]	; (8008804 <MX_USART1_UART_Init115200+0x4c>)
 80087d2:	2200      	movs	r2, #0
 80087d4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80087d6:	4b0b      	ldr	r3, [pc, #44]	; (8008804 <MX_USART1_UART_Init115200+0x4c>)
 80087d8:	2200      	movs	r2, #0
 80087da:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80087dc:	4b09      	ldr	r3, [pc, #36]	; (8008804 <MX_USART1_UART_Init115200+0x4c>)
 80087de:	220c      	movs	r2, #12
 80087e0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80087e2:	4b08      	ldr	r3, [pc, #32]	; (8008804 <MX_USART1_UART_Init115200+0x4c>)
 80087e4:	2200      	movs	r2, #0
 80087e6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80087e8:	4b06      	ldr	r3, [pc, #24]	; (8008804 <MX_USART1_UART_Init115200+0x4c>)
 80087ea:	2200      	movs	r2, #0
 80087ec:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80087ee:	4805      	ldr	r0, [pc, #20]	; (8008804 <MX_USART1_UART_Init115200+0x4c>)
 80087f0:	f008 f8d4 	bl	801099c <HAL_UART_Init>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d001      	beq.n	80087fe <MX_USART1_UART_Init115200+0x46>
	{
		Error_Handler();
 80087fa:	f000 f843 	bl	8008884 <Error_Handler>
	}
}
 80087fe:	bf00      	nop
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	20000bc0 	.word	0x20000bc0
 8008808:	40011000 	.word	0x40011000

0800880c <HAL_UART_RxCpltCallback>:
  * @brief RX interrupt from the uart
  * @param None
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
	system_UART_RxCpltCallback(huart);
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f003 f82b 	bl	800b870 <system_UART_RxCpltCallback>
}
 800881a:	bf00      	nop
 800881c:	3708      	adds	r7, #8
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
	...

08008824 <MX_UARTReInit>:

void MX_UARTReInit()
{
 8008824:	b580      	push	{r7, lr}
 8008826:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1);
 8008828:	4803      	ldr	r0, [pc, #12]	; (8008838 <MX_UARTReInit+0x14>)
 800882a:	f008 f904 	bl	8010a36 <HAL_UART_DeInit>
	MX_USART1_UART_Init();
 800882e:	f7ff fecf 	bl	80085d0 <MX_USART1_UART_Init>
	return;
 8008832:	bf00      	nop
}
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	20000bc0 	.word	0x20000bc0

0800883c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
	system_ADC_ConvCpltCallback(hadc);
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f002 ffdd 	bl	800b804 <system_ADC_ConvCpltCallback>
}
 800884a:	bf00      	nop
 800884c:	3708      	adds	r7, #8
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
	...

08008854 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b082      	sub	sp, #8
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a07      	ldr	r2, [pc, #28]	; (8008880 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d101      	bne.n	800886a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8008866:	f003 f873 	bl	800b950 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  system_Timer(HAL_GetTick());
 800886a:	f003 f885 	bl	800b978 <HAL_GetTick>
 800886e:	4603      	mov	r3, r0
 8008870:	4618      	mov	r0, r3
 8008872:	f002 fe81 	bl	800b578 <system_Timer>
  /* USER CODE END Callback 1 */
}
 8008876:	bf00      	nop
 8008878:	3708      	adds	r7, #8
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
 800887e:	bf00      	nop
 8008880:	40000800 	.word	0x40000800

08008884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008884:	b480      	push	{r7}
 8008886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008888:	b672      	cpsid	i
}
 800888a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800888c:	e7fe      	b.n	800888c <Error_Handler+0x8>
	...

08008890 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008896:	2300      	movs	r3, #0
 8008898:	607b      	str	r3, [r7, #4]
 800889a:	4b10      	ldr	r3, [pc, #64]	; (80088dc <HAL_MspInit+0x4c>)
 800889c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800889e:	4a0f      	ldr	r2, [pc, #60]	; (80088dc <HAL_MspInit+0x4c>)
 80088a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80088a4:	6453      	str	r3, [r2, #68]	; 0x44
 80088a6:	4b0d      	ldr	r3, [pc, #52]	; (80088dc <HAL_MspInit+0x4c>)
 80088a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088ae:	607b      	str	r3, [r7, #4]
 80088b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80088b2:	2300      	movs	r3, #0
 80088b4:	603b      	str	r3, [r7, #0]
 80088b6:	4b09      	ldr	r3, [pc, #36]	; (80088dc <HAL_MspInit+0x4c>)
 80088b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ba:	4a08      	ldr	r2, [pc, #32]	; (80088dc <HAL_MspInit+0x4c>)
 80088bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088c0:	6413      	str	r3, [r2, #64]	; 0x40
 80088c2:	4b06      	ldr	r3, [pc, #24]	; (80088dc <HAL_MspInit+0x4c>)
 80088c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088ca:	603b      	str	r3, [r7, #0]
 80088cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80088ce:	bf00      	nop
 80088d0:	370c      	adds	r7, #12
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr
 80088da:	bf00      	nop
 80088dc:	40023800 	.word	0x40023800

080088e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b08a      	sub	sp, #40	; 0x28
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088e8:	f107 0314 	add.w	r3, r7, #20
 80088ec:	2200      	movs	r2, #0
 80088ee:	601a      	str	r2, [r3, #0]
 80088f0:	605a      	str	r2, [r3, #4]
 80088f2:	609a      	str	r2, [r3, #8]
 80088f4:	60da      	str	r2, [r3, #12]
 80088f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a1b      	ldr	r2, [pc, #108]	; (800896c <HAL_ADC_MspInit+0x8c>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d12f      	bne.n	8008962 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8008902:	2300      	movs	r3, #0
 8008904:	613b      	str	r3, [r7, #16]
 8008906:	4b1a      	ldr	r3, [pc, #104]	; (8008970 <HAL_ADC_MspInit+0x90>)
 8008908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800890a:	4a19      	ldr	r2, [pc, #100]	; (8008970 <HAL_ADC_MspInit+0x90>)
 800890c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008910:	6453      	str	r3, [r2, #68]	; 0x44
 8008912:	4b17      	ldr	r3, [pc, #92]	; (8008970 <HAL_ADC_MspInit+0x90>)
 8008914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800891a:	613b      	str	r3, [r7, #16]
 800891c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800891e:	2300      	movs	r3, #0
 8008920:	60fb      	str	r3, [r7, #12]
 8008922:	4b13      	ldr	r3, [pc, #76]	; (8008970 <HAL_ADC_MspInit+0x90>)
 8008924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008926:	4a12      	ldr	r2, [pc, #72]	; (8008970 <HAL_ADC_MspInit+0x90>)
 8008928:	f043 0301 	orr.w	r3, r3, #1
 800892c:	6313      	str	r3, [r2, #48]	; 0x30
 800892e:	4b10      	ldr	r3, [pc, #64]	; (8008970 <HAL_ADC_MspInit+0x90>)
 8008930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008932:	f003 0301 	and.w	r3, r3, #1
 8008936:	60fb      	str	r3, [r7, #12]
 8008938:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = BATV_SNS_Pin;
 800893a:	2301      	movs	r3, #1
 800893c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800893e:	2303      	movs	r3, #3
 8008940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008942:	2300      	movs	r3, #0
 8008944:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATV_SNS_GPIO_Port, &GPIO_InitStruct);
 8008946:	f107 0314 	add.w	r3, r7, #20
 800894a:	4619      	mov	r1, r3
 800894c:	4809      	ldr	r0, [pc, #36]	; (8008974 <HAL_ADC_MspInit+0x94>)
 800894e:	f004 f863 	bl	800ca18 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8008952:	2200      	movs	r2, #0
 8008954:	2100      	movs	r1, #0
 8008956:	2012      	movs	r0, #18
 8008958:	f003 fd86 	bl	800c468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800895c:	2012      	movs	r0, #18
 800895e:	f003 fd9f 	bl	800c4a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8008962:	bf00      	nop
 8008964:	3728      	adds	r7, #40	; 0x28
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	40012000 	.word	0x40012000
 8008970:	40023800 	.word	0x40023800
 8008974:	40020000 	.word	0x40020000

08008978 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b08a      	sub	sp, #40	; 0x28
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008980:	f107 0314 	add.w	r3, r7, #20
 8008984:	2200      	movs	r2, #0
 8008986:	601a      	str	r2, [r3, #0]
 8008988:	605a      	str	r2, [r3, #4]
 800898a:	609a      	str	r2, [r3, #8]
 800898c:	60da      	str	r2, [r3, #12]
 800898e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a19      	ldr	r2, [pc, #100]	; (80089fc <HAL_I2C_MspInit+0x84>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d12b      	bne.n	80089f2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800899a:	2300      	movs	r3, #0
 800899c:	613b      	str	r3, [r7, #16]
 800899e:	4b18      	ldr	r3, [pc, #96]	; (8008a00 <HAL_I2C_MspInit+0x88>)
 80089a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a2:	4a17      	ldr	r2, [pc, #92]	; (8008a00 <HAL_I2C_MspInit+0x88>)
 80089a4:	f043 0302 	orr.w	r3, r3, #2
 80089a8:	6313      	str	r3, [r2, #48]	; 0x30
 80089aa:	4b15      	ldr	r3, [pc, #84]	; (8008a00 <HAL_I2C_MspInit+0x88>)
 80089ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ae:	f003 0302 	and.w	r3, r3, #2
 80089b2:	613b      	str	r3, [r7, #16]
 80089b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MEMS_I2C_SCL_Pin|MEMS_I2C_SDA_Pin;
 80089b6:	23c0      	movs	r3, #192	; 0xc0
 80089b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80089ba:	2312      	movs	r3, #18
 80089bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80089be:	2301      	movs	r3, #1
 80089c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089c2:	2303      	movs	r3, #3
 80089c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80089c6:	2304      	movs	r3, #4
 80089c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80089ca:	f107 0314 	add.w	r3, r7, #20
 80089ce:	4619      	mov	r1, r3
 80089d0:	480c      	ldr	r0, [pc, #48]	; (8008a04 <HAL_I2C_MspInit+0x8c>)
 80089d2:	f004 f821 	bl	800ca18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80089d6:	2300      	movs	r3, #0
 80089d8:	60fb      	str	r3, [r7, #12]
 80089da:	4b09      	ldr	r3, [pc, #36]	; (8008a00 <HAL_I2C_MspInit+0x88>)
 80089dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089de:	4a08      	ldr	r2, [pc, #32]	; (8008a00 <HAL_I2C_MspInit+0x88>)
 80089e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80089e4:	6413      	str	r3, [r2, #64]	; 0x40
 80089e6:	4b06      	ldr	r3, [pc, #24]	; (8008a00 <HAL_I2C_MspInit+0x88>)
 80089e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80089ee:	60fb      	str	r3, [r7, #12]
 80089f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80089f2:	bf00      	nop
 80089f4:	3728      	adds	r7, #40	; 0x28
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop
 80089fc:	40005400 	.word	0x40005400
 8008a00:	40023800 	.word	0x40023800
 8008a04:	40020400 	.word	0x40020400

08008a08 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b085      	sub	sp, #20
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a0b      	ldr	r2, [pc, #44]	; (8008a44 <HAL_TIM_PWM_MspInit+0x3c>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d10d      	bne.n	8008a36 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	60fb      	str	r3, [r7, #12]
 8008a1e:	4b0a      	ldr	r3, [pc, #40]	; (8008a48 <HAL_TIM_PWM_MspInit+0x40>)
 8008a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a22:	4a09      	ldr	r2, [pc, #36]	; (8008a48 <HAL_TIM_PWM_MspInit+0x40>)
 8008a24:	f043 0302 	orr.w	r3, r3, #2
 8008a28:	6413      	str	r3, [r2, #64]	; 0x40
 8008a2a:	4b07      	ldr	r3, [pc, #28]	; (8008a48 <HAL_TIM_PWM_MspInit+0x40>)
 8008a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a2e:	f003 0302 	and.w	r3, r3, #2
 8008a32:	60fb      	str	r3, [r7, #12]
 8008a34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8008a36:	bf00      	nop
 8008a38:	3714      	adds	r7, #20
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr
 8008a42:	bf00      	nop
 8008a44:	40000400 	.word	0x40000400
 8008a48:	40023800 	.word	0x40023800

08008a4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b088      	sub	sp, #32
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a54:	f107 030c 	add.w	r3, r7, #12
 8008a58:	2200      	movs	r2, #0
 8008a5a:	601a      	str	r2, [r3, #0]
 8008a5c:	605a      	str	r2, [r3, #4]
 8008a5e:	609a      	str	r2, [r3, #8]
 8008a60:	60da      	str	r2, [r3, #12]
 8008a62:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a12      	ldr	r2, [pc, #72]	; (8008ab4 <HAL_TIM_MspPostInit+0x68>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d11d      	bne.n	8008aaa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008a6e:	2300      	movs	r3, #0
 8008a70:	60bb      	str	r3, [r7, #8]
 8008a72:	4b11      	ldr	r3, [pc, #68]	; (8008ab8 <HAL_TIM_MspPostInit+0x6c>)
 8008a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a76:	4a10      	ldr	r2, [pc, #64]	; (8008ab8 <HAL_TIM_MspPostInit+0x6c>)
 8008a78:	f043 0302 	orr.w	r3, r3, #2
 8008a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8008a7e:	4b0e      	ldr	r3, [pc, #56]	; (8008ab8 <HAL_TIM_MspPostInit+0x6c>)
 8008a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a82:	f003 0302 	and.w	r3, r3, #2
 8008a86:	60bb      	str	r3, [r7, #8]
 8008a88:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWM_MOTOR_Pin|PWM_ROLL_Pin|PWM_PITCH_Pin;
 8008a8a:	2331      	movs	r3, #49	; 0x31
 8008a8c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a8e:	2302      	movs	r3, #2
 8008a90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a92:	2300      	movs	r3, #0
 8008a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a96:	2300      	movs	r3, #0
 8008a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008a9a:	2302      	movs	r3, #2
 8008a9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a9e:	f107 030c 	add.w	r3, r7, #12
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	4805      	ldr	r0, [pc, #20]	; (8008abc <HAL_TIM_MspPostInit+0x70>)
 8008aa6:	f003 ffb7 	bl	800ca18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8008aaa:	bf00      	nop
 8008aac:	3720      	adds	r7, #32
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	40000400 	.word	0x40000400
 8008ab8:	40023800 	.word	0x40023800
 8008abc:	40020400 	.word	0x40020400

08008ac0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b08c      	sub	sp, #48	; 0x30
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ac8:	f107 031c 	add.w	r3, r7, #28
 8008acc:	2200      	movs	r2, #0
 8008ace:	601a      	str	r2, [r3, #0]
 8008ad0:	605a      	str	r2, [r3, #4]
 8008ad2:	609a      	str	r2, [r3, #8]
 8008ad4:	60da      	str	r2, [r3, #12]
 8008ad6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a36      	ldr	r2, [pc, #216]	; (8008bb8 <HAL_UART_MspInit+0xf8>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d135      	bne.n	8008b4e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	61bb      	str	r3, [r7, #24]
 8008ae6:	4b35      	ldr	r3, [pc, #212]	; (8008bbc <HAL_UART_MspInit+0xfc>)
 8008ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aea:	4a34      	ldr	r2, [pc, #208]	; (8008bbc <HAL_UART_MspInit+0xfc>)
 8008aec:	f043 0310 	orr.w	r3, r3, #16
 8008af0:	6453      	str	r3, [r2, #68]	; 0x44
 8008af2:	4b32      	ldr	r3, [pc, #200]	; (8008bbc <HAL_UART_MspInit+0xfc>)
 8008af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008af6:	f003 0310 	and.w	r3, r3, #16
 8008afa:	61bb      	str	r3, [r7, #24]
 8008afc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008afe:	2300      	movs	r3, #0
 8008b00:	617b      	str	r3, [r7, #20]
 8008b02:	4b2e      	ldr	r3, [pc, #184]	; (8008bbc <HAL_UART_MspInit+0xfc>)
 8008b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b06:	4a2d      	ldr	r2, [pc, #180]	; (8008bbc <HAL_UART_MspInit+0xfc>)
 8008b08:	f043 0301 	orr.w	r3, r3, #1
 8008b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8008b0e:	4b2b      	ldr	r3, [pc, #172]	; (8008bbc <HAL_UART_MspInit+0xfc>)
 8008b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b12:	f003 0301 	and.w	r3, r3, #1
 8008b16:	617b      	str	r3, [r7, #20]
 8008b18:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = MODEM_TX_Pin|MODEM_RX_Pin;
 8008b1a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8008b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b20:	2302      	movs	r3, #2
 8008b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b24:	2300      	movs	r3, #0
 8008b26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b28:	2303      	movs	r3, #3
 8008b2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008b2c:	2307      	movs	r3, #7
 8008b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b30:	f107 031c 	add.w	r3, r7, #28
 8008b34:	4619      	mov	r1, r3
 8008b36:	4822      	ldr	r0, [pc, #136]	; (8008bc0 <HAL_UART_MspInit+0x100>)
 8008b38:	f003 ff6e 	bl	800ca18 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	2100      	movs	r1, #0
 8008b40:	2025      	movs	r0, #37	; 0x25
 8008b42:	f003 fc91 	bl	800c468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008b46:	2025      	movs	r0, #37	; 0x25
 8008b48:	f003 fcaa 	bl	800c4a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8008b4c:	e030      	b.n	8008bb0 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4a1c      	ldr	r2, [pc, #112]	; (8008bc4 <HAL_UART_MspInit+0x104>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d12b      	bne.n	8008bb0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8008b58:	2300      	movs	r3, #0
 8008b5a:	613b      	str	r3, [r7, #16]
 8008b5c:	4b17      	ldr	r3, [pc, #92]	; (8008bbc <HAL_UART_MspInit+0xfc>)
 8008b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b60:	4a16      	ldr	r2, [pc, #88]	; (8008bbc <HAL_UART_MspInit+0xfc>)
 8008b62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b66:	6413      	str	r3, [r2, #64]	; 0x40
 8008b68:	4b14      	ldr	r3, [pc, #80]	; (8008bbc <HAL_UART_MspInit+0xfc>)
 8008b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b70:	613b      	str	r3, [r7, #16]
 8008b72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b74:	2300      	movs	r3, #0
 8008b76:	60fb      	str	r3, [r7, #12]
 8008b78:	4b10      	ldr	r3, [pc, #64]	; (8008bbc <HAL_UART_MspInit+0xfc>)
 8008b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b7c:	4a0f      	ldr	r2, [pc, #60]	; (8008bbc <HAL_UART_MspInit+0xfc>)
 8008b7e:	f043 0301 	orr.w	r3, r3, #1
 8008b82:	6313      	str	r3, [r2, #48]	; 0x30
 8008b84:	4b0d      	ldr	r3, [pc, #52]	; (8008bbc <HAL_UART_MspInit+0xfc>)
 8008b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b88:	f003 0301 	and.w	r3, r3, #1
 8008b8c:	60fb      	str	r3, [r7, #12]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 8008b90:	230c      	movs	r3, #12
 8008b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b94:	2302      	movs	r3, #2
 8008b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b9c:	2303      	movs	r3, #3
 8008b9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008ba0:	2307      	movs	r3, #7
 8008ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ba4:	f107 031c 	add.w	r3, r7, #28
 8008ba8:	4619      	mov	r1, r3
 8008baa:	4805      	ldr	r0, [pc, #20]	; (8008bc0 <HAL_UART_MspInit+0x100>)
 8008bac:	f003 ff34 	bl	800ca18 <HAL_GPIO_Init>
}
 8008bb0:	bf00      	nop
 8008bb2:	3730      	adds	r7, #48	; 0x30
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}
 8008bb8:	40011000 	.word	0x40011000
 8008bbc:	40023800 	.word	0x40023800
 8008bc0:	40020000 	.word	0x40020000
 8008bc4:	40004400 	.word	0x40004400

08008bc8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a12      	ldr	r2, [pc, #72]	; (8008c20 <HAL_UART_MspDeInit+0x58>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d10e      	bne.n	8008bf8 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8008bda:	4b12      	ldr	r3, [pc, #72]	; (8008c24 <HAL_UART_MspDeInit+0x5c>)
 8008bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bde:	4a11      	ldr	r2, [pc, #68]	; (8008c24 <HAL_UART_MspDeInit+0x5c>)
 8008be0:	f023 0310 	bic.w	r3, r3, #16
 8008be4:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, MODEM_TX_Pin|MODEM_RX_Pin);
 8008be6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008bea:	480f      	ldr	r0, [pc, #60]	; (8008c28 <HAL_UART_MspDeInit+0x60>)
 8008bec:	f004 f898 	bl	800cd20 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8008bf0:	2025      	movs	r0, #37	; 0x25
 8008bf2:	f003 fc63 	bl	800c4bc <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8008bf6:	e00e      	b.n	8008c16 <HAL_UART_MspDeInit+0x4e>
  else if(huart->Instance==USART2)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a0b      	ldr	r2, [pc, #44]	; (8008c2c <HAL_UART_MspDeInit+0x64>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d109      	bne.n	8008c16 <HAL_UART_MspDeInit+0x4e>
    __HAL_RCC_USART2_CLK_DISABLE();
 8008c02:	4b08      	ldr	r3, [pc, #32]	; (8008c24 <HAL_UART_MspDeInit+0x5c>)
 8008c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c06:	4a07      	ldr	r2, [pc, #28]	; (8008c24 <HAL_UART_MspDeInit+0x5c>)
 8008c08:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008c0c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GNSS_TX_Pin|GNSS_RX_Pin);
 8008c0e:	210c      	movs	r1, #12
 8008c10:	4805      	ldr	r0, [pc, #20]	; (8008c28 <HAL_UART_MspDeInit+0x60>)
 8008c12:	f004 f885 	bl	800cd20 <HAL_GPIO_DeInit>
}
 8008c16:	bf00      	nop
 8008c18:	3708      	adds	r7, #8
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	40011000 	.word	0x40011000
 8008c24:	40023800 	.word	0x40023800
 8008c28:	40020000 	.word	0x40020000
 8008c2c:	40004400 	.word	0x40004400

08008c30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b08e      	sub	sp, #56	; 0x38
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8008c40:	2300      	movs	r3, #0
 8008c42:	60fb      	str	r3, [r7, #12]
 8008c44:	4b33      	ldr	r3, [pc, #204]	; (8008d14 <HAL_InitTick+0xe4>)
 8008c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c48:	4a32      	ldr	r2, [pc, #200]	; (8008d14 <HAL_InitTick+0xe4>)
 8008c4a:	f043 0304 	orr.w	r3, r3, #4
 8008c4e:	6413      	str	r3, [r2, #64]	; 0x40
 8008c50:	4b30      	ldr	r3, [pc, #192]	; (8008d14 <HAL_InitTick+0xe4>)
 8008c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c54:	f003 0304 	and.w	r3, r3, #4
 8008c58:	60fb      	str	r3, [r7, #12]
 8008c5a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008c5c:	f107 0210 	add.w	r2, r7, #16
 8008c60:	f107 0314 	add.w	r3, r7, #20
 8008c64:	4611      	mov	r1, r2
 8008c66:	4618      	mov	r0, r3
 8008c68:	f007 f804 	bl	800fc74 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8008c6c:	6a3b      	ldr	r3, [r7, #32]
 8008c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8008c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d103      	bne.n	8008c7e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8008c76:	f006 ffd5 	bl	800fc24 <HAL_RCC_GetPCLK1Freq>
 8008c7a:	6378      	str	r0, [r7, #52]	; 0x34
 8008c7c:	e004      	b.n	8008c88 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8008c7e:	f006 ffd1 	bl	800fc24 <HAL_RCC_GetPCLK1Freq>
 8008c82:	4603      	mov	r3, r0
 8008c84:	005b      	lsls	r3, r3, #1
 8008c86:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c8a:	4a23      	ldr	r2, [pc, #140]	; (8008d18 <HAL_InitTick+0xe8>)
 8008c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8008c90:	0c9b      	lsrs	r3, r3, #18
 8008c92:	3b01      	subs	r3, #1
 8008c94:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8008c96:	4b21      	ldr	r3, [pc, #132]	; (8008d1c <HAL_InitTick+0xec>)
 8008c98:	4a21      	ldr	r2, [pc, #132]	; (8008d20 <HAL_InitTick+0xf0>)
 8008c9a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8008c9c:	4b1f      	ldr	r3, [pc, #124]	; (8008d1c <HAL_InitTick+0xec>)
 8008c9e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008ca2:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8008ca4:	4a1d      	ldr	r2, [pc, #116]	; (8008d1c <HAL_InitTick+0xec>)
 8008ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca8:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8008caa:	4b1c      	ldr	r3, [pc, #112]	; (8008d1c <HAL_InitTick+0xec>)
 8008cac:	2200      	movs	r2, #0
 8008cae:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008cb0:	4b1a      	ldr	r3, [pc, #104]	; (8008d1c <HAL_InitTick+0xec>)
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008cb6:	4b19      	ldr	r3, [pc, #100]	; (8008d1c <HAL_InitTick+0xec>)
 8008cb8:	2200      	movs	r2, #0
 8008cba:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8008cbc:	4817      	ldr	r0, [pc, #92]	; (8008d1c <HAL_InitTick+0xec>)
 8008cbe:	f007 f80b 	bl	800fcd8 <HAL_TIM_Base_Init>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8008cc8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d11b      	bne.n	8008d08 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8008cd0:	4812      	ldr	r0, [pc, #72]	; (8008d1c <HAL_InitTick+0xec>)
 8008cd2:	f007 f85b 	bl	800fd8c <HAL_TIM_Base_Start_IT>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8008cdc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d111      	bne.n	8008d08 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8008ce4:	201e      	movs	r0, #30
 8008ce6:	f003 fbdb 	bl	800c4a0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2b0f      	cmp	r3, #15
 8008cee:	d808      	bhi.n	8008d02 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	6879      	ldr	r1, [r7, #4]
 8008cf4:	201e      	movs	r0, #30
 8008cf6:	f003 fbb7 	bl	800c468 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008cfa:	4a0a      	ldr	r2, [pc, #40]	; (8008d24 <HAL_InitTick+0xf4>)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6013      	str	r3, [r2, #0]
 8008d00:	e002      	b.n	8008d08 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8008d02:	2301      	movs	r3, #1
 8008d04:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8008d08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3738      	adds	r7, #56	; 0x38
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	40023800 	.word	0x40023800
 8008d18:	431bde83 	.word	0x431bde83
 8008d1c:	20000c48 	.word	0x20000c48
 8008d20:	40000800 	.word	0x40000800
 8008d24:	20000110 	.word	0x20000110

08008d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008d2c:	e7fe      	b.n	8008d2c <NMI_Handler+0x4>

08008d2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008d2e:	b480      	push	{r7}
 8008d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008d32:	e7fe      	b.n	8008d32 <HardFault_Handler+0x4>

08008d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008d34:	b480      	push	{r7}
 8008d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008d38:	e7fe      	b.n	8008d38 <MemManage_Handler+0x4>

08008d3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008d3a:	b480      	push	{r7}
 8008d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008d3e:	e7fe      	b.n	8008d3e <BusFault_Handler+0x4>

08008d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008d40:	b480      	push	{r7}
 8008d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008d44:	e7fe      	b.n	8008d44 <UsageFault_Handler+0x4>

08008d46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008d46:	b480      	push	{r7}
 8008d48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008d4a:	bf00      	nop
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008d54:	b480      	push	{r7}
 8008d56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008d58:	bf00      	nop
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr

08008d62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008d62:	b480      	push	{r7}
 8008d64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008d66:	bf00      	nop
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr

08008d70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008d70:	b480      	push	{r7}
 8008d72:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008d74:	bf00      	nop
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr
	...

08008d80 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8008d84:	4802      	ldr	r0, [pc, #8]	; (8008d90 <ADC_IRQHandler+0x10>)
 8008d86:	f002 ff29 	bl	800bbdc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8008d8a:	bf00      	nop
 8008d8c:	bd80      	pop	{r7, pc}
 8008d8e:	bf00      	nop
 8008d90:	20000adc 	.word	0x20000adc

08008d94 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8008d98:	4802      	ldr	r0, [pc, #8]	; (8008da4 <TIM4_IRQHandler+0x10>)
 8008d9a:	f007 f959 	bl	8010050 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8008d9e:	bf00      	nop
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	20000c48 	.word	0x20000c48

08008da8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008dac:	4802      	ldr	r0, [pc, #8]	; (8008db8 <USART1_IRQHandler+0x10>)
 8008dae:	f008 f847 	bl	8010e40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008db2:	bf00      	nop
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	bf00      	nop
 8008db8:	20000bc0 	.word	0x20000bc0

08008dbc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8008dc0:	4802      	ldr	r0, [pc, #8]	; (8008dcc <OTG_FS_IRQHandler+0x10>)
 8008dc2:	f005 f9d2 	bl	800e16a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8008dc6:	bf00      	nop
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	2000261c 	.word	0x2000261c

08008dd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008dd4:	4b06      	ldr	r3, [pc, #24]	; (8008df0 <SystemInit+0x20>)
 8008dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dda:	4a05      	ldr	r2, [pc, #20]	; (8008df0 <SystemInit+0x20>)
 8008ddc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008de0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008de4:	bf00      	nop
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr
 8008dee:	bf00      	nop
 8008df0:	e000ed00 	.word	0xe000ed00

08008df4 <modem_Timer>:
uint8_t _modem_led_start = 0;
uint8_t _modem_led_state = 0;


void modem_Timer(uint32_t res)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b085      	sub	sp, #20
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
#ifdef NO_MODEM
	return;
#endif //NO_MODEM

	for( uint8_t i = 0; i < MODEM_TMR_NUM; i++ )
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	73fb      	strb	r3, [r7, #15]
 8008e00:	e010      	b.n	8008e24 <modem_Timer+0x30>
	{
		if( modem_info.timer[i] > 0 ){
 8008e02:	7bfb      	ldrb	r3, [r7, #15]
 8008e04:	4a0c      	ldr	r2, [pc, #48]	; (8008e38 <modem_Timer+0x44>)
 8008e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d007      	beq.n	8008e1e <modem_Timer+0x2a>
			modem_info.timer[i]--;
 8008e0e:	7bfb      	ldrb	r3, [r7, #15]
 8008e10:	4a09      	ldr	r2, [pc, #36]	; (8008e38 <modem_Timer+0x44>)
 8008e12:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008e16:	3a01      	subs	r2, #1
 8008e18:	4907      	ldr	r1, [pc, #28]	; (8008e38 <modem_Timer+0x44>)
 8008e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for( uint8_t i = 0; i < MODEM_TMR_NUM; i++ )
 8008e1e:	7bfb      	ldrb	r3, [r7, #15]
 8008e20:	3301      	adds	r3, #1
 8008e22:	73fb      	strb	r3, [r7, #15]
 8008e24:	7bfb      	ldrb	r3, [r7, #15]
 8008e26:	2b02      	cmp	r3, #2
 8008e28:	d9eb      	bls.n	8008e02 <modem_Timer+0xe>
		}
	}

	return;
 8008e2a:	bf00      	nop
}
 8008e2c:	3714      	adds	r7, #20
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e34:	4770      	bx	lr
 8008e36:	bf00      	nop
 8008e38:	20000c90 	.word	0x20000c90

08008e3c <modem_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void modem_InitTask()
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	af00      	add	r7, sp, #0
#ifdef NO_MODEM
	return;
#endif //NO_MODEM

	HAL_GPIO_WritePin(GPIOA, MODEM_M0_Pin|MODEM_M1_Pin, GPIO_PIN_SET);
 8008e40:	2201      	movs	r2, #1
 8008e42:	f248 0120 	movw	r1, #32800	; 0x8020
 8008e46:	480c      	ldr	r0, [pc, #48]	; (8008e78 <modem_InitTask+0x3c>)
 8008e48:	f004 f866 	bl	800cf18 <HAL_GPIO_WritePin>
	modem_info.ready_flag = 0;
 8008e4c:	4b0b      	ldr	r3, [pc, #44]	; (8008e7c <modem_InitTask+0x40>)
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f883 21a5 	strb.w	r2, [r3, #421]	; 0x1a5

	modem_info.timer[MODEM_TX_TMR] = 0;
 8008e54:	4b09      	ldr	r3, [pc, #36]	; (8008e7c <modem_InitTask+0x40>)
 8008e56:	2200      	movs	r2, #0
 8008e58:	601a      	str	r2, [r3, #0]
	modem_info.rx_buf.head = 0;
 8008e5a:	4b08      	ldr	r3, [pc, #32]	; (8008e7c <modem_InitTask+0x40>)
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	81da      	strh	r2, [r3, #14]
	modem_info.rx_buf.tail = 0;
 8008e60:	4b06      	ldr	r3, [pc, #24]	; (8008e7c <modem_InitTask+0x40>)
 8008e62:	2200      	movs	r2, #0
 8008e64:	821a      	strh	r2, [r3, #16]
	modem_info.rx_buf.state = MDMRINGBUF_WAIT_HEADER;
 8008e66:	4b05      	ldr	r3, [pc, #20]	; (8008e7c <modem_InitTask+0x40>)
 8008e68:	2200      	movs	r2, #0
 8008e6a:	731a      	strb	r2, [r3, #12]
	modem_info.tx_buf_bytes = 0;
 8008e6c:	4b03      	ldr	r3, [pc, #12]	; (8008e7c <modem_InitTask+0x40>)
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198

	return;
 8008e74:	bf00      	nop
}
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	40020000 	.word	0x40020000
 8008e7c:	20000c90 	.word	0x20000c90

08008e80 <modem_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void modem_Task(void)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b084      	sub	sp, #16
 8008e84:	af00      	add	r7, sp, #0
	return;
#endif //NO_MODEM

	uint8_t set_buf[10];

	if( _modem_cur_state == modem_init_power_up )
 8008e86:	4b80      	ldr	r3, [pc, #512]	; (8009088 <modem_Task+0x208>)
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d10f      	bne.n	8008eae <modem_Task+0x2e>
	{
		if( HAL_GPIO_ReadPin(MODEM_AUX_GPIO_Port, MODEM_AUX_Pin) == GPIO_PIN_SET )
 8008e8e:	2140      	movs	r1, #64	; 0x40
 8008e90:	487e      	ldr	r0, [pc, #504]	; (800908c <modem_Task+0x20c>)
 8008e92:	f004 f829 	bl	800cee8 <HAL_GPIO_ReadPin>
 8008e96:	4603      	mov	r3, r0
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	f040 80b0 	bne.w	8008ffe <modem_Task+0x17e>
		{
			modem_info.timer[MODEM_STATE_TMR] = 1000;
 8008e9e:	4b7c      	ldr	r3, [pc, #496]	; (8009090 <modem_Task+0x210>)
 8008ea0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008ea4:	605a      	str	r2, [r3, #4]
			_modem_cur_state = modem_init_set_par;
 8008ea6:	4b78      	ldr	r3, [pc, #480]	; (8009088 <modem_Task+0x208>)
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	701a      	strb	r2, [r3, #0]
 8008eac:	e0a7      	b.n	8008ffe <modem_Task+0x17e>
		}
	}
	else if( _modem_cur_state == modem_init_set_par )
 8008eae:	4b76      	ldr	r3, [pc, #472]	; (8009088 <modem_Task+0x208>)
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d11e      	bne.n	8008ef4 <modem_Task+0x74>
	{
		if( modem_info.timer[MODEM_STATE_TMR] == 0 )
 8008eb6:	4b76      	ldr	r3, [pc, #472]	; (8009090 <modem_Task+0x210>)
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	f040 809f 	bne.w	8008ffe <modem_Task+0x17e>
		{
			//Command "Set parameters without saving"
			set_buf[0] = 0xC2;
 8008ec0:	23c2      	movs	r3, #194	; 0xc2
 8008ec2:	713b      	strb	r3, [r7, #4]
			//Address (Broadcast)
			set_buf[1] = 0xFF;
 8008ec4:	23ff      	movs	r3, #255	; 0xff
 8008ec6:	717b      	strb	r3, [r7, #5]
			set_buf[2] = 0xFF;
 8008ec8:	23ff      	movs	r3, #255	; 0xff
 8008eca:	71bb      	strb	r3, [r7, #6]
			//Speed (8N1, 115200, RF-19.2k)
			set_buf[3] = 0x3D;
 8008ecc:	233d      	movs	r3, #61	; 0x3d
 8008ece:	71fb      	strb	r3, [r7, #7]
			//Channel (868 MHz)
			set_buf[4] = 0x06;
 8008ed0:	2306      	movs	r3, #6
 8008ed2:	723b      	strb	r3, [r7, #8]
			//Options
			set_buf[5] = 0x44;
 8008ed4:	2344      	movs	r3, #68	; 0x44
 8008ed6:	727b      	strb	r3, [r7, #9]
			HAL_UART_Transmit(&HAL_MODEM_UART, set_buf, 6, HAL_MAX_DELAY);
 8008ed8:	1d39      	adds	r1, r7, #4
 8008eda:	f04f 33ff 	mov.w	r3, #4294967295
 8008ede:	2206      	movs	r2, #6
 8008ee0:	486c      	ldr	r0, [pc, #432]	; (8009094 <modem_Task+0x214>)
 8008ee2:	f007 fdd7 	bl	8010a94 <HAL_UART_Transmit>
			modem_info.timer[MODEM_STATE_TMR] = 100;
 8008ee6:	4b6a      	ldr	r3, [pc, #424]	; (8009090 <modem_Task+0x210>)
 8008ee8:	2264      	movs	r2, #100	; 0x64
 8008eea:	605a      	str	r2, [r3, #4]
			_modem_cur_state = modem_init_read_par;
 8008eec:	4b66      	ldr	r3, [pc, #408]	; (8009088 <modem_Task+0x208>)
 8008eee:	2202      	movs	r2, #2
 8008ef0:	701a      	strb	r2, [r3, #0]
 8008ef2:	e084      	b.n	8008ffe <modem_Task+0x17e>
		}
	}
	else if( _modem_cur_state == modem_init_read_par )
 8008ef4:	4b64      	ldr	r3, [pc, #400]	; (8009088 <modem_Task+0x208>)
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	2b02      	cmp	r3, #2
 8008efa:	d114      	bne.n	8008f26 <modem_Task+0xa6>
	{
		if( modem_info.timer[MODEM_STATE_TMR] == 0 )
 8008efc:	4b64      	ldr	r3, [pc, #400]	; (8009090 <modem_Task+0x210>)
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d17c      	bne.n	8008ffe <modem_Task+0x17e>
		{
			//Command "Read parameters"
			set_buf[0] = 0xC1;
 8008f04:	23c1      	movs	r3, #193	; 0xc1
 8008f06:	713b      	strb	r3, [r7, #4]
			set_buf[1] = 0xC1;
 8008f08:	23c1      	movs	r3, #193	; 0xc1
 8008f0a:	717b      	strb	r3, [r7, #5]
			set_buf[2] = 0xC1;
 8008f0c:	23c1      	movs	r3, #193	; 0xc1
 8008f0e:	71bb      	strb	r3, [r7, #6]
			HAL_UART_Transmit(&HAL_MODEM_UART, set_buf, 3, HAL_MAX_DELAY);
 8008f10:	1d39      	adds	r1, r7, #4
 8008f12:	f04f 33ff 	mov.w	r3, #4294967295
 8008f16:	2203      	movs	r2, #3
 8008f18:	485e      	ldr	r0, [pc, #376]	; (8009094 <modem_Task+0x214>)
 8008f1a:	f007 fdbb 	bl	8010a94 <HAL_UART_Transmit>
			_modem_cur_state = modem_init_wait_par;
 8008f1e:	4b5a      	ldr	r3, [pc, #360]	; (8009088 <modem_Task+0x208>)
 8008f20:	2203      	movs	r2, #3
 8008f22:	701a      	strb	r2, [r3, #0]
 8008f24:	e06b      	b.n	8008ffe <modem_Task+0x17e>
		}
	}
	else if( _modem_cur_state == modem_init_wait_par )
 8008f26:	4b58      	ldr	r3, [pc, #352]	; (8009088 <modem_Task+0x208>)
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	2b03      	cmp	r3, #3
 8008f2c:	d115      	bne.n	8008f5a <modem_Task+0xda>
	{
		if( _modem_par_flag == 1 )
 8008f2e:	4b5a      	ldr	r3, [pc, #360]	; (8009098 <modem_Task+0x218>)
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	2b01      	cmp	r3, #1
 8008f34:	d163      	bne.n	8008ffe <modem_Task+0x17e>
		{
			_modem_par_flag = 0;
 8008f36:	4b58      	ldr	r3, [pc, #352]	; (8009098 <modem_Task+0x218>)
 8008f38:	2200      	movs	r2, #0
 8008f3a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, MODEM_M0_Pin|MODEM_M1_Pin, GPIO_PIN_RESET);
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	f248 0120 	movw	r1, #32800	; 0x8020
 8008f42:	4852      	ldr	r0, [pc, #328]	; (800908c <modem_Task+0x20c>)
 8008f44:	f003 ffe8 	bl	800cf18 <HAL_GPIO_WritePin>
			system_UARTmodemSet115200();
 8008f48:	f002 fc10 	bl	800b76c <system_UARTmodemSet115200>
			modem_info.timer[MODEM_STATE_TMR] = 100;
 8008f4c:	4b50      	ldr	r3, [pc, #320]	; (8009090 <modem_Task+0x210>)
 8008f4e:	2264      	movs	r2, #100	; 0x64
 8008f50:	605a      	str	r2, [r3, #4]
			_modem_cur_state = modem_init_wait_rdy;
 8008f52:	4b4d      	ldr	r3, [pc, #308]	; (8009088 <modem_Task+0x208>)
 8008f54:	2204      	movs	r2, #4
 8008f56:	701a      	strb	r2, [r3, #0]
 8008f58:	e051      	b.n	8008ffe <modem_Task+0x17e>
		}
	}
	else if( _modem_cur_state == modem_init_wait_rdy )
 8008f5a:	4b4b      	ldr	r3, [pc, #300]	; (8009088 <modem_Task+0x208>)
 8008f5c:	781b      	ldrb	r3, [r3, #0]
 8008f5e:	2b04      	cmp	r3, #4
 8008f60:	d107      	bne.n	8008f72 <modem_Task+0xf2>
	{
		if( modem_info.timer[MODEM_STATE_TMR] == 0 ){
 8008f62:	4b4b      	ldr	r3, [pc, #300]	; (8009090 <modem_Task+0x210>)
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d149      	bne.n	8008ffe <modem_Task+0x17e>
			_modem_cur_state = modem_ready;
 8008f6a:	4b47      	ldr	r3, [pc, #284]	; (8009088 <modem_Task+0x208>)
 8008f6c:	2205      	movs	r2, #5
 8008f6e:	701a      	strb	r2, [r3, #0]
 8008f70:	e045      	b.n	8008ffe <modem_Task+0x17e>
		}
	}
	else if( _modem_cur_state == modem_ready )
 8008f72:	4b45      	ldr	r3, [pc, #276]	; (8009088 <modem_Task+0x208>)
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	2b05      	cmp	r3, #5
 8008f78:	d141      	bne.n	8008ffe <modem_Task+0x17e>
	{
		//Transmitting
		if( (modem_info.tx_buf_bytes > 0) && (modem_info.timer[MODEM_TX_TMR] == 0) )
 8008f7a:	4b45      	ldr	r3, [pc, #276]	; (8009090 <modem_Task+0x210>)
 8008f7c:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d024      	beq.n	8008fce <modem_Task+0x14e>
 8008f84:	4b42      	ldr	r3, [pc, #264]	; (8009090 <modem_Task+0x210>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d120      	bne.n	8008fce <modem_Task+0x14e>
		{
			modem_info.timer[MODEM_TX_TMR] = MODEM_TX_PERIOD;
 8008f8c:	4b40      	ldr	r3, [pc, #256]	; (8009090 <modem_Task+0x210>)
 8008f8e:	2201      	movs	r2, #1
 8008f90:	601a      	str	r2, [r3, #0]
			if( modem_info.tx_buf_bytes > MODEM_MAX_TX_LEN )
 8008f92:	4b3f      	ldr	r3, [pc, #252]	; (8009090 <modem_Task+0x210>)
 8008f94:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8008f98:	2b14      	cmp	r3, #20
 8008f9a:	d90a      	bls.n	8008fb2 <modem_Task+0x132>
			{
				HAL_UART_Transmit(&HAL_MODEM_UART, (uint8_t*)modem_info.tx_buf, MODEM_MAX_TX_LEN, HAL_MAX_DELAY);
 8008f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8008fa0:	2214      	movs	r2, #20
 8008fa2:	493e      	ldr	r1, [pc, #248]	; (800909c <modem_Task+0x21c>)
 8008fa4:	483b      	ldr	r0, [pc, #236]	; (8009094 <modem_Task+0x214>)
 8008fa6:	f007 fd75 	bl	8010a94 <HAL_UART_Transmit>
				modem_RemTxData(MODEM_MAX_TX_LEN);
 8008faa:	2014      	movs	r0, #20
 8008fac:	f000 f9da 	bl	8009364 <modem_RemTxData>
 8008fb0:	e00d      	b.n	8008fce <modem_Task+0x14e>
			}
			else
			{
				HAL_UART_Transmit(&HAL_MODEM_UART, (uint8_t*)modem_info.tx_buf, modem_info.tx_buf_bytes, HAL_MAX_DELAY);
 8008fb2:	4b37      	ldr	r3, [pc, #220]	; (8009090 <modem_Task+0x210>)
 8008fb4:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8008fb8:	b29a      	uxth	r2, r3
 8008fba:	f04f 33ff 	mov.w	r3, #4294967295
 8008fbe:	4937      	ldr	r1, [pc, #220]	; (800909c <modem_Task+0x21c>)
 8008fc0:	4834      	ldr	r0, [pc, #208]	; (8009094 <modem_Task+0x214>)
 8008fc2:	f007 fd67 	bl	8010a94 <HAL_UART_Transmit>
				modem_info.tx_buf_bytes = 0;
 8008fc6:	4b32      	ldr	r3, [pc, #200]	; (8009090 <modem_Task+0x210>)
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
			}
		}

		//Receiving
		if( modem_info.rvd_pkt_size != 0 )
 8008fce:	4b30      	ldr	r3, [pc, #192]	; (8009090 <modem_Task+0x210>)
 8008fd0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d012      	beq.n	8008ffe <modem_Task+0x17e>
		{
			_modem_led_start = 1;
 8008fd8:	4b31      	ldr	r3, [pc, #196]	; (80090a0 <modem_Task+0x220>)
 8008fda:	2201      	movs	r2, #1
 8008fdc:	701a      	strb	r2, [r3, #0]
			system_ModemRxCallback(modem_info.rvd_pkt[0], (uint8_t*)&modem_info.rvd_pkt[1], modem_info.rvd_pkt_size - 1);
 8008fde:	4b2c      	ldr	r3, [pc, #176]	; (8009090 <modem_Task+0x210>)
 8008fe0:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8008fe4:	b2d8      	uxtb	r0, r3
 8008fe6:	4b2a      	ldr	r3, [pc, #168]	; (8009090 <modem_Task+0x210>)
 8008fe8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8008fec:	3b01      	subs	r3, #1
 8008fee:	461a      	mov	r2, r3
 8008ff0:	492c      	ldr	r1, [pc, #176]	; (80090a4 <modem_Task+0x224>)
 8008ff2:	f002 fbd1 	bl	800b798 <system_ModemRxCallback>
			modem_info.rvd_pkt_size = 0;
 8008ff6:	4b26      	ldr	r3, [pc, #152]	; (8009090 <modem_Task+0x210>)
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		}
	}

	//LED
	if( _modem_led_state == 0)
 8008ffe:	4b2a      	ldr	r3, [pc, #168]	; (80090a8 <modem_Task+0x228>)
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d10a      	bne.n	800901c <modem_Task+0x19c>
	{
		if( _modem_led_start == 1 )
 8009006:	4b26      	ldr	r3, [pc, #152]	; (80090a0 <modem_Task+0x220>)
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	2b01      	cmp	r3, #1
 800900c:	d138      	bne.n	8009080 <modem_Task+0x200>
		{
			_modem_led_start = 0;
 800900e:	4b24      	ldr	r3, [pc, #144]	; (80090a0 <modem_Task+0x220>)
 8009010:	2200      	movs	r2, #0
 8009012:	701a      	strb	r2, [r3, #0]
			_modem_led_state = 1;
 8009014:	4b24      	ldr	r3, [pc, #144]	; (80090a8 <modem_Task+0x228>)
 8009016:	2201      	movs	r2, #1
 8009018:	701a      	strb	r2, [r3, #0]
		if( modem_info.timer[MODEM_LED_TMR] == 0 ){
			_modem_led_state = 0;
		}
	}

	return;
 800901a:	e031      	b.n	8009080 <modem_Task+0x200>
	else if( _modem_led_state == 1 )
 800901c:	4b22      	ldr	r3, [pc, #136]	; (80090a8 <modem_Task+0x228>)
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	2b01      	cmp	r3, #1
 8009022:	d10c      	bne.n	800903e <modem_Task+0x1be>
		HAL_GPIO_WritePin(MODEM_LED_GPIO_Port, MODEM_LED_Pin, GPIO_PIN_SET);
 8009024:	2201      	movs	r2, #1
 8009026:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800902a:	4820      	ldr	r0, [pc, #128]	; (80090ac <modem_Task+0x22c>)
 800902c:	f003 ff74 	bl	800cf18 <HAL_GPIO_WritePin>
		modem_info.timer[MODEM_LED_TMR] = 20;
 8009030:	4b17      	ldr	r3, [pc, #92]	; (8009090 <modem_Task+0x210>)
 8009032:	2214      	movs	r2, #20
 8009034:	609a      	str	r2, [r3, #8]
		_modem_led_state = 2;
 8009036:	4b1c      	ldr	r3, [pc, #112]	; (80090a8 <modem_Task+0x228>)
 8009038:	2202      	movs	r2, #2
 800903a:	701a      	strb	r2, [r3, #0]
	return;
 800903c:	e020      	b.n	8009080 <modem_Task+0x200>
	else if( _modem_led_state == 2 )
 800903e:	4b1a      	ldr	r3, [pc, #104]	; (80090a8 <modem_Task+0x228>)
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	2b02      	cmp	r3, #2
 8009044:	d110      	bne.n	8009068 <modem_Task+0x1e8>
		if( modem_info.timer[MODEM_LED_TMR] == 0 )
 8009046:	4b12      	ldr	r3, [pc, #72]	; (8009090 <modem_Task+0x210>)
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d118      	bne.n	8009080 <modem_Task+0x200>
			HAL_GPIO_WritePin(MODEM_LED_GPIO_Port, MODEM_LED_Pin, GPIO_PIN_RESET);
 800904e:	2200      	movs	r2, #0
 8009050:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009054:	4815      	ldr	r0, [pc, #84]	; (80090ac <modem_Task+0x22c>)
 8009056:	f003 ff5f 	bl	800cf18 <HAL_GPIO_WritePin>
			modem_info.timer[MODEM_LED_TMR] = 50;
 800905a:	4b0d      	ldr	r3, [pc, #52]	; (8009090 <modem_Task+0x210>)
 800905c:	2232      	movs	r2, #50	; 0x32
 800905e:	609a      	str	r2, [r3, #8]
			_modem_led_state = 3;
 8009060:	4b11      	ldr	r3, [pc, #68]	; (80090a8 <modem_Task+0x228>)
 8009062:	2203      	movs	r2, #3
 8009064:	701a      	strb	r2, [r3, #0]
	return;
 8009066:	e00b      	b.n	8009080 <modem_Task+0x200>
	else if( _modem_led_state == 3 )
 8009068:	4b0f      	ldr	r3, [pc, #60]	; (80090a8 <modem_Task+0x228>)
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	2b03      	cmp	r3, #3
 800906e:	d107      	bne.n	8009080 <modem_Task+0x200>
		if( modem_info.timer[MODEM_LED_TMR] == 0 ){
 8009070:	4b07      	ldr	r3, [pc, #28]	; (8009090 <modem_Task+0x210>)
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d103      	bne.n	8009080 <modem_Task+0x200>
			_modem_led_state = 0;
 8009078:	4b0b      	ldr	r3, [pc, #44]	; (80090a8 <modem_Task+0x228>)
 800907a:	2200      	movs	r2, #0
 800907c:	701a      	strb	r2, [r3, #0]
	return;
 800907e:	bf00      	nop
 8009080:	bf00      	nop
}
 8009082:	3710      	adds	r7, #16
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}
 8009088:	20000e38 	.word	0x20000e38
 800908c:	40020000 	.word	0x40020000
 8009090:	20000c90 	.word	0x20000c90
 8009094:	20000bc0 	.word	0x20000bc0
 8009098:	20000e47 	.word	0x20000e47
 800909c:	20000da8 	.word	0x20000da8
 80090a0:	20000e48 	.word	0x20000e48
 80090a4:	20000d25 	.word	0x20000d25
 80090a8:	20000e49 	.word	0x20000e49
 80090ac:	40020400 	.word	0x40020400

080090b0 <modem_RcvData>:

void modem_RcvData(uint8_t data)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	4603      	mov	r3, r0
 80090b8:	71fb      	strb	r3, [r7, #7]

	static uint16_t rcv_size;
	uint16_t header;
	uint16_t crc;

	if( _modem_cur_state != modem_ready )
 80090ba:	4b5f      	ldr	r3, [pc, #380]	; (8009238 <modem_RcvData+0x188>)
 80090bc:	781b      	ldrb	r3, [r3, #0]
 80090be:	2b05      	cmp	r3, #5
 80090c0:	d01a      	beq.n	80090f8 <modem_RcvData+0x48>
	{
		if( _modem_par_flag == 0 )
 80090c2:	4b5e      	ldr	r3, [pc, #376]	; (800923c <modem_RcvData+0x18c>)
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	f040 80b1 	bne.w	800922e <modem_RcvData+0x17e>
		{
			_modem_par_buf[_modem_par_buf_cnt++] = data;
 80090cc:	4b5c      	ldr	r3, [pc, #368]	; (8009240 <modem_RcvData+0x190>)
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	1c5a      	adds	r2, r3, #1
 80090d2:	b2d1      	uxtb	r1, r2
 80090d4:	4a5a      	ldr	r2, [pc, #360]	; (8009240 <modem_RcvData+0x190>)
 80090d6:	7011      	strb	r1, [r2, #0]
 80090d8:	4619      	mov	r1, r3
 80090da:	4a5a      	ldr	r2, [pc, #360]	; (8009244 <modem_RcvData+0x194>)
 80090dc:	79fb      	ldrb	r3, [r7, #7]
 80090de:	5453      	strb	r3, [r2, r1]
			if( _modem_par_buf_cnt == 6 )
 80090e0:	4b57      	ldr	r3, [pc, #348]	; (8009240 <modem_RcvData+0x190>)
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	2b06      	cmp	r3, #6
 80090e6:	f040 80a2 	bne.w	800922e <modem_RcvData+0x17e>
			{
				_modem_par_buf_cnt = 0;
 80090ea:	4b55      	ldr	r3, [pc, #340]	; (8009240 <modem_RcvData+0x190>)
 80090ec:	2200      	movs	r2, #0
 80090ee:	701a      	strb	r2, [r3, #0]
				_modem_par_flag = 1;
 80090f0:	4b52      	ldr	r3, [pc, #328]	; (800923c <modem_RcvData+0x18c>)
 80090f2:	2201      	movs	r2, #1
 80090f4:	701a      	strb	r2, [r3, #0]

			}
		}
	}

	return;
 80090f6:	e09a      	b.n	800922e <modem_RcvData+0x17e>
				(modem_info.rx_buf.tail + 1) & MODEM_BUF_MASK] = data;
 80090f8:	4b53      	ldr	r3, [pc, #332]	; (8009248 <modem_RcvData+0x198>)
 80090fa:	8a1b      	ldrh	r3, [r3, #16]
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	3301      	adds	r3, #1
 8009100:	b29b      	uxth	r3, r3
 8009102:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009106:	b29a      	uxth	r2, r3
		modem_info.rx_buf.data[modem_info.rx_buf.tail =
 8009108:	4b4f      	ldr	r3, [pc, #316]	; (8009248 <modem_RcvData+0x198>)
 800910a:	4611      	mov	r1, r2
 800910c:	8219      	strh	r1, [r3, #16]
				(modem_info.rx_buf.tail + 1) & MODEM_BUF_MASK] = data;
 800910e:	4b4e      	ldr	r3, [pc, #312]	; (8009248 <modem_RcvData+0x198>)
 8009110:	4413      	add	r3, r2
 8009112:	79fa      	ldrb	r2, [r7, #7]
 8009114:	751a      	strb	r2, [r3, #20]
		if( modem_info.rx_buf.state == MDMRINGBUF_WAIT_HEADER )
 8009116:	4b4c      	ldr	r3, [pc, #304]	; (8009248 <modem_RcvData+0x198>)
 8009118:	7b1b      	ldrb	r3, [r3, #12]
 800911a:	b2db      	uxtb	r3, r3
 800911c:	2b00      	cmp	r3, #0
 800911e:	d12a      	bne.n	8009176 <modem_RcvData+0xc6>
					(modem_info.rx_buf.tail - 2) & MODEM_BUF_MASK);
 8009120:	4b49      	ldr	r3, [pc, #292]	; (8009248 <modem_RcvData+0x198>)
 8009122:	8a1b      	ldrh	r3, [r3, #16]
 8009124:	b29b      	uxth	r3, r3
 8009126:	3b02      	subs	r3, #2
 8009128:	b29b      	uxth	r3, r3
			header = modem_ringBufRead16b((uint8_t*)modem_info.rx_buf.data,
 800912a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800912e:	b29b      	uxth	r3, r3
 8009130:	4619      	mov	r1, r3
 8009132:	4846      	ldr	r0, [pc, #280]	; (800924c <modem_RcvData+0x19c>)
 8009134:	f000 f8ce 	bl	80092d4 <modem_ringBufRead16b>
 8009138:	4603      	mov	r3, r0
 800913a:	817b      	strh	r3, [r7, #10]
			if( header == MODEM_HEADER )
 800913c:	897b      	ldrh	r3, [r7, #10]
 800913e:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8009142:	4293      	cmp	r3, r2
 8009144:	d173      	bne.n	800922e <modem_RcvData+0x17e>
				modem_info.rx_buf.head = (modem_info.rx_buf.tail - 2) & MODEM_BUF_MASK;
 8009146:	4b40      	ldr	r3, [pc, #256]	; (8009248 <modem_RcvData+0x198>)
 8009148:	8a1b      	ldrh	r3, [r3, #16]
 800914a:	b29b      	uxth	r3, r3
 800914c:	3b02      	subs	r3, #2
 800914e:	b29b      	uxth	r3, r3
 8009150:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009154:	b29a      	uxth	r2, r3
 8009156:	4b3c      	ldr	r3, [pc, #240]	; (8009248 <modem_RcvData+0x198>)
 8009158:	81da      	strh	r2, [r3, #14]
				rcv_size = data;
 800915a:	79fb      	ldrb	r3, [r7, #7]
 800915c:	b29a      	uxth	r2, r3
 800915e:	4b3c      	ldr	r3, [pc, #240]	; (8009250 <modem_RcvData+0x1a0>)
 8009160:	801a      	strh	r2, [r3, #0]
				modem_info.rx_buf.data_size  = data - 2;
 8009162:	79fb      	ldrb	r3, [r7, #7]
 8009164:	b29b      	uxth	r3, r3
 8009166:	3b02      	subs	r3, #2
 8009168:	b29a      	uxth	r2, r3
 800916a:	4b37      	ldr	r3, [pc, #220]	; (8009248 <modem_RcvData+0x198>)
 800916c:	825a      	strh	r2, [r3, #18]
				modem_info.rx_buf.state = MDMRINGBUF_WAIT_DATA;
 800916e:	4b36      	ldr	r3, [pc, #216]	; (8009248 <modem_RcvData+0x198>)
 8009170:	2201      	movs	r2, #1
 8009172:	731a      	strb	r2, [r3, #12]
	return;
 8009174:	e05b      	b.n	800922e <modem_RcvData+0x17e>
		else if( modem_info.rx_buf.state == MDMRINGBUF_WAIT_DATA )
 8009176:	4b34      	ldr	r3, [pc, #208]	; (8009248 <modem_RcvData+0x198>)
 8009178:	7b1b      	ldrb	r3, [r3, #12]
 800917a:	b2db      	uxtb	r3, r3
 800917c:	2b01      	cmp	r3, #1
 800917e:	d156      	bne.n	800922e <modem_RcvData+0x17e>
			if( --rcv_size == 0 )
 8009180:	4b33      	ldr	r3, [pc, #204]	; (8009250 <modem_RcvData+0x1a0>)
 8009182:	881b      	ldrh	r3, [r3, #0]
 8009184:	3b01      	subs	r3, #1
 8009186:	b29a      	uxth	r2, r3
 8009188:	4b31      	ldr	r3, [pc, #196]	; (8009250 <modem_RcvData+0x1a0>)
 800918a:	801a      	strh	r2, [r3, #0]
 800918c:	4b30      	ldr	r3, [pc, #192]	; (8009250 <modem_RcvData+0x1a0>)
 800918e:	881b      	ldrh	r3, [r3, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d14c      	bne.n	800922e <modem_RcvData+0x17e>
				modem_info.rx_buf.state = MDMRINGBUF_WAIT_HEADER;
 8009194:	4b2c      	ldr	r3, [pc, #176]	; (8009248 <modem_RcvData+0x198>)
 8009196:	2200      	movs	r2, #0
 8009198:	731a      	strb	r2, [r3, #12]
				crc = crc16_RingBuf((uint8_t*)modem_info.rx_buf.data, modem_info.rx_buf.head,
 800919a:	4b2b      	ldr	r3, [pc, #172]	; (8009248 <modem_RcvData+0x198>)
 800919c:	89db      	ldrh	r3, [r3, #14]
 800919e:	b299      	uxth	r1, r3
						modem_info.rx_buf.data_size + 3, MODEM_BUF_MASK);
 80091a0:	4b29      	ldr	r3, [pc, #164]	; (8009248 <modem_RcvData+0x198>)
 80091a2:	8a5b      	ldrh	r3, [r3, #18]
 80091a4:	b29b      	uxth	r3, r3
				crc = crc16_RingBuf((uint8_t*)modem_info.rx_buf.data, modem_info.rx_buf.head,
 80091a6:	3303      	adds	r3, #3
 80091a8:	b29a      	uxth	r2, r3
 80091aa:	237f      	movs	r3, #127	; 0x7f
 80091ac:	4827      	ldr	r0, [pc, #156]	; (800924c <modem_RcvData+0x19c>)
 80091ae:	f7fa fe8b 	bl	8003ec8 <crc16_RingBuf>
 80091b2:	4603      	mov	r3, r0
 80091b4:	81bb      	strh	r3, [r7, #12]
						(modem_info.rx_buf.tail - 1) & MODEM_BUF_MASK) ){
 80091b6:	4b24      	ldr	r3, [pc, #144]	; (8009248 <modem_RcvData+0x198>)
 80091b8:	8a1b      	ldrh	r3, [r3, #16]
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	3b01      	subs	r3, #1
 80091be:	b29b      	uxth	r3, r3
				if( crc == modem_ringBufRead16b((uint8_t*)modem_info.rx_buf.data,
 80091c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	4619      	mov	r1, r3
 80091c8:	4820      	ldr	r0, [pc, #128]	; (800924c <modem_RcvData+0x19c>)
 80091ca:	f000 f883 	bl	80092d4 <modem_ringBufRead16b>
 80091ce:	4603      	mov	r3, r0
 80091d0:	461a      	mov	r2, r3
 80091d2:	89bb      	ldrh	r3, [r7, #12]
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d12a      	bne.n	800922e <modem_RcvData+0x17e>
					if( modem_info.rvd_pkt_size == 0 )
 80091d8:	4b1b      	ldr	r3, [pc, #108]	; (8009248 <modem_RcvData+0x198>)
 80091da:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d125      	bne.n	800922e <modem_RcvData+0x17e>
						for( uint16_t i = 0; i < modem_info.rx_buf.data_size; i++ ){
 80091e2:	2300      	movs	r3, #0
 80091e4:	81fb      	strh	r3, [r7, #14]
 80091e6:	e014      	b.n	8009212 <modem_RcvData+0x162>
									modem_info.rx_buf.data[(modem_info.rx_buf.head + 3 + i) & MODEM_BUF_MASK];
 80091e8:	4b17      	ldr	r3, [pc, #92]	; (8009248 <modem_RcvData+0x198>)
 80091ea:	89db      	ldrh	r3, [r3, #14]
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	1cda      	adds	r2, r3, #3
 80091f0:	89fb      	ldrh	r3, [r7, #14]
 80091f2:	4413      	add	r3, r2
 80091f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
							modem_info.rvd_pkt[i] =
 80091f8:	89fb      	ldrh	r3, [r7, #14]
									modem_info.rx_buf.data[(modem_info.rx_buf.head + 3 + i) & MODEM_BUF_MASK];
 80091fa:	4913      	ldr	r1, [pc, #76]	; (8009248 <modem_RcvData+0x198>)
 80091fc:	440a      	add	r2, r1
 80091fe:	7d12      	ldrb	r2, [r2, #20]
 8009200:	b2d1      	uxtb	r1, r2
							modem_info.rvd_pkt[i] =
 8009202:	4a11      	ldr	r2, [pc, #68]	; (8009248 <modem_RcvData+0x198>)
 8009204:	4413      	add	r3, r2
 8009206:	460a      	mov	r2, r1
 8009208:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
						for( uint16_t i = 0; i < modem_info.rx_buf.data_size; i++ ){
 800920c:	89fb      	ldrh	r3, [r7, #14]
 800920e:	3301      	adds	r3, #1
 8009210:	81fb      	strh	r3, [r7, #14]
 8009212:	4b0d      	ldr	r3, [pc, #52]	; (8009248 <modem_RcvData+0x198>)
 8009214:	8a5b      	ldrh	r3, [r3, #18]
 8009216:	b29b      	uxth	r3, r3
 8009218:	89fa      	ldrh	r2, [r7, #14]
 800921a:	429a      	cmp	r2, r3
 800921c:	d3e4      	bcc.n	80091e8 <modem_RcvData+0x138>
						modem_info.rvd_pkt_size = modem_info.rx_buf.data_size;
 800921e:	4b0a      	ldr	r3, [pc, #40]	; (8009248 <modem_RcvData+0x198>)
 8009220:	8a5b      	ldrh	r3, [r3, #18]
 8009222:	b29b      	uxth	r3, r3
 8009224:	461a      	mov	r2, r3
 8009226:	4b08      	ldr	r3, [pc, #32]	; (8009248 <modem_RcvData+0x198>)
 8009228:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	return;
 800922c:	bf00      	nop
 800922e:	bf00      	nop
}
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	20000e38 	.word	0x20000e38
 800923c:	20000e47 	.word	0x20000e47
 8009240:	20000e46 	.word	0x20000e46
 8009244:	20000e3c 	.word	0x20000e3c
 8009248:	20000c90 	.word	0x20000c90
 800924c:	20000ca4 	.word	0x20000ca4
 8009250:	20000e4a 	.word	0x20000e4a

08009254 <modem_TrmData>:

void modem_TrmData(uint8_t channel, uint8_t *data, uint32_t len)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b086      	sub	sp, #24
 8009258:	af00      	add	r7, sp, #0
 800925a:	4603      	mov	r3, r0
 800925c:	60b9      	str	r1, [r7, #8]
 800925e:	607a      	str	r2, [r7, #4]
 8009260:	73fb      	strb	r3, [r7, #15]
	uint16_t u16_tmp;
	uint8_t u8_tmp;
	uint32_t i;

	//Header
	u16_tmp = MODEM_HEADER;
 8009262:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009266:	82fb      	strh	r3, [r7, #22]
	modem_AddTxData((uint8_t*)&u16_tmp, 2);
 8009268:	f107 0316 	add.w	r3, r7, #22
 800926c:	2102      	movs	r1, #2
 800926e:	4618      	mov	r0, r3
 8009270:	f000 f850 	bl	8009314 <modem_AddTxData>
	//Length (data + channel + crc)
	u8_tmp = (uint8_t)len + 3;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	b2db      	uxtb	r3, r3
 8009278:	3303      	adds	r3, #3
 800927a:	b2db      	uxtb	r3, r3
 800927c:	757b      	strb	r3, [r7, #21]
	modem_AddTxData(&u8_tmp, 1);
 800927e:	f107 0315 	add.w	r3, r7, #21
 8009282:	2101      	movs	r1, #1
 8009284:	4618      	mov	r0, r3
 8009286:	f000 f845 	bl	8009314 <modem_AddTxData>
	//Channel (starts from 1)
	u8_tmp = channel;
 800928a:	7bfb      	ldrb	r3, [r7, #15]
 800928c:	757b      	strb	r3, [r7, #21]
	modem_AddTxData(&u8_tmp, 1);
 800928e:	f107 0315 	add.w	r3, r7, #21
 8009292:	2101      	movs	r1, #1
 8009294:	4618      	mov	r0, r3
 8009296:	f000 f83d 	bl	8009314 <modem_AddTxData>
	//Data
	modem_AddTxData(data, len);
 800929a:	6879      	ldr	r1, [r7, #4]
 800929c:	68b8      	ldr	r0, [r7, #8]
 800929e:	f000 f839 	bl	8009314 <modem_AddTxData>
	//CRC
	u16_tmp = crc16_calc(modem_info.tx_buf, modem_info.tx_buf_bytes);
 80092a2:	4b0a      	ldr	r3, [pc, #40]	; (80092cc <modem_TrmData+0x78>)
 80092a4:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	4619      	mov	r1, r3
 80092ac:	4808      	ldr	r0, [pc, #32]	; (80092d0 <modem_TrmData+0x7c>)
 80092ae:	f7fa fde1 	bl	8003e74 <crc16_calc>
 80092b2:	4603      	mov	r3, r0
 80092b4:	82fb      	strh	r3, [r7, #22]
	modem_AddTxData((uint8_t*)&u16_tmp, 2);
 80092b6:	f107 0316 	add.w	r3, r7, #22
 80092ba:	2102      	movs	r1, #2
 80092bc:	4618      	mov	r0, r3
 80092be:	f000 f829 	bl	8009314 <modem_AddTxData>

	return;
 80092c2:	bf00      	nop
}
 80092c4:	3718      	adds	r7, #24
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	bf00      	nop
 80092cc:	20000c90 	.word	0x20000c90
 80092d0:	20000da8 	.word	0x20000da8

080092d4 <modem_ringBufRead16b>:

uint16_t modem_ringBufRead16b(uint8_t *buf, uint16_t pos)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b085      	sub	sp, #20
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	460b      	mov	r3, r1
 80092de:	807b      	strh	r3, [r7, #2]
	uint16_t tmp;
	tmp = buf[(pos + 1) & MODEM_BUF_MASK] & 0xFF;
 80092e0:	887b      	ldrh	r3, [r7, #2]
 80092e2:	3301      	adds	r3, #1
 80092e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	4413      	add	r3, r2
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp << 8) + buf[pos];
 80092f0:	89fb      	ldrh	r3, [r7, #14]
 80092f2:	021b      	lsls	r3, r3, #8
 80092f4:	b29a      	uxth	r2, r3
 80092f6:	887b      	ldrh	r3, [r7, #2]
 80092f8:	6879      	ldr	r1, [r7, #4]
 80092fa:	440b      	add	r3, r1
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	b29b      	uxth	r3, r3
 8009300:	4413      	add	r3, r2
 8009302:	81fb      	strh	r3, [r7, #14]
	return tmp;
 8009304:	89fb      	ldrh	r3, [r7, #14]
}
 8009306:	4618      	mov	r0, r3
 8009308:	3714      	adds	r7, #20
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr
	...

08009314 <modem_AddTxData>:
	tmp = (tmp << 8) + buf[pos];
	return tmp;
}

void modem_AddTxData(uint8_t *data, uint32_t len)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	6039      	str	r1, [r7, #0]
#ifdef NO_MODEM
	return;
#endif //NO_MODEM

	if( len > (MODEM_BUF_SIZE - modem_info.tx_buf_bytes) ){
 800931e:	4b10      	ldr	r3, [pc, #64]	; (8009360 <modem_AddTxData+0x4c>)
 8009320:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8009324:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8009328:	683a      	ldr	r2, [r7, #0]
 800932a:	429a      	cmp	r2, r3
 800932c:	d814      	bhi.n	8009358 <modem_AddTxData+0x44>
		return;
	}
	memcpy((uint8_t*)&modem_info.tx_buf[modem_info.tx_buf_bytes], data, len);
 800932e:	4b0c      	ldr	r3, [pc, #48]	; (8009360 <modem_AddTxData+0x4c>)
 8009330:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8009334:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8009338:	4a09      	ldr	r2, [pc, #36]	; (8009360 <modem_AddTxData+0x4c>)
 800933a:	4413      	add	r3, r2
 800933c:	683a      	ldr	r2, [r7, #0]
 800933e:	6879      	ldr	r1, [r7, #4]
 8009340:	4618      	mov	r0, r3
 8009342:	f00c febf 	bl	80160c4 <memcpy>
	modem_info.tx_buf_bytes += len;
 8009346:	4b06      	ldr	r3, [pc, #24]	; (8009360 <modem_AddTxData+0x4c>)
 8009348:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	4413      	add	r3, r2
 8009350:	4a03      	ldr	r2, [pc, #12]	; (8009360 <modem_AddTxData+0x4c>)
 8009352:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	return;
 8009356:	e000      	b.n	800935a <modem_AddTxData+0x46>
		return;
 8009358:	bf00      	nop
}
 800935a:	3708      	adds	r7, #8
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	20000c90 	.word	0x20000c90

08009364 <modem_RemTxData>:

void modem_RemTxData(uint32_t len)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b0a2      	sub	sp, #136	; 0x88
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
	return;
#endif //NO_MODEM

	uint8_t tmp_buf[MODEM_BUF_SIZE];

	if( (len > modem_info.tx_buf_bytes)
 800936c:	4b18      	ldr	r3, [pc, #96]	; (80093d0 <modem_RemTxData+0x6c>)
 800936e:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	429a      	cmp	r2, r3
 8009376:	d826      	bhi.n	80093c6 <modem_RemTxData+0x62>
			|| (len == 0) || (modem_info.tx_buf_bytes == 0) ){
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d023      	beq.n	80093c6 <modem_RemTxData+0x62>
 800937e:	4b14      	ldr	r3, [pc, #80]	; (80093d0 <modem_RemTxData+0x6c>)
 8009380:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8009384:	2b00      	cmp	r3, #0
 8009386:	d01e      	beq.n	80093c6 <modem_RemTxData+0x62>
		return;
	}
	modem_info.tx_buf_bytes -= len;
 8009388:	4b11      	ldr	r3, [pc, #68]	; (80093d0 <modem_RemTxData+0x6c>)
 800938a:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	1ad3      	subs	r3, r2, r3
 8009392:	4a0f      	ldr	r2, [pc, #60]	; (80093d0 <modem_RemTxData+0x6c>)
 8009394:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
	memcpy(tmp_buf, (uint8_t*)&modem_info.tx_buf[len], modem_info.tx_buf_bytes);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800939e:	4a0c      	ldr	r2, [pc, #48]	; (80093d0 <modem_RemTxData+0x6c>)
 80093a0:	1899      	adds	r1, r3, r2
 80093a2:	4b0b      	ldr	r3, [pc, #44]	; (80093d0 <modem_RemTxData+0x6c>)
 80093a4:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 80093a8:	f107 0308 	add.w	r3, r7, #8
 80093ac:	4618      	mov	r0, r3
 80093ae:	f00c fe89 	bl	80160c4 <memcpy>
	memcpy((uint8_t*)modem_info.tx_buf, tmp_buf, modem_info.tx_buf_bytes);
 80093b2:	4b07      	ldr	r3, [pc, #28]	; (80093d0 <modem_RemTxData+0x6c>)
 80093b4:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 80093b8:	f107 0308 	add.w	r3, r7, #8
 80093bc:	4619      	mov	r1, r3
 80093be:	4805      	ldr	r0, [pc, #20]	; (80093d4 <modem_RemTxData+0x70>)
 80093c0:	f00c fe80 	bl	80160c4 <memcpy>

	return;
 80093c4:	e000      	b.n	80093c8 <modem_RemTxData+0x64>
		return;
 80093c6:	bf00      	nop
}
 80093c8:	3788      	adds	r7, #136	; 0x88
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
 80093ce:	bf00      	nop
 80093d0:	20000c90 	.word	0x20000c90
 80093d4:	20000da8 	.word	0x20000da8

080093d8 <motor_Timer>:
volatile motor_infoTypeDef motor_info;

int32_t motor_map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max);

void motor_Timer(uint32_t res)
{
 80093d8:	b480      	push	{r7}
 80093da:	b085      	sub	sp, #20
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
#ifdef NO_MOTOR
	return;
#endif //NO_MOTOR

	for( uint8_t i = 0; i < MOTOR_TMR_NUM; i++ )
 80093e0:	2300      	movs	r3, #0
 80093e2:	73fb      	strb	r3, [r7, #15]
 80093e4:	e016      	b.n	8009414 <motor_Timer+0x3c>
	{
		if( motor_info.timer[i] > 0 ){
 80093e6:	7bfb      	ldrb	r3, [r7, #15]
 80093e8:	4a0f      	ldr	r2, [pc, #60]	; (8009428 <motor_Timer+0x50>)
 80093ea:	3304      	adds	r3, #4
 80093ec:	009b      	lsls	r3, r3, #2
 80093ee:	4413      	add	r3, r2
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d00b      	beq.n	800940e <motor_Timer+0x36>
			motor_info.timer[i]--;
 80093f6:	7bfa      	ldrb	r2, [r7, #15]
 80093f8:	490b      	ldr	r1, [pc, #44]	; (8009428 <motor_Timer+0x50>)
 80093fa:	1d13      	adds	r3, r2, #4
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	440b      	add	r3, r1
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	1e59      	subs	r1, r3, #1
 8009404:	4808      	ldr	r0, [pc, #32]	; (8009428 <motor_Timer+0x50>)
 8009406:	1d13      	adds	r3, r2, #4
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	4403      	add	r3, r0
 800940c:	6059      	str	r1, [r3, #4]
	for( uint8_t i = 0; i < MOTOR_TMR_NUM; i++ )
 800940e:	7bfb      	ldrb	r3, [r7, #15]
 8009410:	3301      	adds	r3, #1
 8009412:	73fb      	strb	r3, [r7, #15]
 8009414:	7bfb      	ldrb	r3, [r7, #15]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d0e5      	beq.n	80093e6 <motor_Timer+0xe>
		}
	}

	return;
 800941a:	bf00      	nop
}
 800941c:	3714      	adds	r7, #20
 800941e:	46bd      	mov	sp, r7
 8009420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009424:	4770      	bx	lr
 8009426:	bf00      	nop
 8009428:	20000e4c 	.word	0x20000e4c

0800942c <motor_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void motor_InitTask()
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
#ifdef NO_MOTOR
	return;
#endif //NO_MOTOR

	motor_info.motors[MOTOR_MAIN].tim = &htim3;
 8009432:	4b22      	ldr	r3, [pc, #136]	; (80094bc <motor_InitTask+0x90>)
 8009434:	4a22      	ldr	r2, [pc, #136]	; (80094c0 <motor_InitTask+0x94>)
 8009436:	601a      	str	r2, [r3, #0]
	motor_info.motors[MOTOR_MAIN].timch = TIM_CHANNEL_3;
 8009438:	4b20      	ldr	r3, [pc, #128]	; (80094bc <motor_InitTask+0x90>)
 800943a:	2208      	movs	r2, #8
 800943c:	605a      	str	r2, [r3, #4]
	motor_info.motors[MOTOR_MAIN].cur_torq = 0;
 800943e:	4b1f      	ldr	r3, [pc, #124]	; (80094bc <motor_InitTask+0x90>)
 8009440:	2200      	movs	r2, #0
 8009442:	731a      	strb	r2, [r3, #12]
	motor_info.motors[MOTOR_MAIN].min_pwm = 535;
 8009444:	4b1d      	ldr	r3, [pc, #116]	; (80094bc <motor_InitTask+0x90>)
 8009446:	f240 2217 	movw	r2, #535	; 0x217
 800944a:	821a      	strh	r2, [r3, #16]
	motor_info.motors[MOTOR_MAIN].idle_pwm = 426;
 800944c:	4b1b      	ldr	r3, [pc, #108]	; (80094bc <motor_InitTask+0x90>)
 800944e:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8009452:	81da      	strh	r2, [r3, #14]
	motor_info.motors[MOTOR_MAIN].cur_pwm = motor_info.motors[MOTOR_MAIN].idle_pwm;
 8009454:	4b19      	ldr	r3, [pc, #100]	; (80094bc <motor_InitTask+0x90>)
 8009456:	89db      	ldrh	r3, [r3, #14]
 8009458:	b29a      	uxth	r2, r3
 800945a:	4b18      	ldr	r3, [pc, #96]	; (80094bc <motor_InitTask+0x90>)
 800945c:	815a      	strh	r2, [r3, #10]
	motor_info.motors[MOTOR_MAIN].max_pwm = 950;
 800945e:	4b17      	ldr	r3, [pc, #92]	; (80094bc <motor_InitTask+0x90>)
 8009460:	f240 32b6 	movw	r2, #950	; 0x3b6
 8009464:	825a      	strh	r2, [r3, #18]
	motor_info.motors[MOTOR_MAIN].enable = 1;
 8009466:	4b15      	ldr	r3, [pc, #84]	; (80094bc <motor_InitTask+0x90>)
 8009468:	2201      	movs	r2, #1
 800946a:	721a      	strb	r2, [r3, #8]

	//Initialize beginning state
	for( uint8_t i = 0; i < MOTORS_NUM; i++ )
 800946c:	2300      	movs	r3, #0
 800946e:	71fb      	strb	r3, [r7, #7]
 8009470:	e016      	b.n	80094a0 <motor_InitTask+0x74>
	{
		HAL_TIM_PWM_Start(motor_info.motors[i].tim, motor_info.motors[i].timch);
 8009472:	79fa      	ldrb	r2, [r7, #7]
 8009474:	4911      	ldr	r1, [pc, #68]	; (80094bc <motor_InitTask+0x90>)
 8009476:	4613      	mov	r3, r2
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	4413      	add	r3, r2
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	440b      	add	r3, r1
 8009480:	6818      	ldr	r0, [r3, #0]
 8009482:	79fa      	ldrb	r2, [r7, #7]
 8009484:	490d      	ldr	r1, [pc, #52]	; (80094bc <motor_InitTask+0x90>)
 8009486:	4613      	mov	r3, r2
 8009488:	009b      	lsls	r3, r3, #2
 800948a:	4413      	add	r3, r2
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	440b      	add	r3, r1
 8009490:	3304      	adds	r3, #4
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4619      	mov	r1, r3
 8009496:	f006 fd2b 	bl	800fef0 <HAL_TIM_PWM_Start>
	for( uint8_t i = 0; i < MOTORS_NUM; i++ )
 800949a:	79fb      	ldrb	r3, [r7, #7]
 800949c:	3301      	adds	r3, #1
 800949e:	71fb      	strb	r3, [r7, #7]
 80094a0:	79fb      	ldrb	r3, [r7, #7]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d0e5      	beq.n	8009472 <motor_InitTask+0x46>
	}

	motor_setTorque(MOTOR_MAIN, motor_info.motors[MOTOR_MAIN].cur_torq);
 80094a6:	4b05      	ldr	r3, [pc, #20]	; (80094bc <motor_InitTask+0x90>)
 80094a8:	7b1b      	ldrb	r3, [r3, #12]
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	4619      	mov	r1, r3
 80094ae:	2000      	movs	r0, #0
 80094b0:	f000 f92e 	bl	8009710 <motor_setTorque>

	return;
 80094b4:	bf00      	nop
}
 80094b6:	3708      	adds	r7, #8
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	20000e4c 	.word	0x20000e4c
 80094c0:	20000b78 	.word	0x20000b78

080094c4 <motor_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void motor_Task(void)
{
 80094c4:	b480      	push	{r7}
 80094c6:	af00      	add	r7, sp, #0
#ifdef NO_MOTOR
	return;
#endif //NO_MOTOR

	return;
 80094c8:	bf00      	nop
}
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr
	...

080094d4 <motor_setEnable>:

void motor_setEnable(uint8_t motor, uint8_t ena)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	4603      	mov	r3, r0
 80094dc:	460a      	mov	r2, r1
 80094de:	71fb      	strb	r3, [r7, #7]
 80094e0:	4613      	mov	r3, r2
 80094e2:	71bb      	strb	r3, [r7, #6]
#ifdef NO_MOTOR
	return;
#endif //NO_MOTOR

	if( motor >= MOTORS_NUM ){
 80094e4:	79fb      	ldrb	r3, [r7, #7]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	f040 8109 	bne.w	80096fe <motor_setEnable+0x22a>
		return;
	}

	motor_info.motors[motor].enable = ena;
 80094ec:	79fa      	ldrb	r2, [r7, #7]
 80094ee:	4987      	ldr	r1, [pc, #540]	; (800970c <motor_setEnable+0x238>)
 80094f0:	4613      	mov	r3, r2
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	4413      	add	r3, r2
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	440b      	add	r3, r1
 80094fa:	3308      	adds	r3, #8
 80094fc:	79ba      	ldrb	r2, [r7, #6]
 80094fe:	701a      	strb	r2, [r3, #0]

	if( motor_info.motors[motor].enable == 1 ){
 8009500:	79fa      	ldrb	r2, [r7, #7]
 8009502:	4982      	ldr	r1, [pc, #520]	; (800970c <motor_setEnable+0x238>)
 8009504:	4613      	mov	r3, r2
 8009506:	009b      	lsls	r3, r3, #2
 8009508:	4413      	add	r3, r2
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	440b      	add	r3, r1
 800950e:	3308      	adds	r3, #8
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	b2db      	uxtb	r3, r3
 8009514:	2b01      	cmp	r3, #1
 8009516:	d178      	bne.n	800960a <motor_setEnable+0x136>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 8009518:	79fa      	ldrb	r2, [r7, #7]
 800951a:	497c      	ldr	r1, [pc, #496]	; (800970c <motor_setEnable+0x238>)
 800951c:	4613      	mov	r3, r2
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	4413      	add	r3, r2
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	440b      	add	r3, r1
 8009526:	3304      	adds	r3, #4
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d115      	bne.n	800955a <motor_setEnable+0x86>
 800952e:	79fa      	ldrb	r2, [r7, #7]
 8009530:	4976      	ldr	r1, [pc, #472]	; (800970c <motor_setEnable+0x238>)
 8009532:	4613      	mov	r3, r2
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	4413      	add	r3, r2
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	440b      	add	r3, r1
 800953c:	330a      	adds	r3, #10
 800953e:	881b      	ldrh	r3, [r3, #0]
 8009540:	b298      	uxth	r0, r3
 8009542:	79fa      	ldrb	r2, [r7, #7]
 8009544:	4971      	ldr	r1, [pc, #452]	; (800970c <motor_setEnable+0x238>)
 8009546:	4613      	mov	r3, r2
 8009548:	009b      	lsls	r3, r3, #2
 800954a:	4413      	add	r3, r2
 800954c:	009b      	lsls	r3, r3, #2
 800954e:	440b      	add	r3, r1
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4602      	mov	r2, r0
 8009556:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else{
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].idle_pwm);
	}

	return;
 8009558:	e0d2      	b.n	8009700 <motor_setEnable+0x22c>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 800955a:	79fa      	ldrb	r2, [r7, #7]
 800955c:	496b      	ldr	r1, [pc, #428]	; (800970c <motor_setEnable+0x238>)
 800955e:	4613      	mov	r3, r2
 8009560:	009b      	lsls	r3, r3, #2
 8009562:	4413      	add	r3, r2
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	440b      	add	r3, r1
 8009568:	3304      	adds	r3, #4
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	2b04      	cmp	r3, #4
 800956e:	d115      	bne.n	800959c <motor_setEnable+0xc8>
 8009570:	79fa      	ldrb	r2, [r7, #7]
 8009572:	4966      	ldr	r1, [pc, #408]	; (800970c <motor_setEnable+0x238>)
 8009574:	4613      	mov	r3, r2
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	4413      	add	r3, r2
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	440b      	add	r3, r1
 800957e:	330a      	adds	r3, #10
 8009580:	881b      	ldrh	r3, [r3, #0]
 8009582:	b298      	uxth	r0, r3
 8009584:	79fa      	ldrb	r2, [r7, #7]
 8009586:	4961      	ldr	r1, [pc, #388]	; (800970c <motor_setEnable+0x238>)
 8009588:	4613      	mov	r3, r2
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	4413      	add	r3, r2
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	440b      	add	r3, r1
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	681a      	ldr	r2, [r3, #0]
 8009596:	4603      	mov	r3, r0
 8009598:	6393      	str	r3, [r2, #56]	; 0x38
 800959a:	e0af      	b.n	80096fc <motor_setEnable+0x228>
 800959c:	79fa      	ldrb	r2, [r7, #7]
 800959e:	495b      	ldr	r1, [pc, #364]	; (800970c <motor_setEnable+0x238>)
 80095a0:	4613      	mov	r3, r2
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	4413      	add	r3, r2
 80095a6:	009b      	lsls	r3, r3, #2
 80095a8:	440b      	add	r3, r1
 80095aa:	3304      	adds	r3, #4
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	2b08      	cmp	r3, #8
 80095b0:	d115      	bne.n	80095de <motor_setEnable+0x10a>
 80095b2:	79fa      	ldrb	r2, [r7, #7]
 80095b4:	4955      	ldr	r1, [pc, #340]	; (800970c <motor_setEnable+0x238>)
 80095b6:	4613      	mov	r3, r2
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	4413      	add	r3, r2
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	440b      	add	r3, r1
 80095c0:	330a      	adds	r3, #10
 80095c2:	881b      	ldrh	r3, [r3, #0]
 80095c4:	b298      	uxth	r0, r3
 80095c6:	79fa      	ldrb	r2, [r7, #7]
 80095c8:	4950      	ldr	r1, [pc, #320]	; (800970c <motor_setEnable+0x238>)
 80095ca:	4613      	mov	r3, r2
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	4413      	add	r3, r2
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	440b      	add	r3, r1
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	4603      	mov	r3, r0
 80095da:	63d3      	str	r3, [r2, #60]	; 0x3c
 80095dc:	e08e      	b.n	80096fc <motor_setEnable+0x228>
 80095de:	79fa      	ldrb	r2, [r7, #7]
 80095e0:	494a      	ldr	r1, [pc, #296]	; (800970c <motor_setEnable+0x238>)
 80095e2:	4613      	mov	r3, r2
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	4413      	add	r3, r2
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	440b      	add	r3, r1
 80095ec:	330a      	adds	r3, #10
 80095ee:	881b      	ldrh	r3, [r3, #0]
 80095f0:	b298      	uxth	r0, r3
 80095f2:	79fa      	ldrb	r2, [r7, #7]
 80095f4:	4945      	ldr	r1, [pc, #276]	; (800970c <motor_setEnable+0x238>)
 80095f6:	4613      	mov	r3, r2
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	4413      	add	r3, r2
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	440b      	add	r3, r1
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	4603      	mov	r3, r0
 8009606:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 8009608:	e07a      	b.n	8009700 <motor_setEnable+0x22c>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].idle_pwm);
 800960a:	79fa      	ldrb	r2, [r7, #7]
 800960c:	493f      	ldr	r1, [pc, #252]	; (800970c <motor_setEnable+0x238>)
 800960e:	4613      	mov	r3, r2
 8009610:	009b      	lsls	r3, r3, #2
 8009612:	4413      	add	r3, r2
 8009614:	009b      	lsls	r3, r3, #2
 8009616:	440b      	add	r3, r1
 8009618:	3304      	adds	r3, #4
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d115      	bne.n	800964c <motor_setEnable+0x178>
 8009620:	79fa      	ldrb	r2, [r7, #7]
 8009622:	493a      	ldr	r1, [pc, #232]	; (800970c <motor_setEnable+0x238>)
 8009624:	4613      	mov	r3, r2
 8009626:	009b      	lsls	r3, r3, #2
 8009628:	4413      	add	r3, r2
 800962a:	009b      	lsls	r3, r3, #2
 800962c:	440b      	add	r3, r1
 800962e:	330e      	adds	r3, #14
 8009630:	881b      	ldrh	r3, [r3, #0]
 8009632:	b298      	uxth	r0, r3
 8009634:	79fa      	ldrb	r2, [r7, #7]
 8009636:	4935      	ldr	r1, [pc, #212]	; (800970c <motor_setEnable+0x238>)
 8009638:	4613      	mov	r3, r2
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	4413      	add	r3, r2
 800963e:	009b      	lsls	r3, r3, #2
 8009640:	440b      	add	r3, r1
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4602      	mov	r2, r0
 8009648:	635a      	str	r2, [r3, #52]	; 0x34
	return;
 800964a:	e059      	b.n	8009700 <motor_setEnable+0x22c>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].idle_pwm);
 800964c:	79fa      	ldrb	r2, [r7, #7]
 800964e:	492f      	ldr	r1, [pc, #188]	; (800970c <motor_setEnable+0x238>)
 8009650:	4613      	mov	r3, r2
 8009652:	009b      	lsls	r3, r3, #2
 8009654:	4413      	add	r3, r2
 8009656:	009b      	lsls	r3, r3, #2
 8009658:	440b      	add	r3, r1
 800965a:	3304      	adds	r3, #4
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	2b04      	cmp	r3, #4
 8009660:	d115      	bne.n	800968e <motor_setEnable+0x1ba>
 8009662:	79fa      	ldrb	r2, [r7, #7]
 8009664:	4929      	ldr	r1, [pc, #164]	; (800970c <motor_setEnable+0x238>)
 8009666:	4613      	mov	r3, r2
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	4413      	add	r3, r2
 800966c:	009b      	lsls	r3, r3, #2
 800966e:	440b      	add	r3, r1
 8009670:	330e      	adds	r3, #14
 8009672:	881b      	ldrh	r3, [r3, #0]
 8009674:	b298      	uxth	r0, r3
 8009676:	79fa      	ldrb	r2, [r7, #7]
 8009678:	4924      	ldr	r1, [pc, #144]	; (800970c <motor_setEnable+0x238>)
 800967a:	4613      	mov	r3, r2
 800967c:	009b      	lsls	r3, r3, #2
 800967e:	4413      	add	r3, r2
 8009680:	009b      	lsls	r3, r3, #2
 8009682:	440b      	add	r3, r1
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	681a      	ldr	r2, [r3, #0]
 8009688:	4603      	mov	r3, r0
 800968a:	6393      	str	r3, [r2, #56]	; 0x38
	return;
 800968c:	e038      	b.n	8009700 <motor_setEnable+0x22c>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].idle_pwm);
 800968e:	79fa      	ldrb	r2, [r7, #7]
 8009690:	491e      	ldr	r1, [pc, #120]	; (800970c <motor_setEnable+0x238>)
 8009692:	4613      	mov	r3, r2
 8009694:	009b      	lsls	r3, r3, #2
 8009696:	4413      	add	r3, r2
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	440b      	add	r3, r1
 800969c:	3304      	adds	r3, #4
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	2b08      	cmp	r3, #8
 80096a2:	d115      	bne.n	80096d0 <motor_setEnable+0x1fc>
 80096a4:	79fa      	ldrb	r2, [r7, #7]
 80096a6:	4919      	ldr	r1, [pc, #100]	; (800970c <motor_setEnable+0x238>)
 80096a8:	4613      	mov	r3, r2
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	4413      	add	r3, r2
 80096ae:	009b      	lsls	r3, r3, #2
 80096b0:	440b      	add	r3, r1
 80096b2:	330e      	adds	r3, #14
 80096b4:	881b      	ldrh	r3, [r3, #0]
 80096b6:	b298      	uxth	r0, r3
 80096b8:	79fa      	ldrb	r2, [r7, #7]
 80096ba:	4914      	ldr	r1, [pc, #80]	; (800970c <motor_setEnable+0x238>)
 80096bc:	4613      	mov	r3, r2
 80096be:	009b      	lsls	r3, r3, #2
 80096c0:	4413      	add	r3, r2
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	440b      	add	r3, r1
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	681a      	ldr	r2, [r3, #0]
 80096ca:	4603      	mov	r3, r0
 80096cc:	63d3      	str	r3, [r2, #60]	; 0x3c
	return;
 80096ce:	e017      	b.n	8009700 <motor_setEnable+0x22c>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].idle_pwm);
 80096d0:	79fa      	ldrb	r2, [r7, #7]
 80096d2:	490e      	ldr	r1, [pc, #56]	; (800970c <motor_setEnable+0x238>)
 80096d4:	4613      	mov	r3, r2
 80096d6:	009b      	lsls	r3, r3, #2
 80096d8:	4413      	add	r3, r2
 80096da:	009b      	lsls	r3, r3, #2
 80096dc:	440b      	add	r3, r1
 80096de:	330e      	adds	r3, #14
 80096e0:	881b      	ldrh	r3, [r3, #0]
 80096e2:	b298      	uxth	r0, r3
 80096e4:	79fa      	ldrb	r2, [r7, #7]
 80096e6:	4909      	ldr	r1, [pc, #36]	; (800970c <motor_setEnable+0x238>)
 80096e8:	4613      	mov	r3, r2
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	4413      	add	r3, r2
 80096ee:	009b      	lsls	r3, r3, #2
 80096f0:	440b      	add	r3, r1
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	4603      	mov	r3, r0
 80096f8:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 80096fa:	e001      	b.n	8009700 <motor_setEnable+0x22c>
 80096fc:	e000      	b.n	8009700 <motor_setEnable+0x22c>
		return;
 80096fe:	bf00      	nop
}
 8009700:	370c      	adds	r7, #12
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr
 800970a:	bf00      	nop
 800970c:	20000e4c 	.word	0x20000e4c

08009710 <motor_setTorque>:

void motor_setTorque(uint8_t motor, uint8_t torq)
{
 8009710:	b590      	push	{r4, r7, lr}
 8009712:	b085      	sub	sp, #20
 8009714:	af02      	add	r7, sp, #8
 8009716:	4603      	mov	r3, r0
 8009718:	460a      	mov	r2, r1
 800971a:	71fb      	strb	r3, [r7, #7]
 800971c:	4613      	mov	r3, r2
 800971e:	71bb      	strb	r3, [r7, #6]
#ifdef NO_MOTOR
	return;
#endif //NO_MOTOR

	if( motor >= MOTORS_NUM ){
 8009720:	79fb      	ldrb	r3, [r7, #7]
 8009722:	2b00      	cmp	r3, #0
 8009724:	f040 80d9 	bne.w	80098da <motor_setTorque+0x1ca>
		return;
	}

	motor_info.motors[motor].cur_torq = torq;
 8009728:	79fa      	ldrb	r2, [r7, #7]
 800972a:	496f      	ldr	r1, [pc, #444]	; (80098e8 <motor_setTorque+0x1d8>)
 800972c:	4613      	mov	r3, r2
 800972e:	009b      	lsls	r3, r3, #2
 8009730:	4413      	add	r3, r2
 8009732:	009b      	lsls	r3, r3, #2
 8009734:	440b      	add	r3, r1
 8009736:	330c      	adds	r3, #12
 8009738:	79ba      	ldrb	r2, [r7, #6]
 800973a:	701a      	strb	r2, [r3, #0]
	if( torq == 0 ){
 800973c:	79bb      	ldrb	r3, [r7, #6]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d114      	bne.n	800976c <motor_setTorque+0x5c>
		motor_info.motors[motor].cur_pwm = motor_info.motors[motor].idle_pwm;
 8009742:	79f9      	ldrb	r1, [r7, #7]
 8009744:	79fa      	ldrb	r2, [r7, #7]
 8009746:	4868      	ldr	r0, [pc, #416]	; (80098e8 <motor_setTorque+0x1d8>)
 8009748:	460b      	mov	r3, r1
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	440b      	add	r3, r1
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	4403      	add	r3, r0
 8009752:	330e      	adds	r3, #14
 8009754:	881b      	ldrh	r3, [r3, #0]
 8009756:	b298      	uxth	r0, r3
 8009758:	4963      	ldr	r1, [pc, #396]	; (80098e8 <motor_setTorque+0x1d8>)
 800975a:	4613      	mov	r3, r2
 800975c:	009b      	lsls	r3, r3, #2
 800975e:	4413      	add	r3, r2
 8009760:	009b      	lsls	r3, r3, #2
 8009762:	440b      	add	r3, r1
 8009764:	330a      	adds	r3, #10
 8009766:	4602      	mov	r2, r0
 8009768:	801a      	strh	r2, [r3, #0]
 800976a:	e031      	b.n	80097d0 <motor_setTorque+0xc0>
	}
	else
	{
		motor_info.motors[motor].cur_pwm =
				motor_map((int32_t)motor_info.motors[motor].cur_torq,
 800976c:	79fa      	ldrb	r2, [r7, #7]
 800976e:	495e      	ldr	r1, [pc, #376]	; (80098e8 <motor_setTorque+0x1d8>)
 8009770:	4613      	mov	r3, r2
 8009772:	009b      	lsls	r3, r3, #2
 8009774:	4413      	add	r3, r2
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	440b      	add	r3, r1
 800977a:	330c      	adds	r3, #12
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	b2db      	uxtb	r3, r3
 8009780:	4618      	mov	r0, r3
							1, 100,
							(int32_t)motor_info.motors[motor].min_pwm,
 8009782:	79fa      	ldrb	r2, [r7, #7]
 8009784:	4958      	ldr	r1, [pc, #352]	; (80098e8 <motor_setTorque+0x1d8>)
 8009786:	4613      	mov	r3, r2
 8009788:	009b      	lsls	r3, r3, #2
 800978a:	4413      	add	r3, r2
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	440b      	add	r3, r1
 8009790:	3310      	adds	r3, #16
 8009792:	881b      	ldrh	r3, [r3, #0]
 8009794:	b29b      	uxth	r3, r3
				motor_map((int32_t)motor_info.motors[motor].cur_torq,
 8009796:	461c      	mov	r4, r3
							(int32_t)motor_info.motors[motor].max_pwm);
 8009798:	79fa      	ldrb	r2, [r7, #7]
 800979a:	4953      	ldr	r1, [pc, #332]	; (80098e8 <motor_setTorque+0x1d8>)
 800979c:	4613      	mov	r3, r2
 800979e:	009b      	lsls	r3, r3, #2
 80097a0:	4413      	add	r3, r2
 80097a2:	009b      	lsls	r3, r3, #2
 80097a4:	440b      	add	r3, r1
 80097a6:	3312      	adds	r3, #18
 80097a8:	881b      	ldrh	r3, [r3, #0]
 80097aa:	b29b      	uxth	r3, r3
				motor_map((int32_t)motor_info.motors[motor].cur_torq,
 80097ac:	9300      	str	r3, [sp, #0]
 80097ae:	4623      	mov	r3, r4
 80097b0:	2264      	movs	r2, #100	; 0x64
 80097b2:	2101      	movs	r1, #1
 80097b4:	f000 f89a 	bl	80098ec <motor_map>
 80097b8:	4603      	mov	r3, r0
		motor_info.motors[motor].cur_pwm =
 80097ba:	79fa      	ldrb	r2, [r7, #7]
 80097bc:	b298      	uxth	r0, r3
 80097be:	494a      	ldr	r1, [pc, #296]	; (80098e8 <motor_setTorque+0x1d8>)
 80097c0:	4613      	mov	r3, r2
 80097c2:	009b      	lsls	r3, r3, #2
 80097c4:	4413      	add	r3, r2
 80097c6:	009b      	lsls	r3, r3, #2
 80097c8:	440b      	add	r3, r1
 80097ca:	330a      	adds	r3, #10
 80097cc:	4602      	mov	r2, r0
 80097ce:	801a      	strh	r2, [r3, #0]
	}
	if( motor_info.motors[motor].enable == 1 ){
 80097d0:	79fa      	ldrb	r2, [r7, #7]
 80097d2:	4945      	ldr	r1, [pc, #276]	; (80098e8 <motor_setTorque+0x1d8>)
 80097d4:	4613      	mov	r3, r2
 80097d6:	009b      	lsls	r3, r3, #2
 80097d8:	4413      	add	r3, r2
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	440b      	add	r3, r1
 80097de:	3308      	adds	r3, #8
 80097e0:	781b      	ldrb	r3, [r3, #0]
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	d17a      	bne.n	80098de <motor_setTorque+0x1ce>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 80097e8:	79fa      	ldrb	r2, [r7, #7]
 80097ea:	493f      	ldr	r1, [pc, #252]	; (80098e8 <motor_setTorque+0x1d8>)
 80097ec:	4613      	mov	r3, r2
 80097ee:	009b      	lsls	r3, r3, #2
 80097f0:	4413      	add	r3, r2
 80097f2:	009b      	lsls	r3, r3, #2
 80097f4:	440b      	add	r3, r1
 80097f6:	3304      	adds	r3, #4
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d115      	bne.n	800982a <motor_setTorque+0x11a>
 80097fe:	79fa      	ldrb	r2, [r7, #7]
 8009800:	4939      	ldr	r1, [pc, #228]	; (80098e8 <motor_setTorque+0x1d8>)
 8009802:	4613      	mov	r3, r2
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	4413      	add	r3, r2
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	440b      	add	r3, r1
 800980c:	330a      	adds	r3, #10
 800980e:	881b      	ldrh	r3, [r3, #0]
 8009810:	b298      	uxth	r0, r3
 8009812:	79fa      	ldrb	r2, [r7, #7]
 8009814:	4934      	ldr	r1, [pc, #208]	; (80098e8 <motor_setTorque+0x1d8>)
 8009816:	4613      	mov	r3, r2
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	4413      	add	r3, r2
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	440b      	add	r3, r1
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	4602      	mov	r2, r0
 8009826:	635a      	str	r2, [r3, #52]	; 0x34
	}

	return;
 8009828:	e059      	b.n	80098de <motor_setTorque+0x1ce>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 800982a:	79fa      	ldrb	r2, [r7, #7]
 800982c:	492e      	ldr	r1, [pc, #184]	; (80098e8 <motor_setTorque+0x1d8>)
 800982e:	4613      	mov	r3, r2
 8009830:	009b      	lsls	r3, r3, #2
 8009832:	4413      	add	r3, r2
 8009834:	009b      	lsls	r3, r3, #2
 8009836:	440b      	add	r3, r1
 8009838:	3304      	adds	r3, #4
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	2b04      	cmp	r3, #4
 800983e:	d115      	bne.n	800986c <motor_setTorque+0x15c>
 8009840:	79fa      	ldrb	r2, [r7, #7]
 8009842:	4929      	ldr	r1, [pc, #164]	; (80098e8 <motor_setTorque+0x1d8>)
 8009844:	4613      	mov	r3, r2
 8009846:	009b      	lsls	r3, r3, #2
 8009848:	4413      	add	r3, r2
 800984a:	009b      	lsls	r3, r3, #2
 800984c:	440b      	add	r3, r1
 800984e:	330a      	adds	r3, #10
 8009850:	881b      	ldrh	r3, [r3, #0]
 8009852:	b298      	uxth	r0, r3
 8009854:	79fa      	ldrb	r2, [r7, #7]
 8009856:	4924      	ldr	r1, [pc, #144]	; (80098e8 <motor_setTorque+0x1d8>)
 8009858:	4613      	mov	r3, r2
 800985a:	009b      	lsls	r3, r3, #2
 800985c:	4413      	add	r3, r2
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	440b      	add	r3, r1
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	4603      	mov	r3, r0
 8009868:	6393      	str	r3, [r2, #56]	; 0x38
	return;
 800986a:	e038      	b.n	80098de <motor_setTorque+0x1ce>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 800986c:	79fa      	ldrb	r2, [r7, #7]
 800986e:	491e      	ldr	r1, [pc, #120]	; (80098e8 <motor_setTorque+0x1d8>)
 8009870:	4613      	mov	r3, r2
 8009872:	009b      	lsls	r3, r3, #2
 8009874:	4413      	add	r3, r2
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	440b      	add	r3, r1
 800987a:	3304      	adds	r3, #4
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	2b08      	cmp	r3, #8
 8009880:	d115      	bne.n	80098ae <motor_setTorque+0x19e>
 8009882:	79fa      	ldrb	r2, [r7, #7]
 8009884:	4918      	ldr	r1, [pc, #96]	; (80098e8 <motor_setTorque+0x1d8>)
 8009886:	4613      	mov	r3, r2
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	4413      	add	r3, r2
 800988c:	009b      	lsls	r3, r3, #2
 800988e:	440b      	add	r3, r1
 8009890:	330a      	adds	r3, #10
 8009892:	881b      	ldrh	r3, [r3, #0]
 8009894:	b298      	uxth	r0, r3
 8009896:	79fa      	ldrb	r2, [r7, #7]
 8009898:	4913      	ldr	r1, [pc, #76]	; (80098e8 <motor_setTorque+0x1d8>)
 800989a:	4613      	mov	r3, r2
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	4413      	add	r3, r2
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	440b      	add	r3, r1
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	681a      	ldr	r2, [r3, #0]
 80098a8:	4603      	mov	r3, r0
 80098aa:	63d3      	str	r3, [r2, #60]	; 0x3c
	return;
 80098ac:	e017      	b.n	80098de <motor_setTorque+0x1ce>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 80098ae:	79fa      	ldrb	r2, [r7, #7]
 80098b0:	490d      	ldr	r1, [pc, #52]	; (80098e8 <motor_setTorque+0x1d8>)
 80098b2:	4613      	mov	r3, r2
 80098b4:	009b      	lsls	r3, r3, #2
 80098b6:	4413      	add	r3, r2
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	440b      	add	r3, r1
 80098bc:	330a      	adds	r3, #10
 80098be:	881b      	ldrh	r3, [r3, #0]
 80098c0:	b298      	uxth	r0, r3
 80098c2:	79fa      	ldrb	r2, [r7, #7]
 80098c4:	4908      	ldr	r1, [pc, #32]	; (80098e8 <motor_setTorque+0x1d8>)
 80098c6:	4613      	mov	r3, r2
 80098c8:	009b      	lsls	r3, r3, #2
 80098ca:	4413      	add	r3, r2
 80098cc:	009b      	lsls	r3, r3, #2
 80098ce:	440b      	add	r3, r1
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	681a      	ldr	r2, [r3, #0]
 80098d4:	4603      	mov	r3, r0
 80098d6:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 80098d8:	e001      	b.n	80098de <motor_setTorque+0x1ce>
		return;
 80098da:	bf00      	nop
 80098dc:	e000      	b.n	80098e0 <motor_setTorque+0x1d0>
	return;
 80098de:	bf00      	nop
}
 80098e0:	370c      	adds	r7, #12
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd90      	pop	{r4, r7, pc}
 80098e6:	bf00      	nop
 80098e8:	20000e4c 	.word	0x20000e4c

080098ec <motor_map>:
  * 	toLow: the lower bound of the value’s target range.
  * 	toHigh: the upper bound of the value’s target range.
  * @retval The mapped value.
  */
int32_t motor_map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b085      	sub	sp, #20
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	607a      	str	r2, [r7, #4]
 80098f8:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80098fa:	68fa      	ldr	r2, [r7, #12]
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	1ad3      	subs	r3, r2, r3
 8009900:	69b9      	ldr	r1, [r7, #24]
 8009902:	683a      	ldr	r2, [r7, #0]
 8009904:	1a8a      	subs	r2, r1, r2
 8009906:	fb03 f202 	mul.w	r2, r3, r2
 800990a:	6879      	ldr	r1, [r7, #4]
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	1acb      	subs	r3, r1, r3
 8009910:	fb92 f2f3 	sdiv	r2, r2, r3
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	4413      	add	r3, r2
}
 8009918:	4618      	mov	r0, r3
 800991a:	3714      	adds	r7, #20
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr

08009924 <cfg_NodeMotorVarProp>:

/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeMotorVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 8009924:	b480      	push	{r7}
 8009926:	b087      	sub	sp, #28
 8009928:	af00      	add	r7, sp, #0
 800992a:	4603      	mov	r3, r0
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	607a      	str	r2, [r7, #4]
 8009930:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 8009932:	89fb      	ldrh	r3, [r7, #14]
 8009934:	2b05      	cmp	r3, #5
 8009936:	d821      	bhi.n	800997c <cfg_NodeMotorVarProp+0x58>
 8009938:	a201      	add	r2, pc, #4	; (adr r2, 8009940 <cfg_NodeMotorVarProp+0x1c>)
 800993a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800993e:	bf00      	nop
 8009940:	08009959 	.word	0x08009959
 8009944:	0800995f 	.word	0x0800995f
 8009948:	08009965 	.word	0x08009965
 800994c:	0800996b 	.word	0x0800996b
 8009950:	08009971 	.word	0x08009971
 8009954:	08009977 	.word	0x08009977
	{
		case MOTOR_ENA:				str = "Enable"; break;
 8009958:	4b2e      	ldr	r3, [pc, #184]	; (8009a14 <cfg_NodeMotorVarProp+0xf0>)
 800995a:	617b      	str	r3, [r7, #20]
 800995c:	e010      	b.n	8009980 <cfg_NodeMotorVarProp+0x5c>
		case MOTOR_CUR_TORQ:		str = "Current torque"; break;
 800995e:	4b2e      	ldr	r3, [pc, #184]	; (8009a18 <cfg_NodeMotorVarProp+0xf4>)
 8009960:	617b      	str	r3, [r7, #20]
 8009962:	e00d      	b.n	8009980 <cfg_NodeMotorVarProp+0x5c>
		case MOTOR_CUR_PWM:			str = "Current PWM"; break;
 8009964:	4b2d      	ldr	r3, [pc, #180]	; (8009a1c <cfg_NodeMotorVarProp+0xf8>)
 8009966:	617b      	str	r3, [r7, #20]
 8009968:	e00a      	b.n	8009980 <cfg_NodeMotorVarProp+0x5c>
		case MOTOR_IDLE_PWM:		str = "Idle PWM"; break;
 800996a:	4b2d      	ldr	r3, [pc, #180]	; (8009a20 <cfg_NodeMotorVarProp+0xfc>)
 800996c:	617b      	str	r3, [r7, #20]
 800996e:	e007      	b.n	8009980 <cfg_NodeMotorVarProp+0x5c>
		case MOTOR_MIN_PWM:			str = "Min PWM"; break;
 8009970:	4b2c      	ldr	r3, [pc, #176]	; (8009a24 <cfg_NodeMotorVarProp+0x100>)
 8009972:	617b      	str	r3, [r7, #20]
 8009974:	e004      	b.n	8009980 <cfg_NodeMotorVarProp+0x5c>
		case MOTOR_MAX_PWM:			str = "Max PWM"; break;
 8009976:	4b2c      	ldr	r3, [pc, #176]	; (8009a28 <cfg_NodeMotorVarProp+0x104>)
 8009978:	617b      	str	r3, [r7, #20]
 800997a:	e001      	b.n	8009980 <cfg_NodeMotorVarProp+0x5c>
		default: return CFG_ERROR_VARID;
 800997c:	2302      	movs	r3, #2
 800997e:	e042      	b.n	8009a06 <cfg_NodeMotorVarProp+0xe2>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d00f      	beq.n	80099a6 <cfg_NodeMotorVarProp+0x82>
 8009986:	e007      	b.n	8009998 <cfg_NodeMotorVarProp+0x74>
 8009988:	697a      	ldr	r2, [r7, #20]
 800998a:	1c53      	adds	r3, r2, #1
 800998c:	617b      	str	r3, [r7, #20]
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	1c59      	adds	r1, r3, #1
 8009992:	60b9      	str	r1, [r7, #8]
 8009994:	7812      	ldrb	r2, [r2, #0]
 8009996:	701a      	strb	r2, [r3, #0]
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d1f3      	bne.n	8009988 <cfg_NodeMotorVarProp+0x64>
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	2200      	movs	r2, #0
 80099a4:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d02b      	beq.n	8009a04 <cfg_NodeMotorVarProp+0xe0>
 80099ac:	89fb      	ldrh	r3, [r7, #14]
 80099ae:	2b05      	cmp	r3, #5
 80099b0:	d826      	bhi.n	8009a00 <cfg_NodeMotorVarProp+0xdc>
 80099b2:	a201      	add	r2, pc, #4	; (adr r2, 80099b8 <cfg_NodeMotorVarProp+0x94>)
 80099b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b8:	080099d1 	.word	0x080099d1
 80099bc:	080099d9 	.word	0x080099d9
 80099c0:	080099e1 	.word	0x080099e1
 80099c4:	080099e9 	.word	0x080099e9
 80099c8:	080099f1 	.word	0x080099f1
 80099cc:	080099f9 	.word	0x080099f9
	{
		case MOTOR_ENA:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_CONST; break;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2223      	movs	r2, #35	; 0x23
 80099d4:	801a      	strh	r2, [r3, #0]
 80099d6:	e015      	b.n	8009a04 <cfg_NodeMotorVarProp+0xe0>
		case MOTOR_CUR_TORQ:		*prop = CFG_VAR_TYPE_UINT; break;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2202      	movs	r2, #2
 80099dc:	801a      	strh	r2, [r3, #0]
 80099de:	e011      	b.n	8009a04 <cfg_NodeMotorVarProp+0xe0>
		case MOTOR_CUR_PWM:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2212      	movs	r2, #18
 80099e4:	801a      	strh	r2, [r3, #0]
 80099e6:	e00d      	b.n	8009a04 <cfg_NodeMotorVarProp+0xe0>
		case MOTOR_IDLE_PWM:		*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2222      	movs	r2, #34	; 0x22
 80099ec:	801a      	strh	r2, [r3, #0]
 80099ee:	e009      	b.n	8009a04 <cfg_NodeMotorVarProp+0xe0>
		case MOTOR_MIN_PWM:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2222      	movs	r2, #34	; 0x22
 80099f4:	801a      	strh	r2, [r3, #0]
 80099f6:	e005      	b.n	8009a04 <cfg_NodeMotorVarProp+0xe0>
		case MOTOR_MAX_PWM:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2222      	movs	r2, #34	; 0x22
 80099fc:	801a      	strh	r2, [r3, #0]
 80099fe:	e001      	b.n	8009a04 <cfg_NodeMotorVarProp+0xe0>
		default: return CFG_ERROR_VARID;
 8009a00:	2302      	movs	r3, #2
 8009a02:	e000      	b.n	8009a06 <cfg_NodeMotorVarProp+0xe2>
	}
	return CFG_ERROR_NONE;
 8009a04:	2300      	movs	r3, #0
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	371c      	adds	r7, #28
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr
 8009a12:	bf00      	nop
 8009a14:	08016988 	.word	0x08016988
 8009a18:	08016990 	.word	0x08016990
 8009a1c:	080169a0 	.word	0x080169a0
 8009a20:	080169ac 	.word	0x080169ac
 8009a24:	080169b8 	.word	0x080169b8
 8009a28:	080169c0 	.word	0x080169c0

08009a2c <cfg_NodeMotorVarGet>:

uint16_t cfg_NodeMotorVarGet(uint16_t varid, void *value)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	4603      	mov	r3, r0
 8009a34:	6039      	str	r1, [r7, #0]
 8009a36:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d03e      	beq.n	8009abc <cfg_NodeMotorVarGet+0x90>
 8009a3e:	88fb      	ldrh	r3, [r7, #6]
 8009a40:	2b05      	cmp	r3, #5
 8009a42:	d839      	bhi.n	8009ab8 <cfg_NodeMotorVarGet+0x8c>
 8009a44:	a201      	add	r2, pc, #4	; (adr r2, 8009a4c <cfg_NodeMotorVarGet+0x20>)
 8009a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a4a:	bf00      	nop
 8009a4c:	08009a65 	.word	0x08009a65
 8009a50:	08009a73 	.word	0x08009a73
 8009a54:	08009a81 	.word	0x08009a81
 8009a58:	08009a8f 	.word	0x08009a8f
 8009a5c:	08009a9d 	.word	0x08009a9d
 8009a60:	08009aab 	.word	0x08009aab
	{
		case MOTOR_ENA: 				*(uint32_t*)value = (uint32_t)motor_info.motors[MOTOR_MAIN].enable; break;
 8009a64:	4b19      	ldr	r3, [pc, #100]	; (8009acc <cfg_NodeMotorVarGet+0xa0>)
 8009a66:	7a1b      	ldrb	r3, [r3, #8]
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	601a      	str	r2, [r3, #0]
 8009a70:	e024      	b.n	8009abc <cfg_NodeMotorVarGet+0x90>
		case MOTOR_CUR_TORQ: 			*(uint32_t*)value = (uint32_t)motor_info.motors[MOTOR_MAIN].cur_torq; break;
 8009a72:	4b16      	ldr	r3, [pc, #88]	; (8009acc <cfg_NodeMotorVarGet+0xa0>)
 8009a74:	7b1b      	ldrb	r3, [r3, #12]
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	461a      	mov	r2, r3
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	601a      	str	r2, [r3, #0]
 8009a7e:	e01d      	b.n	8009abc <cfg_NodeMotorVarGet+0x90>
		case MOTOR_CUR_PWM: 			*(uint32_t*)value = (uint32_t)motor_info.motors[MOTOR_MAIN].cur_pwm; break;
 8009a80:	4b12      	ldr	r3, [pc, #72]	; (8009acc <cfg_NodeMotorVarGet+0xa0>)
 8009a82:	895b      	ldrh	r3, [r3, #10]
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	461a      	mov	r2, r3
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	601a      	str	r2, [r3, #0]
 8009a8c:	e016      	b.n	8009abc <cfg_NodeMotorVarGet+0x90>
		case MOTOR_IDLE_PWM: 			*(uint32_t*)value = (int32_t)motor_info.motors[MOTOR_MAIN].idle_pwm; break;
 8009a8e:	4b0f      	ldr	r3, [pc, #60]	; (8009acc <cfg_NodeMotorVarGet+0xa0>)
 8009a90:	89db      	ldrh	r3, [r3, #14]
 8009a92:	b29b      	uxth	r3, r3
 8009a94:	461a      	mov	r2, r3
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	601a      	str	r2, [r3, #0]
 8009a9a:	e00f      	b.n	8009abc <cfg_NodeMotorVarGet+0x90>
		case MOTOR_MIN_PWM: 			*(uint32_t*)value = (int32_t)motor_info.motors[MOTOR_MAIN].min_pwm; break;
 8009a9c:	4b0b      	ldr	r3, [pc, #44]	; (8009acc <cfg_NodeMotorVarGet+0xa0>)
 8009a9e:	8a1b      	ldrh	r3, [r3, #16]
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	601a      	str	r2, [r3, #0]
 8009aa8:	e008      	b.n	8009abc <cfg_NodeMotorVarGet+0x90>
		case MOTOR_MAX_PWM: 			*(uint32_t*)value = (uint32_t)motor_info.motors[MOTOR_MAIN].max_pwm; break;
 8009aaa:	4b08      	ldr	r3, [pc, #32]	; (8009acc <cfg_NodeMotorVarGet+0xa0>)
 8009aac:	8a5b      	ldrh	r3, [r3, #18]
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	601a      	str	r2, [r3, #0]
 8009ab6:	e001      	b.n	8009abc <cfg_NodeMotorVarGet+0x90>
		default: return CFG_ERROR_VARID;
 8009ab8:	2302      	movs	r3, #2
 8009aba:	e000      	b.n	8009abe <cfg_NodeMotorVarGet+0x92>
	}
	return CFG_ERROR_NONE;
 8009abc:	2300      	movs	r3, #0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	370c      	adds	r7, #12
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr
 8009aca:	bf00      	nop
 8009acc:	20000e4c 	.word	0x20000e4c

08009ad0 <cfg_NodeMotorVarSet>:

uint16_t cfg_NodeMotorVarSet(uint16_t varid, void *value)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b082      	sub	sp, #8
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	6039      	str	r1, [r7, #0]
 8009ada:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d037      	beq.n	8009b52 <cfg_NodeMotorVarSet+0x82>
 8009ae2:	88fb      	ldrh	r3, [r7, #6]
 8009ae4:	2b05      	cmp	r3, #5
 8009ae6:	d831      	bhi.n	8009b4c <cfg_NodeMotorVarSet+0x7c>
 8009ae8:	a201      	add	r2, pc, #4	; (adr r2, 8009af0 <cfg_NodeMotorVarSet+0x20>)
 8009aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aee:	bf00      	nop
 8009af0:	08009b09 	.word	0x08009b09
 8009af4:	08009b19 	.word	0x08009b19
 8009af8:	08009b51 	.word	0x08009b51
 8009afc:	08009b29 	.word	0x08009b29
 8009b00:	08009b35 	.word	0x08009b35
 8009b04:	08009b41 	.word	0x08009b41
	{
		case MOTOR_ENA:				motor_setEnable(MOTOR_MAIN, (uint8_t)*(uint32_t*)value); break;
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	4619      	mov	r1, r3
 8009b10:	2000      	movs	r0, #0
 8009b12:	f7ff fcdf 	bl	80094d4 <motor_setEnable>
 8009b16:	e01c      	b.n	8009b52 <cfg_NodeMotorVarSet+0x82>
		case MOTOR_CUR_TORQ:		motor_setTorque(MOTOR_MAIN, (uint8_t)*(uint32_t*)value); break;
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	b2db      	uxtb	r3, r3
 8009b1e:	4619      	mov	r1, r3
 8009b20:	2000      	movs	r0, #0
 8009b22:	f7ff fdf5 	bl	8009710 <motor_setTorque>
 8009b26:	e014      	b.n	8009b52 <cfg_NodeMotorVarSet+0x82>
		case MOTOR_CUR_PWM:			break;
		case MOTOR_IDLE_PWM:		motor_info.motors[MOTOR_MAIN].idle_pwm = (uint16_t)*(uint32_t*)value; break;
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	b29a      	uxth	r2, r3
 8009b2e:	4b0b      	ldr	r3, [pc, #44]	; (8009b5c <cfg_NodeMotorVarSet+0x8c>)
 8009b30:	81da      	strh	r2, [r3, #14]
 8009b32:	e00e      	b.n	8009b52 <cfg_NodeMotorVarSet+0x82>
		case MOTOR_MIN_PWM:			motor_info.motors[MOTOR_MAIN].min_pwm = (uint16_t)*(uint32_t*)value; break;
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	b29a      	uxth	r2, r3
 8009b3a:	4b08      	ldr	r3, [pc, #32]	; (8009b5c <cfg_NodeMotorVarSet+0x8c>)
 8009b3c:	821a      	strh	r2, [r3, #16]
 8009b3e:	e008      	b.n	8009b52 <cfg_NodeMotorVarSet+0x82>
		case MOTOR_MAX_PWM:			motor_info.motors[MOTOR_MAIN].max_pwm = (uint16_t)*(uint32_t*)value; break;
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	b29a      	uxth	r2, r3
 8009b46:	4b05      	ldr	r3, [pc, #20]	; (8009b5c <cfg_NodeMotorVarSet+0x8c>)
 8009b48:	825a      	strh	r2, [r3, #18]
 8009b4a:	e002      	b.n	8009b52 <cfg_NodeMotorVarSet+0x82>
		default: return CFG_ERROR_VARID;
 8009b4c:	2302      	movs	r3, #2
 8009b4e:	e001      	b.n	8009b54 <cfg_NodeMotorVarSet+0x84>
		case MOTOR_CUR_PWM:			break;
 8009b50:	bf00      	nop
	}
	return CFG_ERROR_NONE;
 8009b52:	2300      	movs	r3, #0
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3708      	adds	r7, #8
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}
 8009b5c:	20000e4c 	.word	0x20000e4c

08009b60 <rc_Timer>:

uint16_t rc_ringBufRead16b(uint8_t *buf, uint16_t pos);
void rc_AddTxData(uint8_t *data, uint32_t len);

void rc_Timer(uint32_t res)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b085      	sub	sp, #20
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
#ifdef NO_RC
	return;
#endif //NO_RC

	for( uint8_t i = 0; i < RC_TMR_NUM; i++ )
 8009b68:	2300      	movs	r3, #0
 8009b6a:	73fb      	strb	r3, [r7, #15]
 8009b6c:	e010      	b.n	8009b90 <rc_Timer+0x30>
	{
		if( rc_info.timer[i] > 0 ){
 8009b6e:	7bfb      	ldrb	r3, [r7, #15]
 8009b70:	4a0c      	ldr	r2, [pc, #48]	; (8009ba4 <rc_Timer+0x44>)
 8009b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d007      	beq.n	8009b8a <rc_Timer+0x2a>
			rc_info.timer[i]--;
 8009b7a:	7bfb      	ldrb	r3, [r7, #15]
 8009b7c:	4a09      	ldr	r2, [pc, #36]	; (8009ba4 <rc_Timer+0x44>)
 8009b7e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009b82:	3a01      	subs	r2, #1
 8009b84:	4907      	ldr	r1, [pc, #28]	; (8009ba4 <rc_Timer+0x44>)
 8009b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for( uint8_t i = 0; i < RC_TMR_NUM; i++ )
 8009b8a:	7bfb      	ldrb	r3, [r7, #15]
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	73fb      	strb	r3, [r7, #15]
 8009b90:	7bfb      	ldrb	r3, [r7, #15]
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d9eb      	bls.n	8009b6e <rc_Timer+0xe>
		}
	}

	return;
 8009b96:	bf00      	nop
}
 8009b98:	3714      	adds	r7, #20
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba0:	4770      	bx	lr
 8009ba2:	bf00      	nop
 8009ba4:	20000e70 	.word	0x20000e70

08009ba8 <rc_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void rc_InitTask()
{
 8009ba8:	b480      	push	{r7}
 8009baa:	af00      	add	r7, sp, #0
#ifdef NO_RC
	return;
#endif //NO_RC

	rc_info.enable = 1;
 8009bac:	4b11      	ldr	r3, [pc, #68]	; (8009bf4 <rc_InitTask+0x4c>)
 8009bae:	2201      	movs	r2, #1
 8009bb0:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
	rc_info.mode = 0;
 8009bb4:	4b0f      	ldr	r3, [pc, #60]	; (8009bf4 <rc_InitTask+0x4c>)
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
	rc_info.rx_pkt_cnt = 0;
 8009bbc:	4b0d      	ldr	r3, [pc, #52]	; (8009bf4 <rc_InitTask+0x4c>)
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	rc_info.conn_tout = RC_DEF_CONN_TOUT;
 8009bc4:	4b0b      	ldr	r3, [pc, #44]	; (8009bf4 <rc_InitTask+0x4c>)
 8009bc6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8009bca:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	rc_info.send_tlm = 1;
 8009bce:	4b09      	ldr	r3, [pc, #36]	; (8009bf4 <rc_InitTask+0x4c>)
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b

	rc_info.rx_buf.head = 0;
 8009bd6:	4b07      	ldr	r3, [pc, #28]	; (8009bf4 <rc_InitTask+0x4c>)
 8009bd8:	2200      	movs	r2, #0
 8009bda:	815a      	strh	r2, [r3, #10]
	rc_info.rx_buf.tail = 0;
 8009bdc:	4b05      	ldr	r3, [pc, #20]	; (8009bf4 <rc_InitTask+0x4c>)
 8009bde:	2200      	movs	r2, #0
 8009be0:	819a      	strh	r2, [r3, #12]
	rc_info.rx_buf.state = RCRINGBUF_WAIT_HEADER;
 8009be2:	4b04      	ldr	r3, [pc, #16]	; (8009bf4 <rc_InitTask+0x4c>)
 8009be4:	2200      	movs	r2, #0
 8009be6:	721a      	strb	r2, [r3, #8]

	return;
 8009be8:	bf00      	nop
}
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr
 8009bf2:	bf00      	nop
 8009bf4:	20000e70 	.word	0x20000e70

08009bf8 <rc_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void rc_Task(void)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b082      	sub	sp, #8
 8009bfc:	af00      	add	r7, sp, #0

	uint8_t tmp_u8;
	uint16_t tmp_u16;

	//Receiving
	if( rc_info.rvd_pkt_size != 0 ){
 8009bfe:	4b53      	ldr	r3, [pc, #332]	; (8009d4c <rc_Task+0x154>)
 8009c00:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d047      	beq.n	8009c98 <rc_Task+0xa0>
		rc_info.timer[RC_TMR_CONN] = rc_info.conn_tout;
 8009c08:	4b50      	ldr	r3, [pc, #320]	; (8009d4c <rc_Task+0x154>)
 8009c0a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8009c0e:	4a4f      	ldr	r2, [pc, #316]	; (8009d4c <rc_Task+0x154>)
 8009c10:	6013      	str	r3, [r2, #0]
		if( rc_info.connected == 0 ){
 8009c12:	4b4e      	ldr	r3, [pc, #312]	; (8009d4c <rc_Task+0x154>)
 8009c14:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d103      	bne.n	8009c26 <rc_Task+0x2e>
			rc_info.connected = 1;
 8009c1e:	4b4b      	ldr	r3, [pc, #300]	; (8009d4c <rc_Task+0x154>)
 8009c20:	2201      	movs	r2, #1
 8009c22:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
		}

		rc_info.axis_l_x = (int8_t)rc_info.rvd_pkt[0];
 8009c26:	4b49      	ldr	r3, [pc, #292]	; (8009d4c <rc_Task+0x154>)
 8009c28:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8009c2c:	b2db      	uxtb	r3, r3
 8009c2e:	b25a      	sxtb	r2, r3
 8009c30:	4b46      	ldr	r3, [pc, #280]	; (8009d4c <rc_Task+0x154>)
 8009c32:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
		rc_info.axis_l_y = (int8_t)rc_info.rvd_pkt[1];
 8009c36:	4b45      	ldr	r3, [pc, #276]	; (8009d4c <rc_Task+0x154>)
 8009c38:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	b25a      	sxtb	r2, r3
 8009c40:	4b42      	ldr	r3, [pc, #264]	; (8009d4c <rc_Task+0x154>)
 8009c42:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
		rc_info.axis_r_x = (int8_t)rc_info.rvd_pkt[2];
 8009c46:	4b41      	ldr	r3, [pc, #260]	; (8009d4c <rc_Task+0x154>)
 8009c48:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8009c4c:	b2db      	uxtb	r3, r3
 8009c4e:	b25a      	sxtb	r2, r3
 8009c50:	4b3e      	ldr	r3, [pc, #248]	; (8009d4c <rc_Task+0x154>)
 8009c52:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
		rc_info.axis_r_y = (int8_t)rc_info.rvd_pkt[3];
 8009c56:	4b3d      	ldr	r3, [pc, #244]	; (8009d4c <rc_Task+0x154>)
 8009c58:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8009c5c:	b2db      	uxtb	r3, r3
 8009c5e:	b25a      	sxtb	r2, r3
 8009c60:	4b3a      	ldr	r3, [pc, #232]	; (8009d4c <rc_Task+0x154>)
 8009c62:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
		rc_info.button_l = rc_info.rvd_pkt[4];
 8009c66:	4b39      	ldr	r3, [pc, #228]	; (8009d4c <rc_Task+0x154>)
 8009c68:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8009c6c:	b2da      	uxtb	r2, r3
 8009c6e:	4b37      	ldr	r3, [pc, #220]	; (8009d4c <rc_Task+0x154>)
 8009c70:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
		rc_info.button_r = rc_info.rvd_pkt[5];
 8009c74:	4b35      	ldr	r3, [pc, #212]	; (8009d4c <rc_Task+0x154>)
 8009c76:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8009c7a:	b2da      	uxtb	r2, r3
 8009c7c:	4b33      	ldr	r3, [pc, #204]	; (8009d4c <rc_Task+0x154>)
 8009c7e:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125

		rc_info.rx_pkt_cnt += 1;
 8009c82:	4b32      	ldr	r3, [pc, #200]	; (8009d4c <rc_Task+0x154>)
 8009c84:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8009c88:	3301      	adds	r3, #1
 8009c8a:	4a30      	ldr	r2, [pc, #192]	; (8009d4c <rc_Task+0x154>)
 8009c8c:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
		rc_info.rvd_pkt_size = 0;
 8009c90:	4b2e      	ldr	r3, [pc, #184]	; (8009d4c <rc_Task+0x154>)
 8009c92:	2200      	movs	r2, #0
 8009c94:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

	}

	//Connection tout condition
	if( (rc_info.timer[RC_TMR_CONN] == 0) && (rc_info.connected == 1) ){
 8009c98:	4b2c      	ldr	r3, [pc, #176]	; (8009d4c <rc_Task+0x154>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d109      	bne.n	8009cb4 <rc_Task+0xbc>
 8009ca0:	4b2a      	ldr	r3, [pc, #168]	; (8009d4c <rc_Task+0x154>)
 8009ca2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8009ca6:	b2db      	uxtb	r3, r3
 8009ca8:	2b01      	cmp	r3, #1
 8009caa:	d103      	bne.n	8009cb4 <rc_Task+0xbc>
		rc_info.connected = 0;
 8009cac:	4b27      	ldr	r3, [pc, #156]	; (8009d4c <rc_Task+0x154>)
 8009cae:	2200      	movs	r2, #0
 8009cb0:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
	}

	//Transmitting
	if( (rc_info.timer[RC_TMR_TRM_TLM] == 0)
 8009cb4:	4b25      	ldr	r3, [pc, #148]	; (8009d4c <rc_Task+0x154>)
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d142      	bne.n	8009d42 <rc_Task+0x14a>
			&& (rc_info.send_tlm == 1) && (rc_info.connected == 1) )
 8009cbc:	4b23      	ldr	r3, [pc, #140]	; (8009d4c <rc_Task+0x154>)
 8009cbe:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d13c      	bne.n	8009d42 <rc_Task+0x14a>
 8009cc8:	4b20      	ldr	r3, [pc, #128]	; (8009d4c <rc_Task+0x154>)
 8009cca:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8009cce:	b2db      	uxtb	r3, r3
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	d136      	bne.n	8009d42 <rc_Task+0x14a>
	{
		rc_info.timer[RC_TMR_TRM_TLM] = RC_TLM_SND_PERIOD;
 8009cd4:	4b1d      	ldr	r3, [pc, #116]	; (8009d4c <rc_Task+0x154>)
 8009cd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009cda:	605a      	str	r2, [r3, #4]
		tmp_u16 = RC_HEADER;
 8009cdc:	f648 43c8 	movw	r3, #36040	; 0x8cc8
 8009ce0:	80bb      	strh	r3, [r7, #4]
		rc_AddTxData((uint8_t*)&tmp_u16, 2);
 8009ce2:	1d3b      	adds	r3, r7, #4
 8009ce4:	2102      	movs	r1, #2
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f000 f904 	bl	8009ef4 <rc_AddTxData>
		tmp_u8 = 5;
 8009cec:	2305      	movs	r3, #5
 8009cee:	71fb      	strb	r3, [r7, #7]
		rc_AddTxData(&tmp_u8, 1);
 8009cf0:	1dfb      	adds	r3, r7, #7
 8009cf2:	2101      	movs	r1, #1
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f000 f8fd 	bl	8009ef4 <rc_AddTxData>
		tmp_u8 = autopilot_info.armed_flag;
 8009cfa:	4b15      	ldr	r3, [pc, #84]	; (8009d50 <rc_Task+0x158>)
 8009cfc:	7e5b      	ldrb	r3, [r3, #25]
 8009cfe:	b2db      	uxtb	r3, r3
 8009d00:	71fb      	strb	r3, [r7, #7]
		rc_AddTxData(&tmp_u8, 1);
 8009d02:	1dfb      	adds	r3, r7, #7
 8009d04:	2101      	movs	r1, #1
 8009d06:	4618      	mov	r0, r3
 8009d08:	f000 f8f4 	bl	8009ef4 <rc_AddTxData>
		tmp_u16 = battery_info.battery_volatge;
 8009d0c:	4b11      	ldr	r3, [pc, #68]	; (8009d54 <rc_Task+0x15c>)
 8009d0e:	89db      	ldrh	r3, [r3, #14]
 8009d10:	b29b      	uxth	r3, r3
 8009d12:	80bb      	strh	r3, [r7, #4]
		rc_AddTxData((uint8_t*)&tmp_u16, 2);
 8009d14:	1d3b      	adds	r3, r7, #4
 8009d16:	2102      	movs	r1, #2
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f000 f8eb 	bl	8009ef4 <rc_AddTxData>
		tmp_u16 = crc16_calc(_rc_tx_buf, _rc_tx_buf_len);
 8009d1e:	4b0e      	ldr	r3, [pc, #56]	; (8009d58 <rc_Task+0x160>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	b29b      	uxth	r3, r3
 8009d24:	4619      	mov	r1, r3
 8009d26:	480d      	ldr	r0, [pc, #52]	; (8009d5c <rc_Task+0x164>)
 8009d28:	f7fa f8a4 	bl	8003e74 <crc16_calc>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	80bb      	strh	r3, [r7, #4]
		rc_AddTxData((uint8_t*)&tmp_u16, 2);
 8009d30:	1d3b      	adds	r3, r7, #4
 8009d32:	2102      	movs	r1, #2
 8009d34:	4618      	mov	r0, r3
 8009d36:	f000 f8dd 	bl	8009ef4 <rc_AddTxData>
		//modem_TrmData(SYSTEM_RC_MODEM_CH, _rc_tx_buf, _rc_tx_buf_len);
		_rc_tx_buf_len = 0;
 8009d3a:	4b07      	ldr	r3, [pc, #28]	; (8009d58 <rc_Task+0x160>)
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	601a      	str	r2, [r3, #0]
	}

	return;
 8009d40:	bf00      	nop
 8009d42:	bf00      	nop
}
 8009d44:	3708      	adds	r7, #8
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
 8009d4a:	bf00      	nop
 8009d4c:	20000e70 	.word	0x20000e70
 8009d50:	200002ac 	.word	0x200002ac
 8009d54:	200003bc 	.word	0x200003bc
 8009d58:	20001020 	.word	0x20001020
 8009d5c:	20000fa0 	.word	0x20000fa0

08009d60 <rc_RcvData>:

void rc_RcvData(uint8_t data)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b084      	sub	sp, #16
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	4603      	mov	r3, r0
 8009d68:	71fb      	strb	r3, [r7, #7]
	static uint16_t rcv_size;
	uint16_t header;
	uint16_t crc;

	rc_info.rx_buf.data[rc_info.rx_buf.tail =
			(rc_info.rx_buf.tail + 1) & RC_BUF_MASK] = data;
 8009d6a:	4b4f      	ldr	r3, [pc, #316]	; (8009ea8 <rc_RcvData+0x148>)
 8009d6c:	899b      	ldrh	r3, [r3, #12]
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	3301      	adds	r3, #1
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d78:	b29a      	uxth	r2, r3
	rc_info.rx_buf.data[rc_info.rx_buf.tail =
 8009d7a:	4b4b      	ldr	r3, [pc, #300]	; (8009ea8 <rc_RcvData+0x148>)
 8009d7c:	4611      	mov	r1, r2
 8009d7e:	8199      	strh	r1, [r3, #12]
			(rc_info.rx_buf.tail + 1) & RC_BUF_MASK] = data;
 8009d80:	4b49      	ldr	r3, [pc, #292]	; (8009ea8 <rc_RcvData+0x148>)
 8009d82:	4413      	add	r3, r2
 8009d84:	79fa      	ldrb	r2, [r7, #7]
 8009d86:	741a      	strb	r2, [r3, #16]
	//Waiting header
	if( rc_info.rx_buf.state == RCRINGBUF_WAIT_HEADER )
 8009d88:	4b47      	ldr	r3, [pc, #284]	; (8009ea8 <rc_RcvData+0x148>)
 8009d8a:	7a1b      	ldrb	r3, [r3, #8]
 8009d8c:	b2db      	uxtb	r3, r3
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d12a      	bne.n	8009de8 <rc_RcvData+0x88>
	{
		//Catch header
		header = rc_ringBufRead16b((uint8_t*)rc_info.rx_buf.data,
				(rc_info.rx_buf.tail - 2) & RC_BUF_MASK);
 8009d92:	4b45      	ldr	r3, [pc, #276]	; (8009ea8 <rc_RcvData+0x148>)
 8009d94:	899b      	ldrh	r3, [r3, #12]
 8009d96:	b29b      	uxth	r3, r3
 8009d98:	3b02      	subs	r3, #2
 8009d9a:	b29b      	uxth	r3, r3
		header = rc_ringBufRead16b((uint8_t*)rc_info.rx_buf.data,
 8009d9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	4619      	mov	r1, r3
 8009da4:	4841      	ldr	r0, [pc, #260]	; (8009eac <rc_RcvData+0x14c>)
 8009da6:	f000 f885 	bl	8009eb4 <rc_ringBufRead16b>
 8009daa:	4603      	mov	r3, r0
 8009dac:	817b      	strh	r3, [r7, #10]
		if( header == RC_HEADER )
 8009dae:	897b      	ldrh	r3, [r7, #10]
 8009db0:	f648 42c8 	movw	r2, #36040	; 0x8cc8
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d173      	bne.n	8009ea0 <rc_RcvData+0x140>
		{
			rc_info.rx_buf.head = (rc_info.rx_buf.tail - 2) & RC_BUF_MASK;
 8009db8:	4b3b      	ldr	r3, [pc, #236]	; (8009ea8 <rc_RcvData+0x148>)
 8009dba:	899b      	ldrh	r3, [r3, #12]
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	3b02      	subs	r3, #2
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dc6:	b29a      	uxth	r2, r3
 8009dc8:	4b37      	ldr	r3, [pc, #220]	; (8009ea8 <rc_RcvData+0x148>)
 8009dca:	815a      	strh	r2, [r3, #10]
			rcv_size = data;
 8009dcc:	79fb      	ldrb	r3, [r7, #7]
 8009dce:	b29a      	uxth	r2, r3
 8009dd0:	4b37      	ldr	r3, [pc, #220]	; (8009eb0 <rc_RcvData+0x150>)
 8009dd2:	801a      	strh	r2, [r3, #0]
			rc_info.rx_buf.data_size  = data - 2;
 8009dd4:	79fb      	ldrb	r3, [r7, #7]
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	3b02      	subs	r3, #2
 8009dda:	b29a      	uxth	r2, r3
 8009ddc:	4b32      	ldr	r3, [pc, #200]	; (8009ea8 <rc_RcvData+0x148>)
 8009dde:	81da      	strh	r2, [r3, #14]
			rc_info.rx_buf.state = RCRINGBUF_WAIT_DATA;
 8009de0:	4b31      	ldr	r3, [pc, #196]	; (8009ea8 <rc_RcvData+0x148>)
 8009de2:	2201      	movs	r2, #1
 8009de4:	721a      	strb	r2, [r3, #8]
		{

		}
	}

	return;
 8009de6:	e05b      	b.n	8009ea0 <rc_RcvData+0x140>
	else if( rc_info.rx_buf.state == RCRINGBUF_WAIT_DATA )
 8009de8:	4b2f      	ldr	r3, [pc, #188]	; (8009ea8 <rc_RcvData+0x148>)
 8009dea:	7a1b      	ldrb	r3, [r3, #8]
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d156      	bne.n	8009ea0 <rc_RcvData+0x140>
		if( --rcv_size == 0 )
 8009df2:	4b2f      	ldr	r3, [pc, #188]	; (8009eb0 <rc_RcvData+0x150>)
 8009df4:	881b      	ldrh	r3, [r3, #0]
 8009df6:	3b01      	subs	r3, #1
 8009df8:	b29a      	uxth	r2, r3
 8009dfa:	4b2d      	ldr	r3, [pc, #180]	; (8009eb0 <rc_RcvData+0x150>)
 8009dfc:	801a      	strh	r2, [r3, #0]
 8009dfe:	4b2c      	ldr	r3, [pc, #176]	; (8009eb0 <rc_RcvData+0x150>)
 8009e00:	881b      	ldrh	r3, [r3, #0]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d14c      	bne.n	8009ea0 <rc_RcvData+0x140>
			rc_info.rx_buf.state = RCRINGBUF_WAIT_HEADER;
 8009e06:	4b28      	ldr	r3, [pc, #160]	; (8009ea8 <rc_RcvData+0x148>)
 8009e08:	2200      	movs	r2, #0
 8009e0a:	721a      	strb	r2, [r3, #8]
			crc = crc16_RingBuf((uint8_t*)rc_info.rx_buf.data, rc_info.rx_buf.head,
 8009e0c:	4b26      	ldr	r3, [pc, #152]	; (8009ea8 <rc_RcvData+0x148>)
 8009e0e:	895b      	ldrh	r3, [r3, #10]
 8009e10:	b299      	uxth	r1, r3
					rc_info.rx_buf.data_size + 3, RC_BUF_MASK);
 8009e12:	4b25      	ldr	r3, [pc, #148]	; (8009ea8 <rc_RcvData+0x148>)
 8009e14:	89db      	ldrh	r3, [r3, #14]
 8009e16:	b29b      	uxth	r3, r3
			crc = crc16_RingBuf((uint8_t*)rc_info.rx_buf.data, rc_info.rx_buf.head,
 8009e18:	3303      	adds	r3, #3
 8009e1a:	b29a      	uxth	r2, r3
 8009e1c:	237f      	movs	r3, #127	; 0x7f
 8009e1e:	4823      	ldr	r0, [pc, #140]	; (8009eac <rc_RcvData+0x14c>)
 8009e20:	f7fa f852 	bl	8003ec8 <crc16_RingBuf>
 8009e24:	4603      	mov	r3, r0
 8009e26:	81bb      	strh	r3, [r7, #12]
					(rc_info.rx_buf.tail - 1) & RC_BUF_MASK) ){
 8009e28:	4b1f      	ldr	r3, [pc, #124]	; (8009ea8 <rc_RcvData+0x148>)
 8009e2a:	899b      	ldrh	r3, [r3, #12]
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	3b01      	subs	r3, #1
 8009e30:	b29b      	uxth	r3, r3
			if( crc == rc_ringBufRead16b((uint8_t*)rc_info.rx_buf.data,
 8009e32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e36:	b29b      	uxth	r3, r3
 8009e38:	4619      	mov	r1, r3
 8009e3a:	481c      	ldr	r0, [pc, #112]	; (8009eac <rc_RcvData+0x14c>)
 8009e3c:	f000 f83a 	bl	8009eb4 <rc_ringBufRead16b>
 8009e40:	4603      	mov	r3, r0
 8009e42:	461a      	mov	r2, r3
 8009e44:	89bb      	ldrh	r3, [r7, #12]
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d12a      	bne.n	8009ea0 <rc_RcvData+0x140>
				if( rc_info.rvd_pkt_size == 0 )
 8009e4a:	4b17      	ldr	r3, [pc, #92]	; (8009ea8 <rc_RcvData+0x148>)
 8009e4c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d125      	bne.n	8009ea0 <rc_RcvData+0x140>
					for( uint16_t i = 0; i < rc_info.rx_buf.data_size; i++ ){
 8009e54:	2300      	movs	r3, #0
 8009e56:	81fb      	strh	r3, [r7, #14]
 8009e58:	e014      	b.n	8009e84 <rc_RcvData+0x124>
								rc_info.rx_buf.data[(rc_info.rx_buf.head + 3 + i) & RC_BUF_MASK];
 8009e5a:	4b13      	ldr	r3, [pc, #76]	; (8009ea8 <rc_RcvData+0x148>)
 8009e5c:	895b      	ldrh	r3, [r3, #10]
 8009e5e:	b29b      	uxth	r3, r3
 8009e60:	1cda      	adds	r2, r3, #3
 8009e62:	89fb      	ldrh	r3, [r7, #14]
 8009e64:	4413      	add	r3, r2
 8009e66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
						rc_info.rvd_pkt[i] =
 8009e6a:	89fb      	ldrh	r3, [r7, #14]
								rc_info.rx_buf.data[(rc_info.rx_buf.head + 3 + i) & RC_BUF_MASK];
 8009e6c:	490e      	ldr	r1, [pc, #56]	; (8009ea8 <rc_RcvData+0x148>)
 8009e6e:	440a      	add	r2, r1
 8009e70:	7c12      	ldrb	r2, [r2, #16]
 8009e72:	b2d1      	uxtb	r1, r2
						rc_info.rvd_pkt[i] =
 8009e74:	4a0c      	ldr	r2, [pc, #48]	; (8009ea8 <rc_RcvData+0x148>)
 8009e76:	4413      	add	r3, r2
 8009e78:	460a      	mov	r2, r1
 8009e7a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
					for( uint16_t i = 0; i < rc_info.rx_buf.data_size; i++ ){
 8009e7e:	89fb      	ldrh	r3, [r7, #14]
 8009e80:	3301      	adds	r3, #1
 8009e82:	81fb      	strh	r3, [r7, #14]
 8009e84:	4b08      	ldr	r3, [pc, #32]	; (8009ea8 <rc_RcvData+0x148>)
 8009e86:	89db      	ldrh	r3, [r3, #14]
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	89fa      	ldrh	r2, [r7, #14]
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d3e4      	bcc.n	8009e5a <rc_RcvData+0xfa>
					rc_info.rvd_pkt_size = rc_info.rx_buf.data_size;
 8009e90:	4b05      	ldr	r3, [pc, #20]	; (8009ea8 <rc_RcvData+0x148>)
 8009e92:	89db      	ldrh	r3, [r3, #14]
 8009e94:	b29b      	uxth	r3, r3
 8009e96:	461a      	mov	r2, r3
 8009e98:	4b03      	ldr	r3, [pc, #12]	; (8009ea8 <rc_RcvData+0x148>)
 8009e9a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	return;
 8009e9e:	bf00      	nop
 8009ea0:	bf00      	nop
}
 8009ea2:	3710      	adds	r7, #16
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}
 8009ea8:	20000e70 	.word	0x20000e70
 8009eac:	20000e80 	.word	0x20000e80
 8009eb0:	20001024 	.word	0x20001024

08009eb4 <rc_ringBufRead16b>:

uint16_t rc_ringBufRead16b(uint8_t *buf, uint16_t pos)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b085      	sub	sp, #20
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	807b      	strh	r3, [r7, #2]
	uint16_t tmp;
	tmp = buf[(pos + 1) & RC_BUF_MASK] & 0xFF;
 8009ec0:	887b      	ldrh	r3, [r7, #2]
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ec8:	687a      	ldr	r2, [r7, #4]
 8009eca:	4413      	add	r3, r2
 8009ecc:	781b      	ldrb	r3, [r3, #0]
 8009ece:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp << 8) + buf[pos];
 8009ed0:	89fb      	ldrh	r3, [r7, #14]
 8009ed2:	021b      	lsls	r3, r3, #8
 8009ed4:	b29a      	uxth	r2, r3
 8009ed6:	887b      	ldrh	r3, [r7, #2]
 8009ed8:	6879      	ldr	r1, [r7, #4]
 8009eda:	440b      	add	r3, r1
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	b29b      	uxth	r3, r3
 8009ee0:	4413      	add	r3, r2
 8009ee2:	81fb      	strh	r3, [r7, #14]

	return tmp;
 8009ee4:	89fb      	ldrh	r3, [r7, #14]
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3714      	adds	r7, #20
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr
	...

08009ef4 <rc_AddTxData>:

void rc_AddTxData(uint8_t *data, uint32_t len)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b082      	sub	sp, #8
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	6039      	str	r1, [r7, #0]

	if( len > (RC_TX_BUF_SIZE - _rc_tx_buf_len) ){
 8009efe:	4b0d      	ldr	r3, [pc, #52]	; (8009f34 <rc_AddTxData+0x40>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8009f06:	683a      	ldr	r2, [r7, #0]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d80f      	bhi.n	8009f2c <rc_AddTxData+0x38>
		return;
	}
	memcpy((uint8_t*)&_rc_tx_buf[_rc_tx_buf_len], data, len);
 8009f0c:	4b09      	ldr	r3, [pc, #36]	; (8009f34 <rc_AddTxData+0x40>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4a09      	ldr	r2, [pc, #36]	; (8009f38 <rc_AddTxData+0x44>)
 8009f12:	4413      	add	r3, r2
 8009f14:	683a      	ldr	r2, [r7, #0]
 8009f16:	6879      	ldr	r1, [r7, #4]
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f00c f8d3 	bl	80160c4 <memcpy>
	_rc_tx_buf_len += len;
 8009f1e:	4b05      	ldr	r3, [pc, #20]	; (8009f34 <rc_AddTxData+0x40>)
 8009f20:	681a      	ldr	r2, [r3, #0]
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	4413      	add	r3, r2
 8009f26:	4a03      	ldr	r2, [pc, #12]	; (8009f34 <rc_AddTxData+0x40>)
 8009f28:	6013      	str	r3, [r2, #0]

	return;
 8009f2a:	e000      	b.n	8009f2e <rc_AddTxData+0x3a>
		return;
 8009f2c:	bf00      	nop
}
 8009f2e:	3708      	adds	r7, #8
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}
 8009f34:	20001020 	.word	0x20001020
 8009f38:	20000fa0 	.word	0x20000fa0

08009f3c <cfg_NodeRcVarProp>:


/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeRcVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b087      	sub	sp, #28
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	4603      	mov	r3, r0
 8009f44:	60b9      	str	r1, [r7, #8]
 8009f46:	607a      	str	r2, [r7, #4]
 8009f48:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 8009f4a:	89fb      	ldrh	r3, [r7, #14]
 8009f4c:	2b09      	cmp	r3, #9
 8009f4e:	d835      	bhi.n	8009fbc <cfg_NodeRcVarProp+0x80>
 8009f50:	a201      	add	r2, pc, #4	; (adr r2, 8009f58 <cfg_NodeRcVarProp+0x1c>)
 8009f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f56:	bf00      	nop
 8009f58:	08009f81 	.word	0x08009f81
 8009f5c:	08009f87 	.word	0x08009f87
 8009f60:	08009f8d 	.word	0x08009f8d
 8009f64:	08009f93 	.word	0x08009f93
 8009f68:	08009f99 	.word	0x08009f99
 8009f6c:	08009f9f 	.word	0x08009f9f
 8009f70:	08009fa5 	.word	0x08009fa5
 8009f74:	08009fab 	.word	0x08009fab
 8009f78:	08009fb1 	.word	0x08009fb1
 8009f7c:	08009fb7 	.word	0x08009fb7
	{
		case RC_ENA:				str = "Enable"; break;
 8009f80:	4b40      	ldr	r3, [pc, #256]	; (800a084 <cfg_NodeRcVarProp+0x148>)
 8009f82:	617b      	str	r3, [r7, #20]
 8009f84:	e01c      	b.n	8009fc0 <cfg_NodeRcVarProp+0x84>
		case RC_MODE:				str = "Mode (0:modem 1:futaba)"; break;
 8009f86:	4b40      	ldr	r3, [pc, #256]	; (800a088 <cfg_NodeRcVarProp+0x14c>)
 8009f88:	617b      	str	r3, [r7, #20]
 8009f8a:	e019      	b.n	8009fc0 <cfg_NodeRcVarProp+0x84>
		case RC_SEND_TLM:			str = "Send telemetry"; break;
 8009f8c:	4b3f      	ldr	r3, [pc, #252]	; (800a08c <cfg_NodeRcVarProp+0x150>)
 8009f8e:	617b      	str	r3, [r7, #20]
 8009f90:	e016      	b.n	8009fc0 <cfg_NodeRcVarProp+0x84>
		case RC_RX_PKT_CNT:			str = "Received pkt"; break;
 8009f92:	4b3f      	ldr	r3, [pc, #252]	; (800a090 <cfg_NodeRcVarProp+0x154>)
 8009f94:	617b      	str	r3, [r7, #20]
 8009f96:	e013      	b.n	8009fc0 <cfg_NodeRcVarProp+0x84>
		case RC_AXIS_L_X:			str = "Axis left X"; break;
 8009f98:	4b3e      	ldr	r3, [pc, #248]	; (800a094 <cfg_NodeRcVarProp+0x158>)
 8009f9a:	617b      	str	r3, [r7, #20]
 8009f9c:	e010      	b.n	8009fc0 <cfg_NodeRcVarProp+0x84>
		case RC_AXIS_L_Y:			str = "Axis left Y"; break;
 8009f9e:	4b3e      	ldr	r3, [pc, #248]	; (800a098 <cfg_NodeRcVarProp+0x15c>)
 8009fa0:	617b      	str	r3, [r7, #20]
 8009fa2:	e00d      	b.n	8009fc0 <cfg_NodeRcVarProp+0x84>
		case RC_AXIS_R_X:			str = "Axis right X"; break;
 8009fa4:	4b3d      	ldr	r3, [pc, #244]	; (800a09c <cfg_NodeRcVarProp+0x160>)
 8009fa6:	617b      	str	r3, [r7, #20]
 8009fa8:	e00a      	b.n	8009fc0 <cfg_NodeRcVarProp+0x84>
		case RC_AXIS_R_Y:			str = "Axis right Y"; break;
 8009faa:	4b3d      	ldr	r3, [pc, #244]	; (800a0a0 <cfg_NodeRcVarProp+0x164>)
 8009fac:	617b      	str	r3, [r7, #20]
 8009fae:	e007      	b.n	8009fc0 <cfg_NodeRcVarProp+0x84>
		case RC_BUT_L:				str = "Button left"; break;
 8009fb0:	4b3c      	ldr	r3, [pc, #240]	; (800a0a4 <cfg_NodeRcVarProp+0x168>)
 8009fb2:	617b      	str	r3, [r7, #20]
 8009fb4:	e004      	b.n	8009fc0 <cfg_NodeRcVarProp+0x84>
		case RC_BUT_R:				str = "Button right"; break;
 8009fb6:	4b3c      	ldr	r3, [pc, #240]	; (800a0a8 <cfg_NodeRcVarProp+0x16c>)
 8009fb8:	617b      	str	r3, [r7, #20]
 8009fba:	e001      	b.n	8009fc0 <cfg_NodeRcVarProp+0x84>
		default: return CFG_ERROR_VARID;
 8009fbc:	2302      	movs	r3, #2
 8009fbe:	e05a      	b.n	800a076 <cfg_NodeRcVarProp+0x13a>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d00f      	beq.n	8009fe6 <cfg_NodeRcVarProp+0xaa>
 8009fc6:	e007      	b.n	8009fd8 <cfg_NodeRcVarProp+0x9c>
 8009fc8:	697a      	ldr	r2, [r7, #20]
 8009fca:	1c53      	adds	r3, r2, #1
 8009fcc:	617b      	str	r3, [r7, #20]
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	1c59      	adds	r1, r3, #1
 8009fd2:	60b9      	str	r1, [r7, #8]
 8009fd4:	7812      	ldrb	r2, [r2, #0]
 8009fd6:	701a      	strb	r2, [r3, #0]
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	781b      	ldrb	r3, [r3, #0]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d1f3      	bne.n	8009fc8 <cfg_NodeRcVarProp+0x8c>
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d043      	beq.n	800a074 <cfg_NodeRcVarProp+0x138>
 8009fec:	89fb      	ldrh	r3, [r7, #14]
 8009fee:	2b09      	cmp	r3, #9
 8009ff0:	d83e      	bhi.n	800a070 <cfg_NodeRcVarProp+0x134>
 8009ff2:	a201      	add	r2, pc, #4	; (adr r2, 8009ff8 <cfg_NodeRcVarProp+0xbc>)
 8009ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ff8:	0800a021 	.word	0x0800a021
 8009ffc:	0800a029 	.word	0x0800a029
 800a000:	0800a031 	.word	0x0800a031
 800a004:	0800a039 	.word	0x0800a039
 800a008:	0800a041 	.word	0x0800a041
 800a00c:	0800a049 	.word	0x0800a049
 800a010:	0800a051 	.word	0x0800a051
 800a014:	0800a059 	.word	0x0800a059
 800a018:	0800a061 	.word	0x0800a061
 800a01c:	0800a069 	.word	0x0800a069
	{
		case RC_ENA:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_CONST; break;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2223      	movs	r2, #35	; 0x23
 800a024:	801a      	strh	r2, [r3, #0]
 800a026:	e025      	b.n	800a074 <cfg_NodeRcVarProp+0x138>
		case RC_MODE:				*prop = CFG_VAR_TYPE_UINT| CFG_VAR_PROP_CONST; break;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2222      	movs	r2, #34	; 0x22
 800a02c:	801a      	strh	r2, [r3, #0]
 800a02e:	e021      	b.n	800a074 <cfg_NodeRcVarProp+0x138>
		case RC_SEND_TLM:			*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_CONST; break;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2223      	movs	r2, #35	; 0x23
 800a034:	801a      	strh	r2, [r3, #0]
 800a036:	e01d      	b.n	800a074 <cfg_NodeRcVarProp+0x138>
		case RC_RX_PKT_CNT:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2212      	movs	r2, #18
 800a03c:	801a      	strh	r2, [r3, #0]
 800a03e:	e019      	b.n	800a074 <cfg_NodeRcVarProp+0x138>
		case RC_AXIS_L_X:			*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2211      	movs	r2, #17
 800a044:	801a      	strh	r2, [r3, #0]
 800a046:	e015      	b.n	800a074 <cfg_NodeRcVarProp+0x138>
		case RC_AXIS_L_Y:			*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2211      	movs	r2, #17
 800a04c:	801a      	strh	r2, [r3, #0]
 800a04e:	e011      	b.n	800a074 <cfg_NodeRcVarProp+0x138>
		case RC_AXIS_R_X:			*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2211      	movs	r2, #17
 800a054:	801a      	strh	r2, [r3, #0]
 800a056:	e00d      	b.n	800a074 <cfg_NodeRcVarProp+0x138>
		case RC_AXIS_R_Y:			*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2211      	movs	r2, #17
 800a05c:	801a      	strh	r2, [r3, #0]
 800a05e:	e009      	b.n	800a074 <cfg_NodeRcVarProp+0x138>
		case RC_BUT_L:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_READONLY; break;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2213      	movs	r2, #19
 800a064:	801a      	strh	r2, [r3, #0]
 800a066:	e005      	b.n	800a074 <cfg_NodeRcVarProp+0x138>
		case RC_BUT_R:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_READONLY; break;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2213      	movs	r2, #19
 800a06c:	801a      	strh	r2, [r3, #0]
 800a06e:	e001      	b.n	800a074 <cfg_NodeRcVarProp+0x138>
		default: return CFG_ERROR_VARID;
 800a070:	2302      	movs	r3, #2
 800a072:	e000      	b.n	800a076 <cfg_NodeRcVarProp+0x13a>
	}
	return CFG_ERROR_NONE;
 800a074:	2300      	movs	r3, #0
}
 800a076:	4618      	mov	r0, r3
 800a078:	371c      	adds	r7, #28
 800a07a:	46bd      	mov	sp, r7
 800a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a080:	4770      	bx	lr
 800a082:	bf00      	nop
 800a084:	080169c8 	.word	0x080169c8
 800a088:	080169d0 	.word	0x080169d0
 800a08c:	080169e8 	.word	0x080169e8
 800a090:	080169f8 	.word	0x080169f8
 800a094:	08016a08 	.word	0x08016a08
 800a098:	08016a14 	.word	0x08016a14
 800a09c:	08016a20 	.word	0x08016a20
 800a0a0:	08016a30 	.word	0x08016a30
 800a0a4:	08016a40 	.word	0x08016a40
 800a0a8:	08016a4c 	.word	0x08016a4c

0800a0ac <cfg_NodeRcVarGet>:

uint16_t cfg_NodeRcVarGet(uint16_t varid, void *value)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b083      	sub	sp, #12
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	6039      	str	r1, [r7, #0]
 800a0b6:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d06a      	beq.n	800a194 <cfg_NodeRcVarGet+0xe8>
 800a0be:	88fb      	ldrh	r3, [r7, #6]
 800a0c0:	2b09      	cmp	r3, #9
 800a0c2:	d865      	bhi.n	800a190 <cfg_NodeRcVarGet+0xe4>
 800a0c4:	a201      	add	r2, pc, #4	; (adr r2, 800a0cc <cfg_NodeRcVarGet+0x20>)
 800a0c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ca:	bf00      	nop
 800a0cc:	0800a0f5 	.word	0x0800a0f5
 800a0d0:	0800a105 	.word	0x0800a105
 800a0d4:	0800a115 	.word	0x0800a115
 800a0d8:	0800a125 	.word	0x0800a125
 800a0dc:	0800a131 	.word	0x0800a131
 800a0e0:	0800a141 	.word	0x0800a141
 800a0e4:	0800a151 	.word	0x0800a151
 800a0e8:	0800a161 	.word	0x0800a161
 800a0ec:	0800a171 	.word	0x0800a171
 800a0f0:	0800a181 	.word	0x0800a181
	{
		case RC_ENA: 				*(uint32_t*)value = (uint32_t)rc_info.enable; break;
 800a0f4:	4b2b      	ldr	r3, [pc, #172]	; (800a1a4 <cfg_NodeRcVarGet+0xf8>)
 800a0f6:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	601a      	str	r2, [r3, #0]
 800a102:	e047      	b.n	800a194 <cfg_NodeRcVarGet+0xe8>
		case RC_MODE: 				*(uint32_t*)value = (uint32_t)rc_info.mode; break;
 800a104:	4b27      	ldr	r3, [pc, #156]	; (800a1a4 <cfg_NodeRcVarGet+0xf8>)
 800a106:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800a10a:	b2db      	uxtb	r3, r3
 800a10c:	461a      	mov	r2, r3
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	601a      	str	r2, [r3, #0]
 800a112:	e03f      	b.n	800a194 <cfg_NodeRcVarGet+0xe8>
		case RC_SEND_TLM: 			*(uint32_t*)value = (uint32_t)rc_info.send_tlm; break;
 800a114:	4b23      	ldr	r3, [pc, #140]	; (800a1a4 <cfg_NodeRcVarGet+0xf8>)
 800a116:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 800a11a:	b2db      	uxtb	r3, r3
 800a11c:	461a      	mov	r2, r3
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	601a      	str	r2, [r3, #0]
 800a122:	e037      	b.n	800a194 <cfg_NodeRcVarGet+0xe8>
		case RC_RX_PKT_CNT: 		*(uint32_t*)value = (uint32_t)rc_info.rx_pkt_cnt; break;
 800a124:	4b1f      	ldr	r3, [pc, #124]	; (800a1a4 <cfg_NodeRcVarGet+0xf8>)
 800a126:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	601a      	str	r2, [r3, #0]
 800a12e:	e031      	b.n	800a194 <cfg_NodeRcVarGet+0xe8>
		case RC_AXIS_L_X: 			*(uint32_t*)value = (int32_t)rc_info.axis_l_x; break;
 800a130:	4b1c      	ldr	r3, [pc, #112]	; (800a1a4 <cfg_NodeRcVarGet+0xf8>)
 800a132:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 800a136:	b25b      	sxtb	r3, r3
 800a138:	461a      	mov	r2, r3
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	601a      	str	r2, [r3, #0]
 800a13e:	e029      	b.n	800a194 <cfg_NodeRcVarGet+0xe8>
		case RC_AXIS_L_Y: 			*(uint32_t*)value = (int32_t)rc_info.axis_l_y; break;
 800a140:	4b18      	ldr	r3, [pc, #96]	; (800a1a4 <cfg_NodeRcVarGet+0xf8>)
 800a142:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 800a146:	b25b      	sxtb	r3, r3
 800a148:	461a      	mov	r2, r3
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	601a      	str	r2, [r3, #0]
 800a14e:	e021      	b.n	800a194 <cfg_NodeRcVarGet+0xe8>
		case RC_AXIS_R_X: 			*(uint32_t*)value = (int32_t)rc_info.axis_r_x; break;
 800a150:	4b14      	ldr	r3, [pc, #80]	; (800a1a4 <cfg_NodeRcVarGet+0xf8>)
 800a152:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 800a156:	b25b      	sxtb	r3, r3
 800a158:	461a      	mov	r2, r3
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	601a      	str	r2, [r3, #0]
 800a15e:	e019      	b.n	800a194 <cfg_NodeRcVarGet+0xe8>
		case RC_AXIS_R_Y: 			*(uint32_t*)value = (int32_t)rc_info.axis_r_y; break;
 800a160:	4b10      	ldr	r3, [pc, #64]	; (800a1a4 <cfg_NodeRcVarGet+0xf8>)
 800a162:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 800a166:	b25b      	sxtb	r3, r3
 800a168:	461a      	mov	r2, r3
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	601a      	str	r2, [r3, #0]
 800a16e:	e011      	b.n	800a194 <cfg_NodeRcVarGet+0xe8>
		case RC_BUT_L: 				*(uint32_t*)value = (uint32_t)rc_info.button_l; break;
 800a170:	4b0c      	ldr	r3, [pc, #48]	; (800a1a4 <cfg_NodeRcVarGet+0xf8>)
 800a172:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 800a176:	b2db      	uxtb	r3, r3
 800a178:	461a      	mov	r2, r3
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	601a      	str	r2, [r3, #0]
 800a17e:	e009      	b.n	800a194 <cfg_NodeRcVarGet+0xe8>
		case RC_BUT_R: 				*(uint32_t*)value = (uint32_t)rc_info.button_r; break;
 800a180:	4b08      	ldr	r3, [pc, #32]	; (800a1a4 <cfg_NodeRcVarGet+0xf8>)
 800a182:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 800a186:	b2db      	uxtb	r3, r3
 800a188:	461a      	mov	r2, r3
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	601a      	str	r2, [r3, #0]
 800a18e:	e001      	b.n	800a194 <cfg_NodeRcVarGet+0xe8>
		default: return CFG_ERROR_VARID;
 800a190:	2302      	movs	r3, #2
 800a192:	e000      	b.n	800a196 <cfg_NodeRcVarGet+0xea>
	}
	return CFG_ERROR_NONE;
 800a194:	2300      	movs	r3, #0
}
 800a196:	4618      	mov	r0, r3
 800a198:	370c      	adds	r7, #12
 800a19a:	46bd      	mov	sp, r7
 800a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a0:	4770      	bx	lr
 800a1a2:	bf00      	nop
 800a1a4:	20000e70 	.word	0x20000e70

0800a1a8 <cfg_NodeRcVarSet>:

uint16_t cfg_NodeRcVarSet(uint16_t varid, void *value)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b083      	sub	sp, #12
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	6039      	str	r1, [r7, #0]
 800a1b2:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d032      	beq.n	800a220 <cfg_NodeRcVarSet+0x78>
 800a1ba:	88fb      	ldrh	r3, [r7, #6]
 800a1bc:	2b09      	cmp	r3, #9
 800a1be:	d82c      	bhi.n	800a21a <cfg_NodeRcVarSet+0x72>
 800a1c0:	a201      	add	r2, pc, #4	; (adr r2, 800a1c8 <cfg_NodeRcVarSet+0x20>)
 800a1c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1c6:	bf00      	nop
 800a1c8:	0800a1f1 	.word	0x0800a1f1
 800a1cc:	0800a1ff 	.word	0x0800a1ff
 800a1d0:	0800a20d 	.word	0x0800a20d
 800a1d4:	0800a21f 	.word	0x0800a21f
 800a1d8:	0800a21f 	.word	0x0800a21f
 800a1dc:	0800a21f 	.word	0x0800a21f
 800a1e0:	0800a21f 	.word	0x0800a21f
 800a1e4:	0800a21f 	.word	0x0800a21f
 800a1e8:	0800a21f 	.word	0x0800a21f
 800a1ec:	0800a21f 	.word	0x0800a21f
	{
		case RC_ENA:				rc_info.enable = (uint8_t)*(uint32_t*)value; break;
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	b2da      	uxtb	r2, r3
 800a1f6:	4b0e      	ldr	r3, [pc, #56]	; (800a230 <cfg_NodeRcVarSet+0x88>)
 800a1f8:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 800a1fc:	e010      	b.n	800a220 <cfg_NodeRcVarSet+0x78>
		case RC_MODE:				rc_info.mode = (uint8_t)*(uint32_t*)value; break;
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	b2da      	uxtb	r2, r3
 800a204:	4b0a      	ldr	r3, [pc, #40]	; (800a230 <cfg_NodeRcVarSet+0x88>)
 800a206:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
 800a20a:	e009      	b.n	800a220 <cfg_NodeRcVarSet+0x78>
		case RC_SEND_TLM:			rc_info.send_tlm = (uint8_t)*(uint32_t*)value; break;
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	b2da      	uxtb	r2, r3
 800a212:	4b07      	ldr	r3, [pc, #28]	; (800a230 <cfg_NodeRcVarSet+0x88>)
 800a214:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
 800a218:	e002      	b.n	800a220 <cfg_NodeRcVarSet+0x78>
		case RC_AXIS_L_Y:			break;
		case RC_AXIS_R_X:			break;
		case RC_AXIS_R_Y:			break;
		case RC_BUT_L:				break;
		case RC_BUT_R:				break;
		default: return CFG_ERROR_VARID;
 800a21a:	2302      	movs	r3, #2
 800a21c:	e001      	b.n	800a222 <cfg_NodeRcVarSet+0x7a>
		case RC_RX_PKT_CNT:			break;
 800a21e:	bf00      	nop
	}
	return CFG_ERROR_NONE;
 800a220:	2300      	movs	r3, #0
}
 800a222:	4618      	mov	r0, r3
 800a224:	370c      	adds	r7, #12
 800a226:	46bd      	mov	sp, r7
 800a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22c:	4770      	bx	lr
 800a22e:	bf00      	nop
 800a230:	20000e70 	.word	0x20000e70

0800a234 <sens_Timer>:
void sens_SetAccelRange(uint8_t range);

volatile sens_infoTypeDef sens_info;

void sens_Timer(uint32_t res)
{
 800a234:	b480      	push	{r7}
 800a236:	b085      	sub	sp, #20
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
#ifdef NO_SENS
	return;
#endif //NO_SENS

	for( uint8_t i = 0; i < SENS_TMR_NUM; i++ )
 800a23c:	2300      	movs	r3, #0
 800a23e:	73fb      	strb	r3, [r7, #15]
 800a240:	e010      	b.n	800a264 <sens_Timer+0x30>
	{
		if( sens_info.timer[i] > 0 ){
 800a242:	7bfb      	ldrb	r3, [r7, #15]
 800a244:	4a0c      	ldr	r2, [pc, #48]	; (800a278 <sens_Timer+0x44>)
 800a246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d007      	beq.n	800a25e <sens_Timer+0x2a>
			sens_info.timer[i]--;
 800a24e:	7bfb      	ldrb	r3, [r7, #15]
 800a250:	4a09      	ldr	r2, [pc, #36]	; (800a278 <sens_Timer+0x44>)
 800a252:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a256:	3a01      	subs	r2, #1
 800a258:	4907      	ldr	r1, [pc, #28]	; (800a278 <sens_Timer+0x44>)
 800a25a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for( uint8_t i = 0; i < SENS_TMR_NUM; i++ )
 800a25e:	7bfb      	ldrb	r3, [r7, #15]
 800a260:	3301      	adds	r3, #1
 800a262:	73fb      	strb	r3, [r7, #15]
 800a264:	7bfb      	ldrb	r3, [r7, #15]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d0eb      	beq.n	800a242 <sens_Timer+0xe>
		}
	}

	return;
 800a26a:	bf00      	nop
}
 800a26c:	3714      	adds	r7, #20
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr
 800a276:	bf00      	nop
 800a278:	20001028 	.word	0x20001028

0800a27c <sens_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void sens_InitTask()
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	af00      	add	r7, sp, #0
#ifdef NO_SENS
	return;
#endif //NO_SENS

	//Init state
	sens_info.state = 0;
 800a280:	4b06      	ldr	r3, [pc, #24]	; (800a29c <sens_InitTask+0x20>)
 800a282:	2200      	movs	r2, #0
 800a284:	711a      	strb	r2, [r3, #4]
	HAL_Delay(1000);
 800a286:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a28a:	f001 fb81 	bl	800b990 <HAL_Delay>
	sens_WriteByte(SENS_REG_PWR_MGMT_1, 0x80);
 800a28e:	2180      	movs	r1, #128	; 0x80
 800a290:	206b      	movs	r0, #107	; 0x6b
 800a292:	f000 faad 	bl	800a7f0 <sens_WriteByte>

	return;
 800a296:	bf00      	nop
}
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop
 800a29c:	20001028 	.word	0x20001028

0800a2a0 <sens_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void sens_Task(void)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b082      	sub	sp, #8
 800a2a4:	af02      	add	r7, sp, #8
#endif //NO_SENS

	static uint16_t t_cal_step = 0;

	//Reset
	if( sens_info.state == 0 )
 800a2a6:	4b5f      	ldr	r3, [pc, #380]	; (800a424 <sens_Task+0x184>)
 800a2a8:	791b      	ldrb	r3, [r3, #4]
 800a2aa:	b2db      	uxtb	r3, r3
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d116      	bne.n	800a2de <sens_Task+0x3e>
	{
		sens_WriteByte(SENS_REG_PWR_MGMT_1, 0x80);
 800a2b0:	2180      	movs	r1, #128	; 0x80
 800a2b2:	206b      	movs	r0, #107	; 0x6b
 800a2b4:	f000 fa9c 	bl	800a7f0 <sens_WriteByte>
		sens_info.timer[SENS_TMR_PROC] = 5000;
 800a2b8:	4b5a      	ldr	r3, [pc, #360]	; (800a424 <sens_Task+0x184>)
 800a2ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2be:	601a      	str	r2, [r3, #0]
		sens_info.state = 1;
 800a2c0:	4b58      	ldr	r3, [pc, #352]	; (800a424 <sens_Task+0x184>)
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	711a      	strb	r2, [r3, #4]
		leds_setBlink(LED_SIM_BLUE, 50, 1000, 0, 0, 1);
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	9301      	str	r3, [sp, #4]
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	9300      	str	r3, [sp, #0]
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a2d4:	2132      	movs	r1, #50	; 0x32
 800a2d6:	2000      	movs	r0, #0
 800a2d8:	f7fc ffec 	bl	80072b4 <leds_setBlink>
			sens_info.timer[SENS_TMR_PROC] = 1;
			sens_UpdData();
		}
	}

	return;
 800a2dc:	e09e      	b.n	800a41c <sens_Task+0x17c>
	else if( sens_info.state == 1 )
 800a2de:	4b51      	ldr	r3, [pc, #324]	; (800a424 <sens_Task+0x184>)
 800a2e0:	791b      	ldrb	r3, [r3, #4]
 800a2e2:	b2db      	uxtb	r3, r3
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d110      	bne.n	800a30a <sens_Task+0x6a>
		if( sens_info.timer[SENS_TMR_PROC] == 0 )
 800a2e8:	4b4e      	ldr	r3, [pc, #312]	; (800a424 <sens_Task+0x184>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	f040 8095 	bne.w	800a41c <sens_Task+0x17c>
			sens_WriteByte(SENS_REG_PWR_MGMT_1, 0x00);
 800a2f2:	2100      	movs	r1, #0
 800a2f4:	206b      	movs	r0, #107	; 0x6b
 800a2f6:	f000 fa7b 	bl	800a7f0 <sens_WriteByte>
			sens_info.timer[SENS_TMR_PROC] = 1000;
 800a2fa:	4b4a      	ldr	r3, [pc, #296]	; (800a424 <sens_Task+0x184>)
 800a2fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a300:	601a      	str	r2, [r3, #0]
			sens_info.state = 2;
 800a302:	4b48      	ldr	r3, [pc, #288]	; (800a424 <sens_Task+0x184>)
 800a304:	2202      	movs	r2, #2
 800a306:	711a      	strb	r2, [r3, #4]
	return;
 800a308:	e088      	b.n	800a41c <sens_Task+0x17c>
	else if( sens_info.state == 2 )
 800a30a:	4b46      	ldr	r3, [pc, #280]	; (800a424 <sens_Task+0x184>)
 800a30c:	791b      	ldrb	r3, [r3, #4]
 800a30e:	b2db      	uxtb	r3, r3
 800a310:	2b02      	cmp	r3, #2
 800a312:	d129      	bne.n	800a368 <sens_Task+0xc8>
		if( sens_info.timer[SENS_TMR_PROC] == 0 )
 800a314:	4b43      	ldr	r3, [pc, #268]	; (800a424 <sens_Task+0x184>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d17f      	bne.n	800a41c <sens_Task+0x17c>
			sens_SetGyroRange(GYRO_RANGE_250DPS);
 800a31c:	2000      	movs	r0, #0
 800a31e:	f000 f8c3 	bl	800a4a8 <sens_SetGyroRange>
			sens_SetAccelRange(ACCEL_RANGE_2G);
 800a322:	2000      	movs	r0, #0
 800a324:	f000 f8d4 	bl	800a4d0 <sens_SetAccelRange>
			sens_WriteByte(SENS_REG_CONFIG, 0x00);
 800a328:	2100      	movs	r1, #0
 800a32a:	201a      	movs	r0, #26
 800a32c:	f000 fa60 	bl	800a7f0 <sens_WriteByte>
			t_cal_step = SENS_CAL_STEP_NUM;
 800a330:	4b3d      	ldr	r3, [pc, #244]	; (800a428 <sens_Task+0x188>)
 800a332:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a336:	801a      	strh	r2, [r3, #0]
			sens_info.gyro_x_bias = 0.0;
 800a338:	4b3a      	ldr	r3, [pc, #232]	; (800a424 <sens_Task+0x184>)
 800a33a:	2200      	movs	r2, #0
 800a33c:	615a      	str	r2, [r3, #20]
			sens_info.gyro_y_bias = 0.0;
 800a33e:	4b39      	ldr	r3, [pc, #228]	; (800a424 <sens_Task+0x184>)
 800a340:	2200      	movs	r2, #0
 800a342:	619a      	str	r2, [r3, #24]
			sens_info.gyro_z_bias = 0.0;
 800a344:	4b37      	ldr	r3, [pc, #220]	; (800a424 <sens_Task+0x184>)
 800a346:	2200      	movs	r2, #0
 800a348:	61da      	str	r2, [r3, #28]
			sens_info.state = 3;
 800a34a:	4b36      	ldr	r3, [pc, #216]	; (800a424 <sens_Task+0x184>)
 800a34c:	2203      	movs	r2, #3
 800a34e:	711a      	strb	r2, [r3, #4]
			leds_setBlink(LED_SIM_BLUE, 50, 500, 0, 0, 1);
 800a350:	2301      	movs	r3, #1
 800a352:	9301      	str	r3, [sp, #4]
 800a354:	2300      	movs	r3, #0
 800a356:	9300      	str	r3, [sp, #0]
 800a358:	2300      	movs	r3, #0
 800a35a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a35e:	2132      	movs	r1, #50	; 0x32
 800a360:	2000      	movs	r0, #0
 800a362:	f7fc ffa7 	bl	80072b4 <leds_setBlink>
	return;
 800a366:	e059      	b.n	800a41c <sens_Task+0x17c>
	else if( sens_info.state == 3 )
 800a368:	4b2e      	ldr	r3, [pc, #184]	; (800a424 <sens_Task+0x184>)
 800a36a:	791b      	ldrb	r3, [r3, #4]
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	2b03      	cmp	r3, #3
 800a370:	d145      	bne.n	800a3fe <sens_Task+0x15e>
		if( t_cal_step > 0 )
 800a372:	4b2d      	ldr	r3, [pc, #180]	; (800a428 <sens_Task+0x188>)
 800a374:	881b      	ldrh	r3, [r3, #0]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d00f      	beq.n	800a39a <sens_Task+0xfa>
			if( sens_info.timer[SENS_TMR_PROC] == 0 )
 800a37a:	4b2a      	ldr	r3, [pc, #168]	; (800a424 <sens_Task+0x184>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d14c      	bne.n	800a41c <sens_Task+0x17c>
				sens_CalibrateStep();
 800a382:	f000 f855 	bl	800a430 <sens_CalibrateStep>
				t_cal_step -= 1;
 800a386:	4b28      	ldr	r3, [pc, #160]	; (800a428 <sens_Task+0x188>)
 800a388:	881b      	ldrh	r3, [r3, #0]
 800a38a:	3b01      	subs	r3, #1
 800a38c:	b29a      	uxth	r2, r3
 800a38e:	4b26      	ldr	r3, [pc, #152]	; (800a428 <sens_Task+0x188>)
 800a390:	801a      	strh	r2, [r3, #0]
				sens_info.timer[SENS_TMR_PROC] = 1;
 800a392:	4b24      	ldr	r3, [pc, #144]	; (800a424 <sens_Task+0x184>)
 800a394:	2201      	movs	r2, #1
 800a396:	601a      	str	r2, [r3, #0]
	return;
 800a398:	e040      	b.n	800a41c <sens_Task+0x17c>
			sens_info.gyro_x_bias /= SENS_CAL_STEP_NUM;
 800a39a:	4b22      	ldr	r3, [pc, #136]	; (800a424 <sens_Task+0x184>)
 800a39c:	695b      	ldr	r3, [r3, #20]
 800a39e:	4a23      	ldr	r2, [pc, #140]	; (800a42c <sens_Task+0x18c>)
 800a3a0:	fb82 1203 	smull	r1, r2, r2, r3
 800a3a4:	1192      	asrs	r2, r2, #6
 800a3a6:	17db      	asrs	r3, r3, #31
 800a3a8:	1ad3      	subs	r3, r2, r3
 800a3aa:	4a1e      	ldr	r2, [pc, #120]	; (800a424 <sens_Task+0x184>)
 800a3ac:	6153      	str	r3, [r2, #20]
			sens_info.gyro_y_bias /= SENS_CAL_STEP_NUM;
 800a3ae:	4b1d      	ldr	r3, [pc, #116]	; (800a424 <sens_Task+0x184>)
 800a3b0:	699b      	ldr	r3, [r3, #24]
 800a3b2:	4a1e      	ldr	r2, [pc, #120]	; (800a42c <sens_Task+0x18c>)
 800a3b4:	fb82 1203 	smull	r1, r2, r2, r3
 800a3b8:	1192      	asrs	r2, r2, #6
 800a3ba:	17db      	asrs	r3, r3, #31
 800a3bc:	1ad3      	subs	r3, r2, r3
 800a3be:	4a19      	ldr	r2, [pc, #100]	; (800a424 <sens_Task+0x184>)
 800a3c0:	6193      	str	r3, [r2, #24]
			sens_info.gyro_z_bias /= SENS_CAL_STEP_NUM;
 800a3c2:	4b18      	ldr	r3, [pc, #96]	; (800a424 <sens_Task+0x184>)
 800a3c4:	69db      	ldr	r3, [r3, #28]
 800a3c6:	4a19      	ldr	r2, [pc, #100]	; (800a42c <sens_Task+0x18c>)
 800a3c8:	fb82 1203 	smull	r1, r2, r2, r3
 800a3cc:	1192      	asrs	r2, r2, #6
 800a3ce:	17db      	asrs	r3, r3, #31
 800a3d0:	1ad3      	subs	r3, r2, r3
 800a3d2:	4a14      	ldr	r2, [pc, #80]	; (800a424 <sens_Task+0x184>)
 800a3d4:	61d3      	str	r3, [r2, #28]
			sens_info.timer[SENS_TMR_PROC] = 1;
 800a3d6:	4b13      	ldr	r3, [pc, #76]	; (800a424 <sens_Task+0x184>)
 800a3d8:	2201      	movs	r2, #1
 800a3da:	601a      	str	r2, [r3, #0]
			sens_SetAccelRange(ACCEL_RANGE_8G);
 800a3dc:	2010      	movs	r0, #16
 800a3de:	f000 f877 	bl	800a4d0 <sens_SetAccelRange>
			sens_info.state = 4;
 800a3e2:	4b10      	ldr	r3, [pc, #64]	; (800a424 <sens_Task+0x184>)
 800a3e4:	2204      	movs	r2, #4
 800a3e6:	711a      	strb	r2, [r3, #4]
			leds_setBlink(LED_SIM_BLUE, 50, 100, 0, 0, 1);
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	9301      	str	r3, [sp, #4]
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	9300      	str	r3, [sp, #0]
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	2264      	movs	r2, #100	; 0x64
 800a3f4:	2132      	movs	r1, #50	; 0x32
 800a3f6:	2000      	movs	r0, #0
 800a3f8:	f7fc ff5c 	bl	80072b4 <leds_setBlink>
	return;
 800a3fc:	e00e      	b.n	800a41c <sens_Task+0x17c>
	else if( sens_info.state == 4 )
 800a3fe:	4b09      	ldr	r3, [pc, #36]	; (800a424 <sens_Task+0x184>)
 800a400:	791b      	ldrb	r3, [r3, #4]
 800a402:	b2db      	uxtb	r3, r3
 800a404:	2b04      	cmp	r3, #4
 800a406:	d109      	bne.n	800a41c <sens_Task+0x17c>
		if( sens_info.timer[SENS_TMR_PROC] == 0 )
 800a408:	4b06      	ldr	r3, [pc, #24]	; (800a424 <sens_Task+0x184>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d105      	bne.n	800a41c <sens_Task+0x17c>
			sens_info.timer[SENS_TMR_PROC] = 1;
 800a410:	4b04      	ldr	r3, [pc, #16]	; (800a424 <sens_Task+0x184>)
 800a412:	2201      	movs	r2, #1
 800a414:	601a      	str	r2, [r3, #0]
			sens_UpdData();
 800a416:	f000 f86f 	bl	800a4f8 <sens_UpdData>
	return;
 800a41a:	bf00      	nop
 800a41c:	bf00      	nop
}
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	20001028 	.word	0x20001028
 800a428:	2000107c 	.word	0x2000107c
 800a42c:	10624dd3 	.word	0x10624dd3

0800a430 <sens_CalibrateStep>:

//
void sens_CalibrateStep()
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
    uint8_t buffer[6];
    int16_t gyroX, gyroY, gyroZ;
    HAL_StatusTypeDef status;

    status = sens_Read(SENS_REG_GYRO_XOUT_H, buffer, 6);
 800a436:	463b      	mov	r3, r7
 800a438:	2206      	movs	r2, #6
 800a43a:	4619      	mov	r1, r3
 800a43c:	2043      	movs	r0, #67	; 0x43
 800a43e:	f000 f9f5 	bl	800a82c <sens_Read>
 800a442:	4603      	mov	r3, r0
 800a444:	73fb      	strb	r3, [r7, #15]
	//HAL_I2C_Mem_Read(&hi2c1, SENS_I2C_ADDR, SENS_REG_GYRO_XOUT_H, I2C_MEMADD_SIZE_8BIT, buffer, 6, 1000);
	gyroX = (int16_t)(buffer[0] << 8 | buffer[1]);
 800a446:	783b      	ldrb	r3, [r7, #0]
 800a448:	021b      	lsls	r3, r3, #8
 800a44a:	b21a      	sxth	r2, r3
 800a44c:	787b      	ldrb	r3, [r7, #1]
 800a44e:	b21b      	sxth	r3, r3
 800a450:	4313      	orrs	r3, r2
 800a452:	81bb      	strh	r3, [r7, #12]
	gyroY = (int16_t)(buffer[2] << 8 | buffer[3]);
 800a454:	78bb      	ldrb	r3, [r7, #2]
 800a456:	021b      	lsls	r3, r3, #8
 800a458:	b21a      	sxth	r2, r3
 800a45a:	78fb      	ldrb	r3, [r7, #3]
 800a45c:	b21b      	sxth	r3, r3
 800a45e:	4313      	orrs	r3, r2
 800a460:	817b      	strh	r3, [r7, #10]
	gyroZ = (int16_t)(buffer[4] << 8 | buffer[5]);
 800a462:	793b      	ldrb	r3, [r7, #4]
 800a464:	021b      	lsls	r3, r3, #8
 800a466:	b21a      	sxth	r2, r3
 800a468:	797b      	ldrb	r3, [r7, #5]
 800a46a:	b21b      	sxth	r3, r3
 800a46c:	4313      	orrs	r3, r2
 800a46e:	813b      	strh	r3, [r7, #8]

	sens_info.gyro_x_bias += gyroX;
 800a470:	4b0c      	ldr	r3, [pc, #48]	; (800a4a4 <sens_CalibrateStep+0x74>)
 800a472:	695a      	ldr	r2, [r3, #20]
 800a474:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a478:	4413      	add	r3, r2
 800a47a:	4a0a      	ldr	r2, [pc, #40]	; (800a4a4 <sens_CalibrateStep+0x74>)
 800a47c:	6153      	str	r3, [r2, #20]
	sens_info.gyro_y_bias += gyroY;
 800a47e:	4b09      	ldr	r3, [pc, #36]	; (800a4a4 <sens_CalibrateStep+0x74>)
 800a480:	699a      	ldr	r2, [r3, #24]
 800a482:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800a486:	4413      	add	r3, r2
 800a488:	4a06      	ldr	r2, [pc, #24]	; (800a4a4 <sens_CalibrateStep+0x74>)
 800a48a:	6193      	str	r3, [r2, #24]
	sens_info.gyro_z_bias += gyroZ;
 800a48c:	4b05      	ldr	r3, [pc, #20]	; (800a4a4 <sens_CalibrateStep+0x74>)
 800a48e:	69da      	ldr	r2, [r3, #28]
 800a490:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800a494:	4413      	add	r3, r2
 800a496:	4a03      	ldr	r2, [pc, #12]	; (800a4a4 <sens_CalibrateStep+0x74>)
 800a498:	61d3      	str	r3, [r2, #28]
}
 800a49a:	bf00      	nop
 800a49c:	3710      	adds	r7, #16
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}
 800a4a2:	bf00      	nop
 800a4a4:	20001028 	.word	0x20001028

0800a4a8 <sens_SetGyroRange>:

//
void sens_SetGyroRange(uint8_t range)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b082      	sub	sp, #8
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	71fb      	strb	r3, [r7, #7]
	sens_info.gyro_range = range;
 800a4b2:	4a06      	ldr	r2, [pc, #24]	; (800a4cc <sens_SetGyroRange+0x24>)
 800a4b4:	79fb      	ldrb	r3, [r7, #7]
 800a4b6:	7153      	strb	r3, [r2, #5]
	sens_WriteByte(SENS_REG_GYRO_CONFIG, range);
 800a4b8:	79fb      	ldrb	r3, [r7, #7]
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	201b      	movs	r0, #27
 800a4be:	f000 f997 	bl	800a7f0 <sens_WriteByte>

    return;
 800a4c2:	bf00      	nop
}
 800a4c4:	3708      	adds	r7, #8
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
 800a4ca:	bf00      	nop
 800a4cc:	20001028 	.word	0x20001028

0800a4d0 <sens_SetAccelRange>:

//
void sens_SetAccelRange(uint8_t range)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b082      	sub	sp, #8
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	71fb      	strb	r3, [r7, #7]
	sens_info.accel_range = range;
 800a4da:	4a06      	ldr	r2, [pc, #24]	; (800a4f4 <sens_SetAccelRange+0x24>)
 800a4dc:	79fb      	ldrb	r3, [r7, #7]
 800a4de:	f882 3020 	strb.w	r3, [r2, #32]
	sens_WriteByte(SENS_REG_ACCEL_CONFIG, range);
 800a4e2:	79fb      	ldrb	r3, [r7, #7]
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	201c      	movs	r0, #28
 800a4e8:	f000 f982 	bl	800a7f0 <sens_WriteByte>

    return;
 800a4ec:	bf00      	nop
}
 800a4ee:	3708      	adds	r7, #8
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}
 800a4f4:	20001028 	.word	0x20001028

0800a4f8 <sens_UpdData>:

//
HAL_StatusTypeDef sens_UpdData()
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b08a      	sub	sp, #40	; 0x28
 800a4fc:	af00      	add	r7, sp, #0
    uint8_t buf[14];
    HAL_StatusTypeDef status;

    status = sens_Read(SENS_REG_ACCEL_XOUT_H, buf, 14);
 800a4fe:	463b      	mov	r3, r7
 800a500:	220e      	movs	r2, #14
 800a502:	4619      	mov	r1, r3
 800a504:	203b      	movs	r0, #59	; 0x3b
 800a506:	f000 f991 	bl	800a82c <sens_Read>
 800a50a:	4603      	mov	r3, r0
 800a50c:	77fb      	strb	r3, [r7, #31]
    if (status != HAL_OK) {
 800a50e:	7ffb      	ldrb	r3, [r7, #31]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d001      	beq.n	800a518 <sens_UpdData+0x20>
        return status;
 800a514:	7ffb      	ldrb	r3, [r7, #31]
 800a516:	e157      	b.n	800a7c8 <sens_UpdData+0x2d0>
    }

    int16_t raw_accel_x = (int16_t)(buf[0] << 8 | buf[1]);
 800a518:	783b      	ldrb	r3, [r7, #0]
 800a51a:	021b      	lsls	r3, r3, #8
 800a51c:	b21a      	sxth	r2, r3
 800a51e:	787b      	ldrb	r3, [r7, #1]
 800a520:	b21b      	sxth	r3, r3
 800a522:	4313      	orrs	r3, r2
 800a524:	83bb      	strh	r3, [r7, #28]
    int16_t raw_accel_y = (int16_t)(buf[2] << 8 | buf[3]);
 800a526:	78bb      	ldrb	r3, [r7, #2]
 800a528:	021b      	lsls	r3, r3, #8
 800a52a:	b21a      	sxth	r2, r3
 800a52c:	78fb      	ldrb	r3, [r7, #3]
 800a52e:	b21b      	sxth	r3, r3
 800a530:	4313      	orrs	r3, r2
 800a532:	837b      	strh	r3, [r7, #26]
    int16_t raw_accel_z = (int16_t)(buf[4] << 8 | buf[5]);
 800a534:	793b      	ldrb	r3, [r7, #4]
 800a536:	021b      	lsls	r3, r3, #8
 800a538:	b21a      	sxth	r2, r3
 800a53a:	797b      	ldrb	r3, [r7, #5]
 800a53c:	b21b      	sxth	r3, r3
 800a53e:	4313      	orrs	r3, r2
 800a540:	833b      	strh	r3, [r7, #24]
    int16_t raw_temp = (int16_t)(buf[6] << 8 | buf[7]);
 800a542:	79bb      	ldrb	r3, [r7, #6]
 800a544:	021b      	lsls	r3, r3, #8
 800a546:	b21a      	sxth	r2, r3
 800a548:	79fb      	ldrb	r3, [r7, #7]
 800a54a:	b21b      	sxth	r3, r3
 800a54c:	4313      	orrs	r3, r2
 800a54e:	82fb      	strh	r3, [r7, #22]
    int16_t raw_gyro_x = (int16_t)(buf[8] << 8 | buf[9]);
 800a550:	7a3b      	ldrb	r3, [r7, #8]
 800a552:	021b      	lsls	r3, r3, #8
 800a554:	b21a      	sxth	r2, r3
 800a556:	7a7b      	ldrb	r3, [r7, #9]
 800a558:	b21b      	sxth	r3, r3
 800a55a:	4313      	orrs	r3, r2
 800a55c:	82bb      	strh	r3, [r7, #20]
    int16_t raw_gyro_y = (int16_t)(buf[10] << 8 | buf[11]);
 800a55e:	7abb      	ldrb	r3, [r7, #10]
 800a560:	021b      	lsls	r3, r3, #8
 800a562:	b21a      	sxth	r2, r3
 800a564:	7afb      	ldrb	r3, [r7, #11]
 800a566:	b21b      	sxth	r3, r3
 800a568:	4313      	orrs	r3, r2
 800a56a:	827b      	strh	r3, [r7, #18]
    int16_t raw_gyro_z = (int16_t)(buf[12] << 8 | buf[13]);
 800a56c:	7b3b      	ldrb	r3, [r7, #12]
 800a56e:	021b      	lsls	r3, r3, #8
 800a570:	b21a      	sxth	r2, r3
 800a572:	7b7b      	ldrb	r3, [r7, #13]
 800a574:	b21b      	sxth	r3, r3
 800a576:	4313      	orrs	r3, r2
 800a578:	823b      	strh	r3, [r7, #16]

    float gyro_sens;
    float accel_sens;

    switch (sens_info.gyro_range) {
 800a57a:	4b97      	ldr	r3, [pc, #604]	; (800a7d8 <sens_UpdData+0x2e0>)
 800a57c:	795b      	ldrb	r3, [r3, #5]
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	2b18      	cmp	r3, #24
 800a582:	d841      	bhi.n	800a608 <sens_UpdData+0x110>
 800a584:	a201      	add	r2, pc, #4	; (adr r2, 800a58c <sens_UpdData+0x94>)
 800a586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a58a:	bf00      	nop
 800a58c:	0800a5f1 	.word	0x0800a5f1
 800a590:	0800a609 	.word	0x0800a609
 800a594:	0800a609 	.word	0x0800a609
 800a598:	0800a609 	.word	0x0800a609
 800a59c:	0800a609 	.word	0x0800a609
 800a5a0:	0800a609 	.word	0x0800a609
 800a5a4:	0800a609 	.word	0x0800a609
 800a5a8:	0800a609 	.word	0x0800a609
 800a5ac:	0800a5f7 	.word	0x0800a5f7
 800a5b0:	0800a609 	.word	0x0800a609
 800a5b4:	0800a609 	.word	0x0800a609
 800a5b8:	0800a609 	.word	0x0800a609
 800a5bc:	0800a609 	.word	0x0800a609
 800a5c0:	0800a609 	.word	0x0800a609
 800a5c4:	0800a609 	.word	0x0800a609
 800a5c8:	0800a609 	.word	0x0800a609
 800a5cc:	0800a5fd 	.word	0x0800a5fd
 800a5d0:	0800a609 	.word	0x0800a609
 800a5d4:	0800a609 	.word	0x0800a609
 800a5d8:	0800a609 	.word	0x0800a609
 800a5dc:	0800a609 	.word	0x0800a609
 800a5e0:	0800a609 	.word	0x0800a609
 800a5e4:	0800a609 	.word	0x0800a609
 800a5e8:	0800a609 	.word	0x0800a609
 800a5ec:	0800a603 	.word	0x0800a603
        case GYRO_RANGE_250DPS:
            gyro_sens = GYRO_SENS_250DPS;
 800a5f0:	4b7a      	ldr	r3, [pc, #488]	; (800a7dc <sens_UpdData+0x2e4>)
 800a5f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a5f4:	e008      	b.n	800a608 <sens_UpdData+0x110>
        case GYRO_RANGE_500DPS:
            gyro_sens = GYRO_SENS_500DPS;
 800a5f6:	4b7a      	ldr	r3, [pc, #488]	; (800a7e0 <sens_UpdData+0x2e8>)
 800a5f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a5fa:	e005      	b.n	800a608 <sens_UpdData+0x110>
        case GYRO_RANGE_1000DPS:
            gyro_sens = GYRO_SENS_1000DPS;
 800a5fc:	4b79      	ldr	r3, [pc, #484]	; (800a7e4 <sens_UpdData+0x2ec>)
 800a5fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a600:	e002      	b.n	800a608 <sens_UpdData+0x110>
        case GYRO_RANGE_2000DPS:
            gyro_sens = GYRO_SENS_2000DPS;
 800a602:	4b79      	ldr	r3, [pc, #484]	; (800a7e8 <sens_UpdData+0x2f0>)
 800a604:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a606:	bf00      	nop
    }
    switch (sens_info.accel_range) {
 800a608:	4b73      	ldr	r3, [pc, #460]	; (800a7d8 <sens_UpdData+0x2e0>)
 800a60a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	2b18      	cmp	r3, #24
 800a612:	d845      	bhi.n	800a6a0 <sens_UpdData+0x1a8>
 800a614:	a201      	add	r2, pc, #4	; (adr r2, 800a61c <sens_UpdData+0x124>)
 800a616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a61a:	bf00      	nop
 800a61c:	0800a681 	.word	0x0800a681
 800a620:	0800a6a1 	.word	0x0800a6a1
 800a624:	0800a6a1 	.word	0x0800a6a1
 800a628:	0800a6a1 	.word	0x0800a6a1
 800a62c:	0800a6a1 	.word	0x0800a6a1
 800a630:	0800a6a1 	.word	0x0800a6a1
 800a634:	0800a6a1 	.word	0x0800a6a1
 800a638:	0800a6a1 	.word	0x0800a6a1
 800a63c:	0800a689 	.word	0x0800a689
 800a640:	0800a6a1 	.word	0x0800a6a1
 800a644:	0800a6a1 	.word	0x0800a6a1
 800a648:	0800a6a1 	.word	0x0800a6a1
 800a64c:	0800a6a1 	.word	0x0800a6a1
 800a650:	0800a6a1 	.word	0x0800a6a1
 800a654:	0800a6a1 	.word	0x0800a6a1
 800a658:	0800a6a1 	.word	0x0800a6a1
 800a65c:	0800a691 	.word	0x0800a691
 800a660:	0800a6a1 	.word	0x0800a6a1
 800a664:	0800a6a1 	.word	0x0800a6a1
 800a668:	0800a6a1 	.word	0x0800a6a1
 800a66c:	0800a6a1 	.word	0x0800a6a1
 800a670:	0800a6a1 	.word	0x0800a6a1
 800a674:	0800a6a1 	.word	0x0800a6a1
 800a678:	0800a6a1 	.word	0x0800a6a1
 800a67c:	0800a699 	.word	0x0800a699
        case ACCEL_RANGE_2G:
            accel_sens = ACCEL_SENS_2G;
 800a680:	f04f 438d 	mov.w	r3, #1182793728	; 0x46800000
 800a684:	623b      	str	r3, [r7, #32]
            break;
 800a686:	e00b      	b.n	800a6a0 <sens_UpdData+0x1a8>
        case ACCEL_RANGE_4G:
            accel_sens = ACCEL_SENS_4G;
 800a688:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 800a68c:	623b      	str	r3, [r7, #32]
            break;
 800a68e:	e007      	b.n	800a6a0 <sens_UpdData+0x1a8>
        case ACCEL_RANGE_8G:
            accel_sens = ACCEL_SENS_8G;
 800a690:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 800a694:	623b      	str	r3, [r7, #32]
            break;
 800a696:	e003      	b.n	800a6a0 <sens_UpdData+0x1a8>
        case ACCEL_RANGE_16G:
            accel_sens = ACCEL_SENS_16G;
 800a698:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 800a69c:	623b      	str	r3, [r7, #32]
            break;
 800a69e:	bf00      	nop
    }

    sens_info.accel_x = (float)raw_accel_x / accel_sens; // g
 800a6a0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800a6a4:	ee07 3a90 	vmov	s15, r3
 800a6a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a6ac:	ed97 7a08 	vldr	s14, [r7, #32]
 800a6b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6b4:	4b48      	ldr	r3, [pc, #288]	; (800a7d8 <sens_UpdData+0x2e0>)
 800a6b6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    sens_info.accel_y = (float)raw_accel_y / accel_sens; // g
 800a6ba:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800a6be:	ee07 3a90 	vmov	s15, r3
 800a6c2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a6c6:	ed97 7a08 	vldr	s14, [r7, #32]
 800a6ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6ce:	4b42      	ldr	r3, [pc, #264]	; (800a7d8 <sens_UpdData+0x2e0>)
 800a6d0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    sens_info.accel_z = (float)raw_accel_z / accel_sens; // g
 800a6d4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800a6d8:	ee07 3a90 	vmov	s15, r3
 800a6dc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a6e0:	ed97 7a08 	vldr	s14, [r7, #32]
 800a6e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6e8:	4b3b      	ldr	r3, [pc, #236]	; (800a7d8 <sens_UpdData+0x2e0>)
 800a6ea:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    sens_info.gyro_x = ((float)raw_gyro_x / gyro_sens) - ((float)sens_info.gyro_x_bias  / gyro_sens); // °/s
 800a6ee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a6f2:	ee07 3a90 	vmov	s15, r3
 800a6f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a6fa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a6fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a702:	4b35      	ldr	r3, [pc, #212]	; (800a7d8 <sens_UpdData+0x2e0>)
 800a704:	695b      	ldr	r3, [r3, #20]
 800a706:	ee07 3a90 	vmov	s15, r3
 800a70a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800a70e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a712:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a716:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a71a:	4b2f      	ldr	r3, [pc, #188]	; (800a7d8 <sens_UpdData+0x2e0>)
 800a71c:	edc3 7a02 	vstr	s15, [r3, #8]
    sens_info.gyro_y = ((float)raw_gyro_y / gyro_sens) - ((float)sens_info.gyro_y_bias  / gyro_sens); // °/s
 800a720:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a724:	ee07 3a90 	vmov	s15, r3
 800a728:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a72c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a730:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a734:	4b28      	ldr	r3, [pc, #160]	; (800a7d8 <sens_UpdData+0x2e0>)
 800a736:	699b      	ldr	r3, [r3, #24]
 800a738:	ee07 3a90 	vmov	s15, r3
 800a73c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800a740:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a744:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a748:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a74c:	4b22      	ldr	r3, [pc, #136]	; (800a7d8 <sens_UpdData+0x2e0>)
 800a74e:	edc3 7a03 	vstr	s15, [r3, #12]
    sens_info.gyro_z = ((float)raw_gyro_z / gyro_sens) - ((float)sens_info.gyro_z_bias  / gyro_sens); // °/s
 800a752:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a756:	ee07 3a90 	vmov	s15, r3
 800a75a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a75e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a766:	4b1c      	ldr	r3, [pc, #112]	; (800a7d8 <sens_UpdData+0x2e0>)
 800a768:	69db      	ldr	r3, [r3, #28]
 800a76a:	ee07 3a90 	vmov	s15, r3
 800a76e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800a772:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a776:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a77a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a77e:	4b16      	ldr	r3, [pc, #88]	; (800a7d8 <sens_UpdData+0x2e0>)
 800a780:	edc3 7a04 	vstr	s15, [r3, #16]
    sens_info.temperature = ((float)raw_temp / 340.0) + 36.53; // °C
 800a784:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a788:	ee07 3a90 	vmov	s15, r3
 800a78c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a790:	ee17 0a90 	vmov	r0, s15
 800a794:	f7f5 fe8c 	bl	80004b0 <__aeabi_f2d>
 800a798:	f04f 0200 	mov.w	r2, #0
 800a79c:	4b13      	ldr	r3, [pc, #76]	; (800a7ec <sens_UpdData+0x2f4>)
 800a79e:	f7f6 f809 	bl	80007b4 <__aeabi_ddiv>
 800a7a2:	4602      	mov	r2, r0
 800a7a4:	460b      	mov	r3, r1
 800a7a6:	4610      	mov	r0, r2
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	a309      	add	r3, pc, #36	; (adr r3, 800a7d0 <sens_UpdData+0x2d8>)
 800a7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b0:	f7f5 fd20 	bl	80001f4 <__adddf3>
 800a7b4:	4602      	mov	r2, r0
 800a7b6:	460b      	mov	r3, r1
 800a7b8:	4610      	mov	r0, r2
 800a7ba:	4619      	mov	r1, r3
 800a7bc:	f7f6 f980 	bl	8000ac0 <__aeabi_d2f>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	4a05      	ldr	r2, [pc, #20]	; (800a7d8 <sens_UpdData+0x2e0>)
 800a7c4:	6313      	str	r3, [r2, #48]	; 0x30

    return HAL_OK;
 800a7c6:	2300      	movs	r3, #0
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3728      	adds	r7, #40	; 0x28
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}
 800a7d0:	0a3d70a4 	.word	0x0a3d70a4
 800a7d4:	404243d7 	.word	0x404243d7
 800a7d8:	20001028 	.word	0x20001028
 800a7dc:	43030000 	.word	0x43030000
 800a7e0:	42830000 	.word	0x42830000
 800a7e4:	42033333 	.word	0x42033333
 800a7e8:	41833333 	.word	0x41833333
 800a7ec:	40754000 	.word	0x40754000

0800a7f0 <sens_WriteByte>:

void sens_WriteByte(uint8_t reg, uint8_t data)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b088      	sub	sp, #32
 800a7f4:	af04      	add	r7, sp, #16
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	460a      	mov	r2, r1
 800a7fa:	71fb      	strb	r3, [r7, #7]
 800a7fc:	4613      	mov	r3, r2
 800a7fe:	71bb      	strb	r3, [r7, #6]
	volatile HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Write(&HAL_MEMS_I2C, SENS_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 1000);
 800a800:	79fb      	ldrb	r3, [r7, #7]
 800a802:	b29a      	uxth	r2, r3
 800a804:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a808:	9302      	str	r3, [sp, #8]
 800a80a:	2301      	movs	r3, #1
 800a80c:	9301      	str	r3, [sp, #4]
 800a80e:	1dbb      	adds	r3, r7, #6
 800a810:	9300      	str	r3, [sp, #0]
 800a812:	2301      	movs	r3, #1
 800a814:	21d0      	movs	r1, #208	; 0xd0
 800a816:	4804      	ldr	r0, [pc, #16]	; (800a828 <sens_WriteByte+0x38>)
 800a818:	f002 fcdc 	bl	800d1d4 <HAL_I2C_Mem_Write>
 800a81c:	4603      	mov	r3, r0
 800a81e:	73fb      	strb	r3, [r7, #15]

    return;
 800a820:	bf00      	nop
}
 800a822:	3710      	adds	r7, #16
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}
 800a828:	20000b24 	.word	0x20000b24

0800a82c <sens_Read>:

HAL_StatusTypeDef sens_Read(uint8_t reg, uint8_t* data, uint16_t size)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b088      	sub	sp, #32
 800a830:	af04      	add	r7, sp, #16
 800a832:	4603      	mov	r3, r0
 800a834:	6039      	str	r1, [r7, #0]
 800a836:	71fb      	strb	r3, [r7, #7]
 800a838:	4613      	mov	r3, r2
 800a83a:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef status;

	status = HAL_I2C_Mem_Read(&HAL_MEMS_I2C, SENS_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, size, 1000);
 800a83c:	79fb      	ldrb	r3, [r7, #7]
 800a83e:	b29a      	uxth	r2, r3
 800a840:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a844:	9302      	str	r3, [sp, #8]
 800a846:	88bb      	ldrh	r3, [r7, #4]
 800a848:	9301      	str	r3, [sp, #4]
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	9300      	str	r3, [sp, #0]
 800a84e:	2301      	movs	r3, #1
 800a850:	21d0      	movs	r1, #208	; 0xd0
 800a852:	4807      	ldr	r0, [pc, #28]	; (800a870 <sens_Read+0x44>)
 800a854:	f002 fdb8 	bl	800d3c8 <HAL_I2C_Mem_Read>
 800a858:	4603      	mov	r3, r0
 800a85a:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 800a85c:	7bfb      	ldrb	r3, [r7, #15]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d001      	beq.n	800a866 <sens_Read+0x3a>
		return status;
 800a862:	7bfb      	ldrb	r3, [r7, #15]
 800a864:	e000      	b.n	800a868 <sens_Read+0x3c>
	}

    return HAL_OK;
 800a866:	2300      	movs	r3, #0
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3710      	adds	r7, #16
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}
 800a870:	20000b24 	.word	0x20000b24

0800a874 <cfg_NodeSensVarProp>:

/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeSensVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 800a874:	b480      	push	{r7}
 800a876:	b087      	sub	sp, #28
 800a878:	af00      	add	r7, sp, #0
 800a87a:	4603      	mov	r3, r0
 800a87c:	60b9      	str	r1, [r7, #8]
 800a87e:	607a      	str	r2, [r7, #4]
 800a880:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 800a882:	89fb      	ldrh	r3, [r7, #14]
 800a884:	2b0c      	cmp	r3, #12
 800a886:	d844      	bhi.n	800a912 <cfg_NodeSensVarProp+0x9e>
 800a888:	a201      	add	r2, pc, #4	; (adr r2, 800a890 <cfg_NodeSensVarProp+0x1c>)
 800a88a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a88e:	bf00      	nop
 800a890:	0800a8c5 	.word	0x0800a8c5
 800a894:	0800a8cb 	.word	0x0800a8cb
 800a898:	0800a8d1 	.word	0x0800a8d1
 800a89c:	0800a8d7 	.word	0x0800a8d7
 800a8a0:	0800a8dd 	.word	0x0800a8dd
 800a8a4:	0800a8e3 	.word	0x0800a8e3
 800a8a8:	0800a8e9 	.word	0x0800a8e9
 800a8ac:	0800a8ef 	.word	0x0800a8ef
 800a8b0:	0800a8f5 	.word	0x0800a8f5
 800a8b4:	0800a8fb 	.word	0x0800a8fb
 800a8b8:	0800a901 	.word	0x0800a901
 800a8bc:	0800a907 	.word	0x0800a907
 800a8c0:	0800a90d 	.word	0x0800a90d
	{
		case SENS_STATE:		str = "State"; break;
 800a8c4:	4b4e      	ldr	r3, [pc, #312]	; (800aa00 <cfg_NodeSensVarProp+0x18c>)
 800a8c6:	617b      	str	r3, [r7, #20]
 800a8c8:	e025      	b.n	800a916 <cfg_NodeSensVarProp+0xa2>
		case SENS_GYRO_X:		str = "Gyro X"; break;
 800a8ca:	4b4e      	ldr	r3, [pc, #312]	; (800aa04 <cfg_NodeSensVarProp+0x190>)
 800a8cc:	617b      	str	r3, [r7, #20]
 800a8ce:	e022      	b.n	800a916 <cfg_NodeSensVarProp+0xa2>
		case SENS_GYRO_Y:		str = "Gyro Y"; break;
 800a8d0:	4b4d      	ldr	r3, [pc, #308]	; (800aa08 <cfg_NodeSensVarProp+0x194>)
 800a8d2:	617b      	str	r3, [r7, #20]
 800a8d4:	e01f      	b.n	800a916 <cfg_NodeSensVarProp+0xa2>
		case SENS_GYRO_Z:		str = "Gyro Z"; break;
 800a8d6:	4b4d      	ldr	r3, [pc, #308]	; (800aa0c <cfg_NodeSensVarProp+0x198>)
 800a8d8:	617b      	str	r3, [r7, #20]
 800a8da:	e01c      	b.n	800a916 <cfg_NodeSensVarProp+0xa2>
		case SENS_ACCEL_X:		str = "Accel X"; break;
 800a8dc:	4b4c      	ldr	r3, [pc, #304]	; (800aa10 <cfg_NodeSensVarProp+0x19c>)
 800a8de:	617b      	str	r3, [r7, #20]
 800a8e0:	e019      	b.n	800a916 <cfg_NodeSensVarProp+0xa2>
		case SENS_ACCEL_Y:		str = "Accel Y"; break;
 800a8e2:	4b4c      	ldr	r3, [pc, #304]	; (800aa14 <cfg_NodeSensVarProp+0x1a0>)
 800a8e4:	617b      	str	r3, [r7, #20]
 800a8e6:	e016      	b.n	800a916 <cfg_NodeSensVarProp+0xa2>
		case SENS_ACCEL_Z:		str = "Accel Z"; break;
 800a8e8:	4b4b      	ldr	r3, [pc, #300]	; (800aa18 <cfg_NodeSensVarProp+0x1a4>)
 800a8ea:	617b      	str	r3, [r7, #20]
 800a8ec:	e013      	b.n	800a916 <cfg_NodeSensVarProp+0xa2>
		case SENS_TEMPERATURE:	str = "Temperature"; break;
 800a8ee:	4b4b      	ldr	r3, [pc, #300]	; (800aa1c <cfg_NodeSensVarProp+0x1a8>)
 800a8f0:	617b      	str	r3, [r7, #20]
 800a8f2:	e010      	b.n	800a916 <cfg_NodeSensVarProp+0xa2>
		case SENS_SAT_NUM:		str = "GNSS sat number"; break;
 800a8f4:	4b4a      	ldr	r3, [pc, #296]	; (800aa20 <cfg_NodeSensVarProp+0x1ac>)
 800a8f6:	617b      	str	r3, [r7, #20]
 800a8f8:	e00d      	b.n	800a916 <cfg_NodeSensVarProp+0xa2>
		case SENS_LATITUDE:		str = "GNSS latitude"; break;
 800a8fa:	4b4a      	ldr	r3, [pc, #296]	; (800aa24 <cfg_NodeSensVarProp+0x1b0>)
 800a8fc:	617b      	str	r3, [r7, #20]
 800a8fe:	e00a      	b.n	800a916 <cfg_NodeSensVarProp+0xa2>
		case SENS_LONGITUDE:	str = "GNSS longitude"; break;
 800a900:	4b49      	ldr	r3, [pc, #292]	; (800aa28 <cfg_NodeSensVarProp+0x1b4>)
 800a902:	617b      	str	r3, [r7, #20]
 800a904:	e007      	b.n	800a916 <cfg_NodeSensVarProp+0xa2>
		case SENS_ALTTITUDE:	str = "GNSS altitude"; break;
 800a906:	4b49      	ldr	r3, [pc, #292]	; (800aa2c <cfg_NodeSensVarProp+0x1b8>)
 800a908:	617b      	str	r3, [r7, #20]
 800a90a:	e004      	b.n	800a916 <cfg_NodeSensVarProp+0xa2>
		case SENS_SPEED:		str = "GNSS speed"; break;
 800a90c:	4b48      	ldr	r3, [pc, #288]	; (800aa30 <cfg_NodeSensVarProp+0x1bc>)
 800a90e:	617b      	str	r3, [r7, #20]
 800a910:	e001      	b.n	800a916 <cfg_NodeSensVarProp+0xa2>
		default: return CFG_ERROR_VARID;
 800a912:	2302      	movs	r3, #2
 800a914:	e06d      	b.n	800a9f2 <cfg_NodeSensVarProp+0x17e>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d00f      	beq.n	800a93c <cfg_NodeSensVarProp+0xc8>
 800a91c:	e007      	b.n	800a92e <cfg_NodeSensVarProp+0xba>
 800a91e:	697a      	ldr	r2, [r7, #20]
 800a920:	1c53      	adds	r3, r2, #1
 800a922:	617b      	str	r3, [r7, #20]
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	1c59      	adds	r1, r3, #1
 800a928:	60b9      	str	r1, [r7, #8]
 800a92a:	7812      	ldrb	r2, [r2, #0]
 800a92c:	701a      	strb	r2, [r3, #0]
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	781b      	ldrb	r3, [r3, #0]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d1f3      	bne.n	800a91e <cfg_NodeSensVarProp+0xaa>
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	2200      	movs	r2, #0
 800a93a:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d056      	beq.n	800a9f0 <cfg_NodeSensVarProp+0x17c>
 800a942:	89fb      	ldrh	r3, [r7, #14]
 800a944:	2b0c      	cmp	r3, #12
 800a946:	d851      	bhi.n	800a9ec <cfg_NodeSensVarProp+0x178>
 800a948:	a201      	add	r2, pc, #4	; (adr r2, 800a950 <cfg_NodeSensVarProp+0xdc>)
 800a94a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a94e:	bf00      	nop
 800a950:	0800a985 	.word	0x0800a985
 800a954:	0800a98d 	.word	0x0800a98d
 800a958:	0800a995 	.word	0x0800a995
 800a95c:	0800a99d 	.word	0x0800a99d
 800a960:	0800a9a5 	.word	0x0800a9a5
 800a964:	0800a9ad 	.word	0x0800a9ad
 800a968:	0800a9b5 	.word	0x0800a9b5
 800a96c:	0800a9bd 	.word	0x0800a9bd
 800a970:	0800a9c5 	.word	0x0800a9c5
 800a974:	0800a9cd 	.word	0x0800a9cd
 800a978:	0800a9d5 	.word	0x0800a9d5
 800a97c:	0800a9dd 	.word	0x0800a9dd
 800a980:	0800a9e5 	.word	0x0800a9e5
	{
		case SENS_STATE:		*prop = CFG_VAR_TYPE_UINT; break;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2202      	movs	r2, #2
 800a988:	801a      	strh	r2, [r3, #0]
 800a98a:	e031      	b.n	800a9f0 <cfg_NodeSensVarProp+0x17c>
		case SENS_GYRO_X:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2214      	movs	r2, #20
 800a990:	801a      	strh	r2, [r3, #0]
 800a992:	e02d      	b.n	800a9f0 <cfg_NodeSensVarProp+0x17c>
		case SENS_GYRO_Y:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2214      	movs	r2, #20
 800a998:	801a      	strh	r2, [r3, #0]
 800a99a:	e029      	b.n	800a9f0 <cfg_NodeSensVarProp+0x17c>
		case SENS_GYRO_Z:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2214      	movs	r2, #20
 800a9a0:	801a      	strh	r2, [r3, #0]
 800a9a2:	e025      	b.n	800a9f0 <cfg_NodeSensVarProp+0x17c>
		case SENS_ACCEL_X:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2214      	movs	r2, #20
 800a9a8:	801a      	strh	r2, [r3, #0]
 800a9aa:	e021      	b.n	800a9f0 <cfg_NodeSensVarProp+0x17c>
		case SENS_ACCEL_Y:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2214      	movs	r2, #20
 800a9b0:	801a      	strh	r2, [r3, #0]
 800a9b2:	e01d      	b.n	800a9f0 <cfg_NodeSensVarProp+0x17c>
		case SENS_ACCEL_Z:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2214      	movs	r2, #20
 800a9b8:	801a      	strh	r2, [r3, #0]
 800a9ba:	e019      	b.n	800a9f0 <cfg_NodeSensVarProp+0x17c>
		case SENS_TEMPERATURE:	*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2214      	movs	r2, #20
 800a9c0:	801a      	strh	r2, [r3, #0]
 800a9c2:	e015      	b.n	800a9f0 <cfg_NodeSensVarProp+0x17c>
		case SENS_SAT_NUM:		*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2212      	movs	r2, #18
 800a9c8:	801a      	strh	r2, [r3, #0]
 800a9ca:	e011      	b.n	800a9f0 <cfg_NodeSensVarProp+0x17c>
		case SENS_LATITUDE:		*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2211      	movs	r2, #17
 800a9d0:	801a      	strh	r2, [r3, #0]
 800a9d2:	e00d      	b.n	800a9f0 <cfg_NodeSensVarProp+0x17c>
		case SENS_LONGITUDE:	*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2211      	movs	r2, #17
 800a9d8:	801a      	strh	r2, [r3, #0]
 800a9da:	e009      	b.n	800a9f0 <cfg_NodeSensVarProp+0x17c>
		case SENS_ALTTITUDE:	*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2214      	movs	r2, #20
 800a9e0:	801a      	strh	r2, [r3, #0]
 800a9e2:	e005      	b.n	800a9f0 <cfg_NodeSensVarProp+0x17c>
		case SENS_SPEED:		*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2211      	movs	r2, #17
 800a9e8:	801a      	strh	r2, [r3, #0]
 800a9ea:	e001      	b.n	800a9f0 <cfg_NodeSensVarProp+0x17c>
		default: return CFG_ERROR_VARID;
 800a9ec:	2302      	movs	r3, #2
 800a9ee:	e000      	b.n	800a9f2 <cfg_NodeSensVarProp+0x17e>
	}
	return CFG_ERROR_NONE;
 800a9f0:	2300      	movs	r3, #0
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	371c      	adds	r7, #28
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr
 800a9fe:	bf00      	nop
 800aa00:	08016a5c 	.word	0x08016a5c
 800aa04:	08016a64 	.word	0x08016a64
 800aa08:	08016a6c 	.word	0x08016a6c
 800aa0c:	08016a74 	.word	0x08016a74
 800aa10:	08016a7c 	.word	0x08016a7c
 800aa14:	08016a84 	.word	0x08016a84
 800aa18:	08016a8c 	.word	0x08016a8c
 800aa1c:	08016a94 	.word	0x08016a94
 800aa20:	08016aa0 	.word	0x08016aa0
 800aa24:	08016ab0 	.word	0x08016ab0
 800aa28:	08016ac0 	.word	0x08016ac0
 800aa2c:	08016ad0 	.word	0x08016ad0
 800aa30:	08016ae0 	.word	0x08016ae0

0800aa34 <cfg_NodeSensVarGet>:

uint16_t cfg_NodeSensVarGet(uint16_t varid, void *value)
{
 800aa34:	b480      	push	{r7}
 800aa36:	b083      	sub	sp, #12
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	6039      	str	r1, [r7, #0]
 800aa3e:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d068      	beq.n	800ab18 <cfg_NodeSensVarGet+0xe4>
 800aa46:	88fb      	ldrh	r3, [r7, #6]
 800aa48:	2b0c      	cmp	r3, #12
 800aa4a:	d863      	bhi.n	800ab14 <cfg_NodeSensVarGet+0xe0>
 800aa4c:	a201      	add	r2, pc, #4	; (adr r2, 800aa54 <cfg_NodeSensVarGet+0x20>)
 800aa4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa52:	bf00      	nop
 800aa54:	0800aa89 	.word	0x0800aa89
 800aa58:	0800aa97 	.word	0x0800aa97
 800aa5c:	0800aaa1 	.word	0x0800aaa1
 800aa60:	0800aaab 	.word	0x0800aaab
 800aa64:	0800aab5 	.word	0x0800aab5
 800aa68:	0800aabf 	.word	0x0800aabf
 800aa6c:	0800aac9 	.word	0x0800aac9
 800aa70:	0800aad3 	.word	0x0800aad3
 800aa74:	0800aadd 	.word	0x0800aadd
 800aa78:	0800aaed 	.word	0x0800aaed
 800aa7c:	0800aaf7 	.word	0x0800aaf7
 800aa80:	0800ab01 	.word	0x0800ab01
 800aa84:	0800ab0b 	.word	0x0800ab0b
	{
		case SENS_STATE:		*(uint32_t*)value = sens_info.state; break;
 800aa88:	4b27      	ldr	r3, [pc, #156]	; (800ab28 <cfg_NodeSensVarGet+0xf4>)
 800aa8a:	791b      	ldrb	r3, [r3, #4]
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	461a      	mov	r2, r3
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	601a      	str	r2, [r3, #0]
 800aa94:	e040      	b.n	800ab18 <cfg_NodeSensVarGet+0xe4>
		case SENS_GYRO_X:		*(float*)value = sens_info.gyro_x; break;
 800aa96:	4b24      	ldr	r3, [pc, #144]	; (800ab28 <cfg_NodeSensVarGet+0xf4>)
 800aa98:	689a      	ldr	r2, [r3, #8]
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	601a      	str	r2, [r3, #0]
 800aa9e:	e03b      	b.n	800ab18 <cfg_NodeSensVarGet+0xe4>
		case SENS_GYRO_Y:		*(float*)value = sens_info.gyro_y; break;
 800aaa0:	4b21      	ldr	r3, [pc, #132]	; (800ab28 <cfg_NodeSensVarGet+0xf4>)
 800aaa2:	68da      	ldr	r2, [r3, #12]
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	601a      	str	r2, [r3, #0]
 800aaa8:	e036      	b.n	800ab18 <cfg_NodeSensVarGet+0xe4>
		case SENS_GYRO_Z:		*(float*)value = sens_info.gyro_z; break;
 800aaaa:	4b1f      	ldr	r3, [pc, #124]	; (800ab28 <cfg_NodeSensVarGet+0xf4>)
 800aaac:	691a      	ldr	r2, [r3, #16]
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	601a      	str	r2, [r3, #0]
 800aab2:	e031      	b.n	800ab18 <cfg_NodeSensVarGet+0xe4>
		case SENS_ACCEL_X:		*(float*)value = sens_info.accel_x; break;
 800aab4:	4b1c      	ldr	r3, [pc, #112]	; (800ab28 <cfg_NodeSensVarGet+0xf4>)
 800aab6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	601a      	str	r2, [r3, #0]
 800aabc:	e02c      	b.n	800ab18 <cfg_NodeSensVarGet+0xe4>
		case SENS_ACCEL_Y:		*(float*)value = sens_info.accel_y; break;
 800aabe:	4b1a      	ldr	r3, [pc, #104]	; (800ab28 <cfg_NodeSensVarGet+0xf4>)
 800aac0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	601a      	str	r2, [r3, #0]
 800aac6:	e027      	b.n	800ab18 <cfg_NodeSensVarGet+0xe4>
		case SENS_ACCEL_Z:		*(float*)value = sens_info.accel_z; break;
 800aac8:	4b17      	ldr	r3, [pc, #92]	; (800ab28 <cfg_NodeSensVarGet+0xf4>)
 800aaca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	601a      	str	r2, [r3, #0]
 800aad0:	e022      	b.n	800ab18 <cfg_NodeSensVarGet+0xe4>
		case SENS_TEMPERATURE:	*(float*)value = sens_info.temperature; break;
 800aad2:	4b15      	ldr	r3, [pc, #84]	; (800ab28 <cfg_NodeSensVarGet+0xf4>)
 800aad4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	601a      	str	r2, [r3, #0]
 800aada:	e01d      	b.n	800ab18 <cfg_NodeSensVarGet+0xe4>
		case SENS_SAT_NUM:		*(int32_t*)value = sens_info.sat_num; break;
 800aadc:	4b12      	ldr	r3, [pc, #72]	; (800ab28 <cfg_NodeSensVarGet+0xf4>)
 800aade:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aae2:	b2db      	uxtb	r3, r3
 800aae4:	461a      	mov	r2, r3
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	601a      	str	r2, [r3, #0]
 800aaea:	e015      	b.n	800ab18 <cfg_NodeSensVarGet+0xe4>
		case SENS_LATITUDE:		*(int32_t*)value = sens_info.latitude; break;
 800aaec:	4b0e      	ldr	r3, [pc, #56]	; (800ab28 <cfg_NodeSensVarGet+0xf4>)
 800aaee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	601a      	str	r2, [r3, #0]
 800aaf4:	e010      	b.n	800ab18 <cfg_NodeSensVarGet+0xe4>
		case SENS_LONGITUDE:	*(int32_t*)value = sens_info.longitude; break;
 800aaf6:	4b0c      	ldr	r3, [pc, #48]	; (800ab28 <cfg_NodeSensVarGet+0xf4>)
 800aaf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	601a      	str	r2, [r3, #0]
 800aafe:	e00b      	b.n	800ab18 <cfg_NodeSensVarGet+0xe4>
		case SENS_ALTTITUDE:	*(float*)value = sens_info.altitude; break;
 800ab00:	4b09      	ldr	r3, [pc, #36]	; (800ab28 <cfg_NodeSensVarGet+0xf4>)
 800ab02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	601a      	str	r2, [r3, #0]
 800ab08:	e006      	b.n	800ab18 <cfg_NodeSensVarGet+0xe4>
		case SENS_SPEED:		*(int32_t*)value = sens_info.speed; break;
 800ab0a:	4b07      	ldr	r3, [pc, #28]	; (800ab28 <cfg_NodeSensVarGet+0xf4>)
 800ab0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	601a      	str	r2, [r3, #0]
 800ab12:	e001      	b.n	800ab18 <cfg_NodeSensVarGet+0xe4>
		default: return CFG_ERROR_VARID;
 800ab14:	2302      	movs	r3, #2
 800ab16:	e000      	b.n	800ab1a <cfg_NodeSensVarGet+0xe6>
	}
	return CFG_ERROR_NONE;
 800ab18:	2300      	movs	r3, #0
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	370c      	adds	r7, #12
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab24:	4770      	bx	lr
 800ab26:	bf00      	nop
 800ab28:	20001028 	.word	0x20001028

0800ab2c <cfg_NodeSensVarSet>:

uint16_t cfg_NodeSensVarSet(uint16_t varid, void *value)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b083      	sub	sp, #12
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	4603      	mov	r3, r0
 800ab34:	6039      	str	r1, [r7, #0]
 800ab36:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d00a      	beq.n	800ab54 <cfg_NodeSensVarSet+0x28>
 800ab3e:	88fb      	ldrh	r3, [r7, #6]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d105      	bne.n	800ab50 <cfg_NodeSensVarSet+0x24>
	{
		case SENS_STATE:		sens_info.state = (uint8_t)*(uint32_t*)value; break;
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	b2da      	uxtb	r2, r3
 800ab4a:	4b06      	ldr	r3, [pc, #24]	; (800ab64 <cfg_NodeSensVarSet+0x38>)
 800ab4c:	711a      	strb	r2, [r3, #4]
 800ab4e:	e001      	b.n	800ab54 <cfg_NodeSensVarSet+0x28>
		default: return CFG_ERROR_VARID;
 800ab50:	2302      	movs	r3, #2
 800ab52:	e000      	b.n	800ab56 <cfg_NodeSensVarSet+0x2a>
	}
	return CFG_ERROR_NONE;
 800ab54:	2300      	movs	r3, #0
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	370c      	adds	r7, #12
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr
 800ab62:	bf00      	nop
 800ab64:	20001028 	.word	0x20001028

0800ab68 <servo_Timer>:

uint16_t servo_angToPWM(uint16_t ang);
int32_t servo_map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max);

void servo_Timer(uint32_t res)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b085      	sub	sp, #20
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
#ifdef NO_SERVO
	return;
#endif //NO_SERVO

	for( uint8_t i = 0; i < SERVO_TMR_NUM; i++ )
 800ab70:	2300      	movs	r3, #0
 800ab72:	73fb      	strb	r3, [r7, #15]
 800ab74:	e014      	b.n	800aba0 <servo_Timer+0x38>
	{
		if( servo_info.timer[i] > 0 ){
 800ab76:	7bfb      	ldrb	r3, [r7, #15]
 800ab78:	4a0e      	ldr	r2, [pc, #56]	; (800abb4 <servo_Timer+0x4c>)
 800ab7a:	330c      	adds	r3, #12
 800ab7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d00a      	beq.n	800ab9a <servo_Timer+0x32>
			servo_info.timer[i]--;
 800ab84:	7bfb      	ldrb	r3, [r7, #15]
 800ab86:	490b      	ldr	r1, [pc, #44]	; (800abb4 <servo_Timer+0x4c>)
 800ab88:	f103 020c 	add.w	r2, r3, #12
 800ab8c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ab90:	3a01      	subs	r2, #1
 800ab92:	4908      	ldr	r1, [pc, #32]	; (800abb4 <servo_Timer+0x4c>)
 800ab94:	330c      	adds	r3, #12
 800ab96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for( uint8_t i = 0; i < SERVO_TMR_NUM; i++ )
 800ab9a:	7bfb      	ldrb	r3, [r7, #15]
 800ab9c:	3301      	adds	r3, #1
 800ab9e:	73fb      	strb	r3, [r7, #15]
 800aba0:	7bfb      	ldrb	r3, [r7, #15]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d0e7      	beq.n	800ab76 <servo_Timer+0xe>
		}
	}

	return;
 800aba6:	bf00      	nop
}
 800aba8:	3714      	adds	r7, #20
 800abaa:	46bd      	mov	sp, r7
 800abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb0:	4770      	bx	lr
 800abb2:	bf00      	nop
 800abb4:	20001080 	.word	0x20001080

0800abb8 <servo_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void servo_InitTask()
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b082      	sub	sp, #8
 800abbc:	af00      	add	r7, sp, #0
#ifdef NO_SERVO
	return;
#endif //NO_SERVO

	servo_info.servos[SERVO_ROLL].tim = &htim3;
 800abbe:	4b3d      	ldr	r3, [pc, #244]	; (800acb4 <servo_InitTask+0xfc>)
 800abc0:	4a3d      	ldr	r2, [pc, #244]	; (800acb8 <servo_InitTask+0x100>)
 800abc2:	601a      	str	r2, [r3, #0]
	servo_info.servos[SERVO_ROLL].timch = TIM_CHANNEL_1;
 800abc4:	4b3b      	ldr	r3, [pc, #236]	; (800acb4 <servo_InitTask+0xfc>)
 800abc6:	2200      	movs	r2, #0
 800abc8:	605a      	str	r2, [r3, #4]
	servo_info.servos[SERVO_ROLL].cur_ang = 0;
 800abca:	4b3a      	ldr	r3, [pc, #232]	; (800acb4 <servo_InitTask+0xfc>)
 800abcc:	2200      	movs	r2, #0
 800abce:	819a      	strh	r2, [r3, #12]
	servo_info.servos[SERVO_ROLL].cur_pwm = 0;
 800abd0:	4b38      	ldr	r3, [pc, #224]	; (800acb4 <servo_InitTask+0xfc>)
 800abd2:	2200      	movs	r2, #0
 800abd4:	815a      	strh	r2, [r3, #10]
	servo_info.servos[SERVO_ROLL].cur_perc = 0;
 800abd6:	4b37      	ldr	r3, [pc, #220]	; (800acb4 <servo_InitTask+0xfc>)
 800abd8:	2200      	movs	r2, #0
 800abda:	739a      	strb	r2, [r3, #14]
	servo_info.servos[SERVO_ROLL].min_ang = 50;
 800abdc:	4b35      	ldr	r3, [pc, #212]	; (800acb4 <servo_InitTask+0xfc>)
 800abde:	2232      	movs	r2, #50	; 0x32
 800abe0:	821a      	strh	r2, [r3, #16]
	servo_info.servos[SERVO_ROLL].center_ang = 105;
 800abe2:	4b34      	ldr	r3, [pc, #208]	; (800acb4 <servo_InitTask+0xfc>)
 800abe4:	2269      	movs	r2, #105	; 0x69
 800abe6:	825a      	strh	r2, [r3, #18]
	servo_info.servos[SERVO_ROLL].max_ang = 145;
 800abe8:	4b32      	ldr	r3, [pc, #200]	; (800acb4 <servo_InitTask+0xfc>)
 800abea:	2291      	movs	r2, #145	; 0x91
 800abec:	829a      	strh	r2, [r3, #20]
	servo_info.servos[SERVO_ROLL].enable = 1;
 800abee:	4b31      	ldr	r3, [pc, #196]	; (800acb4 <servo_InitTask+0xfc>)
 800abf0:	2201      	movs	r2, #1
 800abf2:	721a      	strb	r2, [r3, #8]

	servo_info.servos[SERVO_PITCH].tim = &htim3;
 800abf4:	4b2f      	ldr	r3, [pc, #188]	; (800acb4 <servo_InitTask+0xfc>)
 800abf6:	4a30      	ldr	r2, [pc, #192]	; (800acb8 <servo_InitTask+0x100>)
 800abf8:	619a      	str	r2, [r3, #24]
	servo_info.servos[SERVO_PITCH].timch = TIM_CHANNEL_2;
 800abfa:	4b2e      	ldr	r3, [pc, #184]	; (800acb4 <servo_InitTask+0xfc>)
 800abfc:	2204      	movs	r2, #4
 800abfe:	61da      	str	r2, [r3, #28]
	servo_info.servos[SERVO_PITCH].cur_ang = 0;
 800ac00:	4b2c      	ldr	r3, [pc, #176]	; (800acb4 <servo_InitTask+0xfc>)
 800ac02:	2200      	movs	r2, #0
 800ac04:	849a      	strh	r2, [r3, #36]	; 0x24
	servo_info.servos[SERVO_PITCH].cur_pwm = 0;
 800ac06:	4b2b      	ldr	r3, [pc, #172]	; (800acb4 <servo_InitTask+0xfc>)
 800ac08:	2200      	movs	r2, #0
 800ac0a:	845a      	strh	r2, [r3, #34]	; 0x22
	servo_info.servos[SERVO_PITCH].cur_perc = 0;
 800ac0c:	4b29      	ldr	r3, [pc, #164]	; (800acb4 <servo_InitTask+0xfc>)
 800ac0e:	2200      	movs	r2, #0
 800ac10:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	servo_info.servos[SERVO_PITCH].min_ang = 25;
 800ac14:	4b27      	ldr	r3, [pc, #156]	; (800acb4 <servo_InitTask+0xfc>)
 800ac16:	2219      	movs	r2, #25
 800ac18:	851a      	strh	r2, [r3, #40]	; 0x28
	servo_info.servos[SERVO_PITCH].center_ang = 90;
 800ac1a:	4b26      	ldr	r3, [pc, #152]	; (800acb4 <servo_InitTask+0xfc>)
 800ac1c:	225a      	movs	r2, #90	; 0x5a
 800ac1e:	855a      	strh	r2, [r3, #42]	; 0x2a
	servo_info.servos[SERVO_PITCH].max_ang = 140;
 800ac20:	4b24      	ldr	r3, [pc, #144]	; (800acb4 <servo_InitTask+0xfc>)
 800ac22:	228c      	movs	r2, #140	; 0x8c
 800ac24:	859a      	strh	r2, [r3, #44]	; 0x2c
	servo_info.servos[SERVO_PITCH].enable = 1;
 800ac26:	4b23      	ldr	r3, [pc, #140]	; (800acb4 <servo_InitTask+0xfc>)
 800ac28:	2201      	movs	r2, #1
 800ac2a:	f883 2020 	strb.w	r2, [r3, #32]

	//Initialize beginning state
	for( uint8_t i = 0; i < SERVOS_NUM; i++ )
 800ac2e:	2300      	movs	r3, #0
 800ac30:	71fb      	strb	r3, [r7, #7]
 800ac32:	e02a      	b.n	800ac8a <servo_InitTask+0xd2>
	{
		servo_info.servos[i].cur_pwm = 0;
 800ac34:	79fa      	ldrb	r2, [r7, #7]
 800ac36:	491f      	ldr	r1, [pc, #124]	; (800acb4 <servo_InitTask+0xfc>)
 800ac38:	4613      	mov	r3, r2
 800ac3a:	005b      	lsls	r3, r3, #1
 800ac3c:	4413      	add	r3, r2
 800ac3e:	00db      	lsls	r3, r3, #3
 800ac40:	440b      	add	r3, r1
 800ac42:	330a      	adds	r3, #10
 800ac44:	2200      	movs	r2, #0
 800ac46:	801a      	strh	r2, [r3, #0]
		servo_info.servos[i].cur_ang = 0;
 800ac48:	79fa      	ldrb	r2, [r7, #7]
 800ac4a:	491a      	ldr	r1, [pc, #104]	; (800acb4 <servo_InitTask+0xfc>)
 800ac4c:	4613      	mov	r3, r2
 800ac4e:	005b      	lsls	r3, r3, #1
 800ac50:	4413      	add	r3, r2
 800ac52:	00db      	lsls	r3, r3, #3
 800ac54:	440b      	add	r3, r1
 800ac56:	330c      	adds	r3, #12
 800ac58:	2200      	movs	r2, #0
 800ac5a:	801a      	strh	r2, [r3, #0]
		HAL_TIM_PWM_Start(servo_info.servos[i].tim, servo_info.servos[i].timch);
 800ac5c:	79fa      	ldrb	r2, [r7, #7]
 800ac5e:	4915      	ldr	r1, [pc, #84]	; (800acb4 <servo_InitTask+0xfc>)
 800ac60:	4613      	mov	r3, r2
 800ac62:	005b      	lsls	r3, r3, #1
 800ac64:	4413      	add	r3, r2
 800ac66:	00db      	lsls	r3, r3, #3
 800ac68:	440b      	add	r3, r1
 800ac6a:	6818      	ldr	r0, [r3, #0]
 800ac6c:	79fa      	ldrb	r2, [r7, #7]
 800ac6e:	4911      	ldr	r1, [pc, #68]	; (800acb4 <servo_InitTask+0xfc>)
 800ac70:	4613      	mov	r3, r2
 800ac72:	005b      	lsls	r3, r3, #1
 800ac74:	4413      	add	r3, r2
 800ac76:	00db      	lsls	r3, r3, #3
 800ac78:	440b      	add	r3, r1
 800ac7a:	3304      	adds	r3, #4
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	4619      	mov	r1, r3
 800ac80:	f005 f936 	bl	800fef0 <HAL_TIM_PWM_Start>
	for( uint8_t i = 0; i < SERVOS_NUM; i++ )
 800ac84:	79fb      	ldrb	r3, [r7, #7]
 800ac86:	3301      	adds	r3, #1
 800ac88:	71fb      	strb	r3, [r7, #7]
 800ac8a:	79fb      	ldrb	r3, [r7, #7]
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	d9d1      	bls.n	800ac34 <servo_InitTask+0x7c>
	}

	servo_setAng(SERVO_ROLL, servo_info.servos[SERVO_ROLL].center_ang);
 800ac90:	4b08      	ldr	r3, [pc, #32]	; (800acb4 <servo_InitTask+0xfc>)
 800ac92:	8a5b      	ldrh	r3, [r3, #18]
 800ac94:	b29b      	uxth	r3, r3
 800ac96:	4619      	mov	r1, r3
 800ac98:	2000      	movs	r0, #0
 800ac9a:	f000 f82b 	bl	800acf4 <servo_setAng>
	servo_setAng(SERVO_PITCH, servo_info.servos[SERVO_PITCH].center_ang);
 800ac9e:	4b05      	ldr	r3, [pc, #20]	; (800acb4 <servo_InitTask+0xfc>)
 800aca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aca2:	b29b      	uxth	r3, r3
 800aca4:	4619      	mov	r1, r3
 800aca6:	2001      	movs	r0, #1
 800aca8:	f000 f824 	bl	800acf4 <servo_setAng>

	return;
 800acac:	bf00      	nop
}
 800acae:	3708      	adds	r7, #8
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}
 800acb4:	20001080 	.word	0x20001080
 800acb8:	20000b78 	.word	0x20000b78

0800acbc <servo_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void servo_Task(void)
{
 800acbc:	b480      	push	{r7}
 800acbe:	af00      	add	r7, sp, #0
#ifdef NO_SERVO
	return;
#endif //NO_SERVO

	return;
 800acc0:	bf00      	nop
}
 800acc2:	46bd      	mov	sp, r7
 800acc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc8:	4770      	bx	lr

0800acca <servo_angToPWM>:

uint16_t servo_angToPWM(uint16_t ang)
{
 800acca:	b480      	push	{r7}
 800accc:	b085      	sub	sp, #20
 800acce:	af00      	add	r7, sp, #0
 800acd0:	4603      	mov	r3, r0
 800acd2:	80fb      	strh	r3, [r7, #6]
	uint16_t pwm_val;

	pwm_val = SERVO_0DEG_PWM_VAL + (ang * SERVO_1DEG_PWM_STEP);
 800acd4:	88fb      	ldrh	r3, [r7, #6]
 800acd6:	461a      	mov	r2, r3
 800acd8:	0052      	lsls	r2, r2, #1
 800acda:	4413      	add	r3, r2
 800acdc:	005b      	lsls	r3, r3, #1
 800acde:	b29b      	uxth	r3, r3
 800ace0:	33f5      	adds	r3, #245	; 0xf5
 800ace2:	81fb      	strh	r3, [r7, #14]

	return pwm_val;
 800ace4:	89fb      	ldrh	r3, [r7, #14]
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3714      	adds	r7, #20
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr
	...

0800acf4 <servo_setAng>:

void servo_setAng(uint8_t servo, uint16_t ang)
{
 800acf4:	b590      	push	{r4, r7, lr}
 800acf6:	b083      	sub	sp, #12
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	4603      	mov	r3, r0
 800acfc:	460a      	mov	r2, r1
 800acfe:	71fb      	strb	r3, [r7, #7]
 800ad00:	4613      	mov	r3, r2
 800ad02:	80bb      	strh	r3, [r7, #4]
#ifdef NO_SERVO
	return;
#endif //NO_SERVO

	if( servo >= SERVOS_NUM ){
 800ad04:	79fb      	ldrb	r3, [r7, #7]
 800ad06:	2b01      	cmp	r3, #1
 800ad08:	f200 809f 	bhi.w	800ae4a <servo_setAng+0x156>
		return;
	}

	servo_info.servos[servo].cur_ang = ang;
 800ad0c:	79fa      	ldrb	r2, [r7, #7]
 800ad0e:	4952      	ldr	r1, [pc, #328]	; (800ae58 <servo_setAng+0x164>)
 800ad10:	4613      	mov	r3, r2
 800ad12:	005b      	lsls	r3, r3, #1
 800ad14:	4413      	add	r3, r2
 800ad16:	00db      	lsls	r3, r3, #3
 800ad18:	440b      	add	r3, r1
 800ad1a:	330c      	adds	r3, #12
 800ad1c:	88ba      	ldrh	r2, [r7, #4]
 800ad1e:	801a      	strh	r2, [r3, #0]
	servo_info.servos[servo].cur_pwm = servo_angToPWM(ang);
 800ad20:	79fc      	ldrb	r4, [r7, #7]
 800ad22:	88bb      	ldrh	r3, [r7, #4]
 800ad24:	4618      	mov	r0, r3
 800ad26:	f7ff ffd0 	bl	800acca <servo_angToPWM>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	4a4a      	ldr	r2, [pc, #296]	; (800ae58 <servo_setAng+0x164>)
 800ad30:	4623      	mov	r3, r4
 800ad32:	005b      	lsls	r3, r3, #1
 800ad34:	4423      	add	r3, r4
 800ad36:	00db      	lsls	r3, r3, #3
 800ad38:	4413      	add	r3, r2
 800ad3a:	330a      	adds	r3, #10
 800ad3c:	460a      	mov	r2, r1
 800ad3e:	801a      	strh	r2, [r3, #0]
	if( servo_info.servos[servo].enable == 1 ){
 800ad40:	79fa      	ldrb	r2, [r7, #7]
 800ad42:	4945      	ldr	r1, [pc, #276]	; (800ae58 <servo_setAng+0x164>)
 800ad44:	4613      	mov	r3, r2
 800ad46:	005b      	lsls	r3, r3, #1
 800ad48:	4413      	add	r3, r2
 800ad4a:	00db      	lsls	r3, r3, #3
 800ad4c:	440b      	add	r3, r1
 800ad4e:	3308      	adds	r3, #8
 800ad50:	781b      	ldrb	r3, [r3, #0]
 800ad52:	b2db      	uxtb	r3, r3
 800ad54:	2b01      	cmp	r3, #1
 800ad56:	d17a      	bne.n	800ae4e <servo_setAng+0x15a>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 800ad58:	79fa      	ldrb	r2, [r7, #7]
 800ad5a:	493f      	ldr	r1, [pc, #252]	; (800ae58 <servo_setAng+0x164>)
 800ad5c:	4613      	mov	r3, r2
 800ad5e:	005b      	lsls	r3, r3, #1
 800ad60:	4413      	add	r3, r2
 800ad62:	00db      	lsls	r3, r3, #3
 800ad64:	440b      	add	r3, r1
 800ad66:	3304      	adds	r3, #4
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d115      	bne.n	800ad9a <servo_setAng+0xa6>
 800ad6e:	79fa      	ldrb	r2, [r7, #7]
 800ad70:	4939      	ldr	r1, [pc, #228]	; (800ae58 <servo_setAng+0x164>)
 800ad72:	4613      	mov	r3, r2
 800ad74:	005b      	lsls	r3, r3, #1
 800ad76:	4413      	add	r3, r2
 800ad78:	00db      	lsls	r3, r3, #3
 800ad7a:	440b      	add	r3, r1
 800ad7c:	330a      	adds	r3, #10
 800ad7e:	881b      	ldrh	r3, [r3, #0]
 800ad80:	b298      	uxth	r0, r3
 800ad82:	79fa      	ldrb	r2, [r7, #7]
 800ad84:	4934      	ldr	r1, [pc, #208]	; (800ae58 <servo_setAng+0x164>)
 800ad86:	4613      	mov	r3, r2
 800ad88:	005b      	lsls	r3, r3, #1
 800ad8a:	4413      	add	r3, r2
 800ad8c:	00db      	lsls	r3, r3, #3
 800ad8e:	440b      	add	r3, r1
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	4602      	mov	r2, r0
 800ad96:	635a      	str	r2, [r3, #52]	; 0x34
	}

	return;
 800ad98:	e059      	b.n	800ae4e <servo_setAng+0x15a>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 800ad9a:	79fa      	ldrb	r2, [r7, #7]
 800ad9c:	492e      	ldr	r1, [pc, #184]	; (800ae58 <servo_setAng+0x164>)
 800ad9e:	4613      	mov	r3, r2
 800ada0:	005b      	lsls	r3, r3, #1
 800ada2:	4413      	add	r3, r2
 800ada4:	00db      	lsls	r3, r3, #3
 800ada6:	440b      	add	r3, r1
 800ada8:	3304      	adds	r3, #4
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	2b04      	cmp	r3, #4
 800adae:	d115      	bne.n	800addc <servo_setAng+0xe8>
 800adb0:	79fa      	ldrb	r2, [r7, #7]
 800adb2:	4929      	ldr	r1, [pc, #164]	; (800ae58 <servo_setAng+0x164>)
 800adb4:	4613      	mov	r3, r2
 800adb6:	005b      	lsls	r3, r3, #1
 800adb8:	4413      	add	r3, r2
 800adba:	00db      	lsls	r3, r3, #3
 800adbc:	440b      	add	r3, r1
 800adbe:	330a      	adds	r3, #10
 800adc0:	881b      	ldrh	r3, [r3, #0]
 800adc2:	b298      	uxth	r0, r3
 800adc4:	79fa      	ldrb	r2, [r7, #7]
 800adc6:	4924      	ldr	r1, [pc, #144]	; (800ae58 <servo_setAng+0x164>)
 800adc8:	4613      	mov	r3, r2
 800adca:	005b      	lsls	r3, r3, #1
 800adcc:	4413      	add	r3, r2
 800adce:	00db      	lsls	r3, r3, #3
 800add0:	440b      	add	r3, r1
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	681a      	ldr	r2, [r3, #0]
 800add6:	4603      	mov	r3, r0
 800add8:	6393      	str	r3, [r2, #56]	; 0x38
	return;
 800adda:	e038      	b.n	800ae4e <servo_setAng+0x15a>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 800addc:	79fa      	ldrb	r2, [r7, #7]
 800adde:	491e      	ldr	r1, [pc, #120]	; (800ae58 <servo_setAng+0x164>)
 800ade0:	4613      	mov	r3, r2
 800ade2:	005b      	lsls	r3, r3, #1
 800ade4:	4413      	add	r3, r2
 800ade6:	00db      	lsls	r3, r3, #3
 800ade8:	440b      	add	r3, r1
 800adea:	3304      	adds	r3, #4
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	2b08      	cmp	r3, #8
 800adf0:	d115      	bne.n	800ae1e <servo_setAng+0x12a>
 800adf2:	79fa      	ldrb	r2, [r7, #7]
 800adf4:	4918      	ldr	r1, [pc, #96]	; (800ae58 <servo_setAng+0x164>)
 800adf6:	4613      	mov	r3, r2
 800adf8:	005b      	lsls	r3, r3, #1
 800adfa:	4413      	add	r3, r2
 800adfc:	00db      	lsls	r3, r3, #3
 800adfe:	440b      	add	r3, r1
 800ae00:	330a      	adds	r3, #10
 800ae02:	881b      	ldrh	r3, [r3, #0]
 800ae04:	b298      	uxth	r0, r3
 800ae06:	79fa      	ldrb	r2, [r7, #7]
 800ae08:	4913      	ldr	r1, [pc, #76]	; (800ae58 <servo_setAng+0x164>)
 800ae0a:	4613      	mov	r3, r2
 800ae0c:	005b      	lsls	r3, r3, #1
 800ae0e:	4413      	add	r3, r2
 800ae10:	00db      	lsls	r3, r3, #3
 800ae12:	440b      	add	r3, r1
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	681a      	ldr	r2, [r3, #0]
 800ae18:	4603      	mov	r3, r0
 800ae1a:	63d3      	str	r3, [r2, #60]	; 0x3c
	return;
 800ae1c:	e017      	b.n	800ae4e <servo_setAng+0x15a>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 800ae1e:	79fa      	ldrb	r2, [r7, #7]
 800ae20:	490d      	ldr	r1, [pc, #52]	; (800ae58 <servo_setAng+0x164>)
 800ae22:	4613      	mov	r3, r2
 800ae24:	005b      	lsls	r3, r3, #1
 800ae26:	4413      	add	r3, r2
 800ae28:	00db      	lsls	r3, r3, #3
 800ae2a:	440b      	add	r3, r1
 800ae2c:	330a      	adds	r3, #10
 800ae2e:	881b      	ldrh	r3, [r3, #0]
 800ae30:	b298      	uxth	r0, r3
 800ae32:	79fa      	ldrb	r2, [r7, #7]
 800ae34:	4908      	ldr	r1, [pc, #32]	; (800ae58 <servo_setAng+0x164>)
 800ae36:	4613      	mov	r3, r2
 800ae38:	005b      	lsls	r3, r3, #1
 800ae3a:	4413      	add	r3, r2
 800ae3c:	00db      	lsls	r3, r3, #3
 800ae3e:	440b      	add	r3, r1
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	681a      	ldr	r2, [r3, #0]
 800ae44:	4603      	mov	r3, r0
 800ae46:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 800ae48:	e001      	b.n	800ae4e <servo_setAng+0x15a>
		return;
 800ae4a:	bf00      	nop
 800ae4c:	e000      	b.n	800ae50 <servo_setAng+0x15c>
	return;
 800ae4e:	bf00      	nop
}
 800ae50:	370c      	adds	r7, #12
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd90      	pop	{r4, r7, pc}
 800ae56:	bf00      	nop
 800ae58:	20001080 	.word	0x20001080

0800ae5c <servo_setPercnet>:

void servo_setPercnet(uint8_t servo, int8_t perc)
{
 800ae5c:	b590      	push	{r4, r7, lr}
 800ae5e:	b087      	sub	sp, #28
 800ae60:	af02      	add	r7, sp, #8
 800ae62:	4603      	mov	r3, r0
 800ae64:	460a      	mov	r2, r1
 800ae66:	71fb      	strb	r3, [r7, #7]
 800ae68:	4613      	mov	r3, r2
 800ae6a:	71bb      	strb	r3, [r7, #6]
	return;
#endif //NO_SERVO

	uint16_t ang_tmp;

	if( servo >= SERVOS_NUM ){
 800ae6c:	79fb      	ldrb	r3, [r7, #7]
 800ae6e:	2b01      	cmp	r3, #1
 800ae70:	d854      	bhi.n	800af1c <servo_setPercnet+0xc0>
		return;
	}

	if( (perc > 100) || (perc < -100) ){
 800ae72:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ae76:	2b64      	cmp	r3, #100	; 0x64
 800ae78:	dc52      	bgt.n	800af20 <servo_setPercnet+0xc4>
 800ae7a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ae7e:	f113 0f64 	cmn.w	r3, #100	; 0x64
 800ae82:	db4d      	blt.n	800af20 <servo_setPercnet+0xc4>
		return;
	}

	if( perc >= 0 )
 800ae84:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	db1f      	blt.n	800aecc <servo_setPercnet+0x70>
	{
		ang_tmp = (uint16_t)servo_map((int32_t)perc, 0, 100,
 800ae8c:	f997 0006 	ldrsb.w	r0, [r7, #6]
										(int32_t)servo_info.servos[servo].center_ang,
 800ae90:	79fa      	ldrb	r2, [r7, #7]
 800ae92:	4925      	ldr	r1, [pc, #148]	; (800af28 <servo_setPercnet+0xcc>)
 800ae94:	4613      	mov	r3, r2
 800ae96:	005b      	lsls	r3, r3, #1
 800ae98:	4413      	add	r3, r2
 800ae9a:	00db      	lsls	r3, r3, #3
 800ae9c:	440b      	add	r3, r1
 800ae9e:	3312      	adds	r3, #18
 800aea0:	881b      	ldrh	r3, [r3, #0]
 800aea2:	b29b      	uxth	r3, r3
		ang_tmp = (uint16_t)servo_map((int32_t)perc, 0, 100,
 800aea4:	461c      	mov	r4, r3
										(int32_t)servo_info.servos[servo].max_ang);
 800aea6:	79fa      	ldrb	r2, [r7, #7]
 800aea8:	491f      	ldr	r1, [pc, #124]	; (800af28 <servo_setPercnet+0xcc>)
 800aeaa:	4613      	mov	r3, r2
 800aeac:	005b      	lsls	r3, r3, #1
 800aeae:	4413      	add	r3, r2
 800aeb0:	00db      	lsls	r3, r3, #3
 800aeb2:	440b      	add	r3, r1
 800aeb4:	3314      	adds	r3, #20
 800aeb6:	881b      	ldrh	r3, [r3, #0]
 800aeb8:	b29b      	uxth	r3, r3
		ang_tmp = (uint16_t)servo_map((int32_t)perc, 0, 100,
 800aeba:	9300      	str	r3, [sp, #0]
 800aebc:	4623      	mov	r3, r4
 800aebe:	2264      	movs	r2, #100	; 0x64
 800aec0:	2100      	movs	r1, #0
 800aec2:	f000 f929 	bl	800b118 <servo_map>
 800aec6:	4603      	mov	r3, r0
 800aec8:	81fb      	strh	r3, [r7, #14]
 800aeca:	e020      	b.n	800af0e <servo_setPercnet+0xb2>
	}
	else
	{
		ang_tmp = (uint16_t)servo_map((int32_t)perc, -1, -100,
 800aecc:	f997 0006 	ldrsb.w	r0, [r7, #6]
										(int32_t)servo_info.servos[servo].center_ang,
 800aed0:	79fa      	ldrb	r2, [r7, #7]
 800aed2:	4915      	ldr	r1, [pc, #84]	; (800af28 <servo_setPercnet+0xcc>)
 800aed4:	4613      	mov	r3, r2
 800aed6:	005b      	lsls	r3, r3, #1
 800aed8:	4413      	add	r3, r2
 800aeda:	00db      	lsls	r3, r3, #3
 800aedc:	440b      	add	r3, r1
 800aede:	3312      	adds	r3, #18
 800aee0:	881b      	ldrh	r3, [r3, #0]
 800aee2:	b29b      	uxth	r3, r3
		ang_tmp = (uint16_t)servo_map((int32_t)perc, -1, -100,
 800aee4:	461c      	mov	r4, r3
										(int32_t)servo_info.servos[servo].min_ang);
 800aee6:	79fa      	ldrb	r2, [r7, #7]
 800aee8:	490f      	ldr	r1, [pc, #60]	; (800af28 <servo_setPercnet+0xcc>)
 800aeea:	4613      	mov	r3, r2
 800aeec:	005b      	lsls	r3, r3, #1
 800aeee:	4413      	add	r3, r2
 800aef0:	00db      	lsls	r3, r3, #3
 800aef2:	440b      	add	r3, r1
 800aef4:	3310      	adds	r3, #16
 800aef6:	881b      	ldrh	r3, [r3, #0]
 800aef8:	b29b      	uxth	r3, r3
		ang_tmp = (uint16_t)servo_map((int32_t)perc, -1, -100,
 800aefa:	9300      	str	r3, [sp, #0]
 800aefc:	4623      	mov	r3, r4
 800aefe:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800af02:	f04f 31ff 	mov.w	r1, #4294967295
 800af06:	f000 f907 	bl	800b118 <servo_map>
 800af0a:	4603      	mov	r3, r0
 800af0c:	81fb      	strh	r3, [r7, #14]
	}

	servo_setAng(servo, ang_tmp);
 800af0e:	89fa      	ldrh	r2, [r7, #14]
 800af10:	79fb      	ldrb	r3, [r7, #7]
 800af12:	4611      	mov	r1, r2
 800af14:	4618      	mov	r0, r3
 800af16:	f7ff feed 	bl	800acf4 <servo_setAng>

	return;
 800af1a:	e002      	b.n	800af22 <servo_setPercnet+0xc6>
		return;
 800af1c:	bf00      	nop
 800af1e:	e000      	b.n	800af22 <servo_setPercnet+0xc6>
		return;
 800af20:	bf00      	nop
}
 800af22:	3714      	adds	r7, #20
 800af24:	46bd      	mov	sp, r7
 800af26:	bd90      	pop	{r4, r7, pc}
 800af28:	20001080 	.word	0x20001080

0800af2c <servo_setEnable>:

void servo_setEnable(uint8_t servo, uint8_t ena)
{
 800af2c:	b480      	push	{r7}
 800af2e:	b083      	sub	sp, #12
 800af30:	af00      	add	r7, sp, #0
 800af32:	4603      	mov	r3, r0
 800af34:	460a      	mov	r2, r1
 800af36:	71fb      	strb	r3, [r7, #7]
 800af38:	4613      	mov	r3, r2
 800af3a:	71bb      	strb	r3, [r7, #6]
#ifdef NO_SERVO
	return;
#endif //NO_SERVO

	if( servo >= SERVOS_NUM ){
 800af3c:	79fb      	ldrb	r3, [r7, #7]
 800af3e:	2b01      	cmp	r3, #1
 800af40:	f200 80e1 	bhi.w	800b106 <servo_setEnable+0x1da>
		return;
	}

	servo_info.servos[servo].enable = ena;
 800af44:	79fa      	ldrb	r2, [r7, #7]
 800af46:	4973      	ldr	r1, [pc, #460]	; (800b114 <servo_setEnable+0x1e8>)
 800af48:	4613      	mov	r3, r2
 800af4a:	005b      	lsls	r3, r3, #1
 800af4c:	4413      	add	r3, r2
 800af4e:	00db      	lsls	r3, r3, #3
 800af50:	440b      	add	r3, r1
 800af52:	3308      	adds	r3, #8
 800af54:	79ba      	ldrb	r2, [r7, #6]
 800af56:	701a      	strb	r2, [r3, #0]

	if( servo_info.servos[servo].enable == 1 ){
 800af58:	79fa      	ldrb	r2, [r7, #7]
 800af5a:	496e      	ldr	r1, [pc, #440]	; (800b114 <servo_setEnable+0x1e8>)
 800af5c:	4613      	mov	r3, r2
 800af5e:	005b      	lsls	r3, r3, #1
 800af60:	4413      	add	r3, r2
 800af62:	00db      	lsls	r3, r3, #3
 800af64:	440b      	add	r3, r1
 800af66:	3308      	adds	r3, #8
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	b2db      	uxtb	r3, r3
 800af6c:	2b01      	cmp	r3, #1
 800af6e:	d178      	bne.n	800b062 <servo_setEnable+0x136>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 800af70:	79fa      	ldrb	r2, [r7, #7]
 800af72:	4968      	ldr	r1, [pc, #416]	; (800b114 <servo_setEnable+0x1e8>)
 800af74:	4613      	mov	r3, r2
 800af76:	005b      	lsls	r3, r3, #1
 800af78:	4413      	add	r3, r2
 800af7a:	00db      	lsls	r3, r3, #3
 800af7c:	440b      	add	r3, r1
 800af7e:	3304      	adds	r3, #4
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d115      	bne.n	800afb2 <servo_setEnable+0x86>
 800af86:	79fa      	ldrb	r2, [r7, #7]
 800af88:	4962      	ldr	r1, [pc, #392]	; (800b114 <servo_setEnable+0x1e8>)
 800af8a:	4613      	mov	r3, r2
 800af8c:	005b      	lsls	r3, r3, #1
 800af8e:	4413      	add	r3, r2
 800af90:	00db      	lsls	r3, r3, #3
 800af92:	440b      	add	r3, r1
 800af94:	330a      	adds	r3, #10
 800af96:	881b      	ldrh	r3, [r3, #0]
 800af98:	b298      	uxth	r0, r3
 800af9a:	79fa      	ldrb	r2, [r7, #7]
 800af9c:	495d      	ldr	r1, [pc, #372]	; (800b114 <servo_setEnable+0x1e8>)
 800af9e:	4613      	mov	r3, r2
 800afa0:	005b      	lsls	r3, r3, #1
 800afa2:	4413      	add	r3, r2
 800afa4:	00db      	lsls	r3, r3, #3
 800afa6:	440b      	add	r3, r1
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	4602      	mov	r2, r0
 800afae:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else{
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, 0);
	}

	return;
 800afb0:	e0aa      	b.n	800b108 <servo_setEnable+0x1dc>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 800afb2:	79fa      	ldrb	r2, [r7, #7]
 800afb4:	4957      	ldr	r1, [pc, #348]	; (800b114 <servo_setEnable+0x1e8>)
 800afb6:	4613      	mov	r3, r2
 800afb8:	005b      	lsls	r3, r3, #1
 800afba:	4413      	add	r3, r2
 800afbc:	00db      	lsls	r3, r3, #3
 800afbe:	440b      	add	r3, r1
 800afc0:	3304      	adds	r3, #4
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	2b04      	cmp	r3, #4
 800afc6:	d115      	bne.n	800aff4 <servo_setEnable+0xc8>
 800afc8:	79fa      	ldrb	r2, [r7, #7]
 800afca:	4952      	ldr	r1, [pc, #328]	; (800b114 <servo_setEnable+0x1e8>)
 800afcc:	4613      	mov	r3, r2
 800afce:	005b      	lsls	r3, r3, #1
 800afd0:	4413      	add	r3, r2
 800afd2:	00db      	lsls	r3, r3, #3
 800afd4:	440b      	add	r3, r1
 800afd6:	330a      	adds	r3, #10
 800afd8:	881b      	ldrh	r3, [r3, #0]
 800afda:	b298      	uxth	r0, r3
 800afdc:	79fa      	ldrb	r2, [r7, #7]
 800afde:	494d      	ldr	r1, [pc, #308]	; (800b114 <servo_setEnable+0x1e8>)
 800afe0:	4613      	mov	r3, r2
 800afe2:	005b      	lsls	r3, r3, #1
 800afe4:	4413      	add	r3, r2
 800afe6:	00db      	lsls	r3, r3, #3
 800afe8:	440b      	add	r3, r1
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	681a      	ldr	r2, [r3, #0]
 800afee:	4603      	mov	r3, r0
 800aff0:	6393      	str	r3, [r2, #56]	; 0x38
 800aff2:	e087      	b.n	800b104 <servo_setEnable+0x1d8>
 800aff4:	79fa      	ldrb	r2, [r7, #7]
 800aff6:	4947      	ldr	r1, [pc, #284]	; (800b114 <servo_setEnable+0x1e8>)
 800aff8:	4613      	mov	r3, r2
 800affa:	005b      	lsls	r3, r3, #1
 800affc:	4413      	add	r3, r2
 800affe:	00db      	lsls	r3, r3, #3
 800b000:	440b      	add	r3, r1
 800b002:	3304      	adds	r3, #4
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	2b08      	cmp	r3, #8
 800b008:	d115      	bne.n	800b036 <servo_setEnable+0x10a>
 800b00a:	79fa      	ldrb	r2, [r7, #7]
 800b00c:	4941      	ldr	r1, [pc, #260]	; (800b114 <servo_setEnable+0x1e8>)
 800b00e:	4613      	mov	r3, r2
 800b010:	005b      	lsls	r3, r3, #1
 800b012:	4413      	add	r3, r2
 800b014:	00db      	lsls	r3, r3, #3
 800b016:	440b      	add	r3, r1
 800b018:	330a      	adds	r3, #10
 800b01a:	881b      	ldrh	r3, [r3, #0]
 800b01c:	b298      	uxth	r0, r3
 800b01e:	79fa      	ldrb	r2, [r7, #7]
 800b020:	493c      	ldr	r1, [pc, #240]	; (800b114 <servo_setEnable+0x1e8>)
 800b022:	4613      	mov	r3, r2
 800b024:	005b      	lsls	r3, r3, #1
 800b026:	4413      	add	r3, r2
 800b028:	00db      	lsls	r3, r3, #3
 800b02a:	440b      	add	r3, r1
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	681a      	ldr	r2, [r3, #0]
 800b030:	4603      	mov	r3, r0
 800b032:	63d3      	str	r3, [r2, #60]	; 0x3c
 800b034:	e066      	b.n	800b104 <servo_setEnable+0x1d8>
 800b036:	79fa      	ldrb	r2, [r7, #7]
 800b038:	4936      	ldr	r1, [pc, #216]	; (800b114 <servo_setEnable+0x1e8>)
 800b03a:	4613      	mov	r3, r2
 800b03c:	005b      	lsls	r3, r3, #1
 800b03e:	4413      	add	r3, r2
 800b040:	00db      	lsls	r3, r3, #3
 800b042:	440b      	add	r3, r1
 800b044:	330a      	adds	r3, #10
 800b046:	881b      	ldrh	r3, [r3, #0]
 800b048:	b298      	uxth	r0, r3
 800b04a:	79fa      	ldrb	r2, [r7, #7]
 800b04c:	4931      	ldr	r1, [pc, #196]	; (800b114 <servo_setEnable+0x1e8>)
 800b04e:	4613      	mov	r3, r2
 800b050:	005b      	lsls	r3, r3, #1
 800b052:	4413      	add	r3, r2
 800b054:	00db      	lsls	r3, r3, #3
 800b056:	440b      	add	r3, r1
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	681a      	ldr	r2, [r3, #0]
 800b05c:	4603      	mov	r3, r0
 800b05e:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 800b060:	e052      	b.n	800b108 <servo_setEnable+0x1dc>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, 0);
 800b062:	79fa      	ldrb	r2, [r7, #7]
 800b064:	492b      	ldr	r1, [pc, #172]	; (800b114 <servo_setEnable+0x1e8>)
 800b066:	4613      	mov	r3, r2
 800b068:	005b      	lsls	r3, r3, #1
 800b06a:	4413      	add	r3, r2
 800b06c:	00db      	lsls	r3, r3, #3
 800b06e:	440b      	add	r3, r1
 800b070:	3304      	adds	r3, #4
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d10b      	bne.n	800b090 <servo_setEnable+0x164>
 800b078:	79fa      	ldrb	r2, [r7, #7]
 800b07a:	4926      	ldr	r1, [pc, #152]	; (800b114 <servo_setEnable+0x1e8>)
 800b07c:	4613      	mov	r3, r2
 800b07e:	005b      	lsls	r3, r3, #1
 800b080:	4413      	add	r3, r2
 800b082:	00db      	lsls	r3, r3, #3
 800b084:	440b      	add	r3, r1
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	2200      	movs	r2, #0
 800b08c:	635a      	str	r2, [r3, #52]	; 0x34
	return;
 800b08e:	e03b      	b.n	800b108 <servo_setEnable+0x1dc>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, 0);
 800b090:	79fa      	ldrb	r2, [r7, #7]
 800b092:	4920      	ldr	r1, [pc, #128]	; (800b114 <servo_setEnable+0x1e8>)
 800b094:	4613      	mov	r3, r2
 800b096:	005b      	lsls	r3, r3, #1
 800b098:	4413      	add	r3, r2
 800b09a:	00db      	lsls	r3, r3, #3
 800b09c:	440b      	add	r3, r1
 800b09e:	3304      	adds	r3, #4
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	2b04      	cmp	r3, #4
 800b0a4:	d10b      	bne.n	800b0be <servo_setEnable+0x192>
 800b0a6:	79fa      	ldrb	r2, [r7, #7]
 800b0a8:	491a      	ldr	r1, [pc, #104]	; (800b114 <servo_setEnable+0x1e8>)
 800b0aa:	4613      	mov	r3, r2
 800b0ac:	005b      	lsls	r3, r3, #1
 800b0ae:	4413      	add	r3, r2
 800b0b0:	00db      	lsls	r3, r3, #3
 800b0b2:	440b      	add	r3, r1
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	681a      	ldr	r2, [r3, #0]
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	6393      	str	r3, [r2, #56]	; 0x38
	return;
 800b0bc:	e024      	b.n	800b108 <servo_setEnable+0x1dc>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, 0);
 800b0be:	79fa      	ldrb	r2, [r7, #7]
 800b0c0:	4914      	ldr	r1, [pc, #80]	; (800b114 <servo_setEnable+0x1e8>)
 800b0c2:	4613      	mov	r3, r2
 800b0c4:	005b      	lsls	r3, r3, #1
 800b0c6:	4413      	add	r3, r2
 800b0c8:	00db      	lsls	r3, r3, #3
 800b0ca:	440b      	add	r3, r1
 800b0cc:	3304      	adds	r3, #4
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	2b08      	cmp	r3, #8
 800b0d2:	d10b      	bne.n	800b0ec <servo_setEnable+0x1c0>
 800b0d4:	79fa      	ldrb	r2, [r7, #7]
 800b0d6:	490f      	ldr	r1, [pc, #60]	; (800b114 <servo_setEnable+0x1e8>)
 800b0d8:	4613      	mov	r3, r2
 800b0da:	005b      	lsls	r3, r3, #1
 800b0dc:	4413      	add	r3, r2
 800b0de:	00db      	lsls	r3, r3, #3
 800b0e0:	440b      	add	r3, r1
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	681a      	ldr	r2, [r3, #0]
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	63d3      	str	r3, [r2, #60]	; 0x3c
	return;
 800b0ea:	e00d      	b.n	800b108 <servo_setEnable+0x1dc>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, 0);
 800b0ec:	79fa      	ldrb	r2, [r7, #7]
 800b0ee:	4909      	ldr	r1, [pc, #36]	; (800b114 <servo_setEnable+0x1e8>)
 800b0f0:	4613      	mov	r3, r2
 800b0f2:	005b      	lsls	r3, r3, #1
 800b0f4:	4413      	add	r3, r2
 800b0f6:	00db      	lsls	r3, r3, #3
 800b0f8:	440b      	add	r3, r1
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	681a      	ldr	r2, [r3, #0]
 800b0fe:	2300      	movs	r3, #0
 800b100:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 800b102:	e001      	b.n	800b108 <servo_setEnable+0x1dc>
 800b104:	e000      	b.n	800b108 <servo_setEnable+0x1dc>
		return;
 800b106:	bf00      	nop
}
 800b108:	370c      	adds	r7, #12
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr
 800b112:	bf00      	nop
 800b114:	20001080 	.word	0x20001080

0800b118 <servo_map>:
  * 	toLow: the lower bound of the value’s target range.
  * 	toHigh: the upper bound of the value’s target range.
  * @retval The mapped value.
  */
int32_t servo_map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
{
 800b118:	b480      	push	{r7}
 800b11a:	b085      	sub	sp, #20
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	60f8      	str	r0, [r7, #12]
 800b120:	60b9      	str	r1, [r7, #8]
 800b122:	607a      	str	r2, [r7, #4]
 800b124:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800b126:	68fa      	ldr	r2, [r7, #12]
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	1ad3      	subs	r3, r2, r3
 800b12c:	69b9      	ldr	r1, [r7, #24]
 800b12e:	683a      	ldr	r2, [r7, #0]
 800b130:	1a8a      	subs	r2, r1, r2
 800b132:	fb03 f202 	mul.w	r2, r3, r2
 800b136:	6879      	ldr	r1, [r7, #4]
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	1acb      	subs	r3, r1, r3
 800b13c:	fb92 f2f3 	sdiv	r2, r2, r3
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	4413      	add	r3, r2
}
 800b144:	4618      	mov	r0, r3
 800b146:	3714      	adds	r7, #20
 800b148:	46bd      	mov	sp, r7
 800b14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14e:	4770      	bx	lr

0800b150 <cfg_NodeServoVarProp>:

/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeServoVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 800b150:	b480      	push	{r7}
 800b152:	b087      	sub	sp, #28
 800b154:	af00      	add	r7, sp, #0
 800b156:	4603      	mov	r3, r0
 800b158:	60b9      	str	r1, [r7, #8]
 800b15a:	607a      	str	r2, [r7, #4]
 800b15c:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 800b15e:	89fb      	ldrh	r3, [r7, #14]
 800b160:	2b0d      	cmp	r3, #13
 800b162:	d849      	bhi.n	800b1f8 <cfg_NodeServoVarProp+0xa8>
 800b164:	a201      	add	r2, pc, #4	; (adr r2, 800b16c <cfg_NodeServoVarProp+0x1c>)
 800b166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b16a:	bf00      	nop
 800b16c:	0800b1a5 	.word	0x0800b1a5
 800b170:	0800b1ab 	.word	0x0800b1ab
 800b174:	0800b1b1 	.word	0x0800b1b1
 800b178:	0800b1b7 	.word	0x0800b1b7
 800b17c:	0800b1bd 	.word	0x0800b1bd
 800b180:	0800b1c3 	.word	0x0800b1c3
 800b184:	0800b1c9 	.word	0x0800b1c9
 800b188:	0800b1cf 	.word	0x0800b1cf
 800b18c:	0800b1d5 	.word	0x0800b1d5
 800b190:	0800b1db 	.word	0x0800b1db
 800b194:	0800b1e1 	.word	0x0800b1e1
 800b198:	0800b1e7 	.word	0x0800b1e7
 800b19c:	0800b1ed 	.word	0x0800b1ed
 800b1a0:	0800b1f3 	.word	0x0800b1f3
	{
		case SERVO_ROLL_ENA:				str = "ROLL enable"; break;
 800b1a4:	4b52      	ldr	r3, [pc, #328]	; (800b2f0 <cfg_NodeServoVarProp+0x1a0>)
 800b1a6:	617b      	str	r3, [r7, #20]
 800b1a8:	e028      	b.n	800b1fc <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_CUR_ANG:			str = "ROLL current angle"; break;
 800b1aa:	4b52      	ldr	r3, [pc, #328]	; (800b2f4 <cfg_NodeServoVarProp+0x1a4>)
 800b1ac:	617b      	str	r3, [r7, #20]
 800b1ae:	e025      	b.n	800b1fc <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_CUR_PWM:			str = "ROLL current PWM"; break;
 800b1b0:	4b51      	ldr	r3, [pc, #324]	; (800b2f8 <cfg_NodeServoVarProp+0x1a8>)
 800b1b2:	617b      	str	r3, [r7, #20]
 800b1b4:	e022      	b.n	800b1fc <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_CUR_PERC:			str = "ROLL current perc"; break;
 800b1b6:	4b51      	ldr	r3, [pc, #324]	; (800b2fc <cfg_NodeServoVarProp+0x1ac>)
 800b1b8:	617b      	str	r3, [r7, #20]
 800b1ba:	e01f      	b.n	800b1fc <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_MIN_ANG:			str = "ROLL min angle"; break;
 800b1bc:	4b50      	ldr	r3, [pc, #320]	; (800b300 <cfg_NodeServoVarProp+0x1b0>)
 800b1be:	617b      	str	r3, [r7, #20]
 800b1c0:	e01c      	b.n	800b1fc <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_CENT_ANG:			str = "ROLL center angle"; break;
 800b1c2:	4b50      	ldr	r3, [pc, #320]	; (800b304 <cfg_NodeServoVarProp+0x1b4>)
 800b1c4:	617b      	str	r3, [r7, #20]
 800b1c6:	e019      	b.n	800b1fc <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_MAX_ANG:			str = "ROLL max angle"; break;
 800b1c8:	4b4f      	ldr	r3, [pc, #316]	; (800b308 <cfg_NodeServoVarProp+0x1b8>)
 800b1ca:	617b      	str	r3, [r7, #20]
 800b1cc:	e016      	b.n	800b1fc <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_ENA:				str = "PITCH enable"; break;
 800b1ce:	4b4f      	ldr	r3, [pc, #316]	; (800b30c <cfg_NodeServoVarProp+0x1bc>)
 800b1d0:	617b      	str	r3, [r7, #20]
 800b1d2:	e013      	b.n	800b1fc <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_CUR_ANG:			str = "PITCH current angle"; break;
 800b1d4:	4b4e      	ldr	r3, [pc, #312]	; (800b310 <cfg_NodeServoVarProp+0x1c0>)
 800b1d6:	617b      	str	r3, [r7, #20]
 800b1d8:	e010      	b.n	800b1fc <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_CUR_PWM:			str = "PITCH current PWM"; break;
 800b1da:	4b4e      	ldr	r3, [pc, #312]	; (800b314 <cfg_NodeServoVarProp+0x1c4>)
 800b1dc:	617b      	str	r3, [r7, #20]
 800b1de:	e00d      	b.n	800b1fc <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_CUR_PERC:			str = "PITCH current perc"; break;
 800b1e0:	4b4d      	ldr	r3, [pc, #308]	; (800b318 <cfg_NodeServoVarProp+0x1c8>)
 800b1e2:	617b      	str	r3, [r7, #20]
 800b1e4:	e00a      	b.n	800b1fc <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_MIN_ANG:			str = "PITCH min angle"; break;
 800b1e6:	4b4d      	ldr	r3, [pc, #308]	; (800b31c <cfg_NodeServoVarProp+0x1cc>)
 800b1e8:	617b      	str	r3, [r7, #20]
 800b1ea:	e007      	b.n	800b1fc <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_CENT_ANG:			str = "PITCH center angle"; break;
 800b1ec:	4b4c      	ldr	r3, [pc, #304]	; (800b320 <cfg_NodeServoVarProp+0x1d0>)
 800b1ee:	617b      	str	r3, [r7, #20]
 800b1f0:	e004      	b.n	800b1fc <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_MAX_ANG:			str = "PITCH max angle"; break;
 800b1f2:	4b4c      	ldr	r3, [pc, #304]	; (800b324 <cfg_NodeServoVarProp+0x1d4>)
 800b1f4:	617b      	str	r3, [r7, #20]
 800b1f6:	e001      	b.n	800b1fc <cfg_NodeServoVarProp+0xac>
		default: return CFG_ERROR_VARID;
 800b1f8:	2302      	movs	r3, #2
 800b1fa:	e072      	b.n	800b2e2 <cfg_NodeServoVarProp+0x192>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d00f      	beq.n	800b222 <cfg_NodeServoVarProp+0xd2>
 800b202:	e007      	b.n	800b214 <cfg_NodeServoVarProp+0xc4>
 800b204:	697a      	ldr	r2, [r7, #20]
 800b206:	1c53      	adds	r3, r2, #1
 800b208:	617b      	str	r3, [r7, #20]
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	1c59      	adds	r1, r3, #1
 800b20e:	60b9      	str	r1, [r7, #8]
 800b210:	7812      	ldrb	r2, [r2, #0]
 800b212:	701a      	strb	r2, [r3, #0]
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	781b      	ldrb	r3, [r3, #0]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d1f3      	bne.n	800b204 <cfg_NodeServoVarProp+0xb4>
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	2200      	movs	r2, #0
 800b220:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d05b      	beq.n	800b2e0 <cfg_NodeServoVarProp+0x190>
 800b228:	89fb      	ldrh	r3, [r7, #14]
 800b22a:	2b0d      	cmp	r3, #13
 800b22c:	d856      	bhi.n	800b2dc <cfg_NodeServoVarProp+0x18c>
 800b22e:	a201      	add	r2, pc, #4	; (adr r2, 800b234 <cfg_NodeServoVarProp+0xe4>)
 800b230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b234:	0800b26d 	.word	0x0800b26d
 800b238:	0800b275 	.word	0x0800b275
 800b23c:	0800b27d 	.word	0x0800b27d
 800b240:	0800b285 	.word	0x0800b285
 800b244:	0800b28d 	.word	0x0800b28d
 800b248:	0800b295 	.word	0x0800b295
 800b24c:	0800b29d 	.word	0x0800b29d
 800b250:	0800b2a5 	.word	0x0800b2a5
 800b254:	0800b2ad 	.word	0x0800b2ad
 800b258:	0800b2b5 	.word	0x0800b2b5
 800b25c:	0800b2bd 	.word	0x0800b2bd
 800b260:	0800b2c5 	.word	0x0800b2c5
 800b264:	0800b2cd 	.word	0x0800b2cd
 800b268:	0800b2d5 	.word	0x0800b2d5
	{
		case SERVO_ROLL_ENA:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_CONST; break;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2223      	movs	r2, #35	; 0x23
 800b270:	801a      	strh	r2, [r3, #0]
 800b272:	e035      	b.n	800b2e0 <cfg_NodeServoVarProp+0x190>
		case SERVO_ROLL_CUR_ANG:			*prop = CFG_VAR_TYPE_UINT; break;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2202      	movs	r2, #2
 800b278:	801a      	strh	r2, [r3, #0]
 800b27a:	e031      	b.n	800b2e0 <cfg_NodeServoVarProp+0x190>
		case SERVO_ROLL_CUR_PWM:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2212      	movs	r2, #18
 800b280:	801a      	strh	r2, [r3, #0]
 800b282:	e02d      	b.n	800b2e0 <cfg_NodeServoVarProp+0x190>
		case SERVO_ROLL_CUR_PERC:			*prop = CFG_VAR_TYPE_INT; break;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2201      	movs	r2, #1
 800b288:	801a      	strh	r2, [r3, #0]
 800b28a:	e029      	b.n	800b2e0 <cfg_NodeServoVarProp+0x190>
		case SERVO_ROLL_MIN_ANG:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2222      	movs	r2, #34	; 0x22
 800b290:	801a      	strh	r2, [r3, #0]
 800b292:	e025      	b.n	800b2e0 <cfg_NodeServoVarProp+0x190>
		case SERVO_ROLL_CENT_ANG:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2222      	movs	r2, #34	; 0x22
 800b298:	801a      	strh	r2, [r3, #0]
 800b29a:	e021      	b.n	800b2e0 <cfg_NodeServoVarProp+0x190>
		case SERVO_ROLL_MAX_ANG:	  		*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2222      	movs	r2, #34	; 0x22
 800b2a0:	801a      	strh	r2, [r3, #0]
 800b2a2:	e01d      	b.n	800b2e0 <cfg_NodeServoVarProp+0x190>
		case SERVO_PITCH_ENA:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_CONST; break;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2223      	movs	r2, #35	; 0x23
 800b2a8:	801a      	strh	r2, [r3, #0]
 800b2aa:	e019      	b.n	800b2e0 <cfg_NodeServoVarProp+0x190>
		case SERVO_PITCH_CUR_ANG:			*prop = CFG_VAR_TYPE_UINT; break;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2202      	movs	r2, #2
 800b2b0:	801a      	strh	r2, [r3, #0]
 800b2b2:	e015      	b.n	800b2e0 <cfg_NodeServoVarProp+0x190>
		case SERVO_PITCH_CUR_PWM:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2212      	movs	r2, #18
 800b2b8:	801a      	strh	r2, [r3, #0]
 800b2ba:	e011      	b.n	800b2e0 <cfg_NodeServoVarProp+0x190>
		case SERVO_PITCH_CUR_PERC:			*prop = CFG_VAR_TYPE_INT; break;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2201      	movs	r2, #1
 800b2c0:	801a      	strh	r2, [r3, #0]
 800b2c2:	e00d      	b.n	800b2e0 <cfg_NodeServoVarProp+0x190>
		case SERVO_PITCH_MIN_ANG:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2222      	movs	r2, #34	; 0x22
 800b2c8:	801a      	strh	r2, [r3, #0]
 800b2ca:	e009      	b.n	800b2e0 <cfg_NodeServoVarProp+0x190>
		case SERVO_PITCH_CENT_ANG:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2222      	movs	r2, #34	; 0x22
 800b2d0:	801a      	strh	r2, [r3, #0]
 800b2d2:	e005      	b.n	800b2e0 <cfg_NodeServoVarProp+0x190>
		case SERVO_PITCH_MAX_ANG:	  		*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2222      	movs	r2, #34	; 0x22
 800b2d8:	801a      	strh	r2, [r3, #0]
 800b2da:	e001      	b.n	800b2e0 <cfg_NodeServoVarProp+0x190>
		default: return CFG_ERROR_VARID;
 800b2dc:	2302      	movs	r3, #2
 800b2de:	e000      	b.n	800b2e2 <cfg_NodeServoVarProp+0x192>
	}
	return CFG_ERROR_NONE;
 800b2e0:	2300      	movs	r3, #0
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	371c      	adds	r7, #28
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ec:	4770      	bx	lr
 800b2ee:	bf00      	nop
 800b2f0:	08016aec 	.word	0x08016aec
 800b2f4:	08016af8 	.word	0x08016af8
 800b2f8:	08016b0c 	.word	0x08016b0c
 800b2fc:	08016b20 	.word	0x08016b20
 800b300:	08016b34 	.word	0x08016b34
 800b304:	08016b44 	.word	0x08016b44
 800b308:	08016b58 	.word	0x08016b58
 800b30c:	08016b68 	.word	0x08016b68
 800b310:	08016b78 	.word	0x08016b78
 800b314:	08016b8c 	.word	0x08016b8c
 800b318:	08016ba0 	.word	0x08016ba0
 800b31c:	08016bb4 	.word	0x08016bb4
 800b320:	08016bc4 	.word	0x08016bc4
 800b324:	08016bd8 	.word	0x08016bd8

0800b328 <cfg_NodeServoVarGet>:

uint16_t cfg_NodeServoVarGet(uint16_t varid, void *value)
{
 800b328:	b480      	push	{r7}
 800b32a:	b083      	sub	sp, #12
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	4603      	mov	r3, r0
 800b330:	6039      	str	r1, [r7, #0]
 800b332:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	2b00      	cmp	r3, #0
 800b338:	f000 808a 	beq.w	800b450 <cfg_NodeServoVarGet+0x128>
 800b33c:	88fb      	ldrh	r3, [r7, #6]
 800b33e:	2b0d      	cmp	r3, #13
 800b340:	f200 8084 	bhi.w	800b44c <cfg_NodeServoVarGet+0x124>
 800b344:	a201      	add	r2, pc, #4	; (adr r2, 800b34c <cfg_NodeServoVarGet+0x24>)
 800b346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b34a:	bf00      	nop
 800b34c:	0800b385 	.word	0x0800b385
 800b350:	0800b393 	.word	0x0800b393
 800b354:	0800b3a1 	.word	0x0800b3a1
 800b358:	0800b3af 	.word	0x0800b3af
 800b35c:	0800b3bd 	.word	0x0800b3bd
 800b360:	0800b3cb 	.word	0x0800b3cb
 800b364:	0800b3d9 	.word	0x0800b3d9
 800b368:	0800b3e7 	.word	0x0800b3e7
 800b36c:	0800b3f7 	.word	0x0800b3f7
 800b370:	0800b405 	.word	0x0800b405
 800b374:	0800b413 	.word	0x0800b413
 800b378:	0800b423 	.word	0x0800b423
 800b37c:	0800b431 	.word	0x0800b431
 800b380:	0800b43f 	.word	0x0800b43f
	{
		case SERVO_ROLL_ENA: 				*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].enable; break;
 800b384:	4b36      	ldr	r3, [pc, #216]	; (800b460 <cfg_NodeServoVarGet+0x138>)
 800b386:	7a1b      	ldrb	r3, [r3, #8]
 800b388:	b2db      	uxtb	r3, r3
 800b38a:	461a      	mov	r2, r3
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	601a      	str	r2, [r3, #0]
 800b390:	e05e      	b.n	800b450 <cfg_NodeServoVarGet+0x128>
		case SERVO_ROLL_CUR_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].cur_ang; break;
 800b392:	4b33      	ldr	r3, [pc, #204]	; (800b460 <cfg_NodeServoVarGet+0x138>)
 800b394:	899b      	ldrh	r3, [r3, #12]
 800b396:	b29b      	uxth	r3, r3
 800b398:	461a      	mov	r2, r3
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	601a      	str	r2, [r3, #0]
 800b39e:	e057      	b.n	800b450 <cfg_NodeServoVarGet+0x128>
		case SERVO_ROLL_CUR_PWM: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].cur_pwm; break;
 800b3a0:	4b2f      	ldr	r3, [pc, #188]	; (800b460 <cfg_NodeServoVarGet+0x138>)
 800b3a2:	895b      	ldrh	r3, [r3, #10]
 800b3a4:	b29b      	uxth	r3, r3
 800b3a6:	461a      	mov	r2, r3
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	601a      	str	r2, [r3, #0]
 800b3ac:	e050      	b.n	800b450 <cfg_NodeServoVarGet+0x128>
		case SERVO_ROLL_CUR_PERC: 			*(uint32_t*)value = (int32_t)servo_info.servos[SERVO_ROLL].cur_perc; break;
 800b3ae:	4b2c      	ldr	r3, [pc, #176]	; (800b460 <cfg_NodeServoVarGet+0x138>)
 800b3b0:	7b9b      	ldrb	r3, [r3, #14]
 800b3b2:	b25b      	sxtb	r3, r3
 800b3b4:	461a      	mov	r2, r3
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	601a      	str	r2, [r3, #0]
 800b3ba:	e049      	b.n	800b450 <cfg_NodeServoVarGet+0x128>
		case SERVO_ROLL_MIN_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].min_ang; break;
 800b3bc:	4b28      	ldr	r3, [pc, #160]	; (800b460 <cfg_NodeServoVarGet+0x138>)
 800b3be:	8a1b      	ldrh	r3, [r3, #16]
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	461a      	mov	r2, r3
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	601a      	str	r2, [r3, #0]
 800b3c8:	e042      	b.n	800b450 <cfg_NodeServoVarGet+0x128>
		case SERVO_ROLL_CENT_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].center_ang; break;
 800b3ca:	4b25      	ldr	r3, [pc, #148]	; (800b460 <cfg_NodeServoVarGet+0x138>)
 800b3cc:	8a5b      	ldrh	r3, [r3, #18]
 800b3ce:	b29b      	uxth	r3, r3
 800b3d0:	461a      	mov	r2, r3
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	601a      	str	r2, [r3, #0]
 800b3d6:	e03b      	b.n	800b450 <cfg_NodeServoVarGet+0x128>
		case SERVO_ROLL_MAX_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].max_ang; break;
 800b3d8:	4b21      	ldr	r3, [pc, #132]	; (800b460 <cfg_NodeServoVarGet+0x138>)
 800b3da:	8a9b      	ldrh	r3, [r3, #20]
 800b3dc:	b29b      	uxth	r3, r3
 800b3de:	461a      	mov	r2, r3
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	601a      	str	r2, [r3, #0]
 800b3e4:	e034      	b.n	800b450 <cfg_NodeServoVarGet+0x128>
		case SERVO_PITCH_ENA: 				*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].enable; break;
 800b3e6:	4b1e      	ldr	r3, [pc, #120]	; (800b460 <cfg_NodeServoVarGet+0x138>)
 800b3e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b3ec:	b2db      	uxtb	r3, r3
 800b3ee:	461a      	mov	r2, r3
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	601a      	str	r2, [r3, #0]
 800b3f4:	e02c      	b.n	800b450 <cfg_NodeServoVarGet+0x128>
		case SERVO_PITCH_CUR_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].cur_ang; break;
 800b3f6:	4b1a      	ldr	r3, [pc, #104]	; (800b460 <cfg_NodeServoVarGet+0x138>)
 800b3f8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b3fa:	b29b      	uxth	r3, r3
 800b3fc:	461a      	mov	r2, r3
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	601a      	str	r2, [r3, #0]
 800b402:	e025      	b.n	800b450 <cfg_NodeServoVarGet+0x128>
		case SERVO_PITCH_CUR_PWM: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].cur_pwm; break;
 800b404:	4b16      	ldr	r3, [pc, #88]	; (800b460 <cfg_NodeServoVarGet+0x138>)
 800b406:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800b408:	b29b      	uxth	r3, r3
 800b40a:	461a      	mov	r2, r3
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	601a      	str	r2, [r3, #0]
 800b410:	e01e      	b.n	800b450 <cfg_NodeServoVarGet+0x128>
		case SERVO_PITCH_CUR_PERC: 			*(uint32_t*)value = (int32_t)servo_info.servos[SERVO_PITCH].cur_perc; break;
 800b412:	4b13      	ldr	r3, [pc, #76]	; (800b460 <cfg_NodeServoVarGet+0x138>)
 800b414:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800b418:	b25b      	sxtb	r3, r3
 800b41a:	461a      	mov	r2, r3
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	601a      	str	r2, [r3, #0]
 800b420:	e016      	b.n	800b450 <cfg_NodeServoVarGet+0x128>
		case SERVO_PITCH_MIN_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].min_ang; break;
 800b422:	4b0f      	ldr	r3, [pc, #60]	; (800b460 <cfg_NodeServoVarGet+0x138>)
 800b424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b426:	b29b      	uxth	r3, r3
 800b428:	461a      	mov	r2, r3
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	601a      	str	r2, [r3, #0]
 800b42e:	e00f      	b.n	800b450 <cfg_NodeServoVarGet+0x128>
		case SERVO_PITCH_CENT_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].center_ang; break;
 800b430:	4b0b      	ldr	r3, [pc, #44]	; (800b460 <cfg_NodeServoVarGet+0x138>)
 800b432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b434:	b29b      	uxth	r3, r3
 800b436:	461a      	mov	r2, r3
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	601a      	str	r2, [r3, #0]
 800b43c:	e008      	b.n	800b450 <cfg_NodeServoVarGet+0x128>
		case SERVO_PITCH_MAX_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].max_ang; break;
 800b43e:	4b08      	ldr	r3, [pc, #32]	; (800b460 <cfg_NodeServoVarGet+0x138>)
 800b440:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b442:	b29b      	uxth	r3, r3
 800b444:	461a      	mov	r2, r3
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	601a      	str	r2, [r3, #0]
 800b44a:	e001      	b.n	800b450 <cfg_NodeServoVarGet+0x128>
		default: return CFG_ERROR_VARID;
 800b44c:	2302      	movs	r3, #2
 800b44e:	e000      	b.n	800b452 <cfg_NodeServoVarGet+0x12a>
	}
	return CFG_ERROR_NONE;
 800b450:	2300      	movs	r3, #0
}
 800b452:	4618      	mov	r0, r3
 800b454:	370c      	adds	r7, #12
 800b456:	46bd      	mov	sp, r7
 800b458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45c:	4770      	bx	lr
 800b45e:	bf00      	nop
 800b460:	20001080 	.word	0x20001080

0800b464 <cfg_NodeServoVarSet>:

uint16_t cfg_NodeServoVarSet(uint16_t varid, void *value)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b082      	sub	sp, #8
 800b468:	af00      	add	r7, sp, #0
 800b46a:	4603      	mov	r3, r0
 800b46c:	6039      	str	r1, [r7, #0]
 800b46e:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d079      	beq.n	800b56a <cfg_NodeServoVarSet+0x106>
 800b476:	88fb      	ldrh	r3, [r7, #6]
 800b478:	2b0d      	cmp	r3, #13
 800b47a:	d873      	bhi.n	800b564 <cfg_NodeServoVarSet+0x100>
 800b47c:	a201      	add	r2, pc, #4	; (adr r2, 800b484 <cfg_NodeServoVarSet+0x20>)
 800b47e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b482:	bf00      	nop
 800b484:	0800b4bd 	.word	0x0800b4bd
 800b488:	0800b4cd 	.word	0x0800b4cd
 800b48c:	0800b569 	.word	0x0800b569
 800b490:	0800b4dd 	.word	0x0800b4dd
 800b494:	0800b4ed 	.word	0x0800b4ed
 800b498:	0800b4f9 	.word	0x0800b4f9
 800b49c:	0800b505 	.word	0x0800b505
 800b4a0:	0800b511 	.word	0x0800b511
 800b4a4:	0800b521 	.word	0x0800b521
 800b4a8:	0800b569 	.word	0x0800b569
 800b4ac:	0800b531 	.word	0x0800b531
 800b4b0:	0800b541 	.word	0x0800b541
 800b4b4:	0800b54d 	.word	0x0800b54d
 800b4b8:	0800b559 	.word	0x0800b559
	{
		case SERVO_ROLL_ENA:				servo_setEnable(SERVO_ROLL, (uint8_t)*(uint32_t*)value); break;
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	b2db      	uxtb	r3, r3
 800b4c2:	4619      	mov	r1, r3
 800b4c4:	2000      	movs	r0, #0
 800b4c6:	f7ff fd31 	bl	800af2c <servo_setEnable>
 800b4ca:	e04e      	b.n	800b56a <cfg_NodeServoVarSet+0x106>
		case SERVO_ROLL_CUR_ANG:			servo_setAng(SERVO_ROLL, (uint16_t)*(uint32_t*)value); break;
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	b29b      	uxth	r3, r3
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	2000      	movs	r0, #0
 800b4d6:	f7ff fc0d 	bl	800acf4 <servo_setAng>
 800b4da:	e046      	b.n	800b56a <cfg_NodeServoVarSet+0x106>
		case SERVO_ROLL_CUR_PWM:			break;
		case SERVO_ROLL_CUR_PERC:			servo_setPercnet(SERVO_ROLL, (int8_t)*(uint32_t*)value); break;
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	b25b      	sxtb	r3, r3
 800b4e2:	4619      	mov	r1, r3
 800b4e4:	2000      	movs	r0, #0
 800b4e6:	f7ff fcb9 	bl	800ae5c <servo_setPercnet>
 800b4ea:	e03e      	b.n	800b56a <cfg_NodeServoVarSet+0x106>
		case SERVO_ROLL_MIN_ANG:			servo_info.servos[SERVO_ROLL].min_ang = *(uint32_t*)value; break;
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	b29a      	uxth	r2, r3
 800b4f2:	4b20      	ldr	r3, [pc, #128]	; (800b574 <cfg_NodeServoVarSet+0x110>)
 800b4f4:	821a      	strh	r2, [r3, #16]
 800b4f6:	e038      	b.n	800b56a <cfg_NodeServoVarSet+0x106>
		case SERVO_ROLL_CENT_ANG:			servo_info.servos[SERVO_ROLL].center_ang = *(uint32_t*)value; break;
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	b29a      	uxth	r2, r3
 800b4fe:	4b1d      	ldr	r3, [pc, #116]	; (800b574 <cfg_NodeServoVarSet+0x110>)
 800b500:	825a      	strh	r2, [r3, #18]
 800b502:	e032      	b.n	800b56a <cfg_NodeServoVarSet+0x106>
		case SERVO_ROLL_MAX_ANG:			servo_info.servos[SERVO_ROLL].max_ang = *(uint32_t*)value; break;
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	b29a      	uxth	r2, r3
 800b50a:	4b1a      	ldr	r3, [pc, #104]	; (800b574 <cfg_NodeServoVarSet+0x110>)
 800b50c:	829a      	strh	r2, [r3, #20]
 800b50e:	e02c      	b.n	800b56a <cfg_NodeServoVarSet+0x106>
		case SERVO_PITCH_ENA:				servo_setEnable(SERVO_PITCH, (uint8_t)*(uint32_t*)value); break;
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	b2db      	uxtb	r3, r3
 800b516:	4619      	mov	r1, r3
 800b518:	2001      	movs	r0, #1
 800b51a:	f7ff fd07 	bl	800af2c <servo_setEnable>
 800b51e:	e024      	b.n	800b56a <cfg_NodeServoVarSet+0x106>
		case SERVO_PITCH_CUR_ANG:			servo_setAng(SERVO_PITCH, (uint16_t)*(uint32_t*)value); break;
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	b29b      	uxth	r3, r3
 800b526:	4619      	mov	r1, r3
 800b528:	2001      	movs	r0, #1
 800b52a:	f7ff fbe3 	bl	800acf4 <servo_setAng>
 800b52e:	e01c      	b.n	800b56a <cfg_NodeServoVarSet+0x106>
		case SERVO_PITCH_CUR_PWM:			break;
		case SERVO_PITCH_CUR_PERC:			servo_setPercnet(SERVO_PITCH, (int8_t)*(uint32_t*)value); break;
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	b25b      	sxtb	r3, r3
 800b536:	4619      	mov	r1, r3
 800b538:	2001      	movs	r0, #1
 800b53a:	f7ff fc8f 	bl	800ae5c <servo_setPercnet>
 800b53e:	e014      	b.n	800b56a <cfg_NodeServoVarSet+0x106>
		case SERVO_PITCH_MIN_ANG:			servo_info.servos[SERVO_PITCH].min_ang = *(uint32_t*)value; break;
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	b29a      	uxth	r2, r3
 800b546:	4b0b      	ldr	r3, [pc, #44]	; (800b574 <cfg_NodeServoVarSet+0x110>)
 800b548:	851a      	strh	r2, [r3, #40]	; 0x28
 800b54a:	e00e      	b.n	800b56a <cfg_NodeServoVarSet+0x106>
		case SERVO_PITCH_CENT_ANG:			servo_info.servos[SERVO_PITCH].center_ang = *(uint32_t*)value; break;
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	b29a      	uxth	r2, r3
 800b552:	4b08      	ldr	r3, [pc, #32]	; (800b574 <cfg_NodeServoVarSet+0x110>)
 800b554:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b556:	e008      	b.n	800b56a <cfg_NodeServoVarSet+0x106>
		case SERVO_PITCH_MAX_ANG:			servo_info.servos[SERVO_PITCH].max_ang = *(uint32_t*)value; break;
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	b29a      	uxth	r2, r3
 800b55e:	4b05      	ldr	r3, [pc, #20]	; (800b574 <cfg_NodeServoVarSet+0x110>)
 800b560:	859a      	strh	r2, [r3, #44]	; 0x2c
 800b562:	e002      	b.n	800b56a <cfg_NodeServoVarSet+0x106>
		default: return CFG_ERROR_VARID;
 800b564:	2302      	movs	r3, #2
 800b566:	e001      	b.n	800b56c <cfg_NodeServoVarSet+0x108>
		case SERVO_ROLL_CUR_PWM:			break;
 800b568:	bf00      	nop
	}
	return CFG_ERROR_NONE;
 800b56a:	2300      	movs	r3, #0
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3708      	adds	r7, #8
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}
 800b574:	20001080 	.word	0x20001080

0800b578 <system_Timer>:
  * @brief  called from SysTick_Handler to update local class time
  * @param  res - time pass in mSec
  * @retval None
  */
void system_Timer(uint32_t res)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b084      	sub	sp, #16
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
	system_time_counter += res;
 800b580:	4b20      	ldr	r3, [pc, #128]	; (800b604 <system_Timer+0x8c>)
 800b582:	681a      	ldr	r2, [r3, #0]
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	4413      	add	r3, r2
 800b588:	4a1e      	ldr	r2, [pc, #120]	; (800b604 <system_Timer+0x8c>)
 800b58a:	6013      	str	r3, [r2, #0]
	leds_Timer(res);
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f7f8 fcfd 	bl	8003f8c <leds_Timer>
	cfg_Timer(res);
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f7f7 fa06 	bl	80029a4 <cfg_Timer>
	modem_Timer(res);
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	f7fd fc2b 	bl	8008df4 <modem_Timer>
	servo_Timer(res);
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f7ff fae2 	bl	800ab68 <servo_Timer>
	motor_Timer(res);
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f7fd ff17 	bl	80093d8 <motor_Timer>
	rc_Timer(res);
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f7fe fad8 	bl	8009b60 <rc_Timer>
	battery_Timer(res);
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f7f6 fdd9 	bl	8002168 <battery_Timer>
	autopilot_Timer(res);
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f7f5 fc50 	bl	8000e5c <autopilot_Timer>
	sens_Timer(res);
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f7fe fe39 	bl	800a234 <sens_Timer>

	for( uint8_t i = 0; i < sys_tmr_num; i++ )
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	73fb      	strb	r3, [r7, #15]
 800b5c6:	e014      	b.n	800b5f2 <system_Timer+0x7a>
	{
		if( system_info.timer[i] != 0 ){
 800b5c8:	7bfb      	ldrb	r3, [r7, #15]
 800b5ca:	4a0f      	ldr	r2, [pc, #60]	; (800b608 <system_Timer+0x90>)
 800b5cc:	3312      	adds	r3, #18
 800b5ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d00a      	beq.n	800b5ec <system_Timer+0x74>
			system_info.timer[i]--;
 800b5d6:	7bfb      	ldrb	r3, [r7, #15]
 800b5d8:	490b      	ldr	r1, [pc, #44]	; (800b608 <system_Timer+0x90>)
 800b5da:	f103 0212 	add.w	r2, r3, #18
 800b5de:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b5e2:	3a01      	subs	r2, #1
 800b5e4:	4908      	ldr	r1, [pc, #32]	; (800b608 <system_Timer+0x90>)
 800b5e6:	3312      	adds	r3, #18
 800b5e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for( uint8_t i = 0; i < sys_tmr_num; i++ )
 800b5ec:	7bfb      	ldrb	r3, [r7, #15]
 800b5ee:	3301      	adds	r3, #1
 800b5f0:	73fb      	strb	r3, [r7, #15]
 800b5f2:	7bfb      	ldrb	r3, [r7, #15]
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	d9e7      	bls.n	800b5c8 <system_Timer+0x50>
		}
	}
}
 800b5f8:	bf00      	nop
 800b5fa:	bf00      	nop
 800b5fc:	3710      	adds	r7, #16
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}
 800b602:	bf00      	nop
 800b604:	20001110 	.word	0x20001110
 800b608:	200010c0 	.word	0x200010c0

0800b60c <system_Init>:
  * @brief  Full system init after power up
  * @param  None
  * @retval None
  */
void system_Init()
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	af00      	add	r7, sp, #0
	system_info.reset_req = 0;
 800b610:	4b12      	ldr	r3, [pc, #72]	; (800b65c <system_Init+0x50>)
 800b612:	2200      	movs	r2, #0
 800b614:	705a      	strb	r2, [r3, #1]
	leds_InitTask();
 800b616:	f7f8 fcf5 	bl	8004004 <leds_InitTask>
	modem_InitTask();
 800b61a:	f7fd fc0f 	bl	8008e3c <modem_InitTask>
	servo_InitTask();
 800b61e:	f7ff facb 	bl	800abb8 <servo_InitTask>
	motor_InitTask();
 800b622:	f7fd ff03 	bl	800942c <motor_InitTask>
	rc_InitTask();
 800b626:	f7fe fabf 	bl	8009ba8 <rc_InitTask>
	sens_InitTask();
 800b62a:	f7fe fe27 	bl	800a27c <sens_InitTask>
	battery_InitTask(10000);
 800b62e:	f242 7010 	movw	r0, #10000	; 0x2710
 800b632:	f7f6 fdb7 	bl	80021a4 <battery_InitTask>
	autopilot_InitTask();
 800b636:	f7f5 fc35 	bl	8000ea4 <autopilot_InitTask>
	cfg_InitTask();
 800b63a:	f7f7 f9e9 	bl	8002a10 <cfg_InitTask>
	system_info.usb_rx_flag = 0;
 800b63e:	4b07      	ldr	r3, [pc, #28]	; (800b65c <system_Init+0x50>)
 800b640:	2200      	movs	r2, #0
 800b642:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	HAL_UART_Receive_IT(&HAL_MODEM_UART, (uint8_t*)&cfg_uart_rx_data, 1);
 800b646:	2201      	movs	r2, #1
 800b648:	4905      	ldr	r1, [pc, #20]	; (800b660 <system_Init+0x54>)
 800b64a:	4806      	ldr	r0, [pc, #24]	; (800b664 <system_Init+0x58>)
 800b64c:	f005 fab4 	bl	8010bb8 <HAL_UART_Receive_IT>
	HAL_ADC_Start_IT(&hadc1);
 800b650:	4805      	ldr	r0, [pc, #20]	; (800b668 <system_Init+0x5c>)
 800b652:	f000 fa05 	bl	800ba60 <HAL_ADC_Start_IT>
	//leds_setBlink(LED_SIM_BLUE, 200, 1000, 0, 0, 1);
}
 800b656:	bf00      	nop
 800b658:	bd80      	pop	{r7, pc}
 800b65a:	bf00      	nop
 800b65c:	200010c0 	.word	0x200010c0
 800b660:	20001114 	.word	0x20001114
 800b664:	20000bc0 	.word	0x20000bc0
 800b668:	20000adc 	.word	0x20000adc

0800b66c <system_Task>:
  * @brief  Full system flow, runs in while loop from main.c file
  * @param  None
  * @retval None
  */
void system_Task(void)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b082      	sub	sp, #8
 800b670:	af00      	add	r7, sp, #0
	uint32_t i;

	leds_Task();
 800b672:	f7f9 f847 	bl	8004704 <leds_Task>
	cfg_Task();
 800b676:	f7f7 fa31 	bl	8002adc <cfg_Task>
	modem_Task();
 800b67a:	f7fd fc01 	bl	8008e80 <modem_Task>
	motor_Task();
 800b67e:	f7fd ff21 	bl	80094c4 <motor_Task>
	servo_Task();
 800b682:	f7ff fb1b 	bl	800acbc <servo_Task>
	rc_Task();
 800b686:	f7fe fab7 	bl	8009bf8 <rc_Task>
	sens_Task();
 800b68a:	f7fe fe09 	bl	800a2a0 <sens_Task>
	battery_Task();
 800b68e:	f7f6 fda5 	bl	80021dc <battery_Task>
	autopilot_Task();
 800b692:	f7f5 fca5 	bl	8000fe0 <autopilot_Task>

	//ADC
	if( (system_info.adc_cplt == 1) && (system_info.timer[sys_tmr_adc] == 0) )
 800b696:	4b30      	ldr	r3, [pc, #192]	; (800b758 <system_Task+0xec>)
 800b698:	789b      	ldrb	r3, [r3, #2]
 800b69a:	b2db      	uxtb	r3, r3
 800b69c:	2b01      	cmp	r3, #1
 800b69e:	d109      	bne.n	800b6b4 <system_Task+0x48>
 800b6a0:	4b2d      	ldr	r3, [pc, #180]	; (800b758 <system_Task+0xec>)
 800b6a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d105      	bne.n	800b6b4 <system_Task+0x48>
	{
		system_info.adc_cplt = 0;
 800b6a8:	4b2b      	ldr	r3, [pc, #172]	; (800b758 <system_Task+0xec>)
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	709a      	strb	r2, [r3, #2]
		 HAL_ADC_Start_IT(&hadc1);
 800b6ae:	482b      	ldr	r0, [pc, #172]	; (800b75c <system_Task+0xf0>)
 800b6b0:	f000 f9d6 	bl	800ba60 <HAL_ADC_Start_IT>
	}

	//UART restart
	if( _system_restart_uart == 1 )
 800b6b4:	4b2a      	ldr	r3, [pc, #168]	; (800b760 <system_Task+0xf4>)
 800b6b6:	781b      	ldrb	r3, [r3, #0]
 800b6b8:	b2db      	uxtb	r3, r3
 800b6ba:	2b01      	cmp	r3, #1
 800b6bc:	d10f      	bne.n	800b6de <system_Task+0x72>
	{
		_system_restart_uart = 0;
 800b6be:	4b28      	ldr	r3, [pc, #160]	; (800b760 <system_Task+0xf4>)
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	701a      	strb	r2, [r3, #0]
		MX_UARTReInit();
 800b6c4:	f7fd f8ae 	bl	8008824 <MX_UARTReInit>
		if( HAL_UART_Receive_IT(&HAL_MODEM_UART, (uint8_t*)&cfg_uart_rx_data, 1) != HAL_OK ){
 800b6c8:	2201      	movs	r2, #1
 800b6ca:	4926      	ldr	r1, [pc, #152]	; (800b764 <system_Task+0xf8>)
 800b6cc:	4826      	ldr	r0, [pc, #152]	; (800b768 <system_Task+0xfc>)
 800b6ce:	f005 fa73 	bl	8010bb8 <HAL_UART_Receive_IT>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d002      	beq.n	800b6de <system_Task+0x72>
			_system_restart_uart = 1;
 800b6d8:	4b21      	ldr	r3, [pc, #132]	; (800b760 <system_Task+0xf4>)
 800b6da:	2201      	movs	r2, #1
 800b6dc:	701a      	strb	r2, [r3, #0]
			//system_ErrorHandler();
		}
	}

	//USB Rx
	if( system_info.usb_rx_flag == 1 )
 800b6de:	4b1e      	ldr	r3, [pc, #120]	; (800b758 <system_Task+0xec>)
 800b6e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b6e4:	b2db      	uxtb	r3, r3
 800b6e6:	2b01      	cmp	r3, #1
 800b6e8:	d118      	bne.n	800b71c <system_Task+0xb0>
	{
		for( i = 0; i < system_info.usb_rx_len; i++ ){
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	607b      	str	r3, [r7, #4]
 800b6ee:	e00c      	b.n	800b70a <system_Task+0x9e>
			cfg_RcvData(CFG_IFACE_CH1_USB, system_info.usb_rx_buf[i]);
 800b6f0:	4a19      	ldr	r2, [pc, #100]	; (800b758 <system_Task+0xec>)
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	4413      	add	r3, r2
 800b6f6:	3303      	adds	r3, #3
 800b6f8:	781b      	ldrb	r3, [r3, #0]
 800b6fa:	b2db      	uxtb	r3, r3
 800b6fc:	4619      	mov	r1, r3
 800b6fe:	2001      	movs	r0, #1
 800b700:	f7f7 fe04 	bl	800330c <cfg_RcvData>
		for( i = 0; i < system_info.usb_rx_len; i++ ){
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	3301      	adds	r3, #1
 800b708:	607b      	str	r3, [r7, #4]
 800b70a:	4b13      	ldr	r3, [pc, #76]	; (800b758 <system_Task+0xec>)
 800b70c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b70e:	687a      	ldr	r2, [r7, #4]
 800b710:	429a      	cmp	r2, r3
 800b712:	d3ed      	bcc.n	800b6f0 <system_Task+0x84>
		}
		system_info.usb_rx_flag = 0;
 800b714:	4b10      	ldr	r3, [pc, #64]	; (800b758 <system_Task+0xec>)
 800b716:	2200      	movs	r2, #0
 800b718:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	}

	//System reset
	if( system_info.reset_req == 1 )
 800b71c:	4b0e      	ldr	r3, [pc, #56]	; (800b758 <system_Task+0xec>)
 800b71e:	785b      	ldrb	r3, [r3, #1]
 800b720:	b2db      	uxtb	r3, r3
 800b722:	2b01      	cmp	r3, #1
 800b724:	d106      	bne.n	800b734 <system_Task+0xc8>
	{
		system_info.reset_req = 2;
 800b726:	4b0c      	ldr	r3, [pc, #48]	; (800b758 <system_Task+0xec>)
 800b728:	2202      	movs	r2, #2
 800b72a:	705a      	strb	r2, [r3, #1]
		system_info.timer[sys_tmr_reset] = 500;
 800b72c:	4b0a      	ldr	r3, [pc, #40]	; (800b758 <system_Task+0xec>)
 800b72e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800b732:	649a      	str	r2, [r3, #72]	; 0x48
	}
	if( (system_info.reset_req == 2) && (system_info.timer[sys_tmr_reset] == 0) )
 800b734:	4b08      	ldr	r3, [pc, #32]	; (800b758 <system_Task+0xec>)
 800b736:	785b      	ldrb	r3, [r3, #1]
 800b738:	b2db      	uxtb	r3, r3
 800b73a:	2b02      	cmp	r3, #2
 800b73c:	d108      	bne.n	800b750 <system_Task+0xe4>
 800b73e:	4b06      	ldr	r3, [pc, #24]	; (800b758 <system_Task+0xec>)
 800b740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b742:	2b00      	cmp	r3, #0
 800b744:	d104      	bne.n	800b750 <system_Task+0xe4>
	{
		system_info.reset_req = 0;
 800b746:	4b04      	ldr	r3, [pc, #16]	; (800b758 <system_Task+0xec>)
 800b748:	2200      	movs	r2, #0
 800b74a:	705a      	strb	r2, [r3, #1]
		system_Reset();
 800b74c:	f00b f850 	bl	80167f0 <__system_Reset_veneer>
	}
}
 800b750:	bf00      	nop
 800b752:	3708      	adds	r7, #8
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}
 800b758:	200010c0 	.word	0x200010c0
 800b75c:	20000adc 	.word	0x20000adc
 800b760:	20001115 	.word	0x20001115
 800b764:	20001114 	.word	0x20001114
 800b768:	20000bc0 	.word	0x20000bc0

0800b76c <system_UARTmodemSet115200>:

void system_UARTmodemSet115200()
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	af00      	add	r7, sp, #0
	HAL_UART_Abort_IT(&HAL_MODEM_UART);
 800b770:	4807      	ldr	r0, [pc, #28]	; (800b790 <system_UARTmodemSet115200+0x24>)
 800b772:	f005 fa51 	bl	8010c18 <HAL_UART_Abort_IT>
	HAL_UART_DeInit(&HAL_MODEM_UART);
 800b776:	4806      	ldr	r0, [pc, #24]	; (800b790 <system_UARTmodemSet115200+0x24>)
 800b778:	f005 f95d 	bl	8010a36 <HAL_UART_DeInit>
	MX_USART1_UART_Init115200();
 800b77c:	f7fd f81c 	bl	80087b8 <MX_USART1_UART_Init115200>
	HAL_UART_Receive_IT(&HAL_MODEM_UART, (uint8_t*)&cfg_uart_rx_data, 1);
 800b780:	2201      	movs	r2, #1
 800b782:	4904      	ldr	r1, [pc, #16]	; (800b794 <system_UARTmodemSet115200+0x28>)
 800b784:	4802      	ldr	r0, [pc, #8]	; (800b790 <system_UARTmodemSet115200+0x24>)
 800b786:	f005 fa17 	bl	8010bb8 <HAL_UART_Receive_IT>
	return;
 800b78a:	bf00      	nop
}
 800b78c:	bd80      	pop	{r7, pc}
 800b78e:	bf00      	nop
 800b790:	20000bc0 	.word	0x20000bc0
 800b794:	20001114 	.word	0x20001114

0800b798 <system_ModemRxCallback>:
void system_ModemRxCallback(uint8_t channel, uint8_t *data, uint32_t len)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b086      	sub	sp, #24
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	4603      	mov	r3, r0
 800b7a0:	60b9      	str	r1, [r7, #8]
 800b7a2:	607a      	str	r2, [r7, #4]
 800b7a4:	73fb      	strb	r3, [r7, #15]
	uint32_t i;

	if( channel == SYSTEM_CFG_MODEM_CH )
 800b7a6:	7bfb      	ldrb	r3, [r7, #15]
 800b7a8:	2b01      	cmp	r3, #1
 800b7aa:	d112      	bne.n	800b7d2 <system_ModemRxCallback+0x3a>
	{
		for( i = 0; i < len; i++ ){
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	617b      	str	r3, [r7, #20]
 800b7b0:	e00a      	b.n	800b7c8 <system_ModemRxCallback+0x30>
			cfg_RcvData(CFG_IFACE_CH0, data[i]);
 800b7b2:	68ba      	ldr	r2, [r7, #8]
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	4413      	add	r3, r2
 800b7b8:	781b      	ldrb	r3, [r3, #0]
 800b7ba:	4619      	mov	r1, r3
 800b7bc:	2000      	movs	r0, #0
 800b7be:	f7f7 fda5 	bl	800330c <cfg_RcvData>
		for( i = 0; i < len; i++ ){
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	3301      	adds	r3, #1
 800b7c6:	617b      	str	r3, [r7, #20]
 800b7c8:	697a      	ldr	r2, [r7, #20]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	d3f0      	bcc.n	800b7b2 <system_ModemRxCallback+0x1a>
			rc_RcvData(data[i]);
		}
	}


	return;
 800b7d0:	e014      	b.n	800b7fc <system_ModemRxCallback+0x64>
	else if( channel == SYSTEM_RC_MODEM_CH )
 800b7d2:	7bfb      	ldrb	r3, [r7, #15]
 800b7d4:	2b02      	cmp	r3, #2
 800b7d6:	d111      	bne.n	800b7fc <system_ModemRxCallback+0x64>
		for( i = 0; i < len; i++ ){
 800b7d8:	2300      	movs	r3, #0
 800b7da:	617b      	str	r3, [r7, #20]
 800b7dc:	e009      	b.n	800b7f2 <system_ModemRxCallback+0x5a>
			rc_RcvData(data[i]);
 800b7de:	68ba      	ldr	r2, [r7, #8]
 800b7e0:	697b      	ldr	r3, [r7, #20]
 800b7e2:	4413      	add	r3, r2
 800b7e4:	781b      	ldrb	r3, [r3, #0]
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f7fe faba 	bl	8009d60 <rc_RcvData>
		for( i = 0; i < len; i++ ){
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	3301      	adds	r3, #1
 800b7f0:	617b      	str	r3, [r7, #20]
 800b7f2:	697a      	ldr	r2, [r7, #20]
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	429a      	cmp	r2, r3
 800b7f8:	d3f1      	bcc.n	800b7de <system_ModemRxCallback+0x46>
	return;
 800b7fa:	bf00      	nop
 800b7fc:	bf00      	nop
}
 800b7fe:	3718      	adds	r7, #24
 800b800:	46bd      	mov	sp, r7
 800b802:	bd80      	pop	{r7, pc}

0800b804 <system_ADC_ConvCpltCallback>:

void system_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b082      	sub	sp, #8
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
	if( hadc == &hadc1){
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	4a14      	ldr	r2, [pc, #80]	; (800b860 <system_ADC_ConvCpltCallback+0x5c>)
 800b810:	4293      	cmp	r3, r2
 800b812:	d120      	bne.n	800b856 <system_ADC_ConvCpltCallback+0x52>
		battery_info.battery_volatge = (uint16_t)((float)HAL_ADC_GetValue(&hadc1) *
 800b814:	4812      	ldr	r0, [pc, #72]	; (800b860 <system_ADC_ConvCpltCallback+0x5c>)
 800b816:	f000 faf1 	bl	800bdfc <HAL_ADC_GetValue>
 800b81a:	ee07 0a90 	vmov	s15, r0
 800b81e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b822:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800b864 <system_ADC_ConvCpltCallback+0x60>
 800b826:	ee67 7a87 	vmul.f32	s15, s15, s14
										((float)3300 / (float)4095) * (float)BATTERY_MEAS_COEF);
 800b82a:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 800b82e:	ee67 7a87 	vmul.f32	s15, s15, s14
		battery_info.battery_volatge = (uint16_t)((float)HAL_ADC_GetValue(&hadc1) *
 800b832:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b836:	ee17 3a90 	vmov	r3, s15
 800b83a:	b29a      	uxth	r2, r3
 800b83c:	4b0a      	ldr	r3, [pc, #40]	; (800b868 <system_ADC_ConvCpltCallback+0x64>)
 800b83e:	81da      	strh	r2, [r3, #14]
		battery_info.battery_volatge_updated_flag = 1;
 800b840:	4b09      	ldr	r3, [pc, #36]	; (800b868 <system_ADC_ConvCpltCallback+0x64>)
 800b842:	2201      	movs	r2, #1
 800b844:	735a      	strb	r2, [r3, #13]
		system_info.adc_cplt = 1;
 800b846:	4b09      	ldr	r3, [pc, #36]	; (800b86c <system_ADC_ConvCpltCallback+0x68>)
 800b848:	2201      	movs	r2, #1
 800b84a:	709a      	strb	r2, [r3, #2]
		system_info.timer[sys_tmr_adc] = 1000;
 800b84c:	4b07      	ldr	r3, [pc, #28]	; (800b86c <system_ADC_ConvCpltCallback+0x68>)
 800b84e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b852:	64da      	str	r2, [r3, #76]	; 0x4c
	}

	return;
 800b854:	bf00      	nop
 800b856:	bf00      	nop
}
 800b858:	3708      	adds	r7, #8
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}
 800b85e:	bf00      	nop
 800b860:	20000adc 	.word	0x20000adc
 800b864:	3f4e4ce5 	.word	0x3f4e4ce5
 800b868:	200003bc 	.word	0x200003bc
 800b86c:	200010c0 	.word	0x200010c0

0800b870 <system_UART_RxCpltCallback>:
  * @brief RX interrupt from the uart
  * @param None
  * @retval None
  */
void system_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b082      	sub	sp, #8
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
	if( huart == &HAL_MODEM_UART )
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	4a0c      	ldr	r2, [pc, #48]	; (800b8ac <system_UART_RxCpltCallback+0x3c>)
 800b87c:	4293      	cmp	r3, r2
 800b87e:	d110      	bne.n	800b8a2 <system_UART_RxCpltCallback+0x32>
	{
		//cfg_RcvData(CFG_IFACE_CH0, cfg_uart_rx_data);
		modem_RcvData(cfg_uart_rx_data);
 800b880:	4b0b      	ldr	r3, [pc, #44]	; (800b8b0 <system_UART_RxCpltCallback+0x40>)
 800b882:	781b      	ldrb	r3, [r3, #0]
 800b884:	b2db      	uxtb	r3, r3
 800b886:	4618      	mov	r0, r3
 800b888:	f7fd fc12 	bl	80090b0 <modem_RcvData>
		if( HAL_UART_Receive_IT(&HAL_MODEM_UART, (uint8_t*)&cfg_uart_rx_data, 1) != HAL_OK ){
 800b88c:	2201      	movs	r2, #1
 800b88e:	4908      	ldr	r1, [pc, #32]	; (800b8b0 <system_UART_RxCpltCallback+0x40>)
 800b890:	4806      	ldr	r0, [pc, #24]	; (800b8ac <system_UART_RxCpltCallback+0x3c>)
 800b892:	f005 f991 	bl	8010bb8 <HAL_UART_Receive_IT>
 800b896:	4603      	mov	r3, r0
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d002      	beq.n	800b8a2 <system_UART_RxCpltCallback+0x32>
			//system_ErrorHandler();
			_system_restart_uart = 1;
 800b89c:	4b05      	ldr	r3, [pc, #20]	; (800b8b4 <system_UART_RxCpltCallback+0x44>)
 800b89e:	2201      	movs	r2, #1
 800b8a0:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800b8a2:	bf00      	nop
 800b8a4:	3708      	adds	r7, #8
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}
 800b8aa:	bf00      	nop
 800b8ac:	20000bc0 	.word	0x20000bc0
 800b8b0:	20001114 	.word	0x20001114
 800b8b4:	20001115 	.word	0x20001115

0800b8b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800b8b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b8f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800b8bc:	480d      	ldr	r0, [pc, #52]	; (800b8f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800b8be:	490e      	ldr	r1, [pc, #56]	; (800b8f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800b8c0:	4a0e      	ldr	r2, [pc, #56]	; (800b8fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 800b8c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b8c4:	e002      	b.n	800b8cc <LoopCopyDataInit>

0800b8c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b8c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b8c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b8ca:	3304      	adds	r3, #4

0800b8cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b8cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b8ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b8d0:	d3f9      	bcc.n	800b8c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b8d2:	4a0b      	ldr	r2, [pc, #44]	; (800b900 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800b8d4:	4c0b      	ldr	r4, [pc, #44]	; (800b904 <LoopFillZerobss+0x26>)
  movs r3, #0
 800b8d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b8d8:	e001      	b.n	800b8de <LoopFillZerobss>

0800b8da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b8da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b8dc:	3204      	adds	r2, #4

0800b8de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b8de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b8e0:	d3fb      	bcc.n	800b8da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800b8e2:	f7fd fa75 	bl	8008dd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b8e6:	f00a fbc9 	bl	801607c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b8ea:	f7fc fcff 	bl	80082ec <main>
  bx  lr    
 800b8ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800b8f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800b8f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b8f8:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 800b8fc:	080172c8 	.word	0x080172c8
  ldr r2, =_sbss
 800b900:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 800b904:	20002e80 	.word	0x20002e80

0800b908 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b908:	e7fe      	b.n	800b908 <DMA1_Stream0_IRQHandler>
	...

0800b90c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b910:	4b0e      	ldr	r3, [pc, #56]	; (800b94c <HAL_Init+0x40>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	4a0d      	ldr	r2, [pc, #52]	; (800b94c <HAL_Init+0x40>)
 800b916:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b91a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b91c:	4b0b      	ldr	r3, [pc, #44]	; (800b94c <HAL_Init+0x40>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	4a0a      	ldr	r2, [pc, #40]	; (800b94c <HAL_Init+0x40>)
 800b922:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b926:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b928:	4b08      	ldr	r3, [pc, #32]	; (800b94c <HAL_Init+0x40>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	4a07      	ldr	r2, [pc, #28]	; (800b94c <HAL_Init+0x40>)
 800b92e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b932:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b934:	2003      	movs	r0, #3
 800b936:	f000 fd8c 	bl	800c452 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b93a:	200f      	movs	r0, #15
 800b93c:	f7fd f978 	bl	8008c30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b940:	f7fc ffa6 	bl	8008890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b944:	2300      	movs	r3, #0
}
 800b946:	4618      	mov	r0, r3
 800b948:	bd80      	pop	{r7, pc}
 800b94a:	bf00      	nop
 800b94c:	40023c00 	.word	0x40023c00

0800b950 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b950:	b480      	push	{r7}
 800b952:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b954:	4b06      	ldr	r3, [pc, #24]	; (800b970 <HAL_IncTick+0x20>)
 800b956:	781b      	ldrb	r3, [r3, #0]
 800b958:	461a      	mov	r2, r3
 800b95a:	4b06      	ldr	r3, [pc, #24]	; (800b974 <HAL_IncTick+0x24>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	4413      	add	r3, r2
 800b960:	4a04      	ldr	r2, [pc, #16]	; (800b974 <HAL_IncTick+0x24>)
 800b962:	6013      	str	r3, [r2, #0]
}
 800b964:	bf00      	nop
 800b966:	46bd      	mov	sp, r7
 800b968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96c:	4770      	bx	lr
 800b96e:	bf00      	nop
 800b970:	20000114 	.word	0x20000114
 800b974:	20001118 	.word	0x20001118

0800b978 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b978:	b480      	push	{r7}
 800b97a:	af00      	add	r7, sp, #0
  return uwTick;
 800b97c:	4b03      	ldr	r3, [pc, #12]	; (800b98c <HAL_GetTick+0x14>)
 800b97e:	681b      	ldr	r3, [r3, #0]
}
 800b980:	4618      	mov	r0, r3
 800b982:	46bd      	mov	sp, r7
 800b984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b988:	4770      	bx	lr
 800b98a:	bf00      	nop
 800b98c:	20001118 	.word	0x20001118

0800b990 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b084      	sub	sp, #16
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b998:	f7ff ffee 	bl	800b978 <HAL_GetTick>
 800b99c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9a8:	d005      	beq.n	800b9b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b9aa:	4b0a      	ldr	r3, [pc, #40]	; (800b9d4 <HAL_Delay+0x44>)
 800b9ac:	781b      	ldrb	r3, [r3, #0]
 800b9ae:	461a      	mov	r2, r3
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	4413      	add	r3, r2
 800b9b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b9b6:	bf00      	nop
 800b9b8:	f7ff ffde 	bl	800b978 <HAL_GetTick>
 800b9bc:	4602      	mov	r2, r0
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	1ad3      	subs	r3, r2, r3
 800b9c2:	68fa      	ldr	r2, [r7, #12]
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	d8f7      	bhi.n	800b9b8 <HAL_Delay+0x28>
  {
  }
}
 800b9c8:	bf00      	nop
 800b9ca:	bf00      	nop
 800b9cc:	3710      	adds	r7, #16
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
 800b9d2:	bf00      	nop
 800b9d4:	20000114 	.word	0x20000114

0800b9d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b084      	sub	sp, #16
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d101      	bne.n	800b9ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	e033      	b.n	800ba56 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d109      	bne.n	800ba0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f7fc ff72 	bl	80088e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2200      	movs	r2, #0
 800ba06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba0e:	f003 0310 	and.w	r3, r3, #16
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d118      	bne.n	800ba48 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba1a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800ba1e:	f023 0302 	bic.w	r3, r3, #2
 800ba22:	f043 0202 	orr.w	r2, r3, #2
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f000 fb3a 	bl	800c0a4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2200      	movs	r2, #0
 800ba34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba3a:	f023 0303 	bic.w	r3, r3, #3
 800ba3e:	f043 0201 	orr.w	r2, r3, #1
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	641a      	str	r2, [r3, #64]	; 0x40
 800ba46:	e001      	b.n	800ba4c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800ba48:	2301      	movs	r3, #1
 800ba4a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800ba54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3710      	adds	r7, #16
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}
	...

0800ba60 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800ba60:	b480      	push	{r7}
 800ba62:	b085      	sub	sp, #20
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba72:	2b01      	cmp	r3, #1
 800ba74:	d101      	bne.n	800ba7a <HAL_ADC_Start_IT+0x1a>
 800ba76:	2302      	movs	r3, #2
 800ba78:	e0a1      	b.n	800bbbe <HAL_ADC_Start_IT+0x15e>
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	689b      	ldr	r3, [r3, #8]
 800ba88:	f003 0301 	and.w	r3, r3, #1
 800ba8c:	2b01      	cmp	r3, #1
 800ba8e:	d018      	beq.n	800bac2 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	689a      	ldr	r2, [r3, #8]
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f042 0201 	orr.w	r2, r2, #1
 800ba9e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800baa0:	4b4a      	ldr	r3, [pc, #296]	; (800bbcc <HAL_ADC_Start_IT+0x16c>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	4a4a      	ldr	r2, [pc, #296]	; (800bbd0 <HAL_ADC_Start_IT+0x170>)
 800baa6:	fba2 2303 	umull	r2, r3, r2, r3
 800baaa:	0c9a      	lsrs	r2, r3, #18
 800baac:	4613      	mov	r3, r2
 800baae:	005b      	lsls	r3, r3, #1
 800bab0:	4413      	add	r3, r2
 800bab2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800bab4:	e002      	b.n	800babc <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	3b01      	subs	r3, #1
 800baba:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d1f9      	bne.n	800bab6 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	689b      	ldr	r3, [r3, #8]
 800bac8:	f003 0301 	and.w	r3, r3, #1
 800bacc:	2b01      	cmp	r3, #1
 800bace:	d169      	bne.n	800bba4 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bad4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800bad8:	f023 0301 	bic.w	r3, r3, #1
 800badc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	685b      	ldr	r3, [r3, #4]
 800baea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d007      	beq.n	800bb02 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baf6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800bafa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bb0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb0e:	d106      	bne.n	800bb1e <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb14:	f023 0206 	bic.w	r2, r3, #6
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	645a      	str	r2, [r3, #68]	; 0x44
 800bb1c:	e002      	b.n	800bb24 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2200      	movs	r2, #0
 800bb22:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2200      	movs	r2, #0
 800bb28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800bb2c:	4b29      	ldr	r3, [pc, #164]	; (800bbd4 <HAL_ADC_Start_IT+0x174>)
 800bb2e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800bb38:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	685b      	ldr	r3, [r3, #4]
 800bb40:	687a      	ldr	r2, [r7, #4]
 800bb42:	6812      	ldr	r2, [r2, #0]
 800bb44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bb48:	f043 0320 	orr.w	r3, r3, #32
 800bb4c:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	f003 031f 	and.w	r3, r3, #31
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d10f      	bne.n	800bb7a <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	689b      	ldr	r3, [r3, #8]
 800bb60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d129      	bne.n	800bbbc <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	689a      	ldr	r2, [r3, #8]
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800bb76:	609a      	str	r2, [r3, #8]
 800bb78:	e020      	b.n	800bbbc <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	4a16      	ldr	r2, [pc, #88]	; (800bbd8 <HAL_ADC_Start_IT+0x178>)
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d11b      	bne.n	800bbbc <HAL_ADC_Start_IT+0x15c>
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	689b      	ldr	r3, [r3, #8]
 800bb8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d114      	bne.n	800bbbc <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	689a      	ldr	r2, [r3, #8]
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800bba0:	609a      	str	r2, [r3, #8]
 800bba2:	e00b      	b.n	800bbbc <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bba8:	f043 0210 	orr.w	r2, r3, #16
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbb4:	f043 0201 	orr.w	r2, r3, #1
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800bbbc:	2300      	movs	r3, #0
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3714      	adds	r7, #20
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc8:	4770      	bx	lr
 800bbca:	bf00      	nop
 800bbcc:	2000010c 	.word	0x2000010c
 800bbd0:	431bde83 	.word	0x431bde83
 800bbd4:	40012300 	.word	0x40012300
 800bbd8:	40012000 	.word	0x40012000

0800bbdc <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b086      	sub	sp, #24
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	617b      	str	r3, [r7, #20]
 800bbe8:	2300      	movs	r3, #0
 800bbea:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	685b      	ldr	r3, [r3, #4]
 800bbfa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	f003 0302 	and.w	r3, r3, #2
 800bc02:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	f003 0320 	and.w	r3, r3, #32
 800bc0a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d049      	beq.n	800bca6 <HAL_ADC_IRQHandler+0xca>
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d046      	beq.n	800bca6 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc1c:	f003 0310 	and.w	r3, r3, #16
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d105      	bne.n	800bc30 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc28:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	689b      	ldr	r3, [r3, #8]
 800bc36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d12b      	bne.n	800bc96 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d127      	bne.n	800bc96 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc4c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d006      	beq.n	800bc62 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	689b      	ldr	r3, [r3, #8]
 800bc5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d119      	bne.n	800bc96 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	685a      	ldr	r2, [r3, #4]
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f022 0220 	bic.w	r2, r2, #32
 800bc70:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d105      	bne.n	800bc96 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc8e:	f043 0201 	orr.w	r2, r3, #1
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f7fc fdd0 	bl	800883c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f06f 0212 	mvn.w	r2, #18
 800bca4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	f003 0304 	and.w	r3, r3, #4
 800bcac:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcb4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d057      	beq.n	800bd6c <HAL_ADC_IRQHandler+0x190>
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d054      	beq.n	800bd6c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcc6:	f003 0310 	and.w	r3, r3, #16
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d105      	bne.n	800bcda <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcd2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	689b      	ldr	r3, [r3, #8]
 800bce0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d139      	bne.n	800bd5c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcee:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d006      	beq.n	800bd04 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	689b      	ldr	r3, [r3, #8]
 800bcfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d12b      	bne.n	800bd5c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	685b      	ldr	r3, [r3, #4]
 800bd0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d124      	bne.n	800bd5c <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	689b      	ldr	r3, [r3, #8]
 800bd18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d11d      	bne.n	800bd5c <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d119      	bne.n	800bd5c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	685a      	ldr	r2, [r3, #4]
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bd36:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd3c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d105      	bne.n	800bd5c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd54:	f043 0201 	orr.w	r2, r3, #1
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f000 fa9d 	bl	800c29c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	f06f 020c 	mvn.w	r2, #12
 800bd6a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	f003 0301 	and.w	r3, r3, #1
 800bd72:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd7a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800bd7c:	697b      	ldr	r3, [r7, #20]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d017      	beq.n	800bdb2 <HAL_ADC_IRQHandler+0x1d6>
 800bd82:	693b      	ldr	r3, [r7, #16]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d014      	beq.n	800bdb2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f003 0301 	and.w	r3, r3, #1
 800bd92:	2b01      	cmp	r3, #1
 800bd94:	d10d      	bne.n	800bdb2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd9a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f000 f837 	bl	800be16 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	f06f 0201 	mvn.w	r2, #1
 800bdb0:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	f003 0320 	and.w	r3, r3, #32
 800bdb8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bdc0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d015      	beq.n	800bdf4 <HAL_ADC_IRQHandler+0x218>
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d012      	beq.n	800bdf4 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdd2:	f043 0202 	orr.w	r2, r3, #2
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f06f 0220 	mvn.w	r2, #32
 800bde2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f000 f820 	bl	800be2a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f06f 0220 	mvn.w	r2, #32
 800bdf2:	601a      	str	r2, [r3, #0]
  }
}
 800bdf4:	bf00      	nop
 800bdf6:	3718      	adds	r7, #24
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}

0800bdfc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800bdfc:	b480      	push	{r7}
 800bdfe:	b083      	sub	sp, #12
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	370c      	adds	r7, #12
 800be0e:	46bd      	mov	sp, r7
 800be10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be14:	4770      	bx	lr

0800be16 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800be16:	b480      	push	{r7}
 800be18:	b083      	sub	sp, #12
 800be1a:	af00      	add	r7, sp, #0
 800be1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800be1e:	bf00      	nop
 800be20:	370c      	adds	r7, #12
 800be22:	46bd      	mov	sp, r7
 800be24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be28:	4770      	bx	lr

0800be2a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800be2a:	b480      	push	{r7}
 800be2c:	b083      	sub	sp, #12
 800be2e:	af00      	add	r7, sp, #0
 800be30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800be32:	bf00      	nop
 800be34:	370c      	adds	r7, #12
 800be36:	46bd      	mov	sp, r7
 800be38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3c:	4770      	bx	lr
	...

0800be40 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800be40:	b480      	push	{r7}
 800be42:	b085      	sub	sp, #20
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
 800be48:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800be4a:	2300      	movs	r3, #0
 800be4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be54:	2b01      	cmp	r3, #1
 800be56:	d101      	bne.n	800be5c <HAL_ADC_ConfigChannel+0x1c>
 800be58:	2302      	movs	r3, #2
 800be5a:	e113      	b.n	800c084 <HAL_ADC_ConfigChannel+0x244>
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2201      	movs	r2, #1
 800be60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	2b09      	cmp	r3, #9
 800be6a:	d925      	bls.n	800beb8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	68d9      	ldr	r1, [r3, #12]
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	b29b      	uxth	r3, r3
 800be78:	461a      	mov	r2, r3
 800be7a:	4613      	mov	r3, r2
 800be7c:	005b      	lsls	r3, r3, #1
 800be7e:	4413      	add	r3, r2
 800be80:	3b1e      	subs	r3, #30
 800be82:	2207      	movs	r2, #7
 800be84:	fa02 f303 	lsl.w	r3, r2, r3
 800be88:	43da      	mvns	r2, r3
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	400a      	ands	r2, r1
 800be90:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	68d9      	ldr	r1, [r3, #12]
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	689a      	ldr	r2, [r3, #8]
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	b29b      	uxth	r3, r3
 800bea2:	4618      	mov	r0, r3
 800bea4:	4603      	mov	r3, r0
 800bea6:	005b      	lsls	r3, r3, #1
 800bea8:	4403      	add	r3, r0
 800beaa:	3b1e      	subs	r3, #30
 800beac:	409a      	lsls	r2, r3
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	430a      	orrs	r2, r1
 800beb4:	60da      	str	r2, [r3, #12]
 800beb6:	e022      	b.n	800befe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	6919      	ldr	r1, [r3, #16]
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	b29b      	uxth	r3, r3
 800bec4:	461a      	mov	r2, r3
 800bec6:	4613      	mov	r3, r2
 800bec8:	005b      	lsls	r3, r3, #1
 800beca:	4413      	add	r3, r2
 800becc:	2207      	movs	r2, #7
 800bece:	fa02 f303 	lsl.w	r3, r2, r3
 800bed2:	43da      	mvns	r2, r3
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	400a      	ands	r2, r1
 800beda:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	6919      	ldr	r1, [r3, #16]
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	689a      	ldr	r2, [r3, #8]
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	b29b      	uxth	r3, r3
 800beec:	4618      	mov	r0, r3
 800beee:	4603      	mov	r3, r0
 800bef0:	005b      	lsls	r3, r3, #1
 800bef2:	4403      	add	r3, r0
 800bef4:	409a      	lsls	r2, r3
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	430a      	orrs	r2, r1
 800befc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	685b      	ldr	r3, [r3, #4]
 800bf02:	2b06      	cmp	r3, #6
 800bf04:	d824      	bhi.n	800bf50 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	685a      	ldr	r2, [r3, #4]
 800bf10:	4613      	mov	r3, r2
 800bf12:	009b      	lsls	r3, r3, #2
 800bf14:	4413      	add	r3, r2
 800bf16:	3b05      	subs	r3, #5
 800bf18:	221f      	movs	r2, #31
 800bf1a:	fa02 f303 	lsl.w	r3, r2, r3
 800bf1e:	43da      	mvns	r2, r3
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	400a      	ands	r2, r1
 800bf26:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	b29b      	uxth	r3, r3
 800bf34:	4618      	mov	r0, r3
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	685a      	ldr	r2, [r3, #4]
 800bf3a:	4613      	mov	r3, r2
 800bf3c:	009b      	lsls	r3, r3, #2
 800bf3e:	4413      	add	r3, r2
 800bf40:	3b05      	subs	r3, #5
 800bf42:	fa00 f203 	lsl.w	r2, r0, r3
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	430a      	orrs	r2, r1
 800bf4c:	635a      	str	r2, [r3, #52]	; 0x34
 800bf4e:	e04c      	b.n	800bfea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	685b      	ldr	r3, [r3, #4]
 800bf54:	2b0c      	cmp	r3, #12
 800bf56:	d824      	bhi.n	800bfa2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	685a      	ldr	r2, [r3, #4]
 800bf62:	4613      	mov	r3, r2
 800bf64:	009b      	lsls	r3, r3, #2
 800bf66:	4413      	add	r3, r2
 800bf68:	3b23      	subs	r3, #35	; 0x23
 800bf6a:	221f      	movs	r2, #31
 800bf6c:	fa02 f303 	lsl.w	r3, r2, r3
 800bf70:	43da      	mvns	r2, r3
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	400a      	ands	r2, r1
 800bf78:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	b29b      	uxth	r3, r3
 800bf86:	4618      	mov	r0, r3
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	685a      	ldr	r2, [r3, #4]
 800bf8c:	4613      	mov	r3, r2
 800bf8e:	009b      	lsls	r3, r3, #2
 800bf90:	4413      	add	r3, r2
 800bf92:	3b23      	subs	r3, #35	; 0x23
 800bf94:	fa00 f203 	lsl.w	r2, r0, r3
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	430a      	orrs	r2, r1
 800bf9e:	631a      	str	r2, [r3, #48]	; 0x30
 800bfa0:	e023      	b.n	800bfea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	685a      	ldr	r2, [r3, #4]
 800bfac:	4613      	mov	r3, r2
 800bfae:	009b      	lsls	r3, r3, #2
 800bfb0:	4413      	add	r3, r2
 800bfb2:	3b41      	subs	r3, #65	; 0x41
 800bfb4:	221f      	movs	r2, #31
 800bfb6:	fa02 f303 	lsl.w	r3, r2, r3
 800bfba:	43da      	mvns	r2, r3
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	400a      	ands	r2, r1
 800bfc2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	b29b      	uxth	r3, r3
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	685a      	ldr	r2, [r3, #4]
 800bfd6:	4613      	mov	r3, r2
 800bfd8:	009b      	lsls	r3, r3, #2
 800bfda:	4413      	add	r3, r2
 800bfdc:	3b41      	subs	r3, #65	; 0x41
 800bfde:	fa00 f203 	lsl.w	r2, r0, r3
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	430a      	orrs	r2, r1
 800bfe8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800bfea:	4b29      	ldr	r3, [pc, #164]	; (800c090 <HAL_ADC_ConfigChannel+0x250>)
 800bfec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	4a28      	ldr	r2, [pc, #160]	; (800c094 <HAL_ADC_ConfigChannel+0x254>)
 800bff4:	4293      	cmp	r3, r2
 800bff6:	d10f      	bne.n	800c018 <HAL_ADC_ConfigChannel+0x1d8>
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	2b12      	cmp	r3, #18
 800bffe:	d10b      	bne.n	800c018 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	685b      	ldr	r3, [r3, #4]
 800c004:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	685b      	ldr	r3, [r3, #4]
 800c010:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	4a1d      	ldr	r2, [pc, #116]	; (800c094 <HAL_ADC_ConfigChannel+0x254>)
 800c01e:	4293      	cmp	r3, r2
 800c020:	d12b      	bne.n	800c07a <HAL_ADC_ConfigChannel+0x23a>
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	4a1c      	ldr	r2, [pc, #112]	; (800c098 <HAL_ADC_ConfigChannel+0x258>)
 800c028:	4293      	cmp	r3, r2
 800c02a:	d003      	beq.n	800c034 <HAL_ADC_ConfigChannel+0x1f4>
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	2b11      	cmp	r3, #17
 800c032:	d122      	bne.n	800c07a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	685b      	ldr	r3, [r3, #4]
 800c038:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	685b      	ldr	r3, [r3, #4]
 800c044:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	4a11      	ldr	r2, [pc, #68]	; (800c098 <HAL_ADC_ConfigChannel+0x258>)
 800c052:	4293      	cmp	r3, r2
 800c054:	d111      	bne.n	800c07a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800c056:	4b11      	ldr	r3, [pc, #68]	; (800c09c <HAL_ADC_ConfigChannel+0x25c>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	4a11      	ldr	r2, [pc, #68]	; (800c0a0 <HAL_ADC_ConfigChannel+0x260>)
 800c05c:	fba2 2303 	umull	r2, r3, r2, r3
 800c060:	0c9a      	lsrs	r2, r3, #18
 800c062:	4613      	mov	r3, r2
 800c064:	009b      	lsls	r3, r3, #2
 800c066:	4413      	add	r3, r2
 800c068:	005b      	lsls	r3, r3, #1
 800c06a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800c06c:	e002      	b.n	800c074 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	3b01      	subs	r3, #1
 800c072:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d1f9      	bne.n	800c06e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2200      	movs	r2, #0
 800c07e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800c082:	2300      	movs	r3, #0
}
 800c084:	4618      	mov	r0, r3
 800c086:	3714      	adds	r7, #20
 800c088:	46bd      	mov	sp, r7
 800c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08e:	4770      	bx	lr
 800c090:	40012300 	.word	0x40012300
 800c094:	40012000 	.word	0x40012000
 800c098:	10000012 	.word	0x10000012
 800c09c:	2000010c 	.word	0x2000010c
 800c0a0:	431bde83 	.word	0x431bde83

0800c0a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b085      	sub	sp, #20
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800c0ac:	4b79      	ldr	r3, [pc, #484]	; (800c294 <ADC_Init+0x1f0>)
 800c0ae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	685b      	ldr	r3, [r3, #4]
 800c0b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	685a      	ldr	r2, [r3, #4]
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	685b      	ldr	r3, [r3, #4]
 800c0c4:	431a      	orrs	r2, r3
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	685a      	ldr	r2, [r3, #4]
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c0d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	6859      	ldr	r1, [r3, #4]
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	691b      	ldr	r3, [r3, #16]
 800c0e4:	021a      	lsls	r2, r3, #8
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	430a      	orrs	r2, r1
 800c0ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	685a      	ldr	r2, [r3, #4]
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800c0fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	6859      	ldr	r1, [r3, #4]
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	689a      	ldr	r2, [r3, #8]
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	430a      	orrs	r2, r1
 800c10e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	689a      	ldr	r2, [r3, #8]
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c11e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	6899      	ldr	r1, [r3, #8]
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	68da      	ldr	r2, [r3, #12]
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	430a      	orrs	r2, r1
 800c130:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c136:	4a58      	ldr	r2, [pc, #352]	; (800c298 <ADC_Init+0x1f4>)
 800c138:	4293      	cmp	r3, r2
 800c13a:	d022      	beq.n	800c182 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	689a      	ldr	r2, [r3, #8]
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c14a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	6899      	ldr	r1, [r3, #8]
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	430a      	orrs	r2, r1
 800c15c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	689a      	ldr	r2, [r3, #8]
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800c16c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	6899      	ldr	r1, [r3, #8]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	430a      	orrs	r2, r1
 800c17e:	609a      	str	r2, [r3, #8]
 800c180:	e00f      	b.n	800c1a2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	689a      	ldr	r2, [r3, #8]
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c190:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	689a      	ldr	r2, [r3, #8]
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800c1a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	689a      	ldr	r2, [r3, #8]
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f022 0202 	bic.w	r2, r2, #2
 800c1b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	6899      	ldr	r1, [r3, #8]
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	7e1b      	ldrb	r3, [r3, #24]
 800c1bc:	005a      	lsls	r2, r3, #1
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	430a      	orrs	r2, r1
 800c1c4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d01b      	beq.n	800c208 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	685a      	ldr	r2, [r3, #4]
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c1de:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	685a      	ldr	r2, [r3, #4]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800c1ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	6859      	ldr	r1, [r3, #4]
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1fa:	3b01      	subs	r3, #1
 800c1fc:	035a      	lsls	r2, r3, #13
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	430a      	orrs	r2, r1
 800c204:	605a      	str	r2, [r3, #4]
 800c206:	e007      	b.n	800c218 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	685a      	ldr	r2, [r3, #4]
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c216:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800c226:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	69db      	ldr	r3, [r3, #28]
 800c232:	3b01      	subs	r3, #1
 800c234:	051a      	lsls	r2, r3, #20
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	430a      	orrs	r2, r1
 800c23c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	689a      	ldr	r2, [r3, #8]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c24c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	6899      	ldr	r1, [r3, #8]
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c25a:	025a      	lsls	r2, r3, #9
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	430a      	orrs	r2, r1
 800c262:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	689a      	ldr	r2, [r3, #8]
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c272:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	6899      	ldr	r1, [r3, #8]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	695b      	ldr	r3, [r3, #20]
 800c27e:	029a      	lsls	r2, r3, #10
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	430a      	orrs	r2, r1
 800c286:	609a      	str	r2, [r3, #8]
}
 800c288:	bf00      	nop
 800c28a:	3714      	adds	r7, #20
 800c28c:	46bd      	mov	sp, r7
 800c28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c292:	4770      	bx	lr
 800c294:	40012300 	.word	0x40012300
 800c298:	0f000001 	.word	0x0f000001

0800c29c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800c29c:	b480      	push	{r7}
 800c29e:	b083      	sub	sp, #12
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800c2a4:	bf00      	nop
 800c2a6:	370c      	adds	r7, #12
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ae:	4770      	bx	lr

0800c2b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	b085      	sub	sp, #20
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f003 0307 	and.w	r3, r3, #7
 800c2be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c2c0:	4b0c      	ldr	r3, [pc, #48]	; (800c2f4 <__NVIC_SetPriorityGrouping+0x44>)
 800c2c2:	68db      	ldr	r3, [r3, #12]
 800c2c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c2c6:	68ba      	ldr	r2, [r7, #8]
 800c2c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c2cc:	4013      	ands	r3, r2
 800c2ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c2d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800c2dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c2e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c2e2:	4a04      	ldr	r2, [pc, #16]	; (800c2f4 <__NVIC_SetPriorityGrouping+0x44>)
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	60d3      	str	r3, [r2, #12]
}
 800c2e8:	bf00      	nop
 800c2ea:	3714      	adds	r7, #20
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f2:	4770      	bx	lr
 800c2f4:	e000ed00 	.word	0xe000ed00

0800c2f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c2f8:	b480      	push	{r7}
 800c2fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c2fc:	4b04      	ldr	r3, [pc, #16]	; (800c310 <__NVIC_GetPriorityGrouping+0x18>)
 800c2fe:	68db      	ldr	r3, [r3, #12]
 800c300:	0a1b      	lsrs	r3, r3, #8
 800c302:	f003 0307 	and.w	r3, r3, #7
}
 800c306:	4618      	mov	r0, r3
 800c308:	46bd      	mov	sp, r7
 800c30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30e:	4770      	bx	lr
 800c310:	e000ed00 	.word	0xe000ed00

0800c314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c314:	b480      	push	{r7}
 800c316:	b083      	sub	sp, #12
 800c318:	af00      	add	r7, sp, #0
 800c31a:	4603      	mov	r3, r0
 800c31c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c31e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c322:	2b00      	cmp	r3, #0
 800c324:	db0b      	blt.n	800c33e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c326:	79fb      	ldrb	r3, [r7, #7]
 800c328:	f003 021f 	and.w	r2, r3, #31
 800c32c:	4907      	ldr	r1, [pc, #28]	; (800c34c <__NVIC_EnableIRQ+0x38>)
 800c32e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c332:	095b      	lsrs	r3, r3, #5
 800c334:	2001      	movs	r0, #1
 800c336:	fa00 f202 	lsl.w	r2, r0, r2
 800c33a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800c33e:	bf00      	nop
 800c340:	370c      	adds	r7, #12
 800c342:	46bd      	mov	sp, r7
 800c344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c348:	4770      	bx	lr
 800c34a:	bf00      	nop
 800c34c:	e000e100 	.word	0xe000e100

0800c350 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c350:	b480      	push	{r7}
 800c352:	b083      	sub	sp, #12
 800c354:	af00      	add	r7, sp, #0
 800c356:	4603      	mov	r3, r0
 800c358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c35a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	db12      	blt.n	800c388 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c362:	79fb      	ldrb	r3, [r7, #7]
 800c364:	f003 021f 	and.w	r2, r3, #31
 800c368:	490a      	ldr	r1, [pc, #40]	; (800c394 <__NVIC_DisableIRQ+0x44>)
 800c36a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c36e:	095b      	lsrs	r3, r3, #5
 800c370:	2001      	movs	r0, #1
 800c372:	fa00 f202 	lsl.w	r2, r0, r2
 800c376:	3320      	adds	r3, #32
 800c378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800c37c:	f3bf 8f4f 	dsb	sy
}
 800c380:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c382:	f3bf 8f6f 	isb	sy
}
 800c386:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800c388:	bf00      	nop
 800c38a:	370c      	adds	r7, #12
 800c38c:	46bd      	mov	sp, r7
 800c38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c392:	4770      	bx	lr
 800c394:	e000e100 	.word	0xe000e100

0800c398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c398:	b480      	push	{r7}
 800c39a:	b083      	sub	sp, #12
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	4603      	mov	r3, r0
 800c3a0:	6039      	str	r1, [r7, #0]
 800c3a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c3a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	db0a      	blt.n	800c3c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	b2da      	uxtb	r2, r3
 800c3b0:	490c      	ldr	r1, [pc, #48]	; (800c3e4 <__NVIC_SetPriority+0x4c>)
 800c3b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c3b6:	0112      	lsls	r2, r2, #4
 800c3b8:	b2d2      	uxtb	r2, r2
 800c3ba:	440b      	add	r3, r1
 800c3bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c3c0:	e00a      	b.n	800c3d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	b2da      	uxtb	r2, r3
 800c3c6:	4908      	ldr	r1, [pc, #32]	; (800c3e8 <__NVIC_SetPriority+0x50>)
 800c3c8:	79fb      	ldrb	r3, [r7, #7]
 800c3ca:	f003 030f 	and.w	r3, r3, #15
 800c3ce:	3b04      	subs	r3, #4
 800c3d0:	0112      	lsls	r2, r2, #4
 800c3d2:	b2d2      	uxtb	r2, r2
 800c3d4:	440b      	add	r3, r1
 800c3d6:	761a      	strb	r2, [r3, #24]
}
 800c3d8:	bf00      	nop
 800c3da:	370c      	adds	r7, #12
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e2:	4770      	bx	lr
 800c3e4:	e000e100 	.word	0xe000e100
 800c3e8:	e000ed00 	.word	0xe000ed00

0800c3ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c3ec:	b480      	push	{r7}
 800c3ee:	b089      	sub	sp, #36	; 0x24
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	60f8      	str	r0, [r7, #12]
 800c3f4:	60b9      	str	r1, [r7, #8]
 800c3f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	f003 0307 	and.w	r3, r3, #7
 800c3fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c400:	69fb      	ldr	r3, [r7, #28]
 800c402:	f1c3 0307 	rsb	r3, r3, #7
 800c406:	2b04      	cmp	r3, #4
 800c408:	bf28      	it	cs
 800c40a:	2304      	movcs	r3, #4
 800c40c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c40e:	69fb      	ldr	r3, [r7, #28]
 800c410:	3304      	adds	r3, #4
 800c412:	2b06      	cmp	r3, #6
 800c414:	d902      	bls.n	800c41c <NVIC_EncodePriority+0x30>
 800c416:	69fb      	ldr	r3, [r7, #28]
 800c418:	3b03      	subs	r3, #3
 800c41a:	e000      	b.n	800c41e <NVIC_EncodePriority+0x32>
 800c41c:	2300      	movs	r3, #0
 800c41e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c420:	f04f 32ff 	mov.w	r2, #4294967295
 800c424:	69bb      	ldr	r3, [r7, #24]
 800c426:	fa02 f303 	lsl.w	r3, r2, r3
 800c42a:	43da      	mvns	r2, r3
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	401a      	ands	r2, r3
 800c430:	697b      	ldr	r3, [r7, #20]
 800c432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c434:	f04f 31ff 	mov.w	r1, #4294967295
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	fa01 f303 	lsl.w	r3, r1, r3
 800c43e:	43d9      	mvns	r1, r3
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c444:	4313      	orrs	r3, r2
         );
}
 800c446:	4618      	mov	r0, r3
 800c448:	3724      	adds	r7, #36	; 0x24
 800c44a:	46bd      	mov	sp, r7
 800c44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c450:	4770      	bx	lr

0800c452 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c452:	b580      	push	{r7, lr}
 800c454:	b082      	sub	sp, #8
 800c456:	af00      	add	r7, sp, #0
 800c458:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f7ff ff28 	bl	800c2b0 <__NVIC_SetPriorityGrouping>
}
 800c460:	bf00      	nop
 800c462:	3708      	adds	r7, #8
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}

0800c468 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c468:	b580      	push	{r7, lr}
 800c46a:	b086      	sub	sp, #24
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	4603      	mov	r3, r0
 800c470:	60b9      	str	r1, [r7, #8]
 800c472:	607a      	str	r2, [r7, #4]
 800c474:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800c476:	2300      	movs	r3, #0
 800c478:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800c47a:	f7ff ff3d 	bl	800c2f8 <__NVIC_GetPriorityGrouping>
 800c47e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c480:	687a      	ldr	r2, [r7, #4]
 800c482:	68b9      	ldr	r1, [r7, #8]
 800c484:	6978      	ldr	r0, [r7, #20]
 800c486:	f7ff ffb1 	bl	800c3ec <NVIC_EncodePriority>
 800c48a:	4602      	mov	r2, r0
 800c48c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c490:	4611      	mov	r1, r2
 800c492:	4618      	mov	r0, r3
 800c494:	f7ff ff80 	bl	800c398 <__NVIC_SetPriority>
}
 800c498:	bf00      	nop
 800c49a:	3718      	adds	r7, #24
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}

0800c4a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b082      	sub	sp, #8
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c4aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f7ff ff30 	bl	800c314 <__NVIC_EnableIRQ>
}
 800c4b4:	bf00      	nop
 800c4b6:	3708      	adds	r7, #8
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}

0800c4bc <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b082      	sub	sp, #8
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800c4c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f7ff ff40 	bl	800c350 <__NVIC_DisableIRQ>
}
 800c4d0:	bf00      	nop
 800c4d2:	3708      	adds	r7, #8
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}

0800c4d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b084      	sub	sp, #16
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800c4e6:	f7ff fa47 	bl	800b978 <HAL_GetTick>
 800c4ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c4f2:	b2db      	uxtb	r3, r3
 800c4f4:	2b02      	cmp	r3, #2
 800c4f6:	d008      	beq.n	800c50a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2280      	movs	r2, #128	; 0x80
 800c4fc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2200      	movs	r2, #0
 800c502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800c506:	2301      	movs	r3, #1
 800c508:	e052      	b.n	800c5b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	681a      	ldr	r2, [r3, #0]
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	f022 0216 	bic.w	r2, r2, #22
 800c518:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	695a      	ldr	r2, [r3, #20]
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c528:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d103      	bne.n	800c53a <HAL_DMA_Abort+0x62>
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c536:	2b00      	cmp	r3, #0
 800c538:	d007      	beq.n	800c54a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	681a      	ldr	r2, [r3, #0]
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f022 0208 	bic.w	r2, r2, #8
 800c548:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	681a      	ldr	r2, [r3, #0]
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f022 0201 	bic.w	r2, r2, #1
 800c558:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c55a:	e013      	b.n	800c584 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c55c:	f7ff fa0c 	bl	800b978 <HAL_GetTick>
 800c560:	4602      	mov	r2, r0
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	1ad3      	subs	r3, r2, r3
 800c566:	2b05      	cmp	r3, #5
 800c568:	d90c      	bls.n	800c584 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2220      	movs	r2, #32
 800c56e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2203      	movs	r2, #3
 800c574:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2200      	movs	r2, #0
 800c57c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800c580:	2303      	movs	r3, #3
 800c582:	e015      	b.n	800c5b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f003 0301 	and.w	r3, r3, #1
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d1e4      	bne.n	800c55c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c596:	223f      	movs	r2, #63	; 0x3f
 800c598:	409a      	lsls	r2, r3
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2201      	movs	r2, #1
 800c5a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800c5ae:	2300      	movs	r3, #0
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3710      	adds	r7, #16
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}

0800c5b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	b083      	sub	sp, #12
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c5c6:	b2db      	uxtb	r3, r3
 800c5c8:	2b02      	cmp	r3, #2
 800c5ca:	d004      	beq.n	800c5d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2280      	movs	r2, #128	; 0x80
 800c5d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800c5d2:	2301      	movs	r3, #1
 800c5d4:	e00c      	b.n	800c5f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2205      	movs	r2, #5
 800c5da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	681a      	ldr	r2, [r3, #0]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	f022 0201 	bic.w	r2, r2, #1
 800c5ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800c5ee:	2300      	movs	r3, #0
}
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	370c      	adds	r7, #12
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fa:	4770      	bx	lr

0800c5fc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b086      	sub	sp, #24
 800c600:	af00      	add	r7, sp, #0
 800c602:	60f8      	str	r0, [r7, #12]
 800c604:	60b9      	str	r1, [r7, #8]
 800c606:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c60a:	2301      	movs	r3, #1
 800c60c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800c60e:	4b23      	ldr	r3, [pc, #140]	; (800c69c <HAL_FLASH_Program+0xa0>)
 800c610:	7e1b      	ldrb	r3, [r3, #24]
 800c612:	2b01      	cmp	r3, #1
 800c614:	d101      	bne.n	800c61a <HAL_FLASH_Program+0x1e>
 800c616:	2302      	movs	r3, #2
 800c618:	e03b      	b.n	800c692 <HAL_FLASH_Program+0x96>
 800c61a:	4b20      	ldr	r3, [pc, #128]	; (800c69c <HAL_FLASH_Program+0xa0>)
 800c61c:	2201      	movs	r2, #1
 800c61e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c620:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c624:	f000 f870 	bl	800c708 <FLASH_WaitForLastOperation>
 800c628:	4603      	mov	r3, r0
 800c62a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800c62c:	7dfb      	ldrb	r3, [r7, #23]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d12b      	bne.n	800c68a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d105      	bne.n	800c644 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800c638:	783b      	ldrb	r3, [r7, #0]
 800c63a:	4619      	mov	r1, r3
 800c63c:	68b8      	ldr	r0, [r7, #8]
 800c63e:	f000 f91b 	bl	800c878 <FLASH_Program_Byte>
 800c642:	e016      	b.n	800c672 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	2b01      	cmp	r3, #1
 800c648:	d105      	bne.n	800c656 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800c64a:	883b      	ldrh	r3, [r7, #0]
 800c64c:	4619      	mov	r1, r3
 800c64e:	68b8      	ldr	r0, [r7, #8]
 800c650:	f000 f8ee 	bl	800c830 <FLASH_Program_HalfWord>
 800c654:	e00d      	b.n	800c672 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	2b02      	cmp	r3, #2
 800c65a:	d105      	bne.n	800c668 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	4619      	mov	r1, r3
 800c660:	68b8      	ldr	r0, [r7, #8]
 800c662:	f000 f8c3 	bl	800c7ec <FLASH_Program_Word>
 800c666:	e004      	b.n	800c672 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800c668:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c66c:	68b8      	ldr	r0, [r7, #8]
 800c66e:	f000 f88b 	bl	800c788 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c672:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c676:	f000 f847 	bl	800c708 <FLASH_WaitForLastOperation>
 800c67a:	4603      	mov	r3, r0
 800c67c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800c67e:	4b08      	ldr	r3, [pc, #32]	; (800c6a0 <HAL_FLASH_Program+0xa4>)
 800c680:	691b      	ldr	r3, [r3, #16]
 800c682:	4a07      	ldr	r2, [pc, #28]	; (800c6a0 <HAL_FLASH_Program+0xa4>)
 800c684:	f023 0301 	bic.w	r3, r3, #1
 800c688:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800c68a:	4b04      	ldr	r3, [pc, #16]	; (800c69c <HAL_FLASH_Program+0xa0>)
 800c68c:	2200      	movs	r2, #0
 800c68e:	761a      	strb	r2, [r3, #24]
  
  return status;
 800c690:	7dfb      	ldrb	r3, [r7, #23]
}
 800c692:	4618      	mov	r0, r3
 800c694:	3718      	adds	r7, #24
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}
 800c69a:	bf00      	nop
 800c69c:	2000111c 	.word	0x2000111c
 800c6a0:	40023c00 	.word	0x40023c00

0800c6a4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	b083      	sub	sp, #12
 800c6a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800c6ae:	4b0b      	ldr	r3, [pc, #44]	; (800c6dc <HAL_FLASH_Unlock+0x38>)
 800c6b0:	691b      	ldr	r3, [r3, #16]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	da0b      	bge.n	800c6ce <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800c6b6:	4b09      	ldr	r3, [pc, #36]	; (800c6dc <HAL_FLASH_Unlock+0x38>)
 800c6b8:	4a09      	ldr	r2, [pc, #36]	; (800c6e0 <HAL_FLASH_Unlock+0x3c>)
 800c6ba:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800c6bc:	4b07      	ldr	r3, [pc, #28]	; (800c6dc <HAL_FLASH_Unlock+0x38>)
 800c6be:	4a09      	ldr	r2, [pc, #36]	; (800c6e4 <HAL_FLASH_Unlock+0x40>)
 800c6c0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800c6c2:	4b06      	ldr	r3, [pc, #24]	; (800c6dc <HAL_FLASH_Unlock+0x38>)
 800c6c4:	691b      	ldr	r3, [r3, #16]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	da01      	bge.n	800c6ce <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800c6ce:	79fb      	ldrb	r3, [r7, #7]
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	370c      	adds	r7, #12
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6da:	4770      	bx	lr
 800c6dc:	40023c00 	.word	0x40023c00
 800c6e0:	45670123 	.word	0x45670123
 800c6e4:	cdef89ab 	.word	0xcdef89ab

0800c6e8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800c6e8:	b480      	push	{r7}
 800c6ea:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800c6ec:	4b05      	ldr	r3, [pc, #20]	; (800c704 <HAL_FLASH_Lock+0x1c>)
 800c6ee:	691b      	ldr	r3, [r3, #16]
 800c6f0:	4a04      	ldr	r2, [pc, #16]	; (800c704 <HAL_FLASH_Lock+0x1c>)
 800c6f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c6f6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800c6f8:	2300      	movs	r3, #0
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c702:	4770      	bx	lr
 800c704:	40023c00 	.word	0x40023c00

0800c708 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800c708:	b580      	push	{r7, lr}
 800c70a:	b084      	sub	sp, #16
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c710:	2300      	movs	r3, #0
 800c712:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c714:	4b1a      	ldr	r3, [pc, #104]	; (800c780 <FLASH_WaitForLastOperation+0x78>)
 800c716:	2200      	movs	r2, #0
 800c718:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800c71a:	f7ff f92d 	bl	800b978 <HAL_GetTick>
 800c71e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800c720:	e010      	b.n	800c744 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c728:	d00c      	beq.n	800c744 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d007      	beq.n	800c740 <FLASH_WaitForLastOperation+0x38>
 800c730:	f7ff f922 	bl	800b978 <HAL_GetTick>
 800c734:	4602      	mov	r2, r0
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	1ad3      	subs	r3, r2, r3
 800c73a:	687a      	ldr	r2, [r7, #4]
 800c73c:	429a      	cmp	r2, r3
 800c73e:	d201      	bcs.n	800c744 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800c740:	2303      	movs	r3, #3
 800c742:	e019      	b.n	800c778 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800c744:	4b0f      	ldr	r3, [pc, #60]	; (800c784 <FLASH_WaitForLastOperation+0x7c>)
 800c746:	68db      	ldr	r3, [r3, #12]
 800c748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d1e8      	bne.n	800c722 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800c750:	4b0c      	ldr	r3, [pc, #48]	; (800c784 <FLASH_WaitForLastOperation+0x7c>)
 800c752:	68db      	ldr	r3, [r3, #12]
 800c754:	f003 0301 	and.w	r3, r3, #1
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d002      	beq.n	800c762 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800c75c:	4b09      	ldr	r3, [pc, #36]	; (800c784 <FLASH_WaitForLastOperation+0x7c>)
 800c75e:	2201      	movs	r2, #1
 800c760:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800c762:	4b08      	ldr	r3, [pc, #32]	; (800c784 <FLASH_WaitForLastOperation+0x7c>)
 800c764:	68db      	ldr	r3, [r3, #12]
 800c766:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d003      	beq.n	800c776 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800c76e:	f000 f8a5 	bl	800c8bc <FLASH_SetErrorCode>
    return HAL_ERROR;
 800c772:	2301      	movs	r3, #1
 800c774:	e000      	b.n	800c778 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800c776:	2300      	movs	r3, #0
  
}  
 800c778:	4618      	mov	r0, r3
 800c77a:	3710      	adds	r7, #16
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}
 800c780:	2000111c 	.word	0x2000111c
 800c784:	40023c00 	.word	0x40023c00

0800c788 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800c788:	b480      	push	{r7}
 800c78a:	b085      	sub	sp, #20
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	60f8      	str	r0, [r7, #12]
 800c790:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800c794:	4b14      	ldr	r3, [pc, #80]	; (800c7e8 <FLASH_Program_DoubleWord+0x60>)
 800c796:	691b      	ldr	r3, [r3, #16]
 800c798:	4a13      	ldr	r2, [pc, #76]	; (800c7e8 <FLASH_Program_DoubleWord+0x60>)
 800c79a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c79e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800c7a0:	4b11      	ldr	r3, [pc, #68]	; (800c7e8 <FLASH_Program_DoubleWord+0x60>)
 800c7a2:	691b      	ldr	r3, [r3, #16]
 800c7a4:	4a10      	ldr	r2, [pc, #64]	; (800c7e8 <FLASH_Program_DoubleWord+0x60>)
 800c7a6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c7aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800c7ac:	4b0e      	ldr	r3, [pc, #56]	; (800c7e8 <FLASH_Program_DoubleWord+0x60>)
 800c7ae:	691b      	ldr	r3, [r3, #16]
 800c7b0:	4a0d      	ldr	r2, [pc, #52]	; (800c7e8 <FLASH_Program_DoubleWord+0x60>)
 800c7b2:	f043 0301 	orr.w	r3, r3, #1
 800c7b6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	683a      	ldr	r2, [r7, #0]
 800c7bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800c7be:	f3bf 8f6f 	isb	sy
}
 800c7c2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800c7c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c7c8:	f04f 0200 	mov.w	r2, #0
 800c7cc:	f04f 0300 	mov.w	r3, #0
 800c7d0:	000a      	movs	r2, r1
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	68f9      	ldr	r1, [r7, #12]
 800c7d6:	3104      	adds	r1, #4
 800c7d8:	4613      	mov	r3, r2
 800c7da:	600b      	str	r3, [r1, #0]
}
 800c7dc:	bf00      	nop
 800c7de:	3714      	adds	r7, #20
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e6:	4770      	bx	lr
 800c7e8:	40023c00 	.word	0x40023c00

0800c7ec <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b083      	sub	sp, #12
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
 800c7f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800c7f6:	4b0d      	ldr	r3, [pc, #52]	; (800c82c <FLASH_Program_Word+0x40>)
 800c7f8:	691b      	ldr	r3, [r3, #16]
 800c7fa:	4a0c      	ldr	r2, [pc, #48]	; (800c82c <FLASH_Program_Word+0x40>)
 800c7fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c800:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800c802:	4b0a      	ldr	r3, [pc, #40]	; (800c82c <FLASH_Program_Word+0x40>)
 800c804:	691b      	ldr	r3, [r3, #16]
 800c806:	4a09      	ldr	r2, [pc, #36]	; (800c82c <FLASH_Program_Word+0x40>)
 800c808:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c80c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800c80e:	4b07      	ldr	r3, [pc, #28]	; (800c82c <FLASH_Program_Word+0x40>)
 800c810:	691b      	ldr	r3, [r3, #16]
 800c812:	4a06      	ldr	r2, [pc, #24]	; (800c82c <FLASH_Program_Word+0x40>)
 800c814:	f043 0301 	orr.w	r3, r3, #1
 800c818:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	683a      	ldr	r2, [r7, #0]
 800c81e:	601a      	str	r2, [r3, #0]
}
 800c820:	bf00      	nop
 800c822:	370c      	adds	r7, #12
 800c824:	46bd      	mov	sp, r7
 800c826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82a:	4770      	bx	lr
 800c82c:	40023c00 	.word	0x40023c00

0800c830 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800c830:	b480      	push	{r7}
 800c832:	b083      	sub	sp, #12
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
 800c838:	460b      	mov	r3, r1
 800c83a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800c83c:	4b0d      	ldr	r3, [pc, #52]	; (800c874 <FLASH_Program_HalfWord+0x44>)
 800c83e:	691b      	ldr	r3, [r3, #16]
 800c840:	4a0c      	ldr	r2, [pc, #48]	; (800c874 <FLASH_Program_HalfWord+0x44>)
 800c842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c846:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800c848:	4b0a      	ldr	r3, [pc, #40]	; (800c874 <FLASH_Program_HalfWord+0x44>)
 800c84a:	691b      	ldr	r3, [r3, #16]
 800c84c:	4a09      	ldr	r2, [pc, #36]	; (800c874 <FLASH_Program_HalfWord+0x44>)
 800c84e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c852:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800c854:	4b07      	ldr	r3, [pc, #28]	; (800c874 <FLASH_Program_HalfWord+0x44>)
 800c856:	691b      	ldr	r3, [r3, #16]
 800c858:	4a06      	ldr	r2, [pc, #24]	; (800c874 <FLASH_Program_HalfWord+0x44>)
 800c85a:	f043 0301 	orr.w	r3, r3, #1
 800c85e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	887a      	ldrh	r2, [r7, #2]
 800c864:	801a      	strh	r2, [r3, #0]
}
 800c866:	bf00      	nop
 800c868:	370c      	adds	r7, #12
 800c86a:	46bd      	mov	sp, r7
 800c86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c870:	4770      	bx	lr
 800c872:	bf00      	nop
 800c874:	40023c00 	.word	0x40023c00

0800c878 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800c878:	b480      	push	{r7}
 800c87a:	b083      	sub	sp, #12
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
 800c880:	460b      	mov	r3, r1
 800c882:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800c884:	4b0c      	ldr	r3, [pc, #48]	; (800c8b8 <FLASH_Program_Byte+0x40>)
 800c886:	691b      	ldr	r3, [r3, #16]
 800c888:	4a0b      	ldr	r2, [pc, #44]	; (800c8b8 <FLASH_Program_Byte+0x40>)
 800c88a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c88e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800c890:	4b09      	ldr	r3, [pc, #36]	; (800c8b8 <FLASH_Program_Byte+0x40>)
 800c892:	4a09      	ldr	r2, [pc, #36]	; (800c8b8 <FLASH_Program_Byte+0x40>)
 800c894:	691b      	ldr	r3, [r3, #16]
 800c896:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800c898:	4b07      	ldr	r3, [pc, #28]	; (800c8b8 <FLASH_Program_Byte+0x40>)
 800c89a:	691b      	ldr	r3, [r3, #16]
 800c89c:	4a06      	ldr	r2, [pc, #24]	; (800c8b8 <FLASH_Program_Byte+0x40>)
 800c89e:	f043 0301 	orr.w	r3, r3, #1
 800c8a2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	78fa      	ldrb	r2, [r7, #3]
 800c8a8:	701a      	strb	r2, [r3, #0]
}
 800c8aa:	bf00      	nop
 800c8ac:	370c      	adds	r7, #12
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b4:	4770      	bx	lr
 800c8b6:	bf00      	nop
 800c8b8:	40023c00 	.word	0x40023c00

0800c8bc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800c8bc:	b480      	push	{r7}
 800c8be:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800c8c0:	4b2f      	ldr	r3, [pc, #188]	; (800c980 <FLASH_SetErrorCode+0xc4>)
 800c8c2:	68db      	ldr	r3, [r3, #12]
 800c8c4:	f003 0310 	and.w	r3, r3, #16
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d008      	beq.n	800c8de <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800c8cc:	4b2d      	ldr	r3, [pc, #180]	; (800c984 <FLASH_SetErrorCode+0xc8>)
 800c8ce:	69db      	ldr	r3, [r3, #28]
 800c8d0:	f043 0310 	orr.w	r3, r3, #16
 800c8d4:	4a2b      	ldr	r2, [pc, #172]	; (800c984 <FLASH_SetErrorCode+0xc8>)
 800c8d6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800c8d8:	4b29      	ldr	r3, [pc, #164]	; (800c980 <FLASH_SetErrorCode+0xc4>)
 800c8da:	2210      	movs	r2, #16
 800c8dc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800c8de:	4b28      	ldr	r3, [pc, #160]	; (800c980 <FLASH_SetErrorCode+0xc4>)
 800c8e0:	68db      	ldr	r3, [r3, #12]
 800c8e2:	f003 0320 	and.w	r3, r3, #32
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d008      	beq.n	800c8fc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800c8ea:	4b26      	ldr	r3, [pc, #152]	; (800c984 <FLASH_SetErrorCode+0xc8>)
 800c8ec:	69db      	ldr	r3, [r3, #28]
 800c8ee:	f043 0308 	orr.w	r3, r3, #8
 800c8f2:	4a24      	ldr	r2, [pc, #144]	; (800c984 <FLASH_SetErrorCode+0xc8>)
 800c8f4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800c8f6:	4b22      	ldr	r3, [pc, #136]	; (800c980 <FLASH_SetErrorCode+0xc4>)
 800c8f8:	2220      	movs	r2, #32
 800c8fa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800c8fc:	4b20      	ldr	r3, [pc, #128]	; (800c980 <FLASH_SetErrorCode+0xc4>)
 800c8fe:	68db      	ldr	r3, [r3, #12]
 800c900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c904:	2b00      	cmp	r3, #0
 800c906:	d008      	beq.n	800c91a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800c908:	4b1e      	ldr	r3, [pc, #120]	; (800c984 <FLASH_SetErrorCode+0xc8>)
 800c90a:	69db      	ldr	r3, [r3, #28]
 800c90c:	f043 0304 	orr.w	r3, r3, #4
 800c910:	4a1c      	ldr	r2, [pc, #112]	; (800c984 <FLASH_SetErrorCode+0xc8>)
 800c912:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800c914:	4b1a      	ldr	r3, [pc, #104]	; (800c980 <FLASH_SetErrorCode+0xc4>)
 800c916:	2240      	movs	r2, #64	; 0x40
 800c918:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800c91a:	4b19      	ldr	r3, [pc, #100]	; (800c980 <FLASH_SetErrorCode+0xc4>)
 800c91c:	68db      	ldr	r3, [r3, #12]
 800c91e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c922:	2b00      	cmp	r3, #0
 800c924:	d008      	beq.n	800c938 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800c926:	4b17      	ldr	r3, [pc, #92]	; (800c984 <FLASH_SetErrorCode+0xc8>)
 800c928:	69db      	ldr	r3, [r3, #28]
 800c92a:	f043 0302 	orr.w	r3, r3, #2
 800c92e:	4a15      	ldr	r2, [pc, #84]	; (800c984 <FLASH_SetErrorCode+0xc8>)
 800c930:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800c932:	4b13      	ldr	r3, [pc, #76]	; (800c980 <FLASH_SetErrorCode+0xc4>)
 800c934:	2280      	movs	r2, #128	; 0x80
 800c936:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800c938:	4b11      	ldr	r3, [pc, #68]	; (800c980 <FLASH_SetErrorCode+0xc4>)
 800c93a:	68db      	ldr	r3, [r3, #12]
 800c93c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c940:	2b00      	cmp	r3, #0
 800c942:	d009      	beq.n	800c958 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800c944:	4b0f      	ldr	r3, [pc, #60]	; (800c984 <FLASH_SetErrorCode+0xc8>)
 800c946:	69db      	ldr	r3, [r3, #28]
 800c948:	f043 0301 	orr.w	r3, r3, #1
 800c94c:	4a0d      	ldr	r2, [pc, #52]	; (800c984 <FLASH_SetErrorCode+0xc8>)
 800c94e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800c950:	4b0b      	ldr	r3, [pc, #44]	; (800c980 <FLASH_SetErrorCode+0xc4>)
 800c952:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c956:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800c958:	4b09      	ldr	r3, [pc, #36]	; (800c980 <FLASH_SetErrorCode+0xc4>)
 800c95a:	68db      	ldr	r3, [r3, #12]
 800c95c:	f003 0302 	and.w	r3, r3, #2
 800c960:	2b00      	cmp	r3, #0
 800c962:	d008      	beq.n	800c976 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800c964:	4b07      	ldr	r3, [pc, #28]	; (800c984 <FLASH_SetErrorCode+0xc8>)
 800c966:	69db      	ldr	r3, [r3, #28]
 800c968:	f043 0320 	orr.w	r3, r3, #32
 800c96c:	4a05      	ldr	r2, [pc, #20]	; (800c984 <FLASH_SetErrorCode+0xc8>)
 800c96e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800c970:	4b03      	ldr	r3, [pc, #12]	; (800c980 <FLASH_SetErrorCode+0xc4>)
 800c972:	2202      	movs	r2, #2
 800c974:	60da      	str	r2, [r3, #12]
  }
}
 800c976:	bf00      	nop
 800c978:	46bd      	mov	sp, r7
 800c97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97e:	4770      	bx	lr
 800c980:	40023c00 	.word	0x40023c00
 800c984:	2000111c 	.word	0x2000111c

0800c988 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800c988:	b480      	push	{r7}
 800c98a:	b085      	sub	sp, #20
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
 800c990:	460b      	mov	r3, r1
 800c992:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800c994:	2300      	movs	r3, #0
 800c996:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800c998:	78fb      	ldrb	r3, [r7, #3]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d102      	bne.n	800c9a4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	60fb      	str	r3, [r7, #12]
 800c9a2:	e010      	b.n	800c9c6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800c9a4:	78fb      	ldrb	r3, [r7, #3]
 800c9a6:	2b01      	cmp	r3, #1
 800c9a8:	d103      	bne.n	800c9b2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800c9aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c9ae:	60fb      	str	r3, [r7, #12]
 800c9b0:	e009      	b.n	800c9c6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800c9b2:	78fb      	ldrb	r3, [r7, #3]
 800c9b4:	2b02      	cmp	r3, #2
 800c9b6:	d103      	bne.n	800c9c0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800c9b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c9bc:	60fb      	str	r3, [r7, #12]
 800c9be:	e002      	b.n	800c9c6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800c9c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c9c4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800c9c6:	4b13      	ldr	r3, [pc, #76]	; (800ca14 <FLASH_Erase_Sector+0x8c>)
 800c9c8:	691b      	ldr	r3, [r3, #16]
 800c9ca:	4a12      	ldr	r2, [pc, #72]	; (800ca14 <FLASH_Erase_Sector+0x8c>)
 800c9cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c9d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800c9d2:	4b10      	ldr	r3, [pc, #64]	; (800ca14 <FLASH_Erase_Sector+0x8c>)
 800c9d4:	691a      	ldr	r2, [r3, #16]
 800c9d6:	490f      	ldr	r1, [pc, #60]	; (800ca14 <FLASH_Erase_Sector+0x8c>)
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	4313      	orrs	r3, r2
 800c9dc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800c9de:	4b0d      	ldr	r3, [pc, #52]	; (800ca14 <FLASH_Erase_Sector+0x8c>)
 800c9e0:	691b      	ldr	r3, [r3, #16]
 800c9e2:	4a0c      	ldr	r2, [pc, #48]	; (800ca14 <FLASH_Erase_Sector+0x8c>)
 800c9e4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800c9e8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800c9ea:	4b0a      	ldr	r3, [pc, #40]	; (800ca14 <FLASH_Erase_Sector+0x8c>)
 800c9ec:	691a      	ldr	r2, [r3, #16]
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	00db      	lsls	r3, r3, #3
 800c9f2:	4313      	orrs	r3, r2
 800c9f4:	4a07      	ldr	r2, [pc, #28]	; (800ca14 <FLASH_Erase_Sector+0x8c>)
 800c9f6:	f043 0302 	orr.w	r3, r3, #2
 800c9fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800c9fc:	4b05      	ldr	r3, [pc, #20]	; (800ca14 <FLASH_Erase_Sector+0x8c>)
 800c9fe:	691b      	ldr	r3, [r3, #16]
 800ca00:	4a04      	ldr	r2, [pc, #16]	; (800ca14 <FLASH_Erase_Sector+0x8c>)
 800ca02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ca06:	6113      	str	r3, [r2, #16]
}
 800ca08:	bf00      	nop
 800ca0a:	3714      	adds	r7, #20
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca12:	4770      	bx	lr
 800ca14:	40023c00 	.word	0x40023c00

0800ca18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ca18:	b480      	push	{r7}
 800ca1a:	b089      	sub	sp, #36	; 0x24
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
 800ca20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800ca22:	2300      	movs	r3, #0
 800ca24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800ca26:	2300      	movs	r3, #0
 800ca28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ca2e:	2300      	movs	r3, #0
 800ca30:	61fb      	str	r3, [r7, #28]
 800ca32:	e159      	b.n	800cce8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800ca34:	2201      	movs	r2, #1
 800ca36:	69fb      	ldr	r3, [r7, #28]
 800ca38:	fa02 f303 	lsl.w	r3, r2, r3
 800ca3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	697a      	ldr	r2, [r7, #20]
 800ca44:	4013      	ands	r3, r2
 800ca46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800ca48:	693a      	ldr	r2, [r7, #16]
 800ca4a:	697b      	ldr	r3, [r7, #20]
 800ca4c:	429a      	cmp	r2, r3
 800ca4e:	f040 8148 	bne.w	800cce2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	685b      	ldr	r3, [r3, #4]
 800ca56:	f003 0303 	and.w	r3, r3, #3
 800ca5a:	2b01      	cmp	r3, #1
 800ca5c:	d005      	beq.n	800ca6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	685b      	ldr	r3, [r3, #4]
 800ca62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800ca66:	2b02      	cmp	r3, #2
 800ca68:	d130      	bne.n	800cacc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	689b      	ldr	r3, [r3, #8]
 800ca6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800ca70:	69fb      	ldr	r3, [r7, #28]
 800ca72:	005b      	lsls	r3, r3, #1
 800ca74:	2203      	movs	r2, #3
 800ca76:	fa02 f303 	lsl.w	r3, r2, r3
 800ca7a:	43db      	mvns	r3, r3
 800ca7c:	69ba      	ldr	r2, [r7, #24]
 800ca7e:	4013      	ands	r3, r2
 800ca80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	68da      	ldr	r2, [r3, #12]
 800ca86:	69fb      	ldr	r3, [r7, #28]
 800ca88:	005b      	lsls	r3, r3, #1
 800ca8a:	fa02 f303 	lsl.w	r3, r2, r3
 800ca8e:	69ba      	ldr	r2, [r7, #24]
 800ca90:	4313      	orrs	r3, r2
 800ca92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	69ba      	ldr	r2, [r7, #24]
 800ca98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	685b      	ldr	r3, [r3, #4]
 800ca9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800caa0:	2201      	movs	r2, #1
 800caa2:	69fb      	ldr	r3, [r7, #28]
 800caa4:	fa02 f303 	lsl.w	r3, r2, r3
 800caa8:	43db      	mvns	r3, r3
 800caaa:	69ba      	ldr	r2, [r7, #24]
 800caac:	4013      	ands	r3, r2
 800caae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	685b      	ldr	r3, [r3, #4]
 800cab4:	091b      	lsrs	r3, r3, #4
 800cab6:	f003 0201 	and.w	r2, r3, #1
 800caba:	69fb      	ldr	r3, [r7, #28]
 800cabc:	fa02 f303 	lsl.w	r3, r2, r3
 800cac0:	69ba      	ldr	r2, [r7, #24]
 800cac2:	4313      	orrs	r3, r2
 800cac4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	69ba      	ldr	r2, [r7, #24]
 800caca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	685b      	ldr	r3, [r3, #4]
 800cad0:	f003 0303 	and.w	r3, r3, #3
 800cad4:	2b03      	cmp	r3, #3
 800cad6:	d017      	beq.n	800cb08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	68db      	ldr	r3, [r3, #12]
 800cadc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800cade:	69fb      	ldr	r3, [r7, #28]
 800cae0:	005b      	lsls	r3, r3, #1
 800cae2:	2203      	movs	r2, #3
 800cae4:	fa02 f303 	lsl.w	r3, r2, r3
 800cae8:	43db      	mvns	r3, r3
 800caea:	69ba      	ldr	r2, [r7, #24]
 800caec:	4013      	ands	r3, r2
 800caee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	689a      	ldr	r2, [r3, #8]
 800caf4:	69fb      	ldr	r3, [r7, #28]
 800caf6:	005b      	lsls	r3, r3, #1
 800caf8:	fa02 f303 	lsl.w	r3, r2, r3
 800cafc:	69ba      	ldr	r2, [r7, #24]
 800cafe:	4313      	orrs	r3, r2
 800cb00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	69ba      	ldr	r2, [r7, #24]
 800cb06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	685b      	ldr	r3, [r3, #4]
 800cb0c:	f003 0303 	and.w	r3, r3, #3
 800cb10:	2b02      	cmp	r3, #2
 800cb12:	d123      	bne.n	800cb5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800cb14:	69fb      	ldr	r3, [r7, #28]
 800cb16:	08da      	lsrs	r2, r3, #3
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	3208      	adds	r2, #8
 800cb1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800cb22:	69fb      	ldr	r3, [r7, #28]
 800cb24:	f003 0307 	and.w	r3, r3, #7
 800cb28:	009b      	lsls	r3, r3, #2
 800cb2a:	220f      	movs	r2, #15
 800cb2c:	fa02 f303 	lsl.w	r3, r2, r3
 800cb30:	43db      	mvns	r3, r3
 800cb32:	69ba      	ldr	r2, [r7, #24]
 800cb34:	4013      	ands	r3, r2
 800cb36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	691a      	ldr	r2, [r3, #16]
 800cb3c:	69fb      	ldr	r3, [r7, #28]
 800cb3e:	f003 0307 	and.w	r3, r3, #7
 800cb42:	009b      	lsls	r3, r3, #2
 800cb44:	fa02 f303 	lsl.w	r3, r2, r3
 800cb48:	69ba      	ldr	r2, [r7, #24]
 800cb4a:	4313      	orrs	r3, r2
 800cb4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800cb4e:	69fb      	ldr	r3, [r7, #28]
 800cb50:	08da      	lsrs	r2, r3, #3
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	3208      	adds	r2, #8
 800cb56:	69b9      	ldr	r1, [r7, #24]
 800cb58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800cb62:	69fb      	ldr	r3, [r7, #28]
 800cb64:	005b      	lsls	r3, r3, #1
 800cb66:	2203      	movs	r2, #3
 800cb68:	fa02 f303 	lsl.w	r3, r2, r3
 800cb6c:	43db      	mvns	r3, r3
 800cb6e:	69ba      	ldr	r2, [r7, #24]
 800cb70:	4013      	ands	r3, r2
 800cb72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	685b      	ldr	r3, [r3, #4]
 800cb78:	f003 0203 	and.w	r2, r3, #3
 800cb7c:	69fb      	ldr	r3, [r7, #28]
 800cb7e:	005b      	lsls	r3, r3, #1
 800cb80:	fa02 f303 	lsl.w	r3, r2, r3
 800cb84:	69ba      	ldr	r2, [r7, #24]
 800cb86:	4313      	orrs	r3, r2
 800cb88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	69ba      	ldr	r2, [r7, #24]
 800cb8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	685b      	ldr	r3, [r3, #4]
 800cb94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	f000 80a2 	beq.w	800cce2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cb9e:	2300      	movs	r3, #0
 800cba0:	60fb      	str	r3, [r7, #12]
 800cba2:	4b57      	ldr	r3, [pc, #348]	; (800cd00 <HAL_GPIO_Init+0x2e8>)
 800cba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cba6:	4a56      	ldr	r2, [pc, #344]	; (800cd00 <HAL_GPIO_Init+0x2e8>)
 800cba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cbac:	6453      	str	r3, [r2, #68]	; 0x44
 800cbae:	4b54      	ldr	r3, [pc, #336]	; (800cd00 <HAL_GPIO_Init+0x2e8>)
 800cbb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cbb6:	60fb      	str	r3, [r7, #12]
 800cbb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800cbba:	4a52      	ldr	r2, [pc, #328]	; (800cd04 <HAL_GPIO_Init+0x2ec>)
 800cbbc:	69fb      	ldr	r3, [r7, #28]
 800cbbe:	089b      	lsrs	r3, r3, #2
 800cbc0:	3302      	adds	r3, #2
 800cbc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800cbc8:	69fb      	ldr	r3, [r7, #28]
 800cbca:	f003 0303 	and.w	r3, r3, #3
 800cbce:	009b      	lsls	r3, r3, #2
 800cbd0:	220f      	movs	r2, #15
 800cbd2:	fa02 f303 	lsl.w	r3, r2, r3
 800cbd6:	43db      	mvns	r3, r3
 800cbd8:	69ba      	ldr	r2, [r7, #24]
 800cbda:	4013      	ands	r3, r2
 800cbdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	4a49      	ldr	r2, [pc, #292]	; (800cd08 <HAL_GPIO_Init+0x2f0>)
 800cbe2:	4293      	cmp	r3, r2
 800cbe4:	d019      	beq.n	800cc1a <HAL_GPIO_Init+0x202>
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	4a48      	ldr	r2, [pc, #288]	; (800cd0c <HAL_GPIO_Init+0x2f4>)
 800cbea:	4293      	cmp	r3, r2
 800cbec:	d013      	beq.n	800cc16 <HAL_GPIO_Init+0x1fe>
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	4a47      	ldr	r2, [pc, #284]	; (800cd10 <HAL_GPIO_Init+0x2f8>)
 800cbf2:	4293      	cmp	r3, r2
 800cbf4:	d00d      	beq.n	800cc12 <HAL_GPIO_Init+0x1fa>
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	4a46      	ldr	r2, [pc, #280]	; (800cd14 <HAL_GPIO_Init+0x2fc>)
 800cbfa:	4293      	cmp	r3, r2
 800cbfc:	d007      	beq.n	800cc0e <HAL_GPIO_Init+0x1f6>
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	4a45      	ldr	r2, [pc, #276]	; (800cd18 <HAL_GPIO_Init+0x300>)
 800cc02:	4293      	cmp	r3, r2
 800cc04:	d101      	bne.n	800cc0a <HAL_GPIO_Init+0x1f2>
 800cc06:	2304      	movs	r3, #4
 800cc08:	e008      	b.n	800cc1c <HAL_GPIO_Init+0x204>
 800cc0a:	2307      	movs	r3, #7
 800cc0c:	e006      	b.n	800cc1c <HAL_GPIO_Init+0x204>
 800cc0e:	2303      	movs	r3, #3
 800cc10:	e004      	b.n	800cc1c <HAL_GPIO_Init+0x204>
 800cc12:	2302      	movs	r3, #2
 800cc14:	e002      	b.n	800cc1c <HAL_GPIO_Init+0x204>
 800cc16:	2301      	movs	r3, #1
 800cc18:	e000      	b.n	800cc1c <HAL_GPIO_Init+0x204>
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	69fa      	ldr	r2, [r7, #28]
 800cc1e:	f002 0203 	and.w	r2, r2, #3
 800cc22:	0092      	lsls	r2, r2, #2
 800cc24:	4093      	lsls	r3, r2
 800cc26:	69ba      	ldr	r2, [r7, #24]
 800cc28:	4313      	orrs	r3, r2
 800cc2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800cc2c:	4935      	ldr	r1, [pc, #212]	; (800cd04 <HAL_GPIO_Init+0x2ec>)
 800cc2e:	69fb      	ldr	r3, [r7, #28]
 800cc30:	089b      	lsrs	r3, r3, #2
 800cc32:	3302      	adds	r3, #2
 800cc34:	69ba      	ldr	r2, [r7, #24]
 800cc36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800cc3a:	4b38      	ldr	r3, [pc, #224]	; (800cd1c <HAL_GPIO_Init+0x304>)
 800cc3c:	689b      	ldr	r3, [r3, #8]
 800cc3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cc40:	693b      	ldr	r3, [r7, #16]
 800cc42:	43db      	mvns	r3, r3
 800cc44:	69ba      	ldr	r2, [r7, #24]
 800cc46:	4013      	ands	r3, r2
 800cc48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	685b      	ldr	r3, [r3, #4]
 800cc4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d003      	beq.n	800cc5e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800cc56:	69ba      	ldr	r2, [r7, #24]
 800cc58:	693b      	ldr	r3, [r7, #16]
 800cc5a:	4313      	orrs	r3, r2
 800cc5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800cc5e:	4a2f      	ldr	r2, [pc, #188]	; (800cd1c <HAL_GPIO_Init+0x304>)
 800cc60:	69bb      	ldr	r3, [r7, #24]
 800cc62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800cc64:	4b2d      	ldr	r3, [pc, #180]	; (800cd1c <HAL_GPIO_Init+0x304>)
 800cc66:	68db      	ldr	r3, [r3, #12]
 800cc68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	43db      	mvns	r3, r3
 800cc6e:	69ba      	ldr	r2, [r7, #24]
 800cc70:	4013      	ands	r3, r2
 800cc72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	685b      	ldr	r3, [r3, #4]
 800cc78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d003      	beq.n	800cc88 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800cc80:	69ba      	ldr	r2, [r7, #24]
 800cc82:	693b      	ldr	r3, [r7, #16]
 800cc84:	4313      	orrs	r3, r2
 800cc86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800cc88:	4a24      	ldr	r2, [pc, #144]	; (800cd1c <HAL_GPIO_Init+0x304>)
 800cc8a:	69bb      	ldr	r3, [r7, #24]
 800cc8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800cc8e:	4b23      	ldr	r3, [pc, #140]	; (800cd1c <HAL_GPIO_Init+0x304>)
 800cc90:	685b      	ldr	r3, [r3, #4]
 800cc92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cc94:	693b      	ldr	r3, [r7, #16]
 800cc96:	43db      	mvns	r3, r3
 800cc98:	69ba      	ldr	r2, [r7, #24]
 800cc9a:	4013      	ands	r3, r2
 800cc9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	685b      	ldr	r3, [r3, #4]
 800cca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d003      	beq.n	800ccb2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800ccaa:	69ba      	ldr	r2, [r7, #24]
 800ccac:	693b      	ldr	r3, [r7, #16]
 800ccae:	4313      	orrs	r3, r2
 800ccb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800ccb2:	4a1a      	ldr	r2, [pc, #104]	; (800cd1c <HAL_GPIO_Init+0x304>)
 800ccb4:	69bb      	ldr	r3, [r7, #24]
 800ccb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ccb8:	4b18      	ldr	r3, [pc, #96]	; (800cd1c <HAL_GPIO_Init+0x304>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ccbe:	693b      	ldr	r3, [r7, #16]
 800ccc0:	43db      	mvns	r3, r3
 800ccc2:	69ba      	ldr	r2, [r7, #24]
 800ccc4:	4013      	ands	r3, r2
 800ccc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	685b      	ldr	r3, [r3, #4]
 800cccc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d003      	beq.n	800ccdc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800ccd4:	69ba      	ldr	r2, [r7, #24]
 800ccd6:	693b      	ldr	r3, [r7, #16]
 800ccd8:	4313      	orrs	r3, r2
 800ccda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800ccdc:	4a0f      	ldr	r2, [pc, #60]	; (800cd1c <HAL_GPIO_Init+0x304>)
 800ccde:	69bb      	ldr	r3, [r7, #24]
 800cce0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800cce2:	69fb      	ldr	r3, [r7, #28]
 800cce4:	3301      	adds	r3, #1
 800cce6:	61fb      	str	r3, [r7, #28]
 800cce8:	69fb      	ldr	r3, [r7, #28]
 800ccea:	2b0f      	cmp	r3, #15
 800ccec:	f67f aea2 	bls.w	800ca34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800ccf0:	bf00      	nop
 800ccf2:	bf00      	nop
 800ccf4:	3724      	adds	r7, #36	; 0x24
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfc:	4770      	bx	lr
 800ccfe:	bf00      	nop
 800cd00:	40023800 	.word	0x40023800
 800cd04:	40013800 	.word	0x40013800
 800cd08:	40020000 	.word	0x40020000
 800cd0c:	40020400 	.word	0x40020400
 800cd10:	40020800 	.word	0x40020800
 800cd14:	40020c00 	.word	0x40020c00
 800cd18:	40021000 	.word	0x40021000
 800cd1c:	40013c00 	.word	0x40013c00

0800cd20 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800cd20:	b480      	push	{r7}
 800cd22:	b087      	sub	sp, #28
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
 800cd28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800cd32:	2300      	movs	r3, #0
 800cd34:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800cd36:	2300      	movs	r3, #0
 800cd38:	617b      	str	r3, [r7, #20]
 800cd3a:	e0bb      	b.n	800ceb4 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800cd3c:	2201      	movs	r2, #1
 800cd3e:	697b      	ldr	r3, [r7, #20]
 800cd40:	fa02 f303 	lsl.w	r3, r2, r3
 800cd44:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800cd46:	683a      	ldr	r2, [r7, #0]
 800cd48:	693b      	ldr	r3, [r7, #16]
 800cd4a:	4013      	ands	r3, r2
 800cd4c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800cd4e:	68fa      	ldr	r2, [r7, #12]
 800cd50:	693b      	ldr	r3, [r7, #16]
 800cd52:	429a      	cmp	r2, r3
 800cd54:	f040 80ab 	bne.w	800ceae <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800cd58:	4a5c      	ldr	r2, [pc, #368]	; (800cecc <HAL_GPIO_DeInit+0x1ac>)
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	089b      	lsrs	r3, r3, #2
 800cd5e:	3302      	adds	r3, #2
 800cd60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd64:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800cd66:	697b      	ldr	r3, [r7, #20]
 800cd68:	f003 0303 	and.w	r3, r3, #3
 800cd6c:	009b      	lsls	r3, r3, #2
 800cd6e:	220f      	movs	r2, #15
 800cd70:	fa02 f303 	lsl.w	r3, r2, r3
 800cd74:	68ba      	ldr	r2, [r7, #8]
 800cd76:	4013      	ands	r3, r2
 800cd78:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	4a54      	ldr	r2, [pc, #336]	; (800ced0 <HAL_GPIO_DeInit+0x1b0>)
 800cd7e:	4293      	cmp	r3, r2
 800cd80:	d019      	beq.n	800cdb6 <HAL_GPIO_DeInit+0x96>
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	4a53      	ldr	r2, [pc, #332]	; (800ced4 <HAL_GPIO_DeInit+0x1b4>)
 800cd86:	4293      	cmp	r3, r2
 800cd88:	d013      	beq.n	800cdb2 <HAL_GPIO_DeInit+0x92>
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	4a52      	ldr	r2, [pc, #328]	; (800ced8 <HAL_GPIO_DeInit+0x1b8>)
 800cd8e:	4293      	cmp	r3, r2
 800cd90:	d00d      	beq.n	800cdae <HAL_GPIO_DeInit+0x8e>
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	4a51      	ldr	r2, [pc, #324]	; (800cedc <HAL_GPIO_DeInit+0x1bc>)
 800cd96:	4293      	cmp	r3, r2
 800cd98:	d007      	beq.n	800cdaa <HAL_GPIO_DeInit+0x8a>
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	4a50      	ldr	r2, [pc, #320]	; (800cee0 <HAL_GPIO_DeInit+0x1c0>)
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	d101      	bne.n	800cda6 <HAL_GPIO_DeInit+0x86>
 800cda2:	2304      	movs	r3, #4
 800cda4:	e008      	b.n	800cdb8 <HAL_GPIO_DeInit+0x98>
 800cda6:	2307      	movs	r3, #7
 800cda8:	e006      	b.n	800cdb8 <HAL_GPIO_DeInit+0x98>
 800cdaa:	2303      	movs	r3, #3
 800cdac:	e004      	b.n	800cdb8 <HAL_GPIO_DeInit+0x98>
 800cdae:	2302      	movs	r3, #2
 800cdb0:	e002      	b.n	800cdb8 <HAL_GPIO_DeInit+0x98>
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	e000      	b.n	800cdb8 <HAL_GPIO_DeInit+0x98>
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	697a      	ldr	r2, [r7, #20]
 800cdba:	f002 0203 	and.w	r2, r2, #3
 800cdbe:	0092      	lsls	r2, r2, #2
 800cdc0:	4093      	lsls	r3, r2
 800cdc2:	68ba      	ldr	r2, [r7, #8]
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	d132      	bne.n	800ce2e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800cdc8:	4b46      	ldr	r3, [pc, #280]	; (800cee4 <HAL_GPIO_DeInit+0x1c4>)
 800cdca:	681a      	ldr	r2, [r3, #0]
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	43db      	mvns	r3, r3
 800cdd0:	4944      	ldr	r1, [pc, #272]	; (800cee4 <HAL_GPIO_DeInit+0x1c4>)
 800cdd2:	4013      	ands	r3, r2
 800cdd4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800cdd6:	4b43      	ldr	r3, [pc, #268]	; (800cee4 <HAL_GPIO_DeInit+0x1c4>)
 800cdd8:	685a      	ldr	r2, [r3, #4]
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	43db      	mvns	r3, r3
 800cdde:	4941      	ldr	r1, [pc, #260]	; (800cee4 <HAL_GPIO_DeInit+0x1c4>)
 800cde0:	4013      	ands	r3, r2
 800cde2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800cde4:	4b3f      	ldr	r3, [pc, #252]	; (800cee4 <HAL_GPIO_DeInit+0x1c4>)
 800cde6:	68da      	ldr	r2, [r3, #12]
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	43db      	mvns	r3, r3
 800cdec:	493d      	ldr	r1, [pc, #244]	; (800cee4 <HAL_GPIO_DeInit+0x1c4>)
 800cdee:	4013      	ands	r3, r2
 800cdf0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800cdf2:	4b3c      	ldr	r3, [pc, #240]	; (800cee4 <HAL_GPIO_DeInit+0x1c4>)
 800cdf4:	689a      	ldr	r2, [r3, #8]
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	43db      	mvns	r3, r3
 800cdfa:	493a      	ldr	r1, [pc, #232]	; (800cee4 <HAL_GPIO_DeInit+0x1c4>)
 800cdfc:	4013      	ands	r3, r2
 800cdfe:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	f003 0303 	and.w	r3, r3, #3
 800ce06:	009b      	lsls	r3, r3, #2
 800ce08:	220f      	movs	r2, #15
 800ce0a:	fa02 f303 	lsl.w	r3, r2, r3
 800ce0e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800ce10:	4a2e      	ldr	r2, [pc, #184]	; (800cecc <HAL_GPIO_DeInit+0x1ac>)
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	089b      	lsrs	r3, r3, #2
 800ce16:	3302      	adds	r3, #2
 800ce18:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	43da      	mvns	r2, r3
 800ce20:	482a      	ldr	r0, [pc, #168]	; (800cecc <HAL_GPIO_DeInit+0x1ac>)
 800ce22:	697b      	ldr	r3, [r7, #20]
 800ce24:	089b      	lsrs	r3, r3, #2
 800ce26:	400a      	ands	r2, r1
 800ce28:	3302      	adds	r3, #2
 800ce2a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681a      	ldr	r2, [r3, #0]
 800ce32:	697b      	ldr	r3, [r7, #20]
 800ce34:	005b      	lsls	r3, r3, #1
 800ce36:	2103      	movs	r1, #3
 800ce38:	fa01 f303 	lsl.w	r3, r1, r3
 800ce3c:	43db      	mvns	r3, r3
 800ce3e:	401a      	ands	r2, r3
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	08da      	lsrs	r2, r3, #3
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	3208      	adds	r2, #8
 800ce4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ce50:	697b      	ldr	r3, [r7, #20]
 800ce52:	f003 0307 	and.w	r3, r3, #7
 800ce56:	009b      	lsls	r3, r3, #2
 800ce58:	220f      	movs	r2, #15
 800ce5a:	fa02 f303 	lsl.w	r3, r2, r3
 800ce5e:	43db      	mvns	r3, r3
 800ce60:	697a      	ldr	r2, [r7, #20]
 800ce62:	08d2      	lsrs	r2, r2, #3
 800ce64:	4019      	ands	r1, r3
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	3208      	adds	r2, #8
 800ce6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	68da      	ldr	r2, [r3, #12]
 800ce72:	697b      	ldr	r3, [r7, #20]
 800ce74:	005b      	lsls	r3, r3, #1
 800ce76:	2103      	movs	r1, #3
 800ce78:	fa01 f303 	lsl.w	r3, r1, r3
 800ce7c:	43db      	mvns	r3, r3
 800ce7e:	401a      	ands	r2, r3
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	685a      	ldr	r2, [r3, #4]
 800ce88:	2101      	movs	r1, #1
 800ce8a:	697b      	ldr	r3, [r7, #20]
 800ce8c:	fa01 f303 	lsl.w	r3, r1, r3
 800ce90:	43db      	mvns	r3, r3
 800ce92:	401a      	ands	r2, r3
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	689a      	ldr	r2, [r3, #8]
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	005b      	lsls	r3, r3, #1
 800cea0:	2103      	movs	r1, #3
 800cea2:	fa01 f303 	lsl.w	r3, r1, r3
 800cea6:	43db      	mvns	r3, r3
 800cea8:	401a      	ands	r2, r3
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	3301      	adds	r3, #1
 800ceb2:	617b      	str	r3, [r7, #20]
 800ceb4:	697b      	ldr	r3, [r7, #20]
 800ceb6:	2b0f      	cmp	r3, #15
 800ceb8:	f67f af40 	bls.w	800cd3c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800cebc:	bf00      	nop
 800cebe:	bf00      	nop
 800cec0:	371c      	adds	r7, #28
 800cec2:	46bd      	mov	sp, r7
 800cec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec8:	4770      	bx	lr
 800ceca:	bf00      	nop
 800cecc:	40013800 	.word	0x40013800
 800ced0:	40020000 	.word	0x40020000
 800ced4:	40020400 	.word	0x40020400
 800ced8:	40020800 	.word	0x40020800
 800cedc:	40020c00 	.word	0x40020c00
 800cee0:	40021000 	.word	0x40021000
 800cee4:	40013c00 	.word	0x40013c00

0800cee8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800cee8:	b480      	push	{r7}
 800ceea:	b085      	sub	sp, #20
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
 800cef0:	460b      	mov	r3, r1
 800cef2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	691a      	ldr	r2, [r3, #16]
 800cef8:	887b      	ldrh	r3, [r7, #2]
 800cefa:	4013      	ands	r3, r2
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d002      	beq.n	800cf06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800cf00:	2301      	movs	r3, #1
 800cf02:	73fb      	strb	r3, [r7, #15]
 800cf04:	e001      	b.n	800cf0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800cf06:	2300      	movs	r3, #0
 800cf08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800cf0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	3714      	adds	r7, #20
 800cf10:	46bd      	mov	sp, r7
 800cf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf16:	4770      	bx	lr

0800cf18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800cf18:	b480      	push	{r7}
 800cf1a:	b083      	sub	sp, #12
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
 800cf20:	460b      	mov	r3, r1
 800cf22:	807b      	strh	r3, [r7, #2]
 800cf24:	4613      	mov	r3, r2
 800cf26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800cf28:	787b      	ldrb	r3, [r7, #1]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d003      	beq.n	800cf36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800cf2e:	887a      	ldrh	r2, [r7, #2]
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800cf34:	e003      	b.n	800cf3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800cf36:	887b      	ldrh	r3, [r7, #2]
 800cf38:	041a      	lsls	r2, r3, #16
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	619a      	str	r2, [r3, #24]
}
 800cf3e:	bf00      	nop
 800cf40:	370c      	adds	r7, #12
 800cf42:	46bd      	mov	sp, r7
 800cf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf48:	4770      	bx	lr
	...

0800cf4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b084      	sub	sp, #16
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d101      	bne.n	800cf5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	e12b      	b.n	800d1b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf64:	b2db      	uxtb	r3, r3
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d106      	bne.n	800cf78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	f7fb fd00 	bl	8008978 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2224      	movs	r2, #36	; 0x24
 800cf7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	681a      	ldr	r2, [r3, #0]
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	f022 0201 	bic.w	r2, r2, #1
 800cf8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	681a      	ldr	r2, [r3, #0]
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cf9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	681a      	ldr	r2, [r3, #0]
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cfae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800cfb0:	f002 fe38 	bl	800fc24 <HAL_RCC_GetPCLK1Freq>
 800cfb4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	685b      	ldr	r3, [r3, #4]
 800cfba:	4a81      	ldr	r2, [pc, #516]	; (800d1c0 <HAL_I2C_Init+0x274>)
 800cfbc:	4293      	cmp	r3, r2
 800cfbe:	d807      	bhi.n	800cfd0 <HAL_I2C_Init+0x84>
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	4a80      	ldr	r2, [pc, #512]	; (800d1c4 <HAL_I2C_Init+0x278>)
 800cfc4:	4293      	cmp	r3, r2
 800cfc6:	bf94      	ite	ls
 800cfc8:	2301      	movls	r3, #1
 800cfca:	2300      	movhi	r3, #0
 800cfcc:	b2db      	uxtb	r3, r3
 800cfce:	e006      	b.n	800cfde <HAL_I2C_Init+0x92>
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	4a7d      	ldr	r2, [pc, #500]	; (800d1c8 <HAL_I2C_Init+0x27c>)
 800cfd4:	4293      	cmp	r3, r2
 800cfd6:	bf94      	ite	ls
 800cfd8:	2301      	movls	r3, #1
 800cfda:	2300      	movhi	r3, #0
 800cfdc:	b2db      	uxtb	r3, r3
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d001      	beq.n	800cfe6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800cfe2:	2301      	movs	r3, #1
 800cfe4:	e0e7      	b.n	800d1b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	4a78      	ldr	r2, [pc, #480]	; (800d1cc <HAL_I2C_Init+0x280>)
 800cfea:	fba2 2303 	umull	r2, r3, r2, r3
 800cfee:	0c9b      	lsrs	r3, r3, #18
 800cff0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	685b      	ldr	r3, [r3, #4]
 800cff8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	68ba      	ldr	r2, [r7, #8]
 800d002:	430a      	orrs	r2, r1
 800d004:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	6a1b      	ldr	r3, [r3, #32]
 800d00c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	685b      	ldr	r3, [r3, #4]
 800d014:	4a6a      	ldr	r2, [pc, #424]	; (800d1c0 <HAL_I2C_Init+0x274>)
 800d016:	4293      	cmp	r3, r2
 800d018:	d802      	bhi.n	800d020 <HAL_I2C_Init+0xd4>
 800d01a:	68bb      	ldr	r3, [r7, #8]
 800d01c:	3301      	adds	r3, #1
 800d01e:	e009      	b.n	800d034 <HAL_I2C_Init+0xe8>
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800d026:	fb02 f303 	mul.w	r3, r2, r3
 800d02a:	4a69      	ldr	r2, [pc, #420]	; (800d1d0 <HAL_I2C_Init+0x284>)
 800d02c:	fba2 2303 	umull	r2, r3, r2, r3
 800d030:	099b      	lsrs	r3, r3, #6
 800d032:	3301      	adds	r3, #1
 800d034:	687a      	ldr	r2, [r7, #4]
 800d036:	6812      	ldr	r2, [r2, #0]
 800d038:	430b      	orrs	r3, r1
 800d03a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	69db      	ldr	r3, [r3, #28]
 800d042:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800d046:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	685b      	ldr	r3, [r3, #4]
 800d04e:	495c      	ldr	r1, [pc, #368]	; (800d1c0 <HAL_I2C_Init+0x274>)
 800d050:	428b      	cmp	r3, r1
 800d052:	d819      	bhi.n	800d088 <HAL_I2C_Init+0x13c>
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	1e59      	subs	r1, r3, #1
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	685b      	ldr	r3, [r3, #4]
 800d05c:	005b      	lsls	r3, r3, #1
 800d05e:	fbb1 f3f3 	udiv	r3, r1, r3
 800d062:	1c59      	adds	r1, r3, #1
 800d064:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d068:	400b      	ands	r3, r1
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d00a      	beq.n	800d084 <HAL_I2C_Init+0x138>
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	1e59      	subs	r1, r3, #1
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	685b      	ldr	r3, [r3, #4]
 800d076:	005b      	lsls	r3, r3, #1
 800d078:	fbb1 f3f3 	udiv	r3, r1, r3
 800d07c:	3301      	adds	r3, #1
 800d07e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d082:	e051      	b.n	800d128 <HAL_I2C_Init+0x1dc>
 800d084:	2304      	movs	r3, #4
 800d086:	e04f      	b.n	800d128 <HAL_I2C_Init+0x1dc>
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	689b      	ldr	r3, [r3, #8]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d111      	bne.n	800d0b4 <HAL_I2C_Init+0x168>
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	1e58      	subs	r0, r3, #1
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6859      	ldr	r1, [r3, #4]
 800d098:	460b      	mov	r3, r1
 800d09a:	005b      	lsls	r3, r3, #1
 800d09c:	440b      	add	r3, r1
 800d09e:	fbb0 f3f3 	udiv	r3, r0, r3
 800d0a2:	3301      	adds	r3, #1
 800d0a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	bf0c      	ite	eq
 800d0ac:	2301      	moveq	r3, #1
 800d0ae:	2300      	movne	r3, #0
 800d0b0:	b2db      	uxtb	r3, r3
 800d0b2:	e012      	b.n	800d0da <HAL_I2C_Init+0x18e>
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	1e58      	subs	r0, r3, #1
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	6859      	ldr	r1, [r3, #4]
 800d0bc:	460b      	mov	r3, r1
 800d0be:	009b      	lsls	r3, r3, #2
 800d0c0:	440b      	add	r3, r1
 800d0c2:	0099      	lsls	r1, r3, #2
 800d0c4:	440b      	add	r3, r1
 800d0c6:	fbb0 f3f3 	udiv	r3, r0, r3
 800d0ca:	3301      	adds	r3, #1
 800d0cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	bf0c      	ite	eq
 800d0d4:	2301      	moveq	r3, #1
 800d0d6:	2300      	movne	r3, #0
 800d0d8:	b2db      	uxtb	r3, r3
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d001      	beq.n	800d0e2 <HAL_I2C_Init+0x196>
 800d0de:	2301      	movs	r3, #1
 800d0e0:	e022      	b.n	800d128 <HAL_I2C_Init+0x1dc>
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	689b      	ldr	r3, [r3, #8]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d10e      	bne.n	800d108 <HAL_I2C_Init+0x1bc>
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	1e58      	subs	r0, r3, #1
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6859      	ldr	r1, [r3, #4]
 800d0f2:	460b      	mov	r3, r1
 800d0f4:	005b      	lsls	r3, r3, #1
 800d0f6:	440b      	add	r3, r1
 800d0f8:	fbb0 f3f3 	udiv	r3, r0, r3
 800d0fc:	3301      	adds	r3, #1
 800d0fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d102:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d106:	e00f      	b.n	800d128 <HAL_I2C_Init+0x1dc>
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	1e58      	subs	r0, r3, #1
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	6859      	ldr	r1, [r3, #4]
 800d110:	460b      	mov	r3, r1
 800d112:	009b      	lsls	r3, r3, #2
 800d114:	440b      	add	r3, r1
 800d116:	0099      	lsls	r1, r3, #2
 800d118:	440b      	add	r3, r1
 800d11a:	fbb0 f3f3 	udiv	r3, r0, r3
 800d11e:	3301      	adds	r3, #1
 800d120:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d124:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d128:	6879      	ldr	r1, [r7, #4]
 800d12a:	6809      	ldr	r1, [r1, #0]
 800d12c:	4313      	orrs	r3, r2
 800d12e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	69da      	ldr	r2, [r3, #28]
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6a1b      	ldr	r3, [r3, #32]
 800d142:	431a      	orrs	r2, r3
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	430a      	orrs	r2, r1
 800d14a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	689b      	ldr	r3, [r3, #8]
 800d152:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800d156:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d15a:	687a      	ldr	r2, [r7, #4]
 800d15c:	6911      	ldr	r1, [r2, #16]
 800d15e:	687a      	ldr	r2, [r7, #4]
 800d160:	68d2      	ldr	r2, [r2, #12]
 800d162:	4311      	orrs	r1, r2
 800d164:	687a      	ldr	r2, [r7, #4]
 800d166:	6812      	ldr	r2, [r2, #0]
 800d168:	430b      	orrs	r3, r1
 800d16a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	68db      	ldr	r3, [r3, #12]
 800d172:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	695a      	ldr	r2, [r3, #20]
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	699b      	ldr	r3, [r3, #24]
 800d17e:	431a      	orrs	r2, r3
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	430a      	orrs	r2, r1
 800d186:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	681a      	ldr	r2, [r3, #0]
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	f042 0201 	orr.w	r2, r2, #1
 800d196:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2200      	movs	r2, #0
 800d19c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	2220      	movs	r2, #32
 800d1a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800d1b4:	2300      	movs	r3, #0
}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	3710      	adds	r7, #16
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}
 800d1be:	bf00      	nop
 800d1c0:	000186a0 	.word	0x000186a0
 800d1c4:	001e847f 	.word	0x001e847f
 800d1c8:	003d08ff 	.word	0x003d08ff
 800d1cc:	431bde83 	.word	0x431bde83
 800d1d0:	10624dd3 	.word	0x10624dd3

0800d1d4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b088      	sub	sp, #32
 800d1d8:	af02      	add	r7, sp, #8
 800d1da:	60f8      	str	r0, [r7, #12]
 800d1dc:	4608      	mov	r0, r1
 800d1de:	4611      	mov	r1, r2
 800d1e0:	461a      	mov	r2, r3
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	817b      	strh	r3, [r7, #10]
 800d1e6:	460b      	mov	r3, r1
 800d1e8:	813b      	strh	r3, [r7, #8]
 800d1ea:	4613      	mov	r3, r2
 800d1ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d1ee:	f7fe fbc3 	bl	800b978 <HAL_GetTick>
 800d1f2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d1fa:	b2db      	uxtb	r3, r3
 800d1fc:	2b20      	cmp	r3, #32
 800d1fe:	f040 80d9 	bne.w	800d3b4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	9300      	str	r3, [sp, #0]
 800d206:	2319      	movs	r3, #25
 800d208:	2201      	movs	r2, #1
 800d20a:	496d      	ldr	r1, [pc, #436]	; (800d3c0 <HAL_I2C_Mem_Write+0x1ec>)
 800d20c:	68f8      	ldr	r0, [r7, #12]
 800d20e:	f000 fc7f 	bl	800db10 <I2C_WaitOnFlagUntilTimeout>
 800d212:	4603      	mov	r3, r0
 800d214:	2b00      	cmp	r3, #0
 800d216:	d001      	beq.n	800d21c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800d218:	2302      	movs	r3, #2
 800d21a:	e0cc      	b.n	800d3b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d222:	2b01      	cmp	r3, #1
 800d224:	d101      	bne.n	800d22a <HAL_I2C_Mem_Write+0x56>
 800d226:	2302      	movs	r3, #2
 800d228:	e0c5      	b.n	800d3b6 <HAL_I2C_Mem_Write+0x1e2>
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	2201      	movs	r2, #1
 800d22e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	f003 0301 	and.w	r3, r3, #1
 800d23c:	2b01      	cmp	r3, #1
 800d23e:	d007      	beq.n	800d250 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	681a      	ldr	r2, [r3, #0]
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	f042 0201 	orr.w	r2, r2, #1
 800d24e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	681a      	ldr	r2, [r3, #0]
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d25e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	2221      	movs	r2, #33	; 0x21
 800d264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	2240      	movs	r2, #64	; 0x40
 800d26c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	2200      	movs	r2, #0
 800d274:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	6a3a      	ldr	r2, [r7, #32]
 800d27a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d280:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d286:	b29a      	uxth	r2, r3
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	4a4d      	ldr	r2, [pc, #308]	; (800d3c4 <HAL_I2C_Mem_Write+0x1f0>)
 800d290:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d292:	88f8      	ldrh	r0, [r7, #6]
 800d294:	893a      	ldrh	r2, [r7, #8]
 800d296:	8979      	ldrh	r1, [r7, #10]
 800d298:	697b      	ldr	r3, [r7, #20]
 800d29a:	9301      	str	r3, [sp, #4]
 800d29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d29e:	9300      	str	r3, [sp, #0]
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	68f8      	ldr	r0, [r7, #12]
 800d2a4:	f000 fab6 	bl	800d814 <I2C_RequestMemoryWrite>
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d052      	beq.n	800d354 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800d2ae:	2301      	movs	r3, #1
 800d2b0:	e081      	b.n	800d3b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d2b2:	697a      	ldr	r2, [r7, #20]
 800d2b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d2b6:	68f8      	ldr	r0, [r7, #12]
 800d2b8:	f000 fd00 	bl	800dcbc <I2C_WaitOnTXEFlagUntilTimeout>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d00d      	beq.n	800d2de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2c6:	2b04      	cmp	r3, #4
 800d2c8:	d107      	bne.n	800d2da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	681a      	ldr	r2, [r3, #0]
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d2d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d2da:	2301      	movs	r3, #1
 800d2dc:	e06b      	b.n	800d3b6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2e2:	781a      	ldrb	r2, [r3, #0]
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2ee:	1c5a      	adds	r2, r3, #1
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2f8:	3b01      	subs	r3, #1
 800d2fa:	b29a      	uxth	r2, r3
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d304:	b29b      	uxth	r3, r3
 800d306:	3b01      	subs	r3, #1
 800d308:	b29a      	uxth	r2, r3
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	695b      	ldr	r3, [r3, #20]
 800d314:	f003 0304 	and.w	r3, r3, #4
 800d318:	2b04      	cmp	r3, #4
 800d31a:	d11b      	bne.n	800d354 <HAL_I2C_Mem_Write+0x180>
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d320:	2b00      	cmp	r3, #0
 800d322:	d017      	beq.n	800d354 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d328:	781a      	ldrb	r2, [r3, #0]
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d334:	1c5a      	adds	r2, r3, #1
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d33e:	3b01      	subs	r3, #1
 800d340:	b29a      	uxth	r2, r3
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d34a:	b29b      	uxth	r3, r3
 800d34c:	3b01      	subs	r3, #1
 800d34e:	b29a      	uxth	r2, r3
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d1aa      	bne.n	800d2b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d35c:	697a      	ldr	r2, [r7, #20]
 800d35e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d360:	68f8      	ldr	r0, [r7, #12]
 800d362:	f000 fcec 	bl	800dd3e <I2C_WaitOnBTFFlagUntilTimeout>
 800d366:	4603      	mov	r3, r0
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d00d      	beq.n	800d388 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d370:	2b04      	cmp	r3, #4
 800d372:	d107      	bne.n	800d384 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	681a      	ldr	r2, [r3, #0]
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d382:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d384:	2301      	movs	r3, #1
 800d386:	e016      	b.n	800d3b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	681a      	ldr	r2, [r3, #0]
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d396:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	2220      	movs	r2, #32
 800d39c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	e000      	b.n	800d3b6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800d3b4:	2302      	movs	r3, #2
  }
}
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	3718      	adds	r7, #24
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	bd80      	pop	{r7, pc}
 800d3be:	bf00      	nop
 800d3c0:	00100002 	.word	0x00100002
 800d3c4:	ffff0000 	.word	0xffff0000

0800d3c8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b08c      	sub	sp, #48	; 0x30
 800d3cc:	af02      	add	r7, sp, #8
 800d3ce:	60f8      	str	r0, [r7, #12]
 800d3d0:	4608      	mov	r0, r1
 800d3d2:	4611      	mov	r1, r2
 800d3d4:	461a      	mov	r2, r3
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	817b      	strh	r3, [r7, #10]
 800d3da:	460b      	mov	r3, r1
 800d3dc:	813b      	strh	r3, [r7, #8]
 800d3de:	4613      	mov	r3, r2
 800d3e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d3e2:	f7fe fac9 	bl	800b978 <HAL_GetTick>
 800d3e6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d3ee:	b2db      	uxtb	r3, r3
 800d3f0:	2b20      	cmp	r3, #32
 800d3f2:	f040 8208 	bne.w	800d806 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3f8:	9300      	str	r3, [sp, #0]
 800d3fa:	2319      	movs	r3, #25
 800d3fc:	2201      	movs	r2, #1
 800d3fe:	497b      	ldr	r1, [pc, #492]	; (800d5ec <HAL_I2C_Mem_Read+0x224>)
 800d400:	68f8      	ldr	r0, [r7, #12]
 800d402:	f000 fb85 	bl	800db10 <I2C_WaitOnFlagUntilTimeout>
 800d406:	4603      	mov	r3, r0
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d001      	beq.n	800d410 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800d40c:	2302      	movs	r3, #2
 800d40e:	e1fb      	b.n	800d808 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d416:	2b01      	cmp	r3, #1
 800d418:	d101      	bne.n	800d41e <HAL_I2C_Mem_Read+0x56>
 800d41a:	2302      	movs	r3, #2
 800d41c:	e1f4      	b.n	800d808 <HAL_I2C_Mem_Read+0x440>
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	2201      	movs	r2, #1
 800d422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	f003 0301 	and.w	r3, r3, #1
 800d430:	2b01      	cmp	r3, #1
 800d432:	d007      	beq.n	800d444 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	681a      	ldr	r2, [r3, #0]
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	f042 0201 	orr.w	r2, r2, #1
 800d442:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	681a      	ldr	r2, [r3, #0]
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d452:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	2222      	movs	r2, #34	; 0x22
 800d458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	2240      	movs	r2, #64	; 0x40
 800d460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	2200      	movs	r2, #0
 800d468:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d46e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800d474:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d47a:	b29a      	uxth	r2, r3
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	4a5b      	ldr	r2, [pc, #364]	; (800d5f0 <HAL_I2C_Mem_Read+0x228>)
 800d484:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d486:	88f8      	ldrh	r0, [r7, #6]
 800d488:	893a      	ldrh	r2, [r7, #8]
 800d48a:	8979      	ldrh	r1, [r7, #10]
 800d48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d48e:	9301      	str	r3, [sp, #4]
 800d490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d492:	9300      	str	r3, [sp, #0]
 800d494:	4603      	mov	r3, r0
 800d496:	68f8      	ldr	r0, [r7, #12]
 800d498:	f000 fa52 	bl	800d940 <I2C_RequestMemoryRead>
 800d49c:	4603      	mov	r3, r0
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d001      	beq.n	800d4a6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	e1b0      	b.n	800d808 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d113      	bne.n	800d4d6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	623b      	str	r3, [r7, #32]
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	695b      	ldr	r3, [r3, #20]
 800d4b8:	623b      	str	r3, [r7, #32]
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	699b      	ldr	r3, [r3, #24]
 800d4c0:	623b      	str	r3, [r7, #32]
 800d4c2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	681a      	ldr	r2, [r3, #0]
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d4d2:	601a      	str	r2, [r3, #0]
 800d4d4:	e184      	b.n	800d7e0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d4da:	2b01      	cmp	r3, #1
 800d4dc:	d11b      	bne.n	800d516 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	681a      	ldr	r2, [r3, #0]
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d4ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	61fb      	str	r3, [r7, #28]
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	695b      	ldr	r3, [r3, #20]
 800d4f8:	61fb      	str	r3, [r7, #28]
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	699b      	ldr	r3, [r3, #24]
 800d500:	61fb      	str	r3, [r7, #28]
 800d502:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	681a      	ldr	r2, [r3, #0]
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d512:	601a      	str	r2, [r3, #0]
 800d514:	e164      	b.n	800d7e0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d51a:	2b02      	cmp	r3, #2
 800d51c:	d11b      	bne.n	800d556 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	681a      	ldr	r2, [r3, #0]
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d52c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	681a      	ldr	r2, [r3, #0]
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d53c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d53e:	2300      	movs	r3, #0
 800d540:	61bb      	str	r3, [r7, #24]
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	695b      	ldr	r3, [r3, #20]
 800d548:	61bb      	str	r3, [r7, #24]
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	699b      	ldr	r3, [r3, #24]
 800d550:	61bb      	str	r3, [r7, #24]
 800d552:	69bb      	ldr	r3, [r7, #24]
 800d554:	e144      	b.n	800d7e0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d556:	2300      	movs	r3, #0
 800d558:	617b      	str	r3, [r7, #20]
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	695b      	ldr	r3, [r3, #20]
 800d560:	617b      	str	r3, [r7, #20]
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	699b      	ldr	r3, [r3, #24]
 800d568:	617b      	str	r3, [r7, #20]
 800d56a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800d56c:	e138      	b.n	800d7e0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d572:	2b03      	cmp	r3, #3
 800d574:	f200 80f1 	bhi.w	800d75a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d57c:	2b01      	cmp	r3, #1
 800d57e:	d123      	bne.n	800d5c8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d582:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d584:	68f8      	ldr	r0, [r7, #12]
 800d586:	f000 fc1b 	bl	800ddc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d58a:	4603      	mov	r3, r0
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d001      	beq.n	800d594 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800d590:	2301      	movs	r3, #1
 800d592:	e139      	b.n	800d808 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	691a      	ldr	r2, [r3, #16]
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d59e:	b2d2      	uxtb	r2, r2
 800d5a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5a6:	1c5a      	adds	r2, r3, #1
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d5b0:	3b01      	subs	r3, #1
 800d5b2:	b29a      	uxth	r2, r3
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d5bc:	b29b      	uxth	r3, r3
 800d5be:	3b01      	subs	r3, #1
 800d5c0:	b29a      	uxth	r2, r3
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d5c6:	e10b      	b.n	800d7e0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d5cc:	2b02      	cmp	r3, #2
 800d5ce:	d14e      	bne.n	800d66e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5d2:	9300      	str	r3, [sp, #0]
 800d5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	4906      	ldr	r1, [pc, #24]	; (800d5f4 <HAL_I2C_Mem_Read+0x22c>)
 800d5da:	68f8      	ldr	r0, [r7, #12]
 800d5dc:	f000 fa98 	bl	800db10 <I2C_WaitOnFlagUntilTimeout>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d008      	beq.n	800d5f8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800d5e6:	2301      	movs	r3, #1
 800d5e8:	e10e      	b.n	800d808 <HAL_I2C_Mem_Read+0x440>
 800d5ea:	bf00      	nop
 800d5ec:	00100002 	.word	0x00100002
 800d5f0:	ffff0000 	.word	0xffff0000
 800d5f4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	681a      	ldr	r2, [r3, #0]
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d606:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	691a      	ldr	r2, [r3, #16]
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d612:	b2d2      	uxtb	r2, r2
 800d614:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d61a:	1c5a      	adds	r2, r3, #1
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d624:	3b01      	subs	r3, #1
 800d626:	b29a      	uxth	r2, r3
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d630:	b29b      	uxth	r3, r3
 800d632:	3b01      	subs	r3, #1
 800d634:	b29a      	uxth	r2, r3
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	691a      	ldr	r2, [r3, #16]
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d644:	b2d2      	uxtb	r2, r2
 800d646:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d64c:	1c5a      	adds	r2, r3, #1
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d656:	3b01      	subs	r3, #1
 800d658:	b29a      	uxth	r2, r3
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d662:	b29b      	uxth	r3, r3
 800d664:	3b01      	subs	r3, #1
 800d666:	b29a      	uxth	r2, r3
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d66c:	e0b8      	b.n	800d7e0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d670:	9300      	str	r3, [sp, #0]
 800d672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d674:	2200      	movs	r2, #0
 800d676:	4966      	ldr	r1, [pc, #408]	; (800d810 <HAL_I2C_Mem_Read+0x448>)
 800d678:	68f8      	ldr	r0, [r7, #12]
 800d67a:	f000 fa49 	bl	800db10 <I2C_WaitOnFlagUntilTimeout>
 800d67e:	4603      	mov	r3, r0
 800d680:	2b00      	cmp	r3, #0
 800d682:	d001      	beq.n	800d688 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800d684:	2301      	movs	r3, #1
 800d686:	e0bf      	b.n	800d808 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	681a      	ldr	r2, [r3, #0]
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d696:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	691a      	ldr	r2, [r3, #16]
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6a2:	b2d2      	uxtb	r2, r2
 800d6a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6aa:	1c5a      	adds	r2, r3, #1
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d6b4:	3b01      	subs	r3, #1
 800d6b6:	b29a      	uxth	r2, r3
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d6c0:	b29b      	uxth	r3, r3
 800d6c2:	3b01      	subs	r3, #1
 800d6c4:	b29a      	uxth	r2, r3
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6cc:	9300      	str	r3, [sp, #0]
 800d6ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	494f      	ldr	r1, [pc, #316]	; (800d810 <HAL_I2C_Mem_Read+0x448>)
 800d6d4:	68f8      	ldr	r0, [r7, #12]
 800d6d6:	f000 fa1b 	bl	800db10 <I2C_WaitOnFlagUntilTimeout>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d001      	beq.n	800d6e4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800d6e0:	2301      	movs	r3, #1
 800d6e2:	e091      	b.n	800d808 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	681a      	ldr	r2, [r3, #0]
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d6f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	691a      	ldr	r2, [r3, #16]
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6fe:	b2d2      	uxtb	r2, r2
 800d700:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d706:	1c5a      	adds	r2, r3, #1
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d710:	3b01      	subs	r3, #1
 800d712:	b29a      	uxth	r2, r3
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d71c:	b29b      	uxth	r3, r3
 800d71e:	3b01      	subs	r3, #1
 800d720:	b29a      	uxth	r2, r3
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	691a      	ldr	r2, [r3, #16]
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d730:	b2d2      	uxtb	r2, r2
 800d732:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d738:	1c5a      	adds	r2, r3, #1
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d742:	3b01      	subs	r3, #1
 800d744:	b29a      	uxth	r2, r3
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d74e:	b29b      	uxth	r3, r3
 800d750:	3b01      	subs	r3, #1
 800d752:	b29a      	uxth	r2, r3
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d758:	e042      	b.n	800d7e0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d75a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d75c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d75e:	68f8      	ldr	r0, [r7, #12]
 800d760:	f000 fb2e 	bl	800ddc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d764:	4603      	mov	r3, r0
 800d766:	2b00      	cmp	r3, #0
 800d768:	d001      	beq.n	800d76e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800d76a:	2301      	movs	r3, #1
 800d76c:	e04c      	b.n	800d808 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	691a      	ldr	r2, [r3, #16]
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d778:	b2d2      	uxtb	r2, r2
 800d77a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d780:	1c5a      	adds	r2, r3, #1
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d78a:	3b01      	subs	r3, #1
 800d78c:	b29a      	uxth	r2, r3
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d796:	b29b      	uxth	r3, r3
 800d798:	3b01      	subs	r3, #1
 800d79a:	b29a      	uxth	r2, r3
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	695b      	ldr	r3, [r3, #20]
 800d7a6:	f003 0304 	and.w	r3, r3, #4
 800d7aa:	2b04      	cmp	r3, #4
 800d7ac:	d118      	bne.n	800d7e0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	691a      	ldr	r2, [r3, #16]
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7b8:	b2d2      	uxtb	r2, r2
 800d7ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7c0:	1c5a      	adds	r2, r3, #1
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d7ca:	3b01      	subs	r3, #1
 800d7cc:	b29a      	uxth	r2, r3
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d7d6:	b29b      	uxth	r3, r3
 800d7d8:	3b01      	subs	r3, #1
 800d7da:	b29a      	uxth	r2, r3
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	f47f aec2 	bne.w	800d56e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	2220      	movs	r2, #32
 800d7ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d802:	2300      	movs	r3, #0
 800d804:	e000      	b.n	800d808 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800d806:	2302      	movs	r3, #2
  }
}
 800d808:	4618      	mov	r0, r3
 800d80a:	3728      	adds	r7, #40	; 0x28
 800d80c:	46bd      	mov	sp, r7
 800d80e:	bd80      	pop	{r7, pc}
 800d810:	00010004 	.word	0x00010004

0800d814 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b088      	sub	sp, #32
 800d818:	af02      	add	r7, sp, #8
 800d81a:	60f8      	str	r0, [r7, #12]
 800d81c:	4608      	mov	r0, r1
 800d81e:	4611      	mov	r1, r2
 800d820:	461a      	mov	r2, r3
 800d822:	4603      	mov	r3, r0
 800d824:	817b      	strh	r3, [r7, #10]
 800d826:	460b      	mov	r3, r1
 800d828:	813b      	strh	r3, [r7, #8]
 800d82a:	4613      	mov	r3, r2
 800d82c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	681a      	ldr	r2, [r3, #0]
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d83c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d840:	9300      	str	r3, [sp, #0]
 800d842:	6a3b      	ldr	r3, [r7, #32]
 800d844:	2200      	movs	r2, #0
 800d846:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d84a:	68f8      	ldr	r0, [r7, #12]
 800d84c:	f000 f960 	bl	800db10 <I2C_WaitOnFlagUntilTimeout>
 800d850:	4603      	mov	r3, r0
 800d852:	2b00      	cmp	r3, #0
 800d854:	d00d      	beq.n	800d872 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d860:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d864:	d103      	bne.n	800d86e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d86c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d86e:	2303      	movs	r3, #3
 800d870:	e05f      	b.n	800d932 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d872:	897b      	ldrh	r3, [r7, #10]
 800d874:	b2db      	uxtb	r3, r3
 800d876:	461a      	mov	r2, r3
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d880:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d884:	6a3a      	ldr	r2, [r7, #32]
 800d886:	492d      	ldr	r1, [pc, #180]	; (800d93c <I2C_RequestMemoryWrite+0x128>)
 800d888:	68f8      	ldr	r0, [r7, #12]
 800d88a:	f000 f998 	bl	800dbbe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d88e:	4603      	mov	r3, r0
 800d890:	2b00      	cmp	r3, #0
 800d892:	d001      	beq.n	800d898 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800d894:	2301      	movs	r3, #1
 800d896:	e04c      	b.n	800d932 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d898:	2300      	movs	r3, #0
 800d89a:	617b      	str	r3, [r7, #20]
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	695b      	ldr	r3, [r3, #20]
 800d8a2:	617b      	str	r3, [r7, #20]
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	699b      	ldr	r3, [r3, #24]
 800d8aa:	617b      	str	r3, [r7, #20]
 800d8ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d8ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8b0:	6a39      	ldr	r1, [r7, #32]
 800d8b2:	68f8      	ldr	r0, [r7, #12]
 800d8b4:	f000 fa02 	bl	800dcbc <I2C_WaitOnTXEFlagUntilTimeout>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d00d      	beq.n	800d8da <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8c2:	2b04      	cmp	r3, #4
 800d8c4:	d107      	bne.n	800d8d6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	681a      	ldr	r2, [r3, #0]
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d8d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	e02b      	b.n	800d932 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d8da:	88fb      	ldrh	r3, [r7, #6]
 800d8dc:	2b01      	cmp	r3, #1
 800d8de:	d105      	bne.n	800d8ec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d8e0:	893b      	ldrh	r3, [r7, #8]
 800d8e2:	b2da      	uxtb	r2, r3
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	611a      	str	r2, [r3, #16]
 800d8ea:	e021      	b.n	800d930 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800d8ec:	893b      	ldrh	r3, [r7, #8]
 800d8ee:	0a1b      	lsrs	r3, r3, #8
 800d8f0:	b29b      	uxth	r3, r3
 800d8f2:	b2da      	uxtb	r2, r3
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d8fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8fc:	6a39      	ldr	r1, [r7, #32]
 800d8fe:	68f8      	ldr	r0, [r7, #12]
 800d900:	f000 f9dc 	bl	800dcbc <I2C_WaitOnTXEFlagUntilTimeout>
 800d904:	4603      	mov	r3, r0
 800d906:	2b00      	cmp	r3, #0
 800d908:	d00d      	beq.n	800d926 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d90e:	2b04      	cmp	r3, #4
 800d910:	d107      	bne.n	800d922 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	681a      	ldr	r2, [r3, #0]
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d920:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d922:	2301      	movs	r3, #1
 800d924:	e005      	b.n	800d932 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d926:	893b      	ldrh	r3, [r7, #8]
 800d928:	b2da      	uxtb	r2, r3
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800d930:	2300      	movs	r3, #0
}
 800d932:	4618      	mov	r0, r3
 800d934:	3718      	adds	r7, #24
 800d936:	46bd      	mov	sp, r7
 800d938:	bd80      	pop	{r7, pc}
 800d93a:	bf00      	nop
 800d93c:	00010002 	.word	0x00010002

0800d940 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b088      	sub	sp, #32
 800d944:	af02      	add	r7, sp, #8
 800d946:	60f8      	str	r0, [r7, #12]
 800d948:	4608      	mov	r0, r1
 800d94a:	4611      	mov	r1, r2
 800d94c:	461a      	mov	r2, r3
 800d94e:	4603      	mov	r3, r0
 800d950:	817b      	strh	r3, [r7, #10]
 800d952:	460b      	mov	r3, r1
 800d954:	813b      	strh	r3, [r7, #8]
 800d956:	4613      	mov	r3, r2
 800d958:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	681a      	ldr	r2, [r3, #0]
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d968:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	681a      	ldr	r2, [r3, #0]
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d978:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d97c:	9300      	str	r3, [sp, #0]
 800d97e:	6a3b      	ldr	r3, [r7, #32]
 800d980:	2200      	movs	r2, #0
 800d982:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d986:	68f8      	ldr	r0, [r7, #12]
 800d988:	f000 f8c2 	bl	800db10 <I2C_WaitOnFlagUntilTimeout>
 800d98c:	4603      	mov	r3, r0
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d00d      	beq.n	800d9ae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d99c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d9a0:	d103      	bne.n	800d9aa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d9a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d9aa:	2303      	movs	r3, #3
 800d9ac:	e0aa      	b.n	800db04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d9ae:	897b      	ldrh	r3, [r7, #10]
 800d9b0:	b2db      	uxtb	r3, r3
 800d9b2:	461a      	mov	r2, r3
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d9bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c0:	6a3a      	ldr	r2, [r7, #32]
 800d9c2:	4952      	ldr	r1, [pc, #328]	; (800db0c <I2C_RequestMemoryRead+0x1cc>)
 800d9c4:	68f8      	ldr	r0, [r7, #12]
 800d9c6:	f000 f8fa 	bl	800dbbe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d001      	beq.n	800d9d4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800d9d0:	2301      	movs	r3, #1
 800d9d2:	e097      	b.n	800db04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	617b      	str	r3, [r7, #20]
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	695b      	ldr	r3, [r3, #20]
 800d9de:	617b      	str	r3, [r7, #20]
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	699b      	ldr	r3, [r3, #24]
 800d9e6:	617b      	str	r3, [r7, #20]
 800d9e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d9ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9ec:	6a39      	ldr	r1, [r7, #32]
 800d9ee:	68f8      	ldr	r0, [r7, #12]
 800d9f0:	f000 f964 	bl	800dcbc <I2C_WaitOnTXEFlagUntilTimeout>
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d00d      	beq.n	800da16 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9fe:	2b04      	cmp	r3, #4
 800da00:	d107      	bne.n	800da12 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	681a      	ldr	r2, [r3, #0]
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800da10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800da12:	2301      	movs	r3, #1
 800da14:	e076      	b.n	800db04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800da16:	88fb      	ldrh	r3, [r7, #6]
 800da18:	2b01      	cmp	r3, #1
 800da1a:	d105      	bne.n	800da28 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800da1c:	893b      	ldrh	r3, [r7, #8]
 800da1e:	b2da      	uxtb	r2, r3
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	611a      	str	r2, [r3, #16]
 800da26:	e021      	b.n	800da6c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800da28:	893b      	ldrh	r3, [r7, #8]
 800da2a:	0a1b      	lsrs	r3, r3, #8
 800da2c:	b29b      	uxth	r3, r3
 800da2e:	b2da      	uxtb	r2, r3
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800da36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da38:	6a39      	ldr	r1, [r7, #32]
 800da3a:	68f8      	ldr	r0, [r7, #12]
 800da3c:	f000 f93e 	bl	800dcbc <I2C_WaitOnTXEFlagUntilTimeout>
 800da40:	4603      	mov	r3, r0
 800da42:	2b00      	cmp	r3, #0
 800da44:	d00d      	beq.n	800da62 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da4a:	2b04      	cmp	r3, #4
 800da4c:	d107      	bne.n	800da5e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	681a      	ldr	r2, [r3, #0]
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800da5c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800da5e:	2301      	movs	r3, #1
 800da60:	e050      	b.n	800db04 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800da62:	893b      	ldrh	r3, [r7, #8]
 800da64:	b2da      	uxtb	r2, r3
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800da6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da6e:	6a39      	ldr	r1, [r7, #32]
 800da70:	68f8      	ldr	r0, [r7, #12]
 800da72:	f000 f923 	bl	800dcbc <I2C_WaitOnTXEFlagUntilTimeout>
 800da76:	4603      	mov	r3, r0
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d00d      	beq.n	800da98 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da80:	2b04      	cmp	r3, #4
 800da82:	d107      	bne.n	800da94 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	681a      	ldr	r2, [r3, #0]
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800da92:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800da94:	2301      	movs	r3, #1
 800da96:	e035      	b.n	800db04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	681a      	ldr	r2, [r3, #0]
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800daa6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800daa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daaa:	9300      	str	r3, [sp, #0]
 800daac:	6a3b      	ldr	r3, [r7, #32]
 800daae:	2200      	movs	r2, #0
 800dab0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800dab4:	68f8      	ldr	r0, [r7, #12]
 800dab6:	f000 f82b 	bl	800db10 <I2C_WaitOnFlagUntilTimeout>
 800daba:	4603      	mov	r3, r0
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d00d      	beq.n	800dadc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800daca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dace:	d103      	bne.n	800dad8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dad6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800dad8:	2303      	movs	r3, #3
 800dada:	e013      	b.n	800db04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800dadc:	897b      	ldrh	r3, [r7, #10]
 800dade:	b2db      	uxtb	r3, r3
 800dae0:	f043 0301 	orr.w	r3, r3, #1
 800dae4:	b2da      	uxtb	r2, r3
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800daec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daee:	6a3a      	ldr	r2, [r7, #32]
 800daf0:	4906      	ldr	r1, [pc, #24]	; (800db0c <I2C_RequestMemoryRead+0x1cc>)
 800daf2:	68f8      	ldr	r0, [r7, #12]
 800daf4:	f000 f863 	bl	800dbbe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800daf8:	4603      	mov	r3, r0
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d001      	beq.n	800db02 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800dafe:	2301      	movs	r3, #1
 800db00:	e000      	b.n	800db04 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800db02:	2300      	movs	r3, #0
}
 800db04:	4618      	mov	r0, r3
 800db06:	3718      	adds	r7, #24
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}
 800db0c:	00010002 	.word	0x00010002

0800db10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b084      	sub	sp, #16
 800db14:	af00      	add	r7, sp, #0
 800db16:	60f8      	str	r0, [r7, #12]
 800db18:	60b9      	str	r1, [r7, #8]
 800db1a:	603b      	str	r3, [r7, #0]
 800db1c:	4613      	mov	r3, r2
 800db1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800db20:	e025      	b.n	800db6e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db28:	d021      	beq.n	800db6e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800db2a:	f7fd ff25 	bl	800b978 <HAL_GetTick>
 800db2e:	4602      	mov	r2, r0
 800db30:	69bb      	ldr	r3, [r7, #24]
 800db32:	1ad3      	subs	r3, r2, r3
 800db34:	683a      	ldr	r2, [r7, #0]
 800db36:	429a      	cmp	r2, r3
 800db38:	d302      	bcc.n	800db40 <I2C_WaitOnFlagUntilTimeout+0x30>
 800db3a:	683b      	ldr	r3, [r7, #0]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d116      	bne.n	800db6e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	2200      	movs	r2, #0
 800db44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	2220      	movs	r2, #32
 800db4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	2200      	movs	r2, #0
 800db52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db5a:	f043 0220 	orr.w	r2, r3, #32
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	2200      	movs	r2, #0
 800db66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800db6a:	2301      	movs	r3, #1
 800db6c:	e023      	b.n	800dbb6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800db6e:	68bb      	ldr	r3, [r7, #8]
 800db70:	0c1b      	lsrs	r3, r3, #16
 800db72:	b2db      	uxtb	r3, r3
 800db74:	2b01      	cmp	r3, #1
 800db76:	d10d      	bne.n	800db94 <I2C_WaitOnFlagUntilTimeout+0x84>
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	695b      	ldr	r3, [r3, #20]
 800db7e:	43da      	mvns	r2, r3
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	4013      	ands	r3, r2
 800db84:	b29b      	uxth	r3, r3
 800db86:	2b00      	cmp	r3, #0
 800db88:	bf0c      	ite	eq
 800db8a:	2301      	moveq	r3, #1
 800db8c:	2300      	movne	r3, #0
 800db8e:	b2db      	uxtb	r3, r3
 800db90:	461a      	mov	r2, r3
 800db92:	e00c      	b.n	800dbae <I2C_WaitOnFlagUntilTimeout+0x9e>
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	699b      	ldr	r3, [r3, #24]
 800db9a:	43da      	mvns	r2, r3
 800db9c:	68bb      	ldr	r3, [r7, #8]
 800db9e:	4013      	ands	r3, r2
 800dba0:	b29b      	uxth	r3, r3
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	bf0c      	ite	eq
 800dba6:	2301      	moveq	r3, #1
 800dba8:	2300      	movne	r3, #0
 800dbaa:	b2db      	uxtb	r3, r3
 800dbac:	461a      	mov	r2, r3
 800dbae:	79fb      	ldrb	r3, [r7, #7]
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	d0b6      	beq.n	800db22 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800dbb4:	2300      	movs	r3, #0
}
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	3710      	adds	r7, #16
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd80      	pop	{r7, pc}

0800dbbe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800dbbe:	b580      	push	{r7, lr}
 800dbc0:	b084      	sub	sp, #16
 800dbc2:	af00      	add	r7, sp, #0
 800dbc4:	60f8      	str	r0, [r7, #12]
 800dbc6:	60b9      	str	r1, [r7, #8]
 800dbc8:	607a      	str	r2, [r7, #4]
 800dbca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800dbcc:	e051      	b.n	800dc72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	695b      	ldr	r3, [r3, #20]
 800dbd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dbd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dbdc:	d123      	bne.n	800dc26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	681a      	ldr	r2, [r3, #0]
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dbec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800dbf6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	2220      	movs	r2, #32
 800dc02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	2200      	movs	r2, #0
 800dc0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc12:	f043 0204 	orr.w	r2, r3, #4
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800dc22:	2301      	movs	r3, #1
 800dc24:	e046      	b.n	800dcb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc2c:	d021      	beq.n	800dc72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dc2e:	f7fd fea3 	bl	800b978 <HAL_GetTick>
 800dc32:	4602      	mov	r2, r0
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	1ad3      	subs	r3, r2, r3
 800dc38:	687a      	ldr	r2, [r7, #4]
 800dc3a:	429a      	cmp	r2, r3
 800dc3c:	d302      	bcc.n	800dc44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d116      	bne.n	800dc72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	2200      	movs	r2, #0
 800dc48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	2220      	movs	r2, #32
 800dc4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	2200      	movs	r2, #0
 800dc56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc5e:	f043 0220 	orr.w	r2, r3, #32
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	2200      	movs	r2, #0
 800dc6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800dc6e:	2301      	movs	r3, #1
 800dc70:	e020      	b.n	800dcb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	0c1b      	lsrs	r3, r3, #16
 800dc76:	b2db      	uxtb	r3, r3
 800dc78:	2b01      	cmp	r3, #1
 800dc7a:	d10c      	bne.n	800dc96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	695b      	ldr	r3, [r3, #20]
 800dc82:	43da      	mvns	r2, r3
 800dc84:	68bb      	ldr	r3, [r7, #8]
 800dc86:	4013      	ands	r3, r2
 800dc88:	b29b      	uxth	r3, r3
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	bf14      	ite	ne
 800dc8e:	2301      	movne	r3, #1
 800dc90:	2300      	moveq	r3, #0
 800dc92:	b2db      	uxtb	r3, r3
 800dc94:	e00b      	b.n	800dcae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	699b      	ldr	r3, [r3, #24]
 800dc9c:	43da      	mvns	r2, r3
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	4013      	ands	r3, r2
 800dca2:	b29b      	uxth	r3, r3
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	bf14      	ite	ne
 800dca8:	2301      	movne	r3, #1
 800dcaa:	2300      	moveq	r3, #0
 800dcac:	b2db      	uxtb	r3, r3
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d18d      	bne.n	800dbce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800dcb2:	2300      	movs	r3, #0
}
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	3710      	adds	r7, #16
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bd80      	pop	{r7, pc}

0800dcbc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b084      	sub	sp, #16
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	60f8      	str	r0, [r7, #12]
 800dcc4:	60b9      	str	r1, [r7, #8]
 800dcc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800dcc8:	e02d      	b.n	800dd26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800dcca:	68f8      	ldr	r0, [r7, #12]
 800dccc:	f000 f8ce 	bl	800de6c <I2C_IsAcknowledgeFailed>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d001      	beq.n	800dcda <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800dcd6:	2301      	movs	r3, #1
 800dcd8:	e02d      	b.n	800dd36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dcda:	68bb      	ldr	r3, [r7, #8]
 800dcdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dce0:	d021      	beq.n	800dd26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dce2:	f7fd fe49 	bl	800b978 <HAL_GetTick>
 800dce6:	4602      	mov	r2, r0
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	1ad3      	subs	r3, r2, r3
 800dcec:	68ba      	ldr	r2, [r7, #8]
 800dcee:	429a      	cmp	r2, r3
 800dcf0:	d302      	bcc.n	800dcf8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d116      	bne.n	800dd26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	2220      	movs	r2, #32
 800dd02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	2200      	movs	r2, #0
 800dd0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd12:	f043 0220 	orr.w	r2, r3, #32
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800dd22:	2301      	movs	r3, #1
 800dd24:	e007      	b.n	800dd36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	695b      	ldr	r3, [r3, #20]
 800dd2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd30:	2b80      	cmp	r3, #128	; 0x80
 800dd32:	d1ca      	bne.n	800dcca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800dd34:	2300      	movs	r3, #0
}
 800dd36:	4618      	mov	r0, r3
 800dd38:	3710      	adds	r7, #16
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	bd80      	pop	{r7, pc}

0800dd3e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800dd3e:	b580      	push	{r7, lr}
 800dd40:	b084      	sub	sp, #16
 800dd42:	af00      	add	r7, sp, #0
 800dd44:	60f8      	str	r0, [r7, #12]
 800dd46:	60b9      	str	r1, [r7, #8]
 800dd48:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800dd4a:	e02d      	b.n	800dda8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800dd4c:	68f8      	ldr	r0, [r7, #12]
 800dd4e:	f000 f88d 	bl	800de6c <I2C_IsAcknowledgeFailed>
 800dd52:	4603      	mov	r3, r0
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d001      	beq.n	800dd5c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800dd58:	2301      	movs	r3, #1
 800dd5a:	e02d      	b.n	800ddb8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dd5c:	68bb      	ldr	r3, [r7, #8]
 800dd5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd62:	d021      	beq.n	800dda8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dd64:	f7fd fe08 	bl	800b978 <HAL_GetTick>
 800dd68:	4602      	mov	r2, r0
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	1ad3      	subs	r3, r2, r3
 800dd6e:	68ba      	ldr	r2, [r7, #8]
 800dd70:	429a      	cmp	r2, r3
 800dd72:	d302      	bcc.n	800dd7a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d116      	bne.n	800dda8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	2220      	movs	r2, #32
 800dd84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd94:	f043 0220 	orr.w	r2, r3, #32
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	2200      	movs	r2, #0
 800dda0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800dda4:	2301      	movs	r3, #1
 800dda6:	e007      	b.n	800ddb8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	695b      	ldr	r3, [r3, #20]
 800ddae:	f003 0304 	and.w	r3, r3, #4
 800ddb2:	2b04      	cmp	r3, #4
 800ddb4:	d1ca      	bne.n	800dd4c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ddb6:	2300      	movs	r3, #0
}
 800ddb8:	4618      	mov	r0, r3
 800ddba:	3710      	adds	r7, #16
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	bd80      	pop	{r7, pc}

0800ddc0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b084      	sub	sp, #16
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	60f8      	str	r0, [r7, #12]
 800ddc8:	60b9      	str	r1, [r7, #8]
 800ddca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ddcc:	e042      	b.n	800de54 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	695b      	ldr	r3, [r3, #20]
 800ddd4:	f003 0310 	and.w	r3, r3, #16
 800ddd8:	2b10      	cmp	r3, #16
 800ddda:	d119      	bne.n	800de10 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	f06f 0210 	mvn.w	r2, #16
 800dde4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	2200      	movs	r2, #0
 800ddea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	2220      	movs	r2, #32
 800ddf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	2200      	movs	r2, #0
 800de08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800de0c:	2301      	movs	r3, #1
 800de0e:	e029      	b.n	800de64 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800de10:	f7fd fdb2 	bl	800b978 <HAL_GetTick>
 800de14:	4602      	mov	r2, r0
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	1ad3      	subs	r3, r2, r3
 800de1a:	68ba      	ldr	r2, [r7, #8]
 800de1c:	429a      	cmp	r2, r3
 800de1e:	d302      	bcc.n	800de26 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800de20:	68bb      	ldr	r3, [r7, #8]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d116      	bne.n	800de54 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	2200      	movs	r2, #0
 800de2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	2220      	movs	r2, #32
 800de30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	2200      	movs	r2, #0
 800de38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de40:	f043 0220 	orr.w	r2, r3, #32
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	2200      	movs	r2, #0
 800de4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800de50:	2301      	movs	r3, #1
 800de52:	e007      	b.n	800de64 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	695b      	ldr	r3, [r3, #20]
 800de5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de5e:	2b40      	cmp	r3, #64	; 0x40
 800de60:	d1b5      	bne.n	800ddce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800de62:	2300      	movs	r3, #0
}
 800de64:	4618      	mov	r0, r3
 800de66:	3710      	adds	r7, #16
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd80      	pop	{r7, pc}

0800de6c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800de6c:	b480      	push	{r7}
 800de6e:	b083      	sub	sp, #12
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	695b      	ldr	r3, [r3, #20]
 800de7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800de7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800de82:	d11b      	bne.n	800debc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800de8c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	2200      	movs	r2, #0
 800de92:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2220      	movs	r2, #32
 800de98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	2200      	movs	r2, #0
 800dea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dea8:	f043 0204 	orr.w	r2, r3, #4
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2200      	movs	r2, #0
 800deb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800deb8:	2301      	movs	r3, #1
 800deba:	e000      	b.n	800debe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800debc:	2300      	movs	r3, #0
}
 800debe:	4618      	mov	r0, r3
 800dec0:	370c      	adds	r7, #12
 800dec2:	46bd      	mov	sp, r7
 800dec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec8:	4770      	bx	lr

0800deca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800deca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800decc:	b08f      	sub	sp, #60	; 0x3c
 800dece:	af0a      	add	r7, sp, #40	; 0x28
 800ded0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d101      	bne.n	800dedc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800ded8:	2301      	movs	r3, #1
 800deda:	e10f      	b.n	800e0fc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800dee8:	b2db      	uxtb	r3, r3
 800deea:	2b00      	cmp	r3, #0
 800deec:	d106      	bne.n	800defc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	2200      	movs	r2, #0
 800def2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800def6:	6878      	ldr	r0, [r7, #4]
 800def8:	f007 fda8 	bl	8015a4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	2203      	movs	r2, #3
 800df00:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800df04:	68bb      	ldr	r3, [r7, #8]
 800df06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d102      	bne.n	800df16 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2200      	movs	r2, #0
 800df14:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	4618      	mov	r0, r3
 800df1c:	f004 f877 	bl	801200e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	603b      	str	r3, [r7, #0]
 800df26:	687e      	ldr	r6, [r7, #4]
 800df28:	466d      	mov	r5, sp
 800df2a:	f106 0410 	add.w	r4, r6, #16
 800df2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800df30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800df32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800df34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800df36:	e894 0003 	ldmia.w	r4, {r0, r1}
 800df3a:	e885 0003 	stmia.w	r5, {r0, r1}
 800df3e:	1d33      	adds	r3, r6, #4
 800df40:	cb0e      	ldmia	r3, {r1, r2, r3}
 800df42:	6838      	ldr	r0, [r7, #0]
 800df44:	f003 ff4e 	bl	8011de4 <USB_CoreInit>
 800df48:	4603      	mov	r3, r0
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d005      	beq.n	800df5a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	2202      	movs	r2, #2
 800df52:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800df56:	2301      	movs	r3, #1
 800df58:	e0d0      	b.n	800e0fc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	2100      	movs	r1, #0
 800df60:	4618      	mov	r0, r3
 800df62:	f004 f865 	bl	8012030 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800df66:	2300      	movs	r3, #0
 800df68:	73fb      	strb	r3, [r7, #15]
 800df6a:	e04a      	b.n	800e002 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800df6c:	7bfa      	ldrb	r2, [r7, #15]
 800df6e:	6879      	ldr	r1, [r7, #4]
 800df70:	4613      	mov	r3, r2
 800df72:	00db      	lsls	r3, r3, #3
 800df74:	4413      	add	r3, r2
 800df76:	009b      	lsls	r3, r3, #2
 800df78:	440b      	add	r3, r1
 800df7a:	333d      	adds	r3, #61	; 0x3d
 800df7c:	2201      	movs	r2, #1
 800df7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800df80:	7bfa      	ldrb	r2, [r7, #15]
 800df82:	6879      	ldr	r1, [r7, #4]
 800df84:	4613      	mov	r3, r2
 800df86:	00db      	lsls	r3, r3, #3
 800df88:	4413      	add	r3, r2
 800df8a:	009b      	lsls	r3, r3, #2
 800df8c:	440b      	add	r3, r1
 800df8e:	333c      	adds	r3, #60	; 0x3c
 800df90:	7bfa      	ldrb	r2, [r7, #15]
 800df92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800df94:	7bfa      	ldrb	r2, [r7, #15]
 800df96:	7bfb      	ldrb	r3, [r7, #15]
 800df98:	b298      	uxth	r0, r3
 800df9a:	6879      	ldr	r1, [r7, #4]
 800df9c:	4613      	mov	r3, r2
 800df9e:	00db      	lsls	r3, r3, #3
 800dfa0:	4413      	add	r3, r2
 800dfa2:	009b      	lsls	r3, r3, #2
 800dfa4:	440b      	add	r3, r1
 800dfa6:	3344      	adds	r3, #68	; 0x44
 800dfa8:	4602      	mov	r2, r0
 800dfaa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800dfac:	7bfa      	ldrb	r2, [r7, #15]
 800dfae:	6879      	ldr	r1, [r7, #4]
 800dfb0:	4613      	mov	r3, r2
 800dfb2:	00db      	lsls	r3, r3, #3
 800dfb4:	4413      	add	r3, r2
 800dfb6:	009b      	lsls	r3, r3, #2
 800dfb8:	440b      	add	r3, r1
 800dfba:	3340      	adds	r3, #64	; 0x40
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800dfc0:	7bfa      	ldrb	r2, [r7, #15]
 800dfc2:	6879      	ldr	r1, [r7, #4]
 800dfc4:	4613      	mov	r3, r2
 800dfc6:	00db      	lsls	r3, r3, #3
 800dfc8:	4413      	add	r3, r2
 800dfca:	009b      	lsls	r3, r3, #2
 800dfcc:	440b      	add	r3, r1
 800dfce:	3348      	adds	r3, #72	; 0x48
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800dfd4:	7bfa      	ldrb	r2, [r7, #15]
 800dfd6:	6879      	ldr	r1, [r7, #4]
 800dfd8:	4613      	mov	r3, r2
 800dfda:	00db      	lsls	r3, r3, #3
 800dfdc:	4413      	add	r3, r2
 800dfde:	009b      	lsls	r3, r3, #2
 800dfe0:	440b      	add	r3, r1
 800dfe2:	334c      	adds	r3, #76	; 0x4c
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800dfe8:	7bfa      	ldrb	r2, [r7, #15]
 800dfea:	6879      	ldr	r1, [r7, #4]
 800dfec:	4613      	mov	r3, r2
 800dfee:	00db      	lsls	r3, r3, #3
 800dff0:	4413      	add	r3, r2
 800dff2:	009b      	lsls	r3, r3, #2
 800dff4:	440b      	add	r3, r1
 800dff6:	3354      	adds	r3, #84	; 0x54
 800dff8:	2200      	movs	r2, #0
 800dffa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dffc:	7bfb      	ldrb	r3, [r7, #15]
 800dffe:	3301      	adds	r3, #1
 800e000:	73fb      	strb	r3, [r7, #15]
 800e002:	7bfa      	ldrb	r2, [r7, #15]
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	685b      	ldr	r3, [r3, #4]
 800e008:	429a      	cmp	r2, r3
 800e00a:	d3af      	bcc.n	800df6c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e00c:	2300      	movs	r3, #0
 800e00e:	73fb      	strb	r3, [r7, #15]
 800e010:	e044      	b.n	800e09c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800e012:	7bfa      	ldrb	r2, [r7, #15]
 800e014:	6879      	ldr	r1, [r7, #4]
 800e016:	4613      	mov	r3, r2
 800e018:	00db      	lsls	r3, r3, #3
 800e01a:	4413      	add	r3, r2
 800e01c:	009b      	lsls	r3, r3, #2
 800e01e:	440b      	add	r3, r1
 800e020:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800e024:	2200      	movs	r2, #0
 800e026:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800e028:	7bfa      	ldrb	r2, [r7, #15]
 800e02a:	6879      	ldr	r1, [r7, #4]
 800e02c:	4613      	mov	r3, r2
 800e02e:	00db      	lsls	r3, r3, #3
 800e030:	4413      	add	r3, r2
 800e032:	009b      	lsls	r3, r3, #2
 800e034:	440b      	add	r3, r1
 800e036:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800e03a:	7bfa      	ldrb	r2, [r7, #15]
 800e03c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800e03e:	7bfa      	ldrb	r2, [r7, #15]
 800e040:	6879      	ldr	r1, [r7, #4]
 800e042:	4613      	mov	r3, r2
 800e044:	00db      	lsls	r3, r3, #3
 800e046:	4413      	add	r3, r2
 800e048:	009b      	lsls	r3, r3, #2
 800e04a:	440b      	add	r3, r1
 800e04c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800e050:	2200      	movs	r2, #0
 800e052:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800e054:	7bfa      	ldrb	r2, [r7, #15]
 800e056:	6879      	ldr	r1, [r7, #4]
 800e058:	4613      	mov	r3, r2
 800e05a:	00db      	lsls	r3, r3, #3
 800e05c:	4413      	add	r3, r2
 800e05e:	009b      	lsls	r3, r3, #2
 800e060:	440b      	add	r3, r1
 800e062:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800e066:	2200      	movs	r2, #0
 800e068:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800e06a:	7bfa      	ldrb	r2, [r7, #15]
 800e06c:	6879      	ldr	r1, [r7, #4]
 800e06e:	4613      	mov	r3, r2
 800e070:	00db      	lsls	r3, r3, #3
 800e072:	4413      	add	r3, r2
 800e074:	009b      	lsls	r3, r3, #2
 800e076:	440b      	add	r3, r1
 800e078:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e07c:	2200      	movs	r2, #0
 800e07e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800e080:	7bfa      	ldrb	r2, [r7, #15]
 800e082:	6879      	ldr	r1, [r7, #4]
 800e084:	4613      	mov	r3, r2
 800e086:	00db      	lsls	r3, r3, #3
 800e088:	4413      	add	r3, r2
 800e08a:	009b      	lsls	r3, r3, #2
 800e08c:	440b      	add	r3, r1
 800e08e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800e092:	2200      	movs	r2, #0
 800e094:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e096:	7bfb      	ldrb	r3, [r7, #15]
 800e098:	3301      	adds	r3, #1
 800e09a:	73fb      	strb	r3, [r7, #15]
 800e09c:	7bfa      	ldrb	r2, [r7, #15]
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	685b      	ldr	r3, [r3, #4]
 800e0a2:	429a      	cmp	r2, r3
 800e0a4:	d3b5      	bcc.n	800e012 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	603b      	str	r3, [r7, #0]
 800e0ac:	687e      	ldr	r6, [r7, #4]
 800e0ae:	466d      	mov	r5, sp
 800e0b0:	f106 0410 	add.w	r4, r6, #16
 800e0b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e0b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e0b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e0ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e0bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e0c0:	e885 0003 	stmia.w	r5, {r0, r1}
 800e0c4:	1d33      	adds	r3, r6, #4
 800e0c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e0c8:	6838      	ldr	r0, [r7, #0]
 800e0ca:	f003 fffd 	bl	80120c8 <USB_DevInit>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d005      	beq.n	800e0e0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	2202      	movs	r2, #2
 800e0d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800e0dc:	2301      	movs	r3, #1
 800e0de:	e00d      	b.n	800e0fc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	2201      	movs	r2, #1
 800e0ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f005 f94c 	bl	8013392 <USB_DevDisconnect>

  return HAL_OK;
 800e0fa:	2300      	movs	r3, #0
}
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	3714      	adds	r7, #20
 800e100:	46bd      	mov	sp, r7
 800e102:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e104 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b084      	sub	sp, #16
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800e118:	2b01      	cmp	r3, #1
 800e11a:	d101      	bne.n	800e120 <HAL_PCD_Start+0x1c>
 800e11c:	2302      	movs	r3, #2
 800e11e:	e020      	b.n	800e162 <HAL_PCD_Start+0x5e>
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2201      	movs	r2, #1
 800e124:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e12c:	2b01      	cmp	r3, #1
 800e12e:	d109      	bne.n	800e144 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800e134:	2b01      	cmp	r3, #1
 800e136:	d005      	beq.n	800e144 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e13c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	4618      	mov	r0, r3
 800e14a:	f003 ff4f 	bl	8011fec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	4618      	mov	r0, r3
 800e154:	f005 f8fc 	bl	8013350 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	2200      	movs	r2, #0
 800e15c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800e160:	2300      	movs	r3, #0
}
 800e162:	4618      	mov	r0, r3
 800e164:	3710      	adds	r7, #16
 800e166:	46bd      	mov	sp, r7
 800e168:	bd80      	pop	{r7, pc}

0800e16a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800e16a:	b590      	push	{r4, r7, lr}
 800e16c:	b08d      	sub	sp, #52	; 0x34
 800e16e:	af00      	add	r7, sp, #0
 800e170:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e178:	6a3b      	ldr	r3, [r7, #32]
 800e17a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	4618      	mov	r0, r3
 800e182:	f005 f9ba 	bl	80134fa <USB_GetMode>
 800e186:	4603      	mov	r3, r0
 800e188:	2b00      	cmp	r3, #0
 800e18a:	f040 848a 	bne.w	800eaa2 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	4618      	mov	r0, r3
 800e194:	f005 f91e 	bl	80133d4 <USB_ReadInterrupts>
 800e198:	4603      	mov	r3, r0
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	f000 8480 	beq.w	800eaa0 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800e1a0:	69fb      	ldr	r3, [r7, #28]
 800e1a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1a6:	689b      	ldr	r3, [r3, #8]
 800e1a8:	0a1b      	lsrs	r3, r3, #8
 800e1aa:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	f005 f90b 	bl	80133d4 <USB_ReadInterrupts>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	f003 0302 	and.w	r3, r3, #2
 800e1c4:	2b02      	cmp	r3, #2
 800e1c6:	d107      	bne.n	800e1d8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	695a      	ldr	r2, [r3, #20]
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	f002 0202 	and.w	r2, r2, #2
 800e1d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	4618      	mov	r0, r3
 800e1de:	f005 f8f9 	bl	80133d4 <USB_ReadInterrupts>
 800e1e2:	4603      	mov	r3, r0
 800e1e4:	f003 0310 	and.w	r3, r3, #16
 800e1e8:	2b10      	cmp	r3, #16
 800e1ea:	d161      	bne.n	800e2b0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	699a      	ldr	r2, [r3, #24]
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	f022 0210 	bic.w	r2, r2, #16
 800e1fa:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800e1fc:	6a3b      	ldr	r3, [r7, #32]
 800e1fe:	6a1b      	ldr	r3, [r3, #32]
 800e200:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800e202:	69bb      	ldr	r3, [r7, #24]
 800e204:	f003 020f 	and.w	r2, r3, #15
 800e208:	4613      	mov	r3, r2
 800e20a:	00db      	lsls	r3, r3, #3
 800e20c:	4413      	add	r3, r2
 800e20e:	009b      	lsls	r3, r3, #2
 800e210:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800e214:	687a      	ldr	r2, [r7, #4]
 800e216:	4413      	add	r3, r2
 800e218:	3304      	adds	r3, #4
 800e21a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800e21c:	69bb      	ldr	r3, [r7, #24]
 800e21e:	0c5b      	lsrs	r3, r3, #17
 800e220:	f003 030f 	and.w	r3, r3, #15
 800e224:	2b02      	cmp	r3, #2
 800e226:	d124      	bne.n	800e272 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800e228:	69ba      	ldr	r2, [r7, #24]
 800e22a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800e22e:	4013      	ands	r3, r2
 800e230:	2b00      	cmp	r3, #0
 800e232:	d035      	beq.n	800e2a0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800e234:	697b      	ldr	r3, [r7, #20]
 800e236:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800e238:	69bb      	ldr	r3, [r7, #24]
 800e23a:	091b      	lsrs	r3, r3, #4
 800e23c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800e23e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e242:	b29b      	uxth	r3, r3
 800e244:	461a      	mov	r2, r3
 800e246:	6a38      	ldr	r0, [r7, #32]
 800e248:	f004 ff30 	bl	80130ac <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e24c:	697b      	ldr	r3, [r7, #20]
 800e24e:	691a      	ldr	r2, [r3, #16]
 800e250:	69bb      	ldr	r3, [r7, #24]
 800e252:	091b      	lsrs	r3, r3, #4
 800e254:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e258:	441a      	add	r2, r3
 800e25a:	697b      	ldr	r3, [r7, #20]
 800e25c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	6a1a      	ldr	r2, [r3, #32]
 800e262:	69bb      	ldr	r3, [r7, #24]
 800e264:	091b      	lsrs	r3, r3, #4
 800e266:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e26a:	441a      	add	r2, r3
 800e26c:	697b      	ldr	r3, [r7, #20]
 800e26e:	621a      	str	r2, [r3, #32]
 800e270:	e016      	b.n	800e2a0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800e272:	69bb      	ldr	r3, [r7, #24]
 800e274:	0c5b      	lsrs	r3, r3, #17
 800e276:	f003 030f 	and.w	r3, r3, #15
 800e27a:	2b06      	cmp	r3, #6
 800e27c:	d110      	bne.n	800e2a0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e284:	2208      	movs	r2, #8
 800e286:	4619      	mov	r1, r3
 800e288:	6a38      	ldr	r0, [r7, #32]
 800e28a:	f004 ff0f 	bl	80130ac <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e28e:	697b      	ldr	r3, [r7, #20]
 800e290:	6a1a      	ldr	r2, [r3, #32]
 800e292:	69bb      	ldr	r3, [r7, #24]
 800e294:	091b      	lsrs	r3, r3, #4
 800e296:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e29a:	441a      	add	r2, r3
 800e29c:	697b      	ldr	r3, [r7, #20]
 800e29e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	699a      	ldr	r2, [r3, #24]
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	f042 0210 	orr.w	r2, r2, #16
 800e2ae:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	f005 f88d 	bl	80133d4 <USB_ReadInterrupts>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e2c0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800e2c4:	f040 80a7 	bne.w	800e416 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	f005 f892 	bl	80133fa <USB_ReadDevAllOutEpInterrupt>
 800e2d6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800e2d8:	e099      	b.n	800e40e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800e2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2dc:	f003 0301 	and.w	r3, r3, #1
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	f000 808e 	beq.w	800e402 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2ec:	b2d2      	uxtb	r2, r2
 800e2ee:	4611      	mov	r1, r2
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	f005 f8b6 	bl	8013462 <USB_ReadDevOutEPInterrupt>
 800e2f6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800e2f8:	693b      	ldr	r3, [r7, #16]
 800e2fa:	f003 0301 	and.w	r3, r3, #1
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d00c      	beq.n	800e31c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800e302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e304:	015a      	lsls	r2, r3, #5
 800e306:	69fb      	ldr	r3, [r7, #28]
 800e308:	4413      	add	r3, r2
 800e30a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e30e:	461a      	mov	r2, r3
 800e310:	2301      	movs	r3, #1
 800e312:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800e314:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e316:	6878      	ldr	r0, [r7, #4]
 800e318:	f000 fec2 	bl	800f0a0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800e31c:	693b      	ldr	r3, [r7, #16]
 800e31e:	f003 0308 	and.w	r3, r3, #8
 800e322:	2b00      	cmp	r3, #0
 800e324:	d00c      	beq.n	800e340 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800e326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e328:	015a      	lsls	r2, r3, #5
 800e32a:	69fb      	ldr	r3, [r7, #28]
 800e32c:	4413      	add	r3, r2
 800e32e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e332:	461a      	mov	r2, r3
 800e334:	2308      	movs	r3, #8
 800e336:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800e338:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e33a:	6878      	ldr	r0, [r7, #4]
 800e33c:	f000 ff98 	bl	800f270 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800e340:	693b      	ldr	r3, [r7, #16]
 800e342:	f003 0310 	and.w	r3, r3, #16
 800e346:	2b00      	cmp	r3, #0
 800e348:	d008      	beq.n	800e35c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800e34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e34c:	015a      	lsls	r2, r3, #5
 800e34e:	69fb      	ldr	r3, [r7, #28]
 800e350:	4413      	add	r3, r2
 800e352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e356:	461a      	mov	r2, r3
 800e358:	2310      	movs	r3, #16
 800e35a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800e35c:	693b      	ldr	r3, [r7, #16]
 800e35e:	f003 0302 	and.w	r3, r3, #2
 800e362:	2b00      	cmp	r3, #0
 800e364:	d030      	beq.n	800e3c8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800e366:	6a3b      	ldr	r3, [r7, #32]
 800e368:	695b      	ldr	r3, [r3, #20]
 800e36a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e36e:	2b80      	cmp	r3, #128	; 0x80
 800e370:	d109      	bne.n	800e386 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800e372:	69fb      	ldr	r3, [r7, #28]
 800e374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e378:	685b      	ldr	r3, [r3, #4]
 800e37a:	69fa      	ldr	r2, [r7, #28]
 800e37c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e380:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e384:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800e386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e388:	4613      	mov	r3, r2
 800e38a:	00db      	lsls	r3, r3, #3
 800e38c:	4413      	add	r3, r2
 800e38e:	009b      	lsls	r3, r3, #2
 800e390:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800e394:	687a      	ldr	r2, [r7, #4]
 800e396:	4413      	add	r3, r2
 800e398:	3304      	adds	r3, #4
 800e39a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800e39c:	697b      	ldr	r3, [r7, #20]
 800e39e:	78db      	ldrb	r3, [r3, #3]
 800e3a0:	2b01      	cmp	r3, #1
 800e3a2:	d108      	bne.n	800e3b6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800e3a4:	697b      	ldr	r3, [r7, #20]
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800e3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ac:	b2db      	uxtb	r3, r3
 800e3ae:	4619      	mov	r1, r3
 800e3b0:	6878      	ldr	r0, [r7, #4]
 800e3b2:	f007 fc47 	bl	8015c44 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800e3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b8:	015a      	lsls	r2, r3, #5
 800e3ba:	69fb      	ldr	r3, [r7, #28]
 800e3bc:	4413      	add	r3, r2
 800e3be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3c2:	461a      	mov	r2, r3
 800e3c4:	2302      	movs	r3, #2
 800e3c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800e3c8:	693b      	ldr	r3, [r7, #16]
 800e3ca:	f003 0320 	and.w	r3, r3, #32
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d008      	beq.n	800e3e4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800e3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3d4:	015a      	lsls	r2, r3, #5
 800e3d6:	69fb      	ldr	r3, [r7, #28]
 800e3d8:	4413      	add	r3, r2
 800e3da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3de:	461a      	mov	r2, r3
 800e3e0:	2320      	movs	r3, #32
 800e3e2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800e3e4:	693b      	ldr	r3, [r7, #16]
 800e3e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d009      	beq.n	800e402 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800e3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f0:	015a      	lsls	r2, r3, #5
 800e3f2:	69fb      	ldr	r3, [r7, #28]
 800e3f4:	4413      	add	r3, r2
 800e3f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3fa:	461a      	mov	r2, r3
 800e3fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e400:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800e402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e404:	3301      	adds	r3, #1
 800e406:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800e408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e40a:	085b      	lsrs	r3, r3, #1
 800e40c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800e40e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e410:	2b00      	cmp	r3, #0
 800e412:	f47f af62 	bne.w	800e2da <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	4618      	mov	r0, r3
 800e41c:	f004 ffda 	bl	80133d4 <USB_ReadInterrupts>
 800e420:	4603      	mov	r3, r0
 800e422:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e426:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e42a:	f040 80db 	bne.w	800e5e4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	4618      	mov	r0, r3
 800e434:	f004 fffb 	bl	801342e <USB_ReadDevAllInEpInterrupt>
 800e438:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800e43a:	2300      	movs	r3, #0
 800e43c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800e43e:	e0cd      	b.n	800e5dc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800e440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e442:	f003 0301 	and.w	r3, r3, #1
 800e446:	2b00      	cmp	r3, #0
 800e448:	f000 80c2 	beq.w	800e5d0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e452:	b2d2      	uxtb	r2, r2
 800e454:	4611      	mov	r1, r2
 800e456:	4618      	mov	r0, r3
 800e458:	f005 f821 	bl	801349e <USB_ReadDevInEPInterrupt>
 800e45c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800e45e:	693b      	ldr	r3, [r7, #16]
 800e460:	f003 0301 	and.w	r3, r3, #1
 800e464:	2b00      	cmp	r3, #0
 800e466:	d057      	beq.n	800e518 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800e468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e46a:	f003 030f 	and.w	r3, r3, #15
 800e46e:	2201      	movs	r2, #1
 800e470:	fa02 f303 	lsl.w	r3, r2, r3
 800e474:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800e476:	69fb      	ldr	r3, [r7, #28]
 800e478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e47c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	43db      	mvns	r3, r3
 800e482:	69f9      	ldr	r1, [r7, #28]
 800e484:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e488:	4013      	ands	r3, r2
 800e48a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800e48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e48e:	015a      	lsls	r2, r3, #5
 800e490:	69fb      	ldr	r3, [r7, #28]
 800e492:	4413      	add	r3, r2
 800e494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e498:	461a      	mov	r2, r3
 800e49a:	2301      	movs	r3, #1
 800e49c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	691b      	ldr	r3, [r3, #16]
 800e4a2:	2b01      	cmp	r3, #1
 800e4a4:	d132      	bne.n	800e50c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800e4a6:	6879      	ldr	r1, [r7, #4]
 800e4a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4aa:	4613      	mov	r3, r2
 800e4ac:	00db      	lsls	r3, r3, #3
 800e4ae:	4413      	add	r3, r2
 800e4b0:	009b      	lsls	r3, r3, #2
 800e4b2:	440b      	add	r3, r1
 800e4b4:	334c      	adds	r3, #76	; 0x4c
 800e4b6:	6819      	ldr	r1, [r3, #0]
 800e4b8:	6878      	ldr	r0, [r7, #4]
 800e4ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4bc:	4613      	mov	r3, r2
 800e4be:	00db      	lsls	r3, r3, #3
 800e4c0:	4413      	add	r3, r2
 800e4c2:	009b      	lsls	r3, r3, #2
 800e4c4:	4403      	add	r3, r0
 800e4c6:	3348      	adds	r3, #72	; 0x48
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	4419      	add	r1, r3
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4d0:	4613      	mov	r3, r2
 800e4d2:	00db      	lsls	r3, r3, #3
 800e4d4:	4413      	add	r3, r2
 800e4d6:	009b      	lsls	r3, r3, #2
 800e4d8:	4403      	add	r3, r0
 800e4da:	334c      	adds	r3, #76	; 0x4c
 800e4dc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800e4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d113      	bne.n	800e50c <HAL_PCD_IRQHandler+0x3a2>
 800e4e4:	6879      	ldr	r1, [r7, #4]
 800e4e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4e8:	4613      	mov	r3, r2
 800e4ea:	00db      	lsls	r3, r3, #3
 800e4ec:	4413      	add	r3, r2
 800e4ee:	009b      	lsls	r3, r3, #2
 800e4f0:	440b      	add	r3, r1
 800e4f2:	3354      	adds	r3, #84	; 0x54
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d108      	bne.n	800e50c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	6818      	ldr	r0, [r3, #0]
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e504:	461a      	mov	r2, r3
 800e506:	2101      	movs	r1, #1
 800e508:	f005 f828 	bl	801355c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800e50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e50e:	b2db      	uxtb	r3, r3
 800e510:	4619      	mov	r1, r3
 800e512:	6878      	ldr	r0, [r7, #4]
 800e514:	f007 fb1b 	bl	8015b4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800e518:	693b      	ldr	r3, [r7, #16]
 800e51a:	f003 0308 	and.w	r3, r3, #8
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d008      	beq.n	800e534 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800e522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e524:	015a      	lsls	r2, r3, #5
 800e526:	69fb      	ldr	r3, [r7, #28]
 800e528:	4413      	add	r3, r2
 800e52a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e52e:	461a      	mov	r2, r3
 800e530:	2308      	movs	r3, #8
 800e532:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800e534:	693b      	ldr	r3, [r7, #16]
 800e536:	f003 0310 	and.w	r3, r3, #16
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d008      	beq.n	800e550 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800e53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e540:	015a      	lsls	r2, r3, #5
 800e542:	69fb      	ldr	r3, [r7, #28]
 800e544:	4413      	add	r3, r2
 800e546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e54a:	461a      	mov	r2, r3
 800e54c:	2310      	movs	r3, #16
 800e54e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800e550:	693b      	ldr	r3, [r7, #16]
 800e552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e556:	2b00      	cmp	r3, #0
 800e558:	d008      	beq.n	800e56c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800e55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e55c:	015a      	lsls	r2, r3, #5
 800e55e:	69fb      	ldr	r3, [r7, #28]
 800e560:	4413      	add	r3, r2
 800e562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e566:	461a      	mov	r2, r3
 800e568:	2340      	movs	r3, #64	; 0x40
 800e56a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800e56c:	693b      	ldr	r3, [r7, #16]
 800e56e:	f003 0302 	and.w	r3, r3, #2
 800e572:	2b00      	cmp	r3, #0
 800e574:	d023      	beq.n	800e5be <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800e576:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e578:	6a38      	ldr	r0, [r7, #32]
 800e57a:	f003 ff09 	bl	8012390 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800e57e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e580:	4613      	mov	r3, r2
 800e582:	00db      	lsls	r3, r3, #3
 800e584:	4413      	add	r3, r2
 800e586:	009b      	lsls	r3, r3, #2
 800e588:	3338      	adds	r3, #56	; 0x38
 800e58a:	687a      	ldr	r2, [r7, #4]
 800e58c:	4413      	add	r3, r2
 800e58e:	3304      	adds	r3, #4
 800e590:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800e592:	697b      	ldr	r3, [r7, #20]
 800e594:	78db      	ldrb	r3, [r3, #3]
 800e596:	2b01      	cmp	r3, #1
 800e598:	d108      	bne.n	800e5ac <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800e59a:	697b      	ldr	r3, [r7, #20]
 800e59c:	2200      	movs	r2, #0
 800e59e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800e5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a2:	b2db      	uxtb	r3, r3
 800e5a4:	4619      	mov	r1, r3
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	f007 fb5e 	bl	8015c68 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800e5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ae:	015a      	lsls	r2, r3, #5
 800e5b0:	69fb      	ldr	r3, [r7, #28]
 800e5b2:	4413      	add	r3, r2
 800e5b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5b8:	461a      	mov	r2, r3
 800e5ba:	2302      	movs	r3, #2
 800e5bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800e5be:	693b      	ldr	r3, [r7, #16]
 800e5c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d003      	beq.n	800e5d0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800e5c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e5ca:	6878      	ldr	r0, [r7, #4]
 800e5cc:	f000 fcdb 	bl	800ef86 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800e5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d2:	3301      	adds	r3, #1
 800e5d4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800e5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5d8:	085b      	lsrs	r3, r3, #1
 800e5da:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800e5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	f47f af2e 	bne.w	800e440 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	f004 fef3 	bl	80133d4 <USB_ReadInterrupts>
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e5f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e5f8:	d122      	bne.n	800e640 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800e5fa:	69fb      	ldr	r3, [r7, #28]
 800e5fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e600:	685b      	ldr	r3, [r3, #4]
 800e602:	69fa      	ldr	r2, [r7, #28]
 800e604:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e608:	f023 0301 	bic.w	r3, r3, #1
 800e60c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800e614:	2b01      	cmp	r3, #1
 800e616:	d108      	bne.n	800e62a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	2200      	movs	r2, #0
 800e61c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800e620:	2100      	movs	r1, #0
 800e622:	6878      	ldr	r0, [r7, #4]
 800e624:	f000 fec2 	bl	800f3ac <HAL_PCDEx_LPM_Callback>
 800e628:	e002      	b.n	800e630 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800e62a:	6878      	ldr	r0, [r7, #4]
 800e62c:	f007 fafc 	bl	8015c28 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	695a      	ldr	r2, [r3, #20]
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800e63e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	4618      	mov	r0, r3
 800e646:	f004 fec5 	bl	80133d4 <USB_ReadInterrupts>
 800e64a:	4603      	mov	r3, r0
 800e64c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e650:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e654:	d112      	bne.n	800e67c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800e656:	69fb      	ldr	r3, [r7, #28]
 800e658:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e65c:	689b      	ldr	r3, [r3, #8]
 800e65e:	f003 0301 	and.w	r3, r3, #1
 800e662:	2b01      	cmp	r3, #1
 800e664:	d102      	bne.n	800e66c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800e666:	6878      	ldr	r0, [r7, #4]
 800e668:	f007 fab8 	bl	8015bdc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	695a      	ldr	r2, [r3, #20]
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800e67a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	4618      	mov	r0, r3
 800e682:	f004 fea7 	bl	80133d4 <USB_ReadInterrupts>
 800e686:	4603      	mov	r3, r0
 800e688:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e68c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e690:	f040 80b7 	bne.w	800e802 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800e694:	69fb      	ldr	r3, [r7, #28]
 800e696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e69a:	685b      	ldr	r3, [r3, #4]
 800e69c:	69fa      	ldr	r2, [r7, #28]
 800e69e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e6a2:	f023 0301 	bic.w	r3, r3, #1
 800e6a6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	2110      	movs	r1, #16
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	f003 fe6e 	bl	8012390 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e6b8:	e046      	b.n	800e748 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800e6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6bc:	015a      	lsls	r2, r3, #5
 800e6be:	69fb      	ldr	r3, [r7, #28]
 800e6c0:	4413      	add	r3, r2
 800e6c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6c6:	461a      	mov	r2, r3
 800e6c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e6cc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d0:	015a      	lsls	r2, r3, #5
 800e6d2:	69fb      	ldr	r3, [r7, #28]
 800e6d4:	4413      	add	r3, r2
 800e6d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6de:	0151      	lsls	r1, r2, #5
 800e6e0:	69fa      	ldr	r2, [r7, #28]
 800e6e2:	440a      	add	r2, r1
 800e6e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e6e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e6ec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800e6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f0:	015a      	lsls	r2, r3, #5
 800e6f2:	69fb      	ldr	r3, [r7, #28]
 800e6f4:	4413      	add	r3, r2
 800e6f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6fa:	461a      	mov	r2, r3
 800e6fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e700:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e704:	015a      	lsls	r2, r3, #5
 800e706:	69fb      	ldr	r3, [r7, #28]
 800e708:	4413      	add	r3, r2
 800e70a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e712:	0151      	lsls	r1, r2, #5
 800e714:	69fa      	ldr	r2, [r7, #28]
 800e716:	440a      	add	r2, r1
 800e718:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e71c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e720:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e724:	015a      	lsls	r2, r3, #5
 800e726:	69fb      	ldr	r3, [r7, #28]
 800e728:	4413      	add	r3, r2
 800e72a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e732:	0151      	lsls	r1, r2, #5
 800e734:	69fa      	ldr	r2, [r7, #28]
 800e736:	440a      	add	r2, r1
 800e738:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e73c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e740:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e744:	3301      	adds	r3, #1
 800e746:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	685b      	ldr	r3, [r3, #4]
 800e74c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e74e:	429a      	cmp	r2, r3
 800e750:	d3b3      	bcc.n	800e6ba <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800e752:	69fb      	ldr	r3, [r7, #28]
 800e754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e758:	69db      	ldr	r3, [r3, #28]
 800e75a:	69fa      	ldr	r2, [r7, #28]
 800e75c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e760:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800e764:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d016      	beq.n	800e79c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800e76e:	69fb      	ldr	r3, [r7, #28]
 800e770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e774:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e778:	69fa      	ldr	r2, [r7, #28]
 800e77a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e77e:	f043 030b 	orr.w	r3, r3, #11
 800e782:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800e786:	69fb      	ldr	r3, [r7, #28]
 800e788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e78c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e78e:	69fa      	ldr	r2, [r7, #28]
 800e790:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e794:	f043 030b 	orr.w	r3, r3, #11
 800e798:	6453      	str	r3, [r2, #68]	; 0x44
 800e79a:	e015      	b.n	800e7c8 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800e79c:	69fb      	ldr	r3, [r7, #28]
 800e79e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e7a2:	695b      	ldr	r3, [r3, #20]
 800e7a4:	69fa      	ldr	r2, [r7, #28]
 800e7a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e7aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e7ae:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800e7b2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800e7b4:	69fb      	ldr	r3, [r7, #28]
 800e7b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e7ba:	691b      	ldr	r3, [r3, #16]
 800e7bc:	69fa      	ldr	r2, [r7, #28]
 800e7be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e7c2:	f043 030b 	orr.w	r3, r3, #11
 800e7c6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800e7c8:	69fb      	ldr	r3, [r7, #28]
 800e7ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	69fa      	ldr	r2, [r7, #28]
 800e7d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e7d6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e7da:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	6818      	ldr	r0, [r3, #0]
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	691b      	ldr	r3, [r3, #16]
 800e7e4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800e7ec:	461a      	mov	r2, r3
 800e7ee:	f004 feb5 	bl	801355c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	695a      	ldr	r2, [r3, #20]
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800e800:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	4618      	mov	r0, r3
 800e808:	f004 fde4 	bl	80133d4 <USB_ReadInterrupts>
 800e80c:	4603      	mov	r3, r0
 800e80e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e812:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e816:	d124      	bne.n	800e862 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	4618      	mov	r0, r3
 800e81e:	f004 fe7a 	bl	8013516 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	4618      	mov	r0, r3
 800e828:	f003 fe2f 	bl	801248a <USB_GetDevSpeed>
 800e82c:	4603      	mov	r3, r0
 800e82e:	461a      	mov	r2, r3
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681c      	ldr	r4, [r3, #0]
 800e838:	f001 f9e8 	bl	800fc0c <HAL_RCC_GetHCLKFreq>
 800e83c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800e842:	b2db      	uxtb	r3, r3
 800e844:	461a      	mov	r2, r3
 800e846:	4620      	mov	r0, r4
 800e848:	f003 fb2e 	bl	8011ea8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800e84c:	6878      	ldr	r0, [r7, #4]
 800e84e:	f007 f9a6 	bl	8015b9e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	695a      	ldr	r2, [r3, #20]
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800e860:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	4618      	mov	r0, r3
 800e868:	f004 fdb4 	bl	80133d4 <USB_ReadInterrupts>
 800e86c:	4603      	mov	r3, r0
 800e86e:	f003 0308 	and.w	r3, r3, #8
 800e872:	2b08      	cmp	r3, #8
 800e874:	d10a      	bne.n	800e88c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	f007 f983 	bl	8015b82 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	695a      	ldr	r2, [r3, #20]
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	f002 0208 	and.w	r2, r2, #8
 800e88a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	4618      	mov	r0, r3
 800e892:	f004 fd9f 	bl	80133d4 <USB_ReadInterrupts>
 800e896:	4603      	mov	r3, r0
 800e898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e89c:	2b80      	cmp	r3, #128	; 0x80
 800e89e:	d122      	bne.n	800e8e6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800e8a0:	6a3b      	ldr	r3, [r7, #32]
 800e8a2:	699b      	ldr	r3, [r3, #24]
 800e8a4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e8a8:	6a3b      	ldr	r3, [r7, #32]
 800e8aa:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e8ac:	2301      	movs	r3, #1
 800e8ae:	627b      	str	r3, [r7, #36]	; 0x24
 800e8b0:	e014      	b.n	800e8dc <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800e8b2:	6879      	ldr	r1, [r7, #4]
 800e8b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8b6:	4613      	mov	r3, r2
 800e8b8:	00db      	lsls	r3, r3, #3
 800e8ba:	4413      	add	r3, r2
 800e8bc:	009b      	lsls	r3, r3, #2
 800e8be:	440b      	add	r3, r1
 800e8c0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800e8c4:	781b      	ldrb	r3, [r3, #0]
 800e8c6:	2b01      	cmp	r3, #1
 800e8c8:	d105      	bne.n	800e8d6 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800e8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8cc:	b2db      	uxtb	r3, r3
 800e8ce:	4619      	mov	r1, r3
 800e8d0:	6878      	ldr	r0, [r7, #4]
 800e8d2:	f000 fb27 	bl	800ef24 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d8:	3301      	adds	r3, #1
 800e8da:	627b      	str	r3, [r7, #36]	; 0x24
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	685b      	ldr	r3, [r3, #4]
 800e8e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8e2:	429a      	cmp	r2, r3
 800e8e4:	d3e5      	bcc.n	800e8b2 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f004 fd72 	bl	80133d4 <USB_ReadInterrupts>
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e8f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e8fa:	d13b      	bne.n	800e974 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e8fc:	2301      	movs	r3, #1
 800e8fe:	627b      	str	r3, [r7, #36]	; 0x24
 800e900:	e02b      	b.n	800e95a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800e902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e904:	015a      	lsls	r2, r3, #5
 800e906:	69fb      	ldr	r3, [r7, #28]
 800e908:	4413      	add	r3, r2
 800e90a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800e912:	6879      	ldr	r1, [r7, #4]
 800e914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e916:	4613      	mov	r3, r2
 800e918:	00db      	lsls	r3, r3, #3
 800e91a:	4413      	add	r3, r2
 800e91c:	009b      	lsls	r3, r3, #2
 800e91e:	440b      	add	r3, r1
 800e920:	3340      	adds	r3, #64	; 0x40
 800e922:	781b      	ldrb	r3, [r3, #0]
 800e924:	2b01      	cmp	r3, #1
 800e926:	d115      	bne.n	800e954 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800e928:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	da12      	bge.n	800e954 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800e92e:	6879      	ldr	r1, [r7, #4]
 800e930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e932:	4613      	mov	r3, r2
 800e934:	00db      	lsls	r3, r3, #3
 800e936:	4413      	add	r3, r2
 800e938:	009b      	lsls	r3, r3, #2
 800e93a:	440b      	add	r3, r1
 800e93c:	333f      	adds	r3, #63	; 0x3f
 800e93e:	2201      	movs	r2, #1
 800e940:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800e942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e944:	b2db      	uxtb	r3, r3
 800e946:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e94a:	b2db      	uxtb	r3, r3
 800e94c:	4619      	mov	r1, r3
 800e94e:	6878      	ldr	r0, [r7, #4]
 800e950:	f000 fae8 	bl	800ef24 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e956:	3301      	adds	r3, #1
 800e958:	627b      	str	r3, [r7, #36]	; 0x24
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	685b      	ldr	r3, [r3, #4]
 800e95e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e960:	429a      	cmp	r2, r3
 800e962:	d3ce      	bcc.n	800e902 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	695a      	ldr	r2, [r3, #20]
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800e972:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	4618      	mov	r0, r3
 800e97a:	f004 fd2b 	bl	80133d4 <USB_ReadInterrupts>
 800e97e:	4603      	mov	r3, r0
 800e980:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e984:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e988:	d155      	bne.n	800ea36 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e98a:	2301      	movs	r3, #1
 800e98c:	627b      	str	r3, [r7, #36]	; 0x24
 800e98e:	e045      	b.n	800ea1c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800e990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e992:	015a      	lsls	r2, r3, #5
 800e994:	69fb      	ldr	r3, [r7, #28]
 800e996:	4413      	add	r3, r2
 800e998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800e9a0:	6879      	ldr	r1, [r7, #4]
 800e9a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9a4:	4613      	mov	r3, r2
 800e9a6:	00db      	lsls	r3, r3, #3
 800e9a8:	4413      	add	r3, r2
 800e9aa:	009b      	lsls	r3, r3, #2
 800e9ac:	440b      	add	r3, r1
 800e9ae:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800e9b2:	781b      	ldrb	r3, [r3, #0]
 800e9b4:	2b01      	cmp	r3, #1
 800e9b6:	d12e      	bne.n	800ea16 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800e9b8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	da2b      	bge.n	800ea16 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800e9be:	69bb      	ldr	r3, [r7, #24]
 800e9c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800e9ca:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800e9ce:	429a      	cmp	r2, r3
 800e9d0:	d121      	bne.n	800ea16 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800e9d2:	6879      	ldr	r1, [r7, #4]
 800e9d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9d6:	4613      	mov	r3, r2
 800e9d8:	00db      	lsls	r3, r3, #3
 800e9da:	4413      	add	r3, r2
 800e9dc:	009b      	lsls	r3, r3, #2
 800e9de:	440b      	add	r3, r1
 800e9e0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800e9e4:	2201      	movs	r2, #1
 800e9e6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800e9e8:	6a3b      	ldr	r3, [r7, #32]
 800e9ea:	699b      	ldr	r3, [r3, #24]
 800e9ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e9f0:	6a3b      	ldr	r3, [r7, #32]
 800e9f2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800e9f4:	6a3b      	ldr	r3, [r7, #32]
 800e9f6:	695b      	ldr	r3, [r3, #20]
 800e9f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d10a      	bne.n	800ea16 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800ea00:	69fb      	ldr	r3, [r7, #28]
 800ea02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea06:	685b      	ldr	r3, [r3, #4]
 800ea08:	69fa      	ldr	r2, [r7, #28]
 800ea0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ea0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ea12:	6053      	str	r3, [r2, #4]
            break;
 800ea14:	e007      	b.n	800ea26 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ea16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea18:	3301      	adds	r3, #1
 800ea1a:	627b      	str	r3, [r7, #36]	; 0x24
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	685b      	ldr	r3, [r3, #4]
 800ea20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea22:	429a      	cmp	r2, r3
 800ea24:	d3b4      	bcc.n	800e990 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	695a      	ldr	r2, [r3, #20]
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800ea34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	f004 fcca 	bl	80133d4 <USB_ReadInterrupts>
 800ea40:	4603      	mov	r3, r0
 800ea42:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ea46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea4a:	d10a      	bne.n	800ea62 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800ea4c:	6878      	ldr	r0, [r7, #4]
 800ea4e:	f007 f91d 	bl	8015c8c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	695a      	ldr	r2, [r3, #20]
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800ea60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	4618      	mov	r0, r3
 800ea68:	f004 fcb4 	bl	80133d4 <USB_ReadInterrupts>
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	f003 0304 	and.w	r3, r3, #4
 800ea72:	2b04      	cmp	r3, #4
 800ea74:	d115      	bne.n	800eaa2 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	685b      	ldr	r3, [r3, #4]
 800ea7c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800ea7e:	69bb      	ldr	r3, [r7, #24]
 800ea80:	f003 0304 	and.w	r3, r3, #4
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d002      	beq.n	800ea8e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800ea88:	6878      	ldr	r0, [r7, #4]
 800ea8a:	f007 f90d 	bl	8015ca8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	6859      	ldr	r1, [r3, #4]
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	69ba      	ldr	r2, [r7, #24]
 800ea9a:	430a      	orrs	r2, r1
 800ea9c:	605a      	str	r2, [r3, #4]
 800ea9e:	e000      	b.n	800eaa2 <HAL_PCD_IRQHandler+0x938>
      return;
 800eaa0:	bf00      	nop
    }
  }
}
 800eaa2:	3734      	adds	r7, #52	; 0x34
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	bd90      	pop	{r4, r7, pc}

0800eaa8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b082      	sub	sp, #8
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
 800eab0:	460b      	mov	r3, r1
 800eab2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800eaba:	2b01      	cmp	r3, #1
 800eabc:	d101      	bne.n	800eac2 <HAL_PCD_SetAddress+0x1a>
 800eabe:	2302      	movs	r3, #2
 800eac0:	e013      	b.n	800eaea <HAL_PCD_SetAddress+0x42>
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	2201      	movs	r2, #1
 800eac6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	78fa      	ldrb	r2, [r7, #3]
 800eace:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	78fa      	ldrb	r2, [r7, #3]
 800ead8:	4611      	mov	r1, r2
 800eada:	4618      	mov	r0, r3
 800eadc:	f004 fc12 	bl	8013304 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2200      	movs	r2, #0
 800eae4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800eae8:	2300      	movs	r3, #0
}
 800eaea:	4618      	mov	r0, r3
 800eaec:	3708      	adds	r7, #8
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bd80      	pop	{r7, pc}

0800eaf2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800eaf2:	b580      	push	{r7, lr}
 800eaf4:	b084      	sub	sp, #16
 800eaf6:	af00      	add	r7, sp, #0
 800eaf8:	6078      	str	r0, [r7, #4]
 800eafa:	4608      	mov	r0, r1
 800eafc:	4611      	mov	r1, r2
 800eafe:	461a      	mov	r2, r3
 800eb00:	4603      	mov	r3, r0
 800eb02:	70fb      	strb	r3, [r7, #3]
 800eb04:	460b      	mov	r3, r1
 800eb06:	803b      	strh	r3, [r7, #0]
 800eb08:	4613      	mov	r3, r2
 800eb0a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800eb10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	da0f      	bge.n	800eb38 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800eb18:	78fb      	ldrb	r3, [r7, #3]
 800eb1a:	f003 020f 	and.w	r2, r3, #15
 800eb1e:	4613      	mov	r3, r2
 800eb20:	00db      	lsls	r3, r3, #3
 800eb22:	4413      	add	r3, r2
 800eb24:	009b      	lsls	r3, r3, #2
 800eb26:	3338      	adds	r3, #56	; 0x38
 800eb28:	687a      	ldr	r2, [r7, #4]
 800eb2a:	4413      	add	r3, r2
 800eb2c:	3304      	adds	r3, #4
 800eb2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	2201      	movs	r2, #1
 800eb34:	705a      	strb	r2, [r3, #1]
 800eb36:	e00f      	b.n	800eb58 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800eb38:	78fb      	ldrb	r3, [r7, #3]
 800eb3a:	f003 020f 	and.w	r2, r3, #15
 800eb3e:	4613      	mov	r3, r2
 800eb40:	00db      	lsls	r3, r3, #3
 800eb42:	4413      	add	r3, r2
 800eb44:	009b      	lsls	r3, r3, #2
 800eb46:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800eb4a:	687a      	ldr	r2, [r7, #4]
 800eb4c:	4413      	add	r3, r2
 800eb4e:	3304      	adds	r3, #4
 800eb50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	2200      	movs	r2, #0
 800eb56:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800eb58:	78fb      	ldrb	r3, [r7, #3]
 800eb5a:	f003 030f 	and.w	r3, r3, #15
 800eb5e:	b2da      	uxtb	r2, r3
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800eb64:	883a      	ldrh	r2, [r7, #0]
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	78ba      	ldrb	r2, [r7, #2]
 800eb6e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	785b      	ldrb	r3, [r3, #1]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d004      	beq.n	800eb82 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	781b      	ldrb	r3, [r3, #0]
 800eb7c:	b29a      	uxth	r2, r3
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800eb82:	78bb      	ldrb	r3, [r7, #2]
 800eb84:	2b02      	cmp	r3, #2
 800eb86:	d102      	bne.n	800eb8e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800eb94:	2b01      	cmp	r3, #1
 800eb96:	d101      	bne.n	800eb9c <HAL_PCD_EP_Open+0xaa>
 800eb98:	2302      	movs	r3, #2
 800eb9a:	e00e      	b.n	800ebba <HAL_PCD_EP_Open+0xc8>
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2201      	movs	r2, #1
 800eba0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	68f9      	ldr	r1, [r7, #12]
 800ebaa:	4618      	mov	r0, r3
 800ebac:	f003 fc92 	bl	80124d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800ebb8:	7afb      	ldrb	r3, [r7, #11]
}
 800ebba:	4618      	mov	r0, r3
 800ebbc:	3710      	adds	r7, #16
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	bd80      	pop	{r7, pc}

0800ebc2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ebc2:	b580      	push	{r7, lr}
 800ebc4:	b084      	sub	sp, #16
 800ebc6:	af00      	add	r7, sp, #0
 800ebc8:	6078      	str	r0, [r7, #4]
 800ebca:	460b      	mov	r3, r1
 800ebcc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ebce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	da0f      	bge.n	800ebf6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ebd6:	78fb      	ldrb	r3, [r7, #3]
 800ebd8:	f003 020f 	and.w	r2, r3, #15
 800ebdc:	4613      	mov	r3, r2
 800ebde:	00db      	lsls	r3, r3, #3
 800ebe0:	4413      	add	r3, r2
 800ebe2:	009b      	lsls	r3, r3, #2
 800ebe4:	3338      	adds	r3, #56	; 0x38
 800ebe6:	687a      	ldr	r2, [r7, #4]
 800ebe8:	4413      	add	r3, r2
 800ebea:	3304      	adds	r3, #4
 800ebec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	2201      	movs	r2, #1
 800ebf2:	705a      	strb	r2, [r3, #1]
 800ebf4:	e00f      	b.n	800ec16 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ebf6:	78fb      	ldrb	r3, [r7, #3]
 800ebf8:	f003 020f 	and.w	r2, r3, #15
 800ebfc:	4613      	mov	r3, r2
 800ebfe:	00db      	lsls	r3, r3, #3
 800ec00:	4413      	add	r3, r2
 800ec02:	009b      	lsls	r3, r3, #2
 800ec04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ec08:	687a      	ldr	r2, [r7, #4]
 800ec0a:	4413      	add	r3, r2
 800ec0c:	3304      	adds	r3, #4
 800ec0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	2200      	movs	r2, #0
 800ec14:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800ec16:	78fb      	ldrb	r3, [r7, #3]
 800ec18:	f003 030f 	and.w	r3, r3, #15
 800ec1c:	b2da      	uxtb	r2, r3
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800ec28:	2b01      	cmp	r3, #1
 800ec2a:	d101      	bne.n	800ec30 <HAL_PCD_EP_Close+0x6e>
 800ec2c:	2302      	movs	r3, #2
 800ec2e:	e00e      	b.n	800ec4e <HAL_PCD_EP_Close+0x8c>
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	2201      	movs	r2, #1
 800ec34:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	68f9      	ldr	r1, [r7, #12]
 800ec3e:	4618      	mov	r0, r3
 800ec40:	f003 fcd0 	bl	80125e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	2200      	movs	r2, #0
 800ec48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800ec4c:	2300      	movs	r3, #0
}
 800ec4e:	4618      	mov	r0, r3
 800ec50:	3710      	adds	r7, #16
 800ec52:	46bd      	mov	sp, r7
 800ec54:	bd80      	pop	{r7, pc}

0800ec56 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ec56:	b580      	push	{r7, lr}
 800ec58:	b086      	sub	sp, #24
 800ec5a:	af00      	add	r7, sp, #0
 800ec5c:	60f8      	str	r0, [r7, #12]
 800ec5e:	607a      	str	r2, [r7, #4]
 800ec60:	603b      	str	r3, [r7, #0]
 800ec62:	460b      	mov	r3, r1
 800ec64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ec66:	7afb      	ldrb	r3, [r7, #11]
 800ec68:	f003 020f 	and.w	r2, r3, #15
 800ec6c:	4613      	mov	r3, r2
 800ec6e:	00db      	lsls	r3, r3, #3
 800ec70:	4413      	add	r3, r2
 800ec72:	009b      	lsls	r3, r3, #2
 800ec74:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ec78:	68fa      	ldr	r2, [r7, #12]
 800ec7a:	4413      	add	r3, r2
 800ec7c:	3304      	adds	r3, #4
 800ec7e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ec80:	697b      	ldr	r3, [r7, #20]
 800ec82:	687a      	ldr	r2, [r7, #4]
 800ec84:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800ec86:	697b      	ldr	r3, [r7, #20]
 800ec88:	683a      	ldr	r2, [r7, #0]
 800ec8a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800ec8c:	697b      	ldr	r3, [r7, #20]
 800ec8e:	2200      	movs	r2, #0
 800ec90:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800ec92:	697b      	ldr	r3, [r7, #20]
 800ec94:	2200      	movs	r2, #0
 800ec96:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ec98:	7afb      	ldrb	r3, [r7, #11]
 800ec9a:	f003 030f 	and.w	r3, r3, #15
 800ec9e:	b2da      	uxtb	r2, r3
 800eca0:	697b      	ldr	r3, [r7, #20]
 800eca2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	691b      	ldr	r3, [r3, #16]
 800eca8:	2b01      	cmp	r3, #1
 800ecaa:	d102      	bne.n	800ecb2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ecac:	687a      	ldr	r2, [r7, #4]
 800ecae:	697b      	ldr	r3, [r7, #20]
 800ecb0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ecb2:	7afb      	ldrb	r3, [r7, #11]
 800ecb4:	f003 030f 	and.w	r3, r3, #15
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d109      	bne.n	800ecd0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	6818      	ldr	r0, [r3, #0]
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	691b      	ldr	r3, [r3, #16]
 800ecc4:	b2db      	uxtb	r3, r3
 800ecc6:	461a      	mov	r2, r3
 800ecc8:	6979      	ldr	r1, [r7, #20]
 800ecca:	f003 ffaf 	bl	8012c2c <USB_EP0StartXfer>
 800ecce:	e008      	b.n	800ece2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	6818      	ldr	r0, [r3, #0]
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	691b      	ldr	r3, [r3, #16]
 800ecd8:	b2db      	uxtb	r3, r3
 800ecda:	461a      	mov	r2, r3
 800ecdc:	6979      	ldr	r1, [r7, #20]
 800ecde:	f003 fd5d 	bl	801279c <USB_EPStartXfer>
  }

  return HAL_OK;
 800ece2:	2300      	movs	r3, #0
}
 800ece4:	4618      	mov	r0, r3
 800ece6:	3718      	adds	r7, #24
 800ece8:	46bd      	mov	sp, r7
 800ecea:	bd80      	pop	{r7, pc}

0800ecec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ecec:	b480      	push	{r7}
 800ecee:	b083      	sub	sp, #12
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
 800ecf4:	460b      	mov	r3, r1
 800ecf6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800ecf8:	78fb      	ldrb	r3, [r7, #3]
 800ecfa:	f003 020f 	and.w	r2, r3, #15
 800ecfe:	6879      	ldr	r1, [r7, #4]
 800ed00:	4613      	mov	r3, r2
 800ed02:	00db      	lsls	r3, r3, #3
 800ed04:	4413      	add	r3, r2
 800ed06:	009b      	lsls	r3, r3, #2
 800ed08:	440b      	add	r3, r1
 800ed0a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800ed0e:	681b      	ldr	r3, [r3, #0]
}
 800ed10:	4618      	mov	r0, r3
 800ed12:	370c      	adds	r7, #12
 800ed14:	46bd      	mov	sp, r7
 800ed16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1a:	4770      	bx	lr

0800ed1c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b086      	sub	sp, #24
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	60f8      	str	r0, [r7, #12]
 800ed24:	607a      	str	r2, [r7, #4]
 800ed26:	603b      	str	r3, [r7, #0]
 800ed28:	460b      	mov	r3, r1
 800ed2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ed2c:	7afb      	ldrb	r3, [r7, #11]
 800ed2e:	f003 020f 	and.w	r2, r3, #15
 800ed32:	4613      	mov	r3, r2
 800ed34:	00db      	lsls	r3, r3, #3
 800ed36:	4413      	add	r3, r2
 800ed38:	009b      	lsls	r3, r3, #2
 800ed3a:	3338      	adds	r3, #56	; 0x38
 800ed3c:	68fa      	ldr	r2, [r7, #12]
 800ed3e:	4413      	add	r3, r2
 800ed40:	3304      	adds	r3, #4
 800ed42:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ed44:	697b      	ldr	r3, [r7, #20]
 800ed46:	687a      	ldr	r2, [r7, #4]
 800ed48:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800ed4a:	697b      	ldr	r3, [r7, #20]
 800ed4c:	683a      	ldr	r2, [r7, #0]
 800ed4e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800ed50:	697b      	ldr	r3, [r7, #20]
 800ed52:	2200      	movs	r2, #0
 800ed54:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800ed56:	697b      	ldr	r3, [r7, #20]
 800ed58:	2201      	movs	r2, #1
 800ed5a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ed5c:	7afb      	ldrb	r3, [r7, #11]
 800ed5e:	f003 030f 	and.w	r3, r3, #15
 800ed62:	b2da      	uxtb	r2, r3
 800ed64:	697b      	ldr	r3, [r7, #20]
 800ed66:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	691b      	ldr	r3, [r3, #16]
 800ed6c:	2b01      	cmp	r3, #1
 800ed6e:	d102      	bne.n	800ed76 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ed70:	687a      	ldr	r2, [r7, #4]
 800ed72:	697b      	ldr	r3, [r7, #20]
 800ed74:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ed76:	7afb      	ldrb	r3, [r7, #11]
 800ed78:	f003 030f 	and.w	r3, r3, #15
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d109      	bne.n	800ed94 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	6818      	ldr	r0, [r3, #0]
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	691b      	ldr	r3, [r3, #16]
 800ed88:	b2db      	uxtb	r3, r3
 800ed8a:	461a      	mov	r2, r3
 800ed8c:	6979      	ldr	r1, [r7, #20]
 800ed8e:	f003 ff4d 	bl	8012c2c <USB_EP0StartXfer>
 800ed92:	e008      	b.n	800eda6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	6818      	ldr	r0, [r3, #0]
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	691b      	ldr	r3, [r3, #16]
 800ed9c:	b2db      	uxtb	r3, r3
 800ed9e:	461a      	mov	r2, r3
 800eda0:	6979      	ldr	r1, [r7, #20]
 800eda2:	f003 fcfb 	bl	801279c <USB_EPStartXfer>
  }

  return HAL_OK;
 800eda6:	2300      	movs	r3, #0
}
 800eda8:	4618      	mov	r0, r3
 800edaa:	3718      	adds	r7, #24
 800edac:	46bd      	mov	sp, r7
 800edae:	bd80      	pop	{r7, pc}

0800edb0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b084      	sub	sp, #16
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
 800edb8:	460b      	mov	r3, r1
 800edba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800edbc:	78fb      	ldrb	r3, [r7, #3]
 800edbe:	f003 020f 	and.w	r2, r3, #15
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	685b      	ldr	r3, [r3, #4]
 800edc6:	429a      	cmp	r2, r3
 800edc8:	d901      	bls.n	800edce <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800edca:	2301      	movs	r3, #1
 800edcc:	e050      	b.n	800ee70 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800edce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	da0f      	bge.n	800edf6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800edd6:	78fb      	ldrb	r3, [r7, #3]
 800edd8:	f003 020f 	and.w	r2, r3, #15
 800eddc:	4613      	mov	r3, r2
 800edde:	00db      	lsls	r3, r3, #3
 800ede0:	4413      	add	r3, r2
 800ede2:	009b      	lsls	r3, r3, #2
 800ede4:	3338      	adds	r3, #56	; 0x38
 800ede6:	687a      	ldr	r2, [r7, #4]
 800ede8:	4413      	add	r3, r2
 800edea:	3304      	adds	r3, #4
 800edec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	2201      	movs	r2, #1
 800edf2:	705a      	strb	r2, [r3, #1]
 800edf4:	e00d      	b.n	800ee12 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800edf6:	78fa      	ldrb	r2, [r7, #3]
 800edf8:	4613      	mov	r3, r2
 800edfa:	00db      	lsls	r3, r3, #3
 800edfc:	4413      	add	r3, r2
 800edfe:	009b      	lsls	r3, r3, #2
 800ee00:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ee04:	687a      	ldr	r2, [r7, #4]
 800ee06:	4413      	add	r3, r2
 800ee08:	3304      	adds	r3, #4
 800ee0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	2200      	movs	r2, #0
 800ee10:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	2201      	movs	r2, #1
 800ee16:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ee18:	78fb      	ldrb	r3, [r7, #3]
 800ee1a:	f003 030f 	and.w	r3, r3, #15
 800ee1e:	b2da      	uxtb	r2, r3
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800ee2a:	2b01      	cmp	r3, #1
 800ee2c:	d101      	bne.n	800ee32 <HAL_PCD_EP_SetStall+0x82>
 800ee2e:	2302      	movs	r3, #2
 800ee30:	e01e      	b.n	800ee70 <HAL_PCD_EP_SetStall+0xc0>
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	2201      	movs	r2, #1
 800ee36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	68f9      	ldr	r1, [r7, #12]
 800ee40:	4618      	mov	r0, r3
 800ee42:	f004 f98b 	bl	801315c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ee46:	78fb      	ldrb	r3, [r7, #3]
 800ee48:	f003 030f 	and.w	r3, r3, #15
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d10a      	bne.n	800ee66 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	6818      	ldr	r0, [r3, #0]
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	691b      	ldr	r3, [r3, #16]
 800ee58:	b2d9      	uxtb	r1, r3
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ee60:	461a      	mov	r2, r3
 800ee62:	f004 fb7b 	bl	801355c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	2200      	movs	r2, #0
 800ee6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800ee6e:	2300      	movs	r3, #0
}
 800ee70:	4618      	mov	r0, r3
 800ee72:	3710      	adds	r7, #16
 800ee74:	46bd      	mov	sp, r7
 800ee76:	bd80      	pop	{r7, pc}

0800ee78 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b084      	sub	sp, #16
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
 800ee80:	460b      	mov	r3, r1
 800ee82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800ee84:	78fb      	ldrb	r3, [r7, #3]
 800ee86:	f003 020f 	and.w	r2, r3, #15
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	685b      	ldr	r3, [r3, #4]
 800ee8e:	429a      	cmp	r2, r3
 800ee90:	d901      	bls.n	800ee96 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800ee92:	2301      	movs	r3, #1
 800ee94:	e042      	b.n	800ef1c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ee96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	da0f      	bge.n	800eebe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ee9e:	78fb      	ldrb	r3, [r7, #3]
 800eea0:	f003 020f 	and.w	r2, r3, #15
 800eea4:	4613      	mov	r3, r2
 800eea6:	00db      	lsls	r3, r3, #3
 800eea8:	4413      	add	r3, r2
 800eeaa:	009b      	lsls	r3, r3, #2
 800eeac:	3338      	adds	r3, #56	; 0x38
 800eeae:	687a      	ldr	r2, [r7, #4]
 800eeb0:	4413      	add	r3, r2
 800eeb2:	3304      	adds	r3, #4
 800eeb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	2201      	movs	r2, #1
 800eeba:	705a      	strb	r2, [r3, #1]
 800eebc:	e00f      	b.n	800eede <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800eebe:	78fb      	ldrb	r3, [r7, #3]
 800eec0:	f003 020f 	and.w	r2, r3, #15
 800eec4:	4613      	mov	r3, r2
 800eec6:	00db      	lsls	r3, r3, #3
 800eec8:	4413      	add	r3, r2
 800eeca:	009b      	lsls	r3, r3, #2
 800eecc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800eed0:	687a      	ldr	r2, [r7, #4]
 800eed2:	4413      	add	r3, r2
 800eed4:	3304      	adds	r3, #4
 800eed6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	2200      	movs	r2, #0
 800eedc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	2200      	movs	r2, #0
 800eee2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800eee4:	78fb      	ldrb	r3, [r7, #3]
 800eee6:	f003 030f 	and.w	r3, r3, #15
 800eeea:	b2da      	uxtb	r2, r3
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800eef6:	2b01      	cmp	r3, #1
 800eef8:	d101      	bne.n	800eefe <HAL_PCD_EP_ClrStall+0x86>
 800eefa:	2302      	movs	r3, #2
 800eefc:	e00e      	b.n	800ef1c <HAL_PCD_EP_ClrStall+0xa4>
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	2201      	movs	r2, #1
 800ef02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	68f9      	ldr	r1, [r7, #12]
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f004 f993 	bl	8013238 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	2200      	movs	r2, #0
 800ef16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800ef1a:	2300      	movs	r3, #0
}
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	3710      	adds	r7, #16
 800ef20:	46bd      	mov	sp, r7
 800ef22:	bd80      	pop	{r7, pc}

0800ef24 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b084      	sub	sp, #16
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
 800ef2c:	460b      	mov	r3, r1
 800ef2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800ef30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	da0c      	bge.n	800ef52 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ef38:	78fb      	ldrb	r3, [r7, #3]
 800ef3a:	f003 020f 	and.w	r2, r3, #15
 800ef3e:	4613      	mov	r3, r2
 800ef40:	00db      	lsls	r3, r3, #3
 800ef42:	4413      	add	r3, r2
 800ef44:	009b      	lsls	r3, r3, #2
 800ef46:	3338      	adds	r3, #56	; 0x38
 800ef48:	687a      	ldr	r2, [r7, #4]
 800ef4a:	4413      	add	r3, r2
 800ef4c:	3304      	adds	r3, #4
 800ef4e:	60fb      	str	r3, [r7, #12]
 800ef50:	e00c      	b.n	800ef6c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ef52:	78fb      	ldrb	r3, [r7, #3]
 800ef54:	f003 020f 	and.w	r2, r3, #15
 800ef58:	4613      	mov	r3, r2
 800ef5a:	00db      	lsls	r3, r3, #3
 800ef5c:	4413      	add	r3, r2
 800ef5e:	009b      	lsls	r3, r3, #2
 800ef60:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ef64:	687a      	ldr	r2, [r7, #4]
 800ef66:	4413      	add	r3, r2
 800ef68:	3304      	adds	r3, #4
 800ef6a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	68f9      	ldr	r1, [r7, #12]
 800ef72:	4618      	mov	r0, r3
 800ef74:	f003 ffb2 	bl	8012edc <USB_EPStopXfer>
 800ef78:	4603      	mov	r3, r0
 800ef7a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800ef7c:	7afb      	ldrb	r3, [r7, #11]
}
 800ef7e:	4618      	mov	r0, r3
 800ef80:	3710      	adds	r7, #16
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bd80      	pop	{r7, pc}

0800ef86 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ef86:	b580      	push	{r7, lr}
 800ef88:	b08a      	sub	sp, #40	; 0x28
 800ef8a:	af02      	add	r7, sp, #8
 800ef8c:	6078      	str	r0, [r7, #4]
 800ef8e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef96:	697b      	ldr	r3, [r7, #20]
 800ef98:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800ef9a:	683a      	ldr	r2, [r7, #0]
 800ef9c:	4613      	mov	r3, r2
 800ef9e:	00db      	lsls	r3, r3, #3
 800efa0:	4413      	add	r3, r2
 800efa2:	009b      	lsls	r3, r3, #2
 800efa4:	3338      	adds	r3, #56	; 0x38
 800efa6:	687a      	ldr	r2, [r7, #4]
 800efa8:	4413      	add	r3, r2
 800efaa:	3304      	adds	r3, #4
 800efac:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	6a1a      	ldr	r2, [r3, #32]
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	699b      	ldr	r3, [r3, #24]
 800efb6:	429a      	cmp	r2, r3
 800efb8:	d901      	bls.n	800efbe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800efba:	2301      	movs	r3, #1
 800efbc:	e06c      	b.n	800f098 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	699a      	ldr	r2, [r3, #24]
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	6a1b      	ldr	r3, [r3, #32]
 800efc6:	1ad3      	subs	r3, r2, r3
 800efc8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	68db      	ldr	r3, [r3, #12]
 800efce:	69fa      	ldr	r2, [r7, #28]
 800efd0:	429a      	cmp	r2, r3
 800efd2:	d902      	bls.n	800efda <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	68db      	ldr	r3, [r3, #12]
 800efd8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800efda:	69fb      	ldr	r3, [r7, #28]
 800efdc:	3303      	adds	r3, #3
 800efde:	089b      	lsrs	r3, r3, #2
 800efe0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800efe2:	e02b      	b.n	800f03c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	699a      	ldr	r2, [r3, #24]
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	6a1b      	ldr	r3, [r3, #32]
 800efec:	1ad3      	subs	r3, r2, r3
 800efee:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	68db      	ldr	r3, [r3, #12]
 800eff4:	69fa      	ldr	r2, [r7, #28]
 800eff6:	429a      	cmp	r2, r3
 800eff8:	d902      	bls.n	800f000 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	68db      	ldr	r3, [r3, #12]
 800effe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800f000:	69fb      	ldr	r3, [r7, #28]
 800f002:	3303      	adds	r3, #3
 800f004:	089b      	lsrs	r3, r3, #2
 800f006:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	6919      	ldr	r1, [r3, #16]
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	b2da      	uxtb	r2, r3
 800f010:	69fb      	ldr	r3, [r7, #28]
 800f012:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800f018:	b2db      	uxtb	r3, r3
 800f01a:	9300      	str	r3, [sp, #0]
 800f01c:	4603      	mov	r3, r0
 800f01e:	6978      	ldr	r0, [r7, #20]
 800f020:	f004 f806 	bl	8013030 <USB_WritePacket>

    ep->xfer_buff  += len;
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	691a      	ldr	r2, [r3, #16]
 800f028:	69fb      	ldr	r3, [r7, #28]
 800f02a:	441a      	add	r2, r3
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	6a1a      	ldr	r2, [r3, #32]
 800f034:	69fb      	ldr	r3, [r7, #28]
 800f036:	441a      	add	r2, r3
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800f03c:	683b      	ldr	r3, [r7, #0]
 800f03e:	015a      	lsls	r2, r3, #5
 800f040:	693b      	ldr	r3, [r7, #16]
 800f042:	4413      	add	r3, r2
 800f044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f048:	699b      	ldr	r3, [r3, #24]
 800f04a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800f04c:	69ba      	ldr	r2, [r7, #24]
 800f04e:	429a      	cmp	r2, r3
 800f050:	d809      	bhi.n	800f066 <PCD_WriteEmptyTxFifo+0xe0>
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	6a1a      	ldr	r2, [r3, #32]
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800f05a:	429a      	cmp	r2, r3
 800f05c:	d203      	bcs.n	800f066 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	699b      	ldr	r3, [r3, #24]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d1be      	bne.n	800efe4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	699a      	ldr	r2, [r3, #24]
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	6a1b      	ldr	r3, [r3, #32]
 800f06e:	429a      	cmp	r2, r3
 800f070:	d811      	bhi.n	800f096 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800f072:	683b      	ldr	r3, [r7, #0]
 800f074:	f003 030f 	and.w	r3, r3, #15
 800f078:	2201      	movs	r2, #1
 800f07a:	fa02 f303 	lsl.w	r3, r2, r3
 800f07e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800f080:	693b      	ldr	r3, [r7, #16]
 800f082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f086:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f088:	68bb      	ldr	r3, [r7, #8]
 800f08a:	43db      	mvns	r3, r3
 800f08c:	6939      	ldr	r1, [r7, #16]
 800f08e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f092:	4013      	ands	r3, r2
 800f094:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800f096:	2300      	movs	r3, #0
}
 800f098:	4618      	mov	r0, r3
 800f09a:	3720      	adds	r7, #32
 800f09c:	46bd      	mov	sp, r7
 800f09e:	bd80      	pop	{r7, pc}

0800f0a0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b088      	sub	sp, #32
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	6078      	str	r0, [r7, #4]
 800f0a8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f0b0:	69fb      	ldr	r3, [r7, #28]
 800f0b2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f0b4:	69fb      	ldr	r3, [r7, #28]
 800f0b6:	333c      	adds	r3, #60	; 0x3c
 800f0b8:	3304      	adds	r3, #4
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800f0be:	683b      	ldr	r3, [r7, #0]
 800f0c0:	015a      	lsls	r2, r3, #5
 800f0c2:	69bb      	ldr	r3, [r7, #24]
 800f0c4:	4413      	add	r3, r2
 800f0c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0ca:	689b      	ldr	r3, [r3, #8]
 800f0cc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	691b      	ldr	r3, [r3, #16]
 800f0d2:	2b01      	cmp	r3, #1
 800f0d4:	d17b      	bne.n	800f1ce <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800f0d6:	693b      	ldr	r3, [r7, #16]
 800f0d8:	f003 0308 	and.w	r3, r3, #8
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d015      	beq.n	800f10c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800f0e0:	697b      	ldr	r3, [r7, #20]
 800f0e2:	4a61      	ldr	r2, [pc, #388]	; (800f268 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800f0e4:	4293      	cmp	r3, r2
 800f0e6:	f240 80b9 	bls.w	800f25c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800f0ea:	693b      	ldr	r3, [r7, #16]
 800f0ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	f000 80b3 	beq.w	800f25c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	015a      	lsls	r2, r3, #5
 800f0fa:	69bb      	ldr	r3, [r7, #24]
 800f0fc:	4413      	add	r3, r2
 800f0fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f102:	461a      	mov	r2, r3
 800f104:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f108:	6093      	str	r3, [r2, #8]
 800f10a:	e0a7      	b.n	800f25c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800f10c:	693b      	ldr	r3, [r7, #16]
 800f10e:	f003 0320 	and.w	r3, r3, #32
 800f112:	2b00      	cmp	r3, #0
 800f114:	d009      	beq.n	800f12a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800f116:	683b      	ldr	r3, [r7, #0]
 800f118:	015a      	lsls	r2, r3, #5
 800f11a:	69bb      	ldr	r3, [r7, #24]
 800f11c:	4413      	add	r3, r2
 800f11e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f122:	461a      	mov	r2, r3
 800f124:	2320      	movs	r3, #32
 800f126:	6093      	str	r3, [r2, #8]
 800f128:	e098      	b.n	800f25c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800f12a:	693b      	ldr	r3, [r7, #16]
 800f12c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800f130:	2b00      	cmp	r3, #0
 800f132:	f040 8093 	bne.w	800f25c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800f136:	697b      	ldr	r3, [r7, #20]
 800f138:	4a4b      	ldr	r2, [pc, #300]	; (800f268 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800f13a:	4293      	cmp	r3, r2
 800f13c:	d90f      	bls.n	800f15e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800f13e:	693b      	ldr	r3, [r7, #16]
 800f140:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800f144:	2b00      	cmp	r3, #0
 800f146:	d00a      	beq.n	800f15e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	015a      	lsls	r2, r3, #5
 800f14c:	69bb      	ldr	r3, [r7, #24]
 800f14e:	4413      	add	r3, r2
 800f150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f154:	461a      	mov	r2, r3
 800f156:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f15a:	6093      	str	r3, [r2, #8]
 800f15c:	e07e      	b.n	800f25c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800f15e:	683a      	ldr	r2, [r7, #0]
 800f160:	4613      	mov	r3, r2
 800f162:	00db      	lsls	r3, r3, #3
 800f164:	4413      	add	r3, r2
 800f166:	009b      	lsls	r3, r3, #2
 800f168:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800f16c:	687a      	ldr	r2, [r7, #4]
 800f16e:	4413      	add	r3, r2
 800f170:	3304      	adds	r3, #4
 800f172:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	69da      	ldr	r2, [r3, #28]
 800f178:	683b      	ldr	r3, [r7, #0]
 800f17a:	0159      	lsls	r1, r3, #5
 800f17c:	69bb      	ldr	r3, [r7, #24]
 800f17e:	440b      	add	r3, r1
 800f180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f184:	691b      	ldr	r3, [r3, #16]
 800f186:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f18a:	1ad2      	subs	r2, r2, r3
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d114      	bne.n	800f1c0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	699b      	ldr	r3, [r3, #24]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d109      	bne.n	800f1b2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	6818      	ldr	r0, [r3, #0]
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f1a8:	461a      	mov	r2, r3
 800f1aa:	2101      	movs	r1, #1
 800f1ac:	f004 f9d6 	bl	801355c <USB_EP0_OutStart>
 800f1b0:	e006      	b.n	800f1c0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	691a      	ldr	r2, [r3, #16]
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	6a1b      	ldr	r3, [r3, #32]
 800f1ba:	441a      	add	r2, r3
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800f1c0:	683b      	ldr	r3, [r7, #0]
 800f1c2:	b2db      	uxtb	r3, r3
 800f1c4:	4619      	mov	r1, r3
 800f1c6:	6878      	ldr	r0, [r7, #4]
 800f1c8:	f006 fca6 	bl	8015b18 <HAL_PCD_DataOutStageCallback>
 800f1cc:	e046      	b.n	800f25c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800f1ce:	697b      	ldr	r3, [r7, #20]
 800f1d0:	4a26      	ldr	r2, [pc, #152]	; (800f26c <PCD_EP_OutXfrComplete_int+0x1cc>)
 800f1d2:	4293      	cmp	r3, r2
 800f1d4:	d124      	bne.n	800f220 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800f1d6:	693b      	ldr	r3, [r7, #16]
 800f1d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d00a      	beq.n	800f1f6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800f1e0:	683b      	ldr	r3, [r7, #0]
 800f1e2:	015a      	lsls	r2, r3, #5
 800f1e4:	69bb      	ldr	r3, [r7, #24]
 800f1e6:	4413      	add	r3, r2
 800f1e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1ec:	461a      	mov	r2, r3
 800f1ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f1f2:	6093      	str	r3, [r2, #8]
 800f1f4:	e032      	b.n	800f25c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800f1f6:	693b      	ldr	r3, [r7, #16]
 800f1f8:	f003 0320 	and.w	r3, r3, #32
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d008      	beq.n	800f212 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800f200:	683b      	ldr	r3, [r7, #0]
 800f202:	015a      	lsls	r2, r3, #5
 800f204:	69bb      	ldr	r3, [r7, #24]
 800f206:	4413      	add	r3, r2
 800f208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f20c:	461a      	mov	r2, r3
 800f20e:	2320      	movs	r3, #32
 800f210:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	b2db      	uxtb	r3, r3
 800f216:	4619      	mov	r1, r3
 800f218:	6878      	ldr	r0, [r7, #4]
 800f21a:	f006 fc7d 	bl	8015b18 <HAL_PCD_DataOutStageCallback>
 800f21e:	e01d      	b.n	800f25c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800f220:	683b      	ldr	r3, [r7, #0]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d114      	bne.n	800f250 <PCD_EP_OutXfrComplete_int+0x1b0>
 800f226:	6879      	ldr	r1, [r7, #4]
 800f228:	683a      	ldr	r2, [r7, #0]
 800f22a:	4613      	mov	r3, r2
 800f22c:	00db      	lsls	r3, r3, #3
 800f22e:	4413      	add	r3, r2
 800f230:	009b      	lsls	r3, r3, #2
 800f232:	440b      	add	r3, r1
 800f234:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d108      	bne.n	800f250 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	6818      	ldr	r0, [r3, #0]
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f248:	461a      	mov	r2, r3
 800f24a:	2100      	movs	r1, #0
 800f24c:	f004 f986 	bl	801355c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	b2db      	uxtb	r3, r3
 800f254:	4619      	mov	r1, r3
 800f256:	6878      	ldr	r0, [r7, #4]
 800f258:	f006 fc5e 	bl	8015b18 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800f25c:	2300      	movs	r3, #0
}
 800f25e:	4618      	mov	r0, r3
 800f260:	3720      	adds	r7, #32
 800f262:	46bd      	mov	sp, r7
 800f264:	bd80      	pop	{r7, pc}
 800f266:	bf00      	nop
 800f268:	4f54300a 	.word	0x4f54300a
 800f26c:	4f54310a 	.word	0x4f54310a

0800f270 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800f270:	b580      	push	{r7, lr}
 800f272:	b086      	sub	sp, #24
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
 800f278:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f280:	697b      	ldr	r3, [r7, #20]
 800f282:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f284:	697b      	ldr	r3, [r7, #20]
 800f286:	333c      	adds	r3, #60	; 0x3c
 800f288:	3304      	adds	r3, #4
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800f28e:	683b      	ldr	r3, [r7, #0]
 800f290:	015a      	lsls	r2, r3, #5
 800f292:	693b      	ldr	r3, [r7, #16]
 800f294:	4413      	add	r3, r2
 800f296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f29a:	689b      	ldr	r3, [r3, #8]
 800f29c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	4a15      	ldr	r2, [pc, #84]	; (800f2f8 <PCD_EP_OutSetupPacket_int+0x88>)
 800f2a2:	4293      	cmp	r3, r2
 800f2a4:	d90e      	bls.n	800f2c4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800f2a6:	68bb      	ldr	r3, [r7, #8]
 800f2a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d009      	beq.n	800f2c4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800f2b0:	683b      	ldr	r3, [r7, #0]
 800f2b2:	015a      	lsls	r2, r3, #5
 800f2b4:	693b      	ldr	r3, [r7, #16]
 800f2b6:	4413      	add	r3, r2
 800f2b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2bc:	461a      	mov	r2, r3
 800f2be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f2c2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800f2c4:	6878      	ldr	r0, [r7, #4]
 800f2c6:	f006 fc15 	bl	8015af4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	4a0a      	ldr	r2, [pc, #40]	; (800f2f8 <PCD_EP_OutSetupPacket_int+0x88>)
 800f2ce:	4293      	cmp	r3, r2
 800f2d0:	d90c      	bls.n	800f2ec <PCD_EP_OutSetupPacket_int+0x7c>
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	691b      	ldr	r3, [r3, #16]
 800f2d6:	2b01      	cmp	r3, #1
 800f2d8:	d108      	bne.n	800f2ec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	6818      	ldr	r0, [r3, #0]
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f2e4:	461a      	mov	r2, r3
 800f2e6:	2101      	movs	r1, #1
 800f2e8:	f004 f938 	bl	801355c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800f2ec:	2300      	movs	r3, #0
}
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	3718      	adds	r7, #24
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bd80      	pop	{r7, pc}
 800f2f6:	bf00      	nop
 800f2f8:	4f54300a 	.word	0x4f54300a

0800f2fc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800f2fc:	b480      	push	{r7}
 800f2fe:	b085      	sub	sp, #20
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
 800f304:	460b      	mov	r3, r1
 800f306:	70fb      	strb	r3, [r7, #3]
 800f308:	4613      	mov	r3, r2
 800f30a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f312:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800f314:	78fb      	ldrb	r3, [r7, #3]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d107      	bne.n	800f32a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800f31a:	883b      	ldrh	r3, [r7, #0]
 800f31c:	0419      	lsls	r1, r3, #16
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	68ba      	ldr	r2, [r7, #8]
 800f324:	430a      	orrs	r2, r1
 800f326:	629a      	str	r2, [r3, #40]	; 0x28
 800f328:	e028      	b.n	800f37c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f330:	0c1b      	lsrs	r3, r3, #16
 800f332:	68ba      	ldr	r2, [r7, #8]
 800f334:	4413      	add	r3, r2
 800f336:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800f338:	2300      	movs	r3, #0
 800f33a:	73fb      	strb	r3, [r7, #15]
 800f33c:	e00d      	b.n	800f35a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681a      	ldr	r2, [r3, #0]
 800f342:	7bfb      	ldrb	r3, [r7, #15]
 800f344:	3340      	adds	r3, #64	; 0x40
 800f346:	009b      	lsls	r3, r3, #2
 800f348:	4413      	add	r3, r2
 800f34a:	685b      	ldr	r3, [r3, #4]
 800f34c:	0c1b      	lsrs	r3, r3, #16
 800f34e:	68ba      	ldr	r2, [r7, #8]
 800f350:	4413      	add	r3, r2
 800f352:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800f354:	7bfb      	ldrb	r3, [r7, #15]
 800f356:	3301      	adds	r3, #1
 800f358:	73fb      	strb	r3, [r7, #15]
 800f35a:	7bfa      	ldrb	r2, [r7, #15]
 800f35c:	78fb      	ldrb	r3, [r7, #3]
 800f35e:	3b01      	subs	r3, #1
 800f360:	429a      	cmp	r2, r3
 800f362:	d3ec      	bcc.n	800f33e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800f364:	883b      	ldrh	r3, [r7, #0]
 800f366:	0418      	lsls	r0, r3, #16
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	6819      	ldr	r1, [r3, #0]
 800f36c:	78fb      	ldrb	r3, [r7, #3]
 800f36e:	3b01      	subs	r3, #1
 800f370:	68ba      	ldr	r2, [r7, #8]
 800f372:	4302      	orrs	r2, r0
 800f374:	3340      	adds	r3, #64	; 0x40
 800f376:	009b      	lsls	r3, r3, #2
 800f378:	440b      	add	r3, r1
 800f37a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800f37c:	2300      	movs	r3, #0
}
 800f37e:	4618      	mov	r0, r3
 800f380:	3714      	adds	r7, #20
 800f382:	46bd      	mov	sp, r7
 800f384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f388:	4770      	bx	lr

0800f38a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800f38a:	b480      	push	{r7}
 800f38c:	b083      	sub	sp, #12
 800f38e:	af00      	add	r7, sp, #0
 800f390:	6078      	str	r0, [r7, #4]
 800f392:	460b      	mov	r3, r1
 800f394:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	887a      	ldrh	r2, [r7, #2]
 800f39c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800f39e:	2300      	movs	r3, #0
}
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	370c      	adds	r7, #12
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3aa:	4770      	bx	lr

0800f3ac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800f3ac:	b480      	push	{r7}
 800f3ae:	b083      	sub	sp, #12
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
 800f3b4:	460b      	mov	r3, r1
 800f3b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800f3b8:	bf00      	nop
 800f3ba:	370c      	adds	r7, #12
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c2:	4770      	bx	lr

0800f3c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b086      	sub	sp, #24
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d101      	bne.n	800f3d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800f3d2:	2301      	movs	r3, #1
 800f3d4:	e267      	b.n	800f8a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	f003 0301 	and.w	r3, r3, #1
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d075      	beq.n	800f4ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800f3e2:	4b88      	ldr	r3, [pc, #544]	; (800f604 <HAL_RCC_OscConfig+0x240>)
 800f3e4:	689b      	ldr	r3, [r3, #8]
 800f3e6:	f003 030c 	and.w	r3, r3, #12
 800f3ea:	2b04      	cmp	r3, #4
 800f3ec:	d00c      	beq.n	800f408 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f3ee:	4b85      	ldr	r3, [pc, #532]	; (800f604 <HAL_RCC_OscConfig+0x240>)
 800f3f0:	689b      	ldr	r3, [r3, #8]
 800f3f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800f3f6:	2b08      	cmp	r3, #8
 800f3f8:	d112      	bne.n	800f420 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f3fa:	4b82      	ldr	r3, [pc, #520]	; (800f604 <HAL_RCC_OscConfig+0x240>)
 800f3fc:	685b      	ldr	r3, [r3, #4]
 800f3fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f402:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f406:	d10b      	bne.n	800f420 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f408:	4b7e      	ldr	r3, [pc, #504]	; (800f604 <HAL_RCC_OscConfig+0x240>)
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f410:	2b00      	cmp	r3, #0
 800f412:	d05b      	beq.n	800f4cc <HAL_RCC_OscConfig+0x108>
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	685b      	ldr	r3, [r3, #4]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d157      	bne.n	800f4cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800f41c:	2301      	movs	r3, #1
 800f41e:	e242      	b.n	800f8a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	685b      	ldr	r3, [r3, #4]
 800f424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f428:	d106      	bne.n	800f438 <HAL_RCC_OscConfig+0x74>
 800f42a:	4b76      	ldr	r3, [pc, #472]	; (800f604 <HAL_RCC_OscConfig+0x240>)
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	4a75      	ldr	r2, [pc, #468]	; (800f604 <HAL_RCC_OscConfig+0x240>)
 800f430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f434:	6013      	str	r3, [r2, #0]
 800f436:	e01d      	b.n	800f474 <HAL_RCC_OscConfig+0xb0>
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	685b      	ldr	r3, [r3, #4]
 800f43c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f440:	d10c      	bne.n	800f45c <HAL_RCC_OscConfig+0x98>
 800f442:	4b70      	ldr	r3, [pc, #448]	; (800f604 <HAL_RCC_OscConfig+0x240>)
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	4a6f      	ldr	r2, [pc, #444]	; (800f604 <HAL_RCC_OscConfig+0x240>)
 800f448:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f44c:	6013      	str	r3, [r2, #0]
 800f44e:	4b6d      	ldr	r3, [pc, #436]	; (800f604 <HAL_RCC_OscConfig+0x240>)
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	4a6c      	ldr	r2, [pc, #432]	; (800f604 <HAL_RCC_OscConfig+0x240>)
 800f454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f458:	6013      	str	r3, [r2, #0]
 800f45a:	e00b      	b.n	800f474 <HAL_RCC_OscConfig+0xb0>
 800f45c:	4b69      	ldr	r3, [pc, #420]	; (800f604 <HAL_RCC_OscConfig+0x240>)
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	4a68      	ldr	r2, [pc, #416]	; (800f604 <HAL_RCC_OscConfig+0x240>)
 800f462:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f466:	6013      	str	r3, [r2, #0]
 800f468:	4b66      	ldr	r3, [pc, #408]	; (800f604 <HAL_RCC_OscConfig+0x240>)
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	4a65      	ldr	r2, [pc, #404]	; (800f604 <HAL_RCC_OscConfig+0x240>)
 800f46e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f472:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	685b      	ldr	r3, [r3, #4]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d013      	beq.n	800f4a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f47c:	f7fc fa7c 	bl	800b978 <HAL_GetTick>
 800f480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f482:	e008      	b.n	800f496 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f484:	f7fc fa78 	bl	800b978 <HAL_GetTick>
 800f488:	4602      	mov	r2, r0
 800f48a:	693b      	ldr	r3, [r7, #16]
 800f48c:	1ad3      	subs	r3, r2, r3
 800f48e:	2b64      	cmp	r3, #100	; 0x64
 800f490:	d901      	bls.n	800f496 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800f492:	2303      	movs	r3, #3
 800f494:	e207      	b.n	800f8a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f496:	4b5b      	ldr	r3, [pc, #364]	; (800f604 <HAL_RCC_OscConfig+0x240>)
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d0f0      	beq.n	800f484 <HAL_RCC_OscConfig+0xc0>
 800f4a2:	e014      	b.n	800f4ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f4a4:	f7fc fa68 	bl	800b978 <HAL_GetTick>
 800f4a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f4aa:	e008      	b.n	800f4be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f4ac:	f7fc fa64 	bl	800b978 <HAL_GetTick>
 800f4b0:	4602      	mov	r2, r0
 800f4b2:	693b      	ldr	r3, [r7, #16]
 800f4b4:	1ad3      	subs	r3, r2, r3
 800f4b6:	2b64      	cmp	r3, #100	; 0x64
 800f4b8:	d901      	bls.n	800f4be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800f4ba:	2303      	movs	r3, #3
 800f4bc:	e1f3      	b.n	800f8a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f4be:	4b51      	ldr	r3, [pc, #324]	; (800f604 <HAL_RCC_OscConfig+0x240>)
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d1f0      	bne.n	800f4ac <HAL_RCC_OscConfig+0xe8>
 800f4ca:	e000      	b.n	800f4ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f4cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	f003 0302 	and.w	r3, r3, #2
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d063      	beq.n	800f5a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800f4da:	4b4a      	ldr	r3, [pc, #296]	; (800f604 <HAL_RCC_OscConfig+0x240>)
 800f4dc:	689b      	ldr	r3, [r3, #8]
 800f4de:	f003 030c 	and.w	r3, r3, #12
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d00b      	beq.n	800f4fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f4e6:	4b47      	ldr	r3, [pc, #284]	; (800f604 <HAL_RCC_OscConfig+0x240>)
 800f4e8:	689b      	ldr	r3, [r3, #8]
 800f4ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800f4ee:	2b08      	cmp	r3, #8
 800f4f0:	d11c      	bne.n	800f52c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f4f2:	4b44      	ldr	r3, [pc, #272]	; (800f604 <HAL_RCC_OscConfig+0x240>)
 800f4f4:	685b      	ldr	r3, [r3, #4]
 800f4f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d116      	bne.n	800f52c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f4fe:	4b41      	ldr	r3, [pc, #260]	; (800f604 <HAL_RCC_OscConfig+0x240>)
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	f003 0302 	and.w	r3, r3, #2
 800f506:	2b00      	cmp	r3, #0
 800f508:	d005      	beq.n	800f516 <HAL_RCC_OscConfig+0x152>
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	68db      	ldr	r3, [r3, #12]
 800f50e:	2b01      	cmp	r3, #1
 800f510:	d001      	beq.n	800f516 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800f512:	2301      	movs	r3, #1
 800f514:	e1c7      	b.n	800f8a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f516:	4b3b      	ldr	r3, [pc, #236]	; (800f604 <HAL_RCC_OscConfig+0x240>)
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	691b      	ldr	r3, [r3, #16]
 800f522:	00db      	lsls	r3, r3, #3
 800f524:	4937      	ldr	r1, [pc, #220]	; (800f604 <HAL_RCC_OscConfig+0x240>)
 800f526:	4313      	orrs	r3, r2
 800f528:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f52a:	e03a      	b.n	800f5a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	68db      	ldr	r3, [r3, #12]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d020      	beq.n	800f576 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800f534:	4b34      	ldr	r3, [pc, #208]	; (800f608 <HAL_RCC_OscConfig+0x244>)
 800f536:	2201      	movs	r2, #1
 800f538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f53a:	f7fc fa1d 	bl	800b978 <HAL_GetTick>
 800f53e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f540:	e008      	b.n	800f554 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f542:	f7fc fa19 	bl	800b978 <HAL_GetTick>
 800f546:	4602      	mov	r2, r0
 800f548:	693b      	ldr	r3, [r7, #16]
 800f54a:	1ad3      	subs	r3, r2, r3
 800f54c:	2b02      	cmp	r3, #2
 800f54e:	d901      	bls.n	800f554 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800f550:	2303      	movs	r3, #3
 800f552:	e1a8      	b.n	800f8a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f554:	4b2b      	ldr	r3, [pc, #172]	; (800f604 <HAL_RCC_OscConfig+0x240>)
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	f003 0302 	and.w	r3, r3, #2
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d0f0      	beq.n	800f542 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f560:	4b28      	ldr	r3, [pc, #160]	; (800f604 <HAL_RCC_OscConfig+0x240>)
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	691b      	ldr	r3, [r3, #16]
 800f56c:	00db      	lsls	r3, r3, #3
 800f56e:	4925      	ldr	r1, [pc, #148]	; (800f604 <HAL_RCC_OscConfig+0x240>)
 800f570:	4313      	orrs	r3, r2
 800f572:	600b      	str	r3, [r1, #0]
 800f574:	e015      	b.n	800f5a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f576:	4b24      	ldr	r3, [pc, #144]	; (800f608 <HAL_RCC_OscConfig+0x244>)
 800f578:	2200      	movs	r2, #0
 800f57a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f57c:	f7fc f9fc 	bl	800b978 <HAL_GetTick>
 800f580:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f582:	e008      	b.n	800f596 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f584:	f7fc f9f8 	bl	800b978 <HAL_GetTick>
 800f588:	4602      	mov	r2, r0
 800f58a:	693b      	ldr	r3, [r7, #16]
 800f58c:	1ad3      	subs	r3, r2, r3
 800f58e:	2b02      	cmp	r3, #2
 800f590:	d901      	bls.n	800f596 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800f592:	2303      	movs	r3, #3
 800f594:	e187      	b.n	800f8a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f596:	4b1b      	ldr	r3, [pc, #108]	; (800f604 <HAL_RCC_OscConfig+0x240>)
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	f003 0302 	and.w	r3, r3, #2
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d1f0      	bne.n	800f584 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	f003 0308 	and.w	r3, r3, #8
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d036      	beq.n	800f61c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	695b      	ldr	r3, [r3, #20]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d016      	beq.n	800f5e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f5b6:	4b15      	ldr	r3, [pc, #84]	; (800f60c <HAL_RCC_OscConfig+0x248>)
 800f5b8:	2201      	movs	r2, #1
 800f5ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f5bc:	f7fc f9dc 	bl	800b978 <HAL_GetTick>
 800f5c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f5c2:	e008      	b.n	800f5d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f5c4:	f7fc f9d8 	bl	800b978 <HAL_GetTick>
 800f5c8:	4602      	mov	r2, r0
 800f5ca:	693b      	ldr	r3, [r7, #16]
 800f5cc:	1ad3      	subs	r3, r2, r3
 800f5ce:	2b02      	cmp	r3, #2
 800f5d0:	d901      	bls.n	800f5d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800f5d2:	2303      	movs	r3, #3
 800f5d4:	e167      	b.n	800f8a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f5d6:	4b0b      	ldr	r3, [pc, #44]	; (800f604 <HAL_RCC_OscConfig+0x240>)
 800f5d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5da:	f003 0302 	and.w	r3, r3, #2
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d0f0      	beq.n	800f5c4 <HAL_RCC_OscConfig+0x200>
 800f5e2:	e01b      	b.n	800f61c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f5e4:	4b09      	ldr	r3, [pc, #36]	; (800f60c <HAL_RCC_OscConfig+0x248>)
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f5ea:	f7fc f9c5 	bl	800b978 <HAL_GetTick>
 800f5ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f5f0:	e00e      	b.n	800f610 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f5f2:	f7fc f9c1 	bl	800b978 <HAL_GetTick>
 800f5f6:	4602      	mov	r2, r0
 800f5f8:	693b      	ldr	r3, [r7, #16]
 800f5fa:	1ad3      	subs	r3, r2, r3
 800f5fc:	2b02      	cmp	r3, #2
 800f5fe:	d907      	bls.n	800f610 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800f600:	2303      	movs	r3, #3
 800f602:	e150      	b.n	800f8a6 <HAL_RCC_OscConfig+0x4e2>
 800f604:	40023800 	.word	0x40023800
 800f608:	42470000 	.word	0x42470000
 800f60c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f610:	4b88      	ldr	r3, [pc, #544]	; (800f834 <HAL_RCC_OscConfig+0x470>)
 800f612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f614:	f003 0302 	and.w	r3, r3, #2
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d1ea      	bne.n	800f5f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	f003 0304 	and.w	r3, r3, #4
 800f624:	2b00      	cmp	r3, #0
 800f626:	f000 8097 	beq.w	800f758 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f62a:	2300      	movs	r3, #0
 800f62c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f62e:	4b81      	ldr	r3, [pc, #516]	; (800f834 <HAL_RCC_OscConfig+0x470>)
 800f630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f636:	2b00      	cmp	r3, #0
 800f638:	d10f      	bne.n	800f65a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f63a:	2300      	movs	r3, #0
 800f63c:	60bb      	str	r3, [r7, #8]
 800f63e:	4b7d      	ldr	r3, [pc, #500]	; (800f834 <HAL_RCC_OscConfig+0x470>)
 800f640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f642:	4a7c      	ldr	r2, [pc, #496]	; (800f834 <HAL_RCC_OscConfig+0x470>)
 800f644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f648:	6413      	str	r3, [r2, #64]	; 0x40
 800f64a:	4b7a      	ldr	r3, [pc, #488]	; (800f834 <HAL_RCC_OscConfig+0x470>)
 800f64c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f64e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f652:	60bb      	str	r3, [r7, #8]
 800f654:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f656:	2301      	movs	r3, #1
 800f658:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f65a:	4b77      	ldr	r3, [pc, #476]	; (800f838 <HAL_RCC_OscConfig+0x474>)
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f662:	2b00      	cmp	r3, #0
 800f664:	d118      	bne.n	800f698 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800f666:	4b74      	ldr	r3, [pc, #464]	; (800f838 <HAL_RCC_OscConfig+0x474>)
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	4a73      	ldr	r2, [pc, #460]	; (800f838 <HAL_RCC_OscConfig+0x474>)
 800f66c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f670:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f672:	f7fc f981 	bl	800b978 <HAL_GetTick>
 800f676:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f678:	e008      	b.n	800f68c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f67a:	f7fc f97d 	bl	800b978 <HAL_GetTick>
 800f67e:	4602      	mov	r2, r0
 800f680:	693b      	ldr	r3, [r7, #16]
 800f682:	1ad3      	subs	r3, r2, r3
 800f684:	2b02      	cmp	r3, #2
 800f686:	d901      	bls.n	800f68c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800f688:	2303      	movs	r3, #3
 800f68a:	e10c      	b.n	800f8a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f68c:	4b6a      	ldr	r3, [pc, #424]	; (800f838 <HAL_RCC_OscConfig+0x474>)
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f694:	2b00      	cmp	r3, #0
 800f696:	d0f0      	beq.n	800f67a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	689b      	ldr	r3, [r3, #8]
 800f69c:	2b01      	cmp	r3, #1
 800f69e:	d106      	bne.n	800f6ae <HAL_RCC_OscConfig+0x2ea>
 800f6a0:	4b64      	ldr	r3, [pc, #400]	; (800f834 <HAL_RCC_OscConfig+0x470>)
 800f6a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6a4:	4a63      	ldr	r2, [pc, #396]	; (800f834 <HAL_RCC_OscConfig+0x470>)
 800f6a6:	f043 0301 	orr.w	r3, r3, #1
 800f6aa:	6713      	str	r3, [r2, #112]	; 0x70
 800f6ac:	e01c      	b.n	800f6e8 <HAL_RCC_OscConfig+0x324>
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	689b      	ldr	r3, [r3, #8]
 800f6b2:	2b05      	cmp	r3, #5
 800f6b4:	d10c      	bne.n	800f6d0 <HAL_RCC_OscConfig+0x30c>
 800f6b6:	4b5f      	ldr	r3, [pc, #380]	; (800f834 <HAL_RCC_OscConfig+0x470>)
 800f6b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6ba:	4a5e      	ldr	r2, [pc, #376]	; (800f834 <HAL_RCC_OscConfig+0x470>)
 800f6bc:	f043 0304 	orr.w	r3, r3, #4
 800f6c0:	6713      	str	r3, [r2, #112]	; 0x70
 800f6c2:	4b5c      	ldr	r3, [pc, #368]	; (800f834 <HAL_RCC_OscConfig+0x470>)
 800f6c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6c6:	4a5b      	ldr	r2, [pc, #364]	; (800f834 <HAL_RCC_OscConfig+0x470>)
 800f6c8:	f043 0301 	orr.w	r3, r3, #1
 800f6cc:	6713      	str	r3, [r2, #112]	; 0x70
 800f6ce:	e00b      	b.n	800f6e8 <HAL_RCC_OscConfig+0x324>
 800f6d0:	4b58      	ldr	r3, [pc, #352]	; (800f834 <HAL_RCC_OscConfig+0x470>)
 800f6d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6d4:	4a57      	ldr	r2, [pc, #348]	; (800f834 <HAL_RCC_OscConfig+0x470>)
 800f6d6:	f023 0301 	bic.w	r3, r3, #1
 800f6da:	6713      	str	r3, [r2, #112]	; 0x70
 800f6dc:	4b55      	ldr	r3, [pc, #340]	; (800f834 <HAL_RCC_OscConfig+0x470>)
 800f6de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6e0:	4a54      	ldr	r2, [pc, #336]	; (800f834 <HAL_RCC_OscConfig+0x470>)
 800f6e2:	f023 0304 	bic.w	r3, r3, #4
 800f6e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	689b      	ldr	r3, [r3, #8]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d015      	beq.n	800f71c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f6f0:	f7fc f942 	bl	800b978 <HAL_GetTick>
 800f6f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f6f6:	e00a      	b.n	800f70e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f6f8:	f7fc f93e 	bl	800b978 <HAL_GetTick>
 800f6fc:	4602      	mov	r2, r0
 800f6fe:	693b      	ldr	r3, [r7, #16]
 800f700:	1ad3      	subs	r3, r2, r3
 800f702:	f241 3288 	movw	r2, #5000	; 0x1388
 800f706:	4293      	cmp	r3, r2
 800f708:	d901      	bls.n	800f70e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800f70a:	2303      	movs	r3, #3
 800f70c:	e0cb      	b.n	800f8a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f70e:	4b49      	ldr	r3, [pc, #292]	; (800f834 <HAL_RCC_OscConfig+0x470>)
 800f710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f712:	f003 0302 	and.w	r3, r3, #2
 800f716:	2b00      	cmp	r3, #0
 800f718:	d0ee      	beq.n	800f6f8 <HAL_RCC_OscConfig+0x334>
 800f71a:	e014      	b.n	800f746 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f71c:	f7fc f92c 	bl	800b978 <HAL_GetTick>
 800f720:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f722:	e00a      	b.n	800f73a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f724:	f7fc f928 	bl	800b978 <HAL_GetTick>
 800f728:	4602      	mov	r2, r0
 800f72a:	693b      	ldr	r3, [r7, #16]
 800f72c:	1ad3      	subs	r3, r2, r3
 800f72e:	f241 3288 	movw	r2, #5000	; 0x1388
 800f732:	4293      	cmp	r3, r2
 800f734:	d901      	bls.n	800f73a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800f736:	2303      	movs	r3, #3
 800f738:	e0b5      	b.n	800f8a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f73a:	4b3e      	ldr	r3, [pc, #248]	; (800f834 <HAL_RCC_OscConfig+0x470>)
 800f73c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f73e:	f003 0302 	and.w	r3, r3, #2
 800f742:	2b00      	cmp	r3, #0
 800f744:	d1ee      	bne.n	800f724 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800f746:	7dfb      	ldrb	r3, [r7, #23]
 800f748:	2b01      	cmp	r3, #1
 800f74a:	d105      	bne.n	800f758 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f74c:	4b39      	ldr	r3, [pc, #228]	; (800f834 <HAL_RCC_OscConfig+0x470>)
 800f74e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f750:	4a38      	ldr	r2, [pc, #224]	; (800f834 <HAL_RCC_OscConfig+0x470>)
 800f752:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f756:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	699b      	ldr	r3, [r3, #24]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	f000 80a1 	beq.w	800f8a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800f762:	4b34      	ldr	r3, [pc, #208]	; (800f834 <HAL_RCC_OscConfig+0x470>)
 800f764:	689b      	ldr	r3, [r3, #8]
 800f766:	f003 030c 	and.w	r3, r3, #12
 800f76a:	2b08      	cmp	r3, #8
 800f76c:	d05c      	beq.n	800f828 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	699b      	ldr	r3, [r3, #24]
 800f772:	2b02      	cmp	r3, #2
 800f774:	d141      	bne.n	800f7fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f776:	4b31      	ldr	r3, [pc, #196]	; (800f83c <HAL_RCC_OscConfig+0x478>)
 800f778:	2200      	movs	r2, #0
 800f77a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f77c:	f7fc f8fc 	bl	800b978 <HAL_GetTick>
 800f780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f782:	e008      	b.n	800f796 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f784:	f7fc f8f8 	bl	800b978 <HAL_GetTick>
 800f788:	4602      	mov	r2, r0
 800f78a:	693b      	ldr	r3, [r7, #16]
 800f78c:	1ad3      	subs	r3, r2, r3
 800f78e:	2b02      	cmp	r3, #2
 800f790:	d901      	bls.n	800f796 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800f792:	2303      	movs	r3, #3
 800f794:	e087      	b.n	800f8a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f796:	4b27      	ldr	r3, [pc, #156]	; (800f834 <HAL_RCC_OscConfig+0x470>)
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d1f0      	bne.n	800f784 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	69da      	ldr	r2, [r3, #28]
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	6a1b      	ldr	r3, [r3, #32]
 800f7aa:	431a      	orrs	r2, r3
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7b0:	019b      	lsls	r3, r3, #6
 800f7b2:	431a      	orrs	r2, r3
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7b8:	085b      	lsrs	r3, r3, #1
 800f7ba:	3b01      	subs	r3, #1
 800f7bc:	041b      	lsls	r3, r3, #16
 800f7be:	431a      	orrs	r2, r3
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7c4:	061b      	lsls	r3, r3, #24
 800f7c6:	491b      	ldr	r1, [pc, #108]	; (800f834 <HAL_RCC_OscConfig+0x470>)
 800f7c8:	4313      	orrs	r3, r2
 800f7ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f7cc:	4b1b      	ldr	r3, [pc, #108]	; (800f83c <HAL_RCC_OscConfig+0x478>)
 800f7ce:	2201      	movs	r2, #1
 800f7d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f7d2:	f7fc f8d1 	bl	800b978 <HAL_GetTick>
 800f7d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f7d8:	e008      	b.n	800f7ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f7da:	f7fc f8cd 	bl	800b978 <HAL_GetTick>
 800f7de:	4602      	mov	r2, r0
 800f7e0:	693b      	ldr	r3, [r7, #16]
 800f7e2:	1ad3      	subs	r3, r2, r3
 800f7e4:	2b02      	cmp	r3, #2
 800f7e6:	d901      	bls.n	800f7ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800f7e8:	2303      	movs	r3, #3
 800f7ea:	e05c      	b.n	800f8a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f7ec:	4b11      	ldr	r3, [pc, #68]	; (800f834 <HAL_RCC_OscConfig+0x470>)
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d0f0      	beq.n	800f7da <HAL_RCC_OscConfig+0x416>
 800f7f8:	e054      	b.n	800f8a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f7fa:	4b10      	ldr	r3, [pc, #64]	; (800f83c <HAL_RCC_OscConfig+0x478>)
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f800:	f7fc f8ba 	bl	800b978 <HAL_GetTick>
 800f804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f806:	e008      	b.n	800f81a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f808:	f7fc f8b6 	bl	800b978 <HAL_GetTick>
 800f80c:	4602      	mov	r2, r0
 800f80e:	693b      	ldr	r3, [r7, #16]
 800f810:	1ad3      	subs	r3, r2, r3
 800f812:	2b02      	cmp	r3, #2
 800f814:	d901      	bls.n	800f81a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800f816:	2303      	movs	r3, #3
 800f818:	e045      	b.n	800f8a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f81a:	4b06      	ldr	r3, [pc, #24]	; (800f834 <HAL_RCC_OscConfig+0x470>)
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f822:	2b00      	cmp	r3, #0
 800f824:	d1f0      	bne.n	800f808 <HAL_RCC_OscConfig+0x444>
 800f826:	e03d      	b.n	800f8a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	699b      	ldr	r3, [r3, #24]
 800f82c:	2b01      	cmp	r3, #1
 800f82e:	d107      	bne.n	800f840 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800f830:	2301      	movs	r3, #1
 800f832:	e038      	b.n	800f8a6 <HAL_RCC_OscConfig+0x4e2>
 800f834:	40023800 	.word	0x40023800
 800f838:	40007000 	.word	0x40007000
 800f83c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800f840:	4b1b      	ldr	r3, [pc, #108]	; (800f8b0 <HAL_RCC_OscConfig+0x4ec>)
 800f842:	685b      	ldr	r3, [r3, #4]
 800f844:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	699b      	ldr	r3, [r3, #24]
 800f84a:	2b01      	cmp	r3, #1
 800f84c:	d028      	beq.n	800f8a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f858:	429a      	cmp	r2, r3
 800f85a:	d121      	bne.n	800f8a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f866:	429a      	cmp	r2, r3
 800f868:	d11a      	bne.n	800f8a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f86a:	68fa      	ldr	r2, [r7, #12]
 800f86c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800f870:	4013      	ands	r3, r2
 800f872:	687a      	ldr	r2, [r7, #4]
 800f874:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800f876:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f878:	4293      	cmp	r3, r2
 800f87a:	d111      	bne.n	800f8a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f886:	085b      	lsrs	r3, r3, #1
 800f888:	3b01      	subs	r3, #1
 800f88a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f88c:	429a      	cmp	r2, r3
 800f88e:	d107      	bne.n	800f8a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f89a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f89c:	429a      	cmp	r2, r3
 800f89e:	d001      	beq.n	800f8a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800f8a0:	2301      	movs	r3, #1
 800f8a2:	e000      	b.n	800f8a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800f8a4:	2300      	movs	r3, #0
}
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	3718      	adds	r7, #24
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	bd80      	pop	{r7, pc}
 800f8ae:	bf00      	nop
 800f8b0:	40023800 	.word	0x40023800

0800f8b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	b084      	sub	sp, #16
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]
 800f8bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d101      	bne.n	800f8c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f8c4:	2301      	movs	r3, #1
 800f8c6:	e0cc      	b.n	800fa62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800f8c8:	4b68      	ldr	r3, [pc, #416]	; (800fa6c <HAL_RCC_ClockConfig+0x1b8>)
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	f003 0307 	and.w	r3, r3, #7
 800f8d0:	683a      	ldr	r2, [r7, #0]
 800f8d2:	429a      	cmp	r2, r3
 800f8d4:	d90c      	bls.n	800f8f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f8d6:	4b65      	ldr	r3, [pc, #404]	; (800fa6c <HAL_RCC_ClockConfig+0x1b8>)
 800f8d8:	683a      	ldr	r2, [r7, #0]
 800f8da:	b2d2      	uxtb	r2, r2
 800f8dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f8de:	4b63      	ldr	r3, [pc, #396]	; (800fa6c <HAL_RCC_ClockConfig+0x1b8>)
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	f003 0307 	and.w	r3, r3, #7
 800f8e6:	683a      	ldr	r2, [r7, #0]
 800f8e8:	429a      	cmp	r2, r3
 800f8ea:	d001      	beq.n	800f8f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800f8ec:	2301      	movs	r3, #1
 800f8ee:	e0b8      	b.n	800fa62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	f003 0302 	and.w	r3, r3, #2
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d020      	beq.n	800f93e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	f003 0304 	and.w	r3, r3, #4
 800f904:	2b00      	cmp	r3, #0
 800f906:	d005      	beq.n	800f914 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800f908:	4b59      	ldr	r3, [pc, #356]	; (800fa70 <HAL_RCC_ClockConfig+0x1bc>)
 800f90a:	689b      	ldr	r3, [r3, #8]
 800f90c:	4a58      	ldr	r2, [pc, #352]	; (800fa70 <HAL_RCC_ClockConfig+0x1bc>)
 800f90e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800f912:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	f003 0308 	and.w	r3, r3, #8
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d005      	beq.n	800f92c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800f920:	4b53      	ldr	r3, [pc, #332]	; (800fa70 <HAL_RCC_ClockConfig+0x1bc>)
 800f922:	689b      	ldr	r3, [r3, #8]
 800f924:	4a52      	ldr	r2, [pc, #328]	; (800fa70 <HAL_RCC_ClockConfig+0x1bc>)
 800f926:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800f92a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f92c:	4b50      	ldr	r3, [pc, #320]	; (800fa70 <HAL_RCC_ClockConfig+0x1bc>)
 800f92e:	689b      	ldr	r3, [r3, #8]
 800f930:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	689b      	ldr	r3, [r3, #8]
 800f938:	494d      	ldr	r1, [pc, #308]	; (800fa70 <HAL_RCC_ClockConfig+0x1bc>)
 800f93a:	4313      	orrs	r3, r2
 800f93c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	f003 0301 	and.w	r3, r3, #1
 800f946:	2b00      	cmp	r3, #0
 800f948:	d044      	beq.n	800f9d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	685b      	ldr	r3, [r3, #4]
 800f94e:	2b01      	cmp	r3, #1
 800f950:	d107      	bne.n	800f962 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f952:	4b47      	ldr	r3, [pc, #284]	; (800fa70 <HAL_RCC_ClockConfig+0x1bc>)
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d119      	bne.n	800f992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f95e:	2301      	movs	r3, #1
 800f960:	e07f      	b.n	800fa62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	685b      	ldr	r3, [r3, #4]
 800f966:	2b02      	cmp	r3, #2
 800f968:	d003      	beq.n	800f972 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f96e:	2b03      	cmp	r3, #3
 800f970:	d107      	bne.n	800f982 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f972:	4b3f      	ldr	r3, [pc, #252]	; (800fa70 <HAL_RCC_ClockConfig+0x1bc>)
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d109      	bne.n	800f992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f97e:	2301      	movs	r3, #1
 800f980:	e06f      	b.n	800fa62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f982:	4b3b      	ldr	r3, [pc, #236]	; (800fa70 <HAL_RCC_ClockConfig+0x1bc>)
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	f003 0302 	and.w	r3, r3, #2
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d101      	bne.n	800f992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f98e:	2301      	movs	r3, #1
 800f990:	e067      	b.n	800fa62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800f992:	4b37      	ldr	r3, [pc, #220]	; (800fa70 <HAL_RCC_ClockConfig+0x1bc>)
 800f994:	689b      	ldr	r3, [r3, #8]
 800f996:	f023 0203 	bic.w	r2, r3, #3
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	685b      	ldr	r3, [r3, #4]
 800f99e:	4934      	ldr	r1, [pc, #208]	; (800fa70 <HAL_RCC_ClockConfig+0x1bc>)
 800f9a0:	4313      	orrs	r3, r2
 800f9a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800f9a4:	f7fb ffe8 	bl	800b978 <HAL_GetTick>
 800f9a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f9aa:	e00a      	b.n	800f9c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f9ac:	f7fb ffe4 	bl	800b978 <HAL_GetTick>
 800f9b0:	4602      	mov	r2, r0
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	1ad3      	subs	r3, r2, r3
 800f9b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800f9ba:	4293      	cmp	r3, r2
 800f9bc:	d901      	bls.n	800f9c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800f9be:	2303      	movs	r3, #3
 800f9c0:	e04f      	b.n	800fa62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f9c2:	4b2b      	ldr	r3, [pc, #172]	; (800fa70 <HAL_RCC_ClockConfig+0x1bc>)
 800f9c4:	689b      	ldr	r3, [r3, #8]
 800f9c6:	f003 020c 	and.w	r2, r3, #12
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	685b      	ldr	r3, [r3, #4]
 800f9ce:	009b      	lsls	r3, r3, #2
 800f9d0:	429a      	cmp	r2, r3
 800f9d2:	d1eb      	bne.n	800f9ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800f9d4:	4b25      	ldr	r3, [pc, #148]	; (800fa6c <HAL_RCC_ClockConfig+0x1b8>)
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	f003 0307 	and.w	r3, r3, #7
 800f9dc:	683a      	ldr	r2, [r7, #0]
 800f9de:	429a      	cmp	r2, r3
 800f9e0:	d20c      	bcs.n	800f9fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f9e2:	4b22      	ldr	r3, [pc, #136]	; (800fa6c <HAL_RCC_ClockConfig+0x1b8>)
 800f9e4:	683a      	ldr	r2, [r7, #0]
 800f9e6:	b2d2      	uxtb	r2, r2
 800f9e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f9ea:	4b20      	ldr	r3, [pc, #128]	; (800fa6c <HAL_RCC_ClockConfig+0x1b8>)
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	f003 0307 	and.w	r3, r3, #7
 800f9f2:	683a      	ldr	r2, [r7, #0]
 800f9f4:	429a      	cmp	r2, r3
 800f9f6:	d001      	beq.n	800f9fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800f9f8:	2301      	movs	r3, #1
 800f9fa:	e032      	b.n	800fa62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	f003 0304 	and.w	r3, r3, #4
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d008      	beq.n	800fa1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800fa08:	4b19      	ldr	r3, [pc, #100]	; (800fa70 <HAL_RCC_ClockConfig+0x1bc>)
 800fa0a:	689b      	ldr	r3, [r3, #8]
 800fa0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	68db      	ldr	r3, [r3, #12]
 800fa14:	4916      	ldr	r1, [pc, #88]	; (800fa70 <HAL_RCC_ClockConfig+0x1bc>)
 800fa16:	4313      	orrs	r3, r2
 800fa18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	f003 0308 	and.w	r3, r3, #8
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d009      	beq.n	800fa3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800fa26:	4b12      	ldr	r3, [pc, #72]	; (800fa70 <HAL_RCC_ClockConfig+0x1bc>)
 800fa28:	689b      	ldr	r3, [r3, #8]
 800fa2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	691b      	ldr	r3, [r3, #16]
 800fa32:	00db      	lsls	r3, r3, #3
 800fa34:	490e      	ldr	r1, [pc, #56]	; (800fa70 <HAL_RCC_ClockConfig+0x1bc>)
 800fa36:	4313      	orrs	r3, r2
 800fa38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800fa3a:	f000 f821 	bl	800fa80 <HAL_RCC_GetSysClockFreq>
 800fa3e:	4602      	mov	r2, r0
 800fa40:	4b0b      	ldr	r3, [pc, #44]	; (800fa70 <HAL_RCC_ClockConfig+0x1bc>)
 800fa42:	689b      	ldr	r3, [r3, #8]
 800fa44:	091b      	lsrs	r3, r3, #4
 800fa46:	f003 030f 	and.w	r3, r3, #15
 800fa4a:	490a      	ldr	r1, [pc, #40]	; (800fa74 <HAL_RCC_ClockConfig+0x1c0>)
 800fa4c:	5ccb      	ldrb	r3, [r1, r3]
 800fa4e:	fa22 f303 	lsr.w	r3, r2, r3
 800fa52:	4a09      	ldr	r2, [pc, #36]	; (800fa78 <HAL_RCC_ClockConfig+0x1c4>)
 800fa54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800fa56:	4b09      	ldr	r3, [pc, #36]	; (800fa7c <HAL_RCC_ClockConfig+0x1c8>)
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	f7f9 f8e8 	bl	8008c30 <HAL_InitTick>

  return HAL_OK;
 800fa60:	2300      	movs	r3, #0
}
 800fa62:	4618      	mov	r0, r3
 800fa64:	3710      	adds	r7, #16
 800fa66:	46bd      	mov	sp, r7
 800fa68:	bd80      	pop	{r7, pc}
 800fa6a:	bf00      	nop
 800fa6c:	40023c00 	.word	0x40023c00
 800fa70:	40023800 	.word	0x40023800
 800fa74:	08017230 	.word	0x08017230
 800fa78:	2000010c 	.word	0x2000010c
 800fa7c:	20000110 	.word	0x20000110

0800fa80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800fa80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fa84:	b090      	sub	sp, #64	; 0x40
 800fa86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800fa88:	2300      	movs	r3, #0
 800fa8a:	637b      	str	r3, [r7, #52]	; 0x34
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fa90:	2300      	movs	r3, #0
 800fa92:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800fa94:	2300      	movs	r3, #0
 800fa96:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800fa98:	4b59      	ldr	r3, [pc, #356]	; (800fc00 <HAL_RCC_GetSysClockFreq+0x180>)
 800fa9a:	689b      	ldr	r3, [r3, #8]
 800fa9c:	f003 030c 	and.w	r3, r3, #12
 800faa0:	2b08      	cmp	r3, #8
 800faa2:	d00d      	beq.n	800fac0 <HAL_RCC_GetSysClockFreq+0x40>
 800faa4:	2b08      	cmp	r3, #8
 800faa6:	f200 80a1 	bhi.w	800fbec <HAL_RCC_GetSysClockFreq+0x16c>
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d002      	beq.n	800fab4 <HAL_RCC_GetSysClockFreq+0x34>
 800faae:	2b04      	cmp	r3, #4
 800fab0:	d003      	beq.n	800faba <HAL_RCC_GetSysClockFreq+0x3a>
 800fab2:	e09b      	b.n	800fbec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800fab4:	4b53      	ldr	r3, [pc, #332]	; (800fc04 <HAL_RCC_GetSysClockFreq+0x184>)
 800fab6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800fab8:	e09b      	b.n	800fbf2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800faba:	4b53      	ldr	r3, [pc, #332]	; (800fc08 <HAL_RCC_GetSysClockFreq+0x188>)
 800fabc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800fabe:	e098      	b.n	800fbf2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800fac0:	4b4f      	ldr	r3, [pc, #316]	; (800fc00 <HAL_RCC_GetSysClockFreq+0x180>)
 800fac2:	685b      	ldr	r3, [r3, #4]
 800fac4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fac8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800faca:	4b4d      	ldr	r3, [pc, #308]	; (800fc00 <HAL_RCC_GetSysClockFreq+0x180>)
 800facc:	685b      	ldr	r3, [r3, #4]
 800face:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d028      	beq.n	800fb28 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800fad6:	4b4a      	ldr	r3, [pc, #296]	; (800fc00 <HAL_RCC_GetSysClockFreq+0x180>)
 800fad8:	685b      	ldr	r3, [r3, #4]
 800fada:	099b      	lsrs	r3, r3, #6
 800fadc:	2200      	movs	r2, #0
 800fade:	623b      	str	r3, [r7, #32]
 800fae0:	627a      	str	r2, [r7, #36]	; 0x24
 800fae2:	6a3b      	ldr	r3, [r7, #32]
 800fae4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800fae8:	2100      	movs	r1, #0
 800faea:	4b47      	ldr	r3, [pc, #284]	; (800fc08 <HAL_RCC_GetSysClockFreq+0x188>)
 800faec:	fb03 f201 	mul.w	r2, r3, r1
 800faf0:	2300      	movs	r3, #0
 800faf2:	fb00 f303 	mul.w	r3, r0, r3
 800faf6:	4413      	add	r3, r2
 800faf8:	4a43      	ldr	r2, [pc, #268]	; (800fc08 <HAL_RCC_GetSysClockFreq+0x188>)
 800fafa:	fba0 1202 	umull	r1, r2, r0, r2
 800fafe:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fb00:	460a      	mov	r2, r1
 800fb02:	62ba      	str	r2, [r7, #40]	; 0x28
 800fb04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb06:	4413      	add	r3, r2
 800fb08:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fb0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	61bb      	str	r3, [r7, #24]
 800fb10:	61fa      	str	r2, [r7, #28]
 800fb12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800fb16:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800fb1a:	f7f1 f821 	bl	8000b60 <__aeabi_uldivmod>
 800fb1e:	4602      	mov	r2, r0
 800fb20:	460b      	mov	r3, r1
 800fb22:	4613      	mov	r3, r2
 800fb24:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fb26:	e053      	b.n	800fbd0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800fb28:	4b35      	ldr	r3, [pc, #212]	; (800fc00 <HAL_RCC_GetSysClockFreq+0x180>)
 800fb2a:	685b      	ldr	r3, [r3, #4]
 800fb2c:	099b      	lsrs	r3, r3, #6
 800fb2e:	2200      	movs	r2, #0
 800fb30:	613b      	str	r3, [r7, #16]
 800fb32:	617a      	str	r2, [r7, #20]
 800fb34:	693b      	ldr	r3, [r7, #16]
 800fb36:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800fb3a:	f04f 0b00 	mov.w	fp, #0
 800fb3e:	4652      	mov	r2, sl
 800fb40:	465b      	mov	r3, fp
 800fb42:	f04f 0000 	mov.w	r0, #0
 800fb46:	f04f 0100 	mov.w	r1, #0
 800fb4a:	0159      	lsls	r1, r3, #5
 800fb4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800fb50:	0150      	lsls	r0, r2, #5
 800fb52:	4602      	mov	r2, r0
 800fb54:	460b      	mov	r3, r1
 800fb56:	ebb2 080a 	subs.w	r8, r2, sl
 800fb5a:	eb63 090b 	sbc.w	r9, r3, fp
 800fb5e:	f04f 0200 	mov.w	r2, #0
 800fb62:	f04f 0300 	mov.w	r3, #0
 800fb66:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800fb6a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800fb6e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800fb72:	ebb2 0408 	subs.w	r4, r2, r8
 800fb76:	eb63 0509 	sbc.w	r5, r3, r9
 800fb7a:	f04f 0200 	mov.w	r2, #0
 800fb7e:	f04f 0300 	mov.w	r3, #0
 800fb82:	00eb      	lsls	r3, r5, #3
 800fb84:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800fb88:	00e2      	lsls	r2, r4, #3
 800fb8a:	4614      	mov	r4, r2
 800fb8c:	461d      	mov	r5, r3
 800fb8e:	eb14 030a 	adds.w	r3, r4, sl
 800fb92:	603b      	str	r3, [r7, #0]
 800fb94:	eb45 030b 	adc.w	r3, r5, fp
 800fb98:	607b      	str	r3, [r7, #4]
 800fb9a:	f04f 0200 	mov.w	r2, #0
 800fb9e:	f04f 0300 	mov.w	r3, #0
 800fba2:	e9d7 4500 	ldrd	r4, r5, [r7]
 800fba6:	4629      	mov	r1, r5
 800fba8:	028b      	lsls	r3, r1, #10
 800fbaa:	4621      	mov	r1, r4
 800fbac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800fbb0:	4621      	mov	r1, r4
 800fbb2:	028a      	lsls	r2, r1, #10
 800fbb4:	4610      	mov	r0, r2
 800fbb6:	4619      	mov	r1, r3
 800fbb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbba:	2200      	movs	r2, #0
 800fbbc:	60bb      	str	r3, [r7, #8]
 800fbbe:	60fa      	str	r2, [r7, #12]
 800fbc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fbc4:	f7f0 ffcc 	bl	8000b60 <__aeabi_uldivmod>
 800fbc8:	4602      	mov	r2, r0
 800fbca:	460b      	mov	r3, r1
 800fbcc:	4613      	mov	r3, r2
 800fbce:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800fbd0:	4b0b      	ldr	r3, [pc, #44]	; (800fc00 <HAL_RCC_GetSysClockFreq+0x180>)
 800fbd2:	685b      	ldr	r3, [r3, #4]
 800fbd4:	0c1b      	lsrs	r3, r3, #16
 800fbd6:	f003 0303 	and.w	r3, r3, #3
 800fbda:	3301      	adds	r3, #1
 800fbdc:	005b      	lsls	r3, r3, #1
 800fbde:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800fbe0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fbe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbe4:	fbb2 f3f3 	udiv	r3, r2, r3
 800fbe8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800fbea:	e002      	b.n	800fbf2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800fbec:	4b05      	ldr	r3, [pc, #20]	; (800fc04 <HAL_RCC_GetSysClockFreq+0x184>)
 800fbee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800fbf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800fbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	3740      	adds	r7, #64	; 0x40
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fbfe:	bf00      	nop
 800fc00:	40023800 	.word	0x40023800
 800fc04:	00f42400 	.word	0x00f42400
 800fc08:	017d7840 	.word	0x017d7840

0800fc0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800fc0c:	b480      	push	{r7}
 800fc0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800fc10:	4b03      	ldr	r3, [pc, #12]	; (800fc20 <HAL_RCC_GetHCLKFreq+0x14>)
 800fc12:	681b      	ldr	r3, [r3, #0]
}
 800fc14:	4618      	mov	r0, r3
 800fc16:	46bd      	mov	sp, r7
 800fc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc1c:	4770      	bx	lr
 800fc1e:	bf00      	nop
 800fc20:	2000010c 	.word	0x2000010c

0800fc24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800fc24:	b580      	push	{r7, lr}
 800fc26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800fc28:	f7ff fff0 	bl	800fc0c <HAL_RCC_GetHCLKFreq>
 800fc2c:	4602      	mov	r2, r0
 800fc2e:	4b05      	ldr	r3, [pc, #20]	; (800fc44 <HAL_RCC_GetPCLK1Freq+0x20>)
 800fc30:	689b      	ldr	r3, [r3, #8]
 800fc32:	0a9b      	lsrs	r3, r3, #10
 800fc34:	f003 0307 	and.w	r3, r3, #7
 800fc38:	4903      	ldr	r1, [pc, #12]	; (800fc48 <HAL_RCC_GetPCLK1Freq+0x24>)
 800fc3a:	5ccb      	ldrb	r3, [r1, r3]
 800fc3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800fc40:	4618      	mov	r0, r3
 800fc42:	bd80      	pop	{r7, pc}
 800fc44:	40023800 	.word	0x40023800
 800fc48:	08017240 	.word	0x08017240

0800fc4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800fc50:	f7ff ffdc 	bl	800fc0c <HAL_RCC_GetHCLKFreq>
 800fc54:	4602      	mov	r2, r0
 800fc56:	4b05      	ldr	r3, [pc, #20]	; (800fc6c <HAL_RCC_GetPCLK2Freq+0x20>)
 800fc58:	689b      	ldr	r3, [r3, #8]
 800fc5a:	0b5b      	lsrs	r3, r3, #13
 800fc5c:	f003 0307 	and.w	r3, r3, #7
 800fc60:	4903      	ldr	r1, [pc, #12]	; (800fc70 <HAL_RCC_GetPCLK2Freq+0x24>)
 800fc62:	5ccb      	ldrb	r3, [r1, r3]
 800fc64:	fa22 f303 	lsr.w	r3, r2, r3
}
 800fc68:	4618      	mov	r0, r3
 800fc6a:	bd80      	pop	{r7, pc}
 800fc6c:	40023800 	.word	0x40023800
 800fc70:	08017240 	.word	0x08017240

0800fc74 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800fc74:	b480      	push	{r7}
 800fc76:	b083      	sub	sp, #12
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]
 800fc7c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	220f      	movs	r2, #15
 800fc82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800fc84:	4b12      	ldr	r3, [pc, #72]	; (800fcd0 <HAL_RCC_GetClockConfig+0x5c>)
 800fc86:	689b      	ldr	r3, [r3, #8]
 800fc88:	f003 0203 	and.w	r2, r3, #3
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800fc90:	4b0f      	ldr	r3, [pc, #60]	; (800fcd0 <HAL_RCC_GetClockConfig+0x5c>)
 800fc92:	689b      	ldr	r3, [r3, #8]
 800fc94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800fc9c:	4b0c      	ldr	r3, [pc, #48]	; (800fcd0 <HAL_RCC_GetClockConfig+0x5c>)
 800fc9e:	689b      	ldr	r3, [r3, #8]
 800fca0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800fca8:	4b09      	ldr	r3, [pc, #36]	; (800fcd0 <HAL_RCC_GetClockConfig+0x5c>)
 800fcaa:	689b      	ldr	r3, [r3, #8]
 800fcac:	08db      	lsrs	r3, r3, #3
 800fcae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800fcb6:	4b07      	ldr	r3, [pc, #28]	; (800fcd4 <HAL_RCC_GetClockConfig+0x60>)
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	f003 0207 	and.w	r2, r3, #7
 800fcbe:	683b      	ldr	r3, [r7, #0]
 800fcc0:	601a      	str	r2, [r3, #0]
}
 800fcc2:	bf00      	nop
 800fcc4:	370c      	adds	r7, #12
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fccc:	4770      	bx	lr
 800fcce:	bf00      	nop
 800fcd0:	40023800 	.word	0x40023800
 800fcd4:	40023c00 	.word	0x40023c00

0800fcd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b082      	sub	sp, #8
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d101      	bne.n	800fcea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800fce6:	2301      	movs	r3, #1
 800fce8:	e041      	b.n	800fd6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fcf0:	b2db      	uxtb	r3, r3
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d106      	bne.n	800fd04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800fcfe:	6878      	ldr	r0, [r7, #4]
 800fd00:	f000 f839 	bl	800fd76 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	2202      	movs	r2, #2
 800fd08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	681a      	ldr	r2, [r3, #0]
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	3304      	adds	r3, #4
 800fd14:	4619      	mov	r1, r3
 800fd16:	4610      	mov	r0, r2
 800fd18:	f000 fb8c 	bl	8010434 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	2201      	movs	r2, #1
 800fd20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	2201      	movs	r2, #1
 800fd28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	2201      	movs	r2, #1
 800fd30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	2201      	movs	r2, #1
 800fd38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	2201      	movs	r2, #1
 800fd40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	2201      	movs	r2, #1
 800fd48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	2201      	movs	r2, #1
 800fd50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	2201      	movs	r2, #1
 800fd58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	2201      	movs	r2, #1
 800fd60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	2201      	movs	r2, #1
 800fd68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fd6c:	2300      	movs	r3, #0
}
 800fd6e:	4618      	mov	r0, r3
 800fd70:	3708      	adds	r7, #8
 800fd72:	46bd      	mov	sp, r7
 800fd74:	bd80      	pop	{r7, pc}

0800fd76 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800fd76:	b480      	push	{r7}
 800fd78:	b083      	sub	sp, #12
 800fd7a:	af00      	add	r7, sp, #0
 800fd7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800fd7e:	bf00      	nop
 800fd80:	370c      	adds	r7, #12
 800fd82:	46bd      	mov	sp, r7
 800fd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd88:	4770      	bx	lr
	...

0800fd8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800fd8c:	b480      	push	{r7}
 800fd8e:	b085      	sub	sp, #20
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fd9a:	b2db      	uxtb	r3, r3
 800fd9c:	2b01      	cmp	r3, #1
 800fd9e:	d001      	beq.n	800fda4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800fda0:	2301      	movs	r3, #1
 800fda2:	e044      	b.n	800fe2e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	2202      	movs	r2, #2
 800fda8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	68da      	ldr	r2, [r3, #12]
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	f042 0201 	orr.w	r2, r2, #1
 800fdba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	4a1e      	ldr	r2, [pc, #120]	; (800fe3c <HAL_TIM_Base_Start_IT+0xb0>)
 800fdc2:	4293      	cmp	r3, r2
 800fdc4:	d018      	beq.n	800fdf8 <HAL_TIM_Base_Start_IT+0x6c>
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fdce:	d013      	beq.n	800fdf8 <HAL_TIM_Base_Start_IT+0x6c>
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	4a1a      	ldr	r2, [pc, #104]	; (800fe40 <HAL_TIM_Base_Start_IT+0xb4>)
 800fdd6:	4293      	cmp	r3, r2
 800fdd8:	d00e      	beq.n	800fdf8 <HAL_TIM_Base_Start_IT+0x6c>
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	4a19      	ldr	r2, [pc, #100]	; (800fe44 <HAL_TIM_Base_Start_IT+0xb8>)
 800fde0:	4293      	cmp	r3, r2
 800fde2:	d009      	beq.n	800fdf8 <HAL_TIM_Base_Start_IT+0x6c>
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	4a17      	ldr	r2, [pc, #92]	; (800fe48 <HAL_TIM_Base_Start_IT+0xbc>)
 800fdea:	4293      	cmp	r3, r2
 800fdec:	d004      	beq.n	800fdf8 <HAL_TIM_Base_Start_IT+0x6c>
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	4a16      	ldr	r2, [pc, #88]	; (800fe4c <HAL_TIM_Base_Start_IT+0xc0>)
 800fdf4:	4293      	cmp	r3, r2
 800fdf6:	d111      	bne.n	800fe1c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	689b      	ldr	r3, [r3, #8]
 800fdfe:	f003 0307 	and.w	r3, r3, #7
 800fe02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	2b06      	cmp	r3, #6
 800fe08:	d010      	beq.n	800fe2c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	681a      	ldr	r2, [r3, #0]
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	f042 0201 	orr.w	r2, r2, #1
 800fe18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fe1a:	e007      	b.n	800fe2c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	681a      	ldr	r2, [r3, #0]
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	f042 0201 	orr.w	r2, r2, #1
 800fe2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800fe2c:	2300      	movs	r3, #0
}
 800fe2e:	4618      	mov	r0, r3
 800fe30:	3714      	adds	r7, #20
 800fe32:	46bd      	mov	sp, r7
 800fe34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe38:	4770      	bx	lr
 800fe3a:	bf00      	nop
 800fe3c:	40010000 	.word	0x40010000
 800fe40:	40000400 	.word	0x40000400
 800fe44:	40000800 	.word	0x40000800
 800fe48:	40000c00 	.word	0x40000c00
 800fe4c:	40014000 	.word	0x40014000

0800fe50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800fe50:	b580      	push	{r7, lr}
 800fe52:	b082      	sub	sp, #8
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d101      	bne.n	800fe62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800fe5e:	2301      	movs	r3, #1
 800fe60:	e041      	b.n	800fee6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fe68:	b2db      	uxtb	r3, r3
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d106      	bne.n	800fe7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	2200      	movs	r2, #0
 800fe72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800fe76:	6878      	ldr	r0, [r7, #4]
 800fe78:	f7f8 fdc6 	bl	8008a08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	2202      	movs	r2, #2
 800fe80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	681a      	ldr	r2, [r3, #0]
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	3304      	adds	r3, #4
 800fe8c:	4619      	mov	r1, r3
 800fe8e:	4610      	mov	r0, r2
 800fe90:	f000 fad0 	bl	8010434 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	2201      	movs	r2, #1
 800fe98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	2201      	movs	r2, #1
 800fea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	2201      	movs	r2, #1
 800fea8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	2201      	movs	r2, #1
 800feb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2201      	movs	r2, #1
 800feb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	2201      	movs	r2, #1
 800fec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	2201      	movs	r2, #1
 800fec8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	2201      	movs	r2, #1
 800fed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	2201      	movs	r2, #1
 800fed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	2201      	movs	r2, #1
 800fee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fee4:	2300      	movs	r3, #0
}
 800fee6:	4618      	mov	r0, r3
 800fee8:	3708      	adds	r7, #8
 800feea:	46bd      	mov	sp, r7
 800feec:	bd80      	pop	{r7, pc}
	...

0800fef0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b084      	sub	sp, #16
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
 800fef8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800fefa:	683b      	ldr	r3, [r7, #0]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d109      	bne.n	800ff14 <HAL_TIM_PWM_Start+0x24>
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ff06:	b2db      	uxtb	r3, r3
 800ff08:	2b01      	cmp	r3, #1
 800ff0a:	bf14      	ite	ne
 800ff0c:	2301      	movne	r3, #1
 800ff0e:	2300      	moveq	r3, #0
 800ff10:	b2db      	uxtb	r3, r3
 800ff12:	e022      	b.n	800ff5a <HAL_TIM_PWM_Start+0x6a>
 800ff14:	683b      	ldr	r3, [r7, #0]
 800ff16:	2b04      	cmp	r3, #4
 800ff18:	d109      	bne.n	800ff2e <HAL_TIM_PWM_Start+0x3e>
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ff20:	b2db      	uxtb	r3, r3
 800ff22:	2b01      	cmp	r3, #1
 800ff24:	bf14      	ite	ne
 800ff26:	2301      	movne	r3, #1
 800ff28:	2300      	moveq	r3, #0
 800ff2a:	b2db      	uxtb	r3, r3
 800ff2c:	e015      	b.n	800ff5a <HAL_TIM_PWM_Start+0x6a>
 800ff2e:	683b      	ldr	r3, [r7, #0]
 800ff30:	2b08      	cmp	r3, #8
 800ff32:	d109      	bne.n	800ff48 <HAL_TIM_PWM_Start+0x58>
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ff3a:	b2db      	uxtb	r3, r3
 800ff3c:	2b01      	cmp	r3, #1
 800ff3e:	bf14      	ite	ne
 800ff40:	2301      	movne	r3, #1
 800ff42:	2300      	moveq	r3, #0
 800ff44:	b2db      	uxtb	r3, r3
 800ff46:	e008      	b.n	800ff5a <HAL_TIM_PWM_Start+0x6a>
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ff4e:	b2db      	uxtb	r3, r3
 800ff50:	2b01      	cmp	r3, #1
 800ff52:	bf14      	ite	ne
 800ff54:	2301      	movne	r3, #1
 800ff56:	2300      	moveq	r3, #0
 800ff58:	b2db      	uxtb	r3, r3
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d001      	beq.n	800ff62 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800ff5e:	2301      	movs	r3, #1
 800ff60:	e068      	b.n	8010034 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ff62:	683b      	ldr	r3, [r7, #0]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d104      	bne.n	800ff72 <HAL_TIM_PWM_Start+0x82>
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	2202      	movs	r2, #2
 800ff6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ff70:	e013      	b.n	800ff9a <HAL_TIM_PWM_Start+0xaa>
 800ff72:	683b      	ldr	r3, [r7, #0]
 800ff74:	2b04      	cmp	r3, #4
 800ff76:	d104      	bne.n	800ff82 <HAL_TIM_PWM_Start+0x92>
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	2202      	movs	r2, #2
 800ff7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ff80:	e00b      	b.n	800ff9a <HAL_TIM_PWM_Start+0xaa>
 800ff82:	683b      	ldr	r3, [r7, #0]
 800ff84:	2b08      	cmp	r3, #8
 800ff86:	d104      	bne.n	800ff92 <HAL_TIM_PWM_Start+0xa2>
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	2202      	movs	r2, #2
 800ff8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ff90:	e003      	b.n	800ff9a <HAL_TIM_PWM_Start+0xaa>
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	2202      	movs	r2, #2
 800ff96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	2201      	movs	r2, #1
 800ffa0:	6839      	ldr	r1, [r7, #0]
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f000 fc52 	bl	801084c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	4a23      	ldr	r2, [pc, #140]	; (801003c <HAL_TIM_PWM_Start+0x14c>)
 800ffae:	4293      	cmp	r3, r2
 800ffb0:	d107      	bne.n	800ffc2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ffc0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	4a1d      	ldr	r2, [pc, #116]	; (801003c <HAL_TIM_PWM_Start+0x14c>)
 800ffc8:	4293      	cmp	r3, r2
 800ffca:	d018      	beq.n	800fffe <HAL_TIM_PWM_Start+0x10e>
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ffd4:	d013      	beq.n	800fffe <HAL_TIM_PWM_Start+0x10e>
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	4a19      	ldr	r2, [pc, #100]	; (8010040 <HAL_TIM_PWM_Start+0x150>)
 800ffdc:	4293      	cmp	r3, r2
 800ffde:	d00e      	beq.n	800fffe <HAL_TIM_PWM_Start+0x10e>
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	4a17      	ldr	r2, [pc, #92]	; (8010044 <HAL_TIM_PWM_Start+0x154>)
 800ffe6:	4293      	cmp	r3, r2
 800ffe8:	d009      	beq.n	800fffe <HAL_TIM_PWM_Start+0x10e>
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	4a16      	ldr	r2, [pc, #88]	; (8010048 <HAL_TIM_PWM_Start+0x158>)
 800fff0:	4293      	cmp	r3, r2
 800fff2:	d004      	beq.n	800fffe <HAL_TIM_PWM_Start+0x10e>
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	4a14      	ldr	r2, [pc, #80]	; (801004c <HAL_TIM_PWM_Start+0x15c>)
 800fffa:	4293      	cmp	r3, r2
 800fffc:	d111      	bne.n	8010022 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	689b      	ldr	r3, [r3, #8]
 8010004:	f003 0307 	and.w	r3, r3, #7
 8010008:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	2b06      	cmp	r3, #6
 801000e:	d010      	beq.n	8010032 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	681a      	ldr	r2, [r3, #0]
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	f042 0201 	orr.w	r2, r2, #1
 801001e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010020:	e007      	b.n	8010032 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	681a      	ldr	r2, [r3, #0]
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	f042 0201 	orr.w	r2, r2, #1
 8010030:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010032:	2300      	movs	r3, #0
}
 8010034:	4618      	mov	r0, r3
 8010036:	3710      	adds	r7, #16
 8010038:	46bd      	mov	sp, r7
 801003a:	bd80      	pop	{r7, pc}
 801003c:	40010000 	.word	0x40010000
 8010040:	40000400 	.word	0x40000400
 8010044:	40000800 	.word	0x40000800
 8010048:	40000c00 	.word	0x40000c00
 801004c:	40014000 	.word	0x40014000

08010050 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010050:	b580      	push	{r7, lr}
 8010052:	b082      	sub	sp, #8
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	691b      	ldr	r3, [r3, #16]
 801005e:	f003 0302 	and.w	r3, r3, #2
 8010062:	2b02      	cmp	r3, #2
 8010064:	d122      	bne.n	80100ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	68db      	ldr	r3, [r3, #12]
 801006c:	f003 0302 	and.w	r3, r3, #2
 8010070:	2b02      	cmp	r3, #2
 8010072:	d11b      	bne.n	80100ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	f06f 0202 	mvn.w	r2, #2
 801007c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	2201      	movs	r2, #1
 8010082:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	699b      	ldr	r3, [r3, #24]
 801008a:	f003 0303 	and.w	r3, r3, #3
 801008e:	2b00      	cmp	r3, #0
 8010090:	d003      	beq.n	801009a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010092:	6878      	ldr	r0, [r7, #4]
 8010094:	f000 f9b0 	bl	80103f8 <HAL_TIM_IC_CaptureCallback>
 8010098:	e005      	b.n	80100a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801009a:	6878      	ldr	r0, [r7, #4]
 801009c:	f000 f9a2 	bl	80103e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80100a0:	6878      	ldr	r0, [r7, #4]
 80100a2:	f000 f9b3 	bl	801040c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	2200      	movs	r2, #0
 80100aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	691b      	ldr	r3, [r3, #16]
 80100b2:	f003 0304 	and.w	r3, r3, #4
 80100b6:	2b04      	cmp	r3, #4
 80100b8:	d122      	bne.n	8010100 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	68db      	ldr	r3, [r3, #12]
 80100c0:	f003 0304 	and.w	r3, r3, #4
 80100c4:	2b04      	cmp	r3, #4
 80100c6:	d11b      	bne.n	8010100 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	f06f 0204 	mvn.w	r2, #4
 80100d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	2202      	movs	r2, #2
 80100d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	699b      	ldr	r3, [r3, #24]
 80100de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d003      	beq.n	80100ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80100e6:	6878      	ldr	r0, [r7, #4]
 80100e8:	f000 f986 	bl	80103f8 <HAL_TIM_IC_CaptureCallback>
 80100ec:	e005      	b.n	80100fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80100ee:	6878      	ldr	r0, [r7, #4]
 80100f0:	f000 f978 	bl	80103e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80100f4:	6878      	ldr	r0, [r7, #4]
 80100f6:	f000 f989 	bl	801040c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	2200      	movs	r2, #0
 80100fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	691b      	ldr	r3, [r3, #16]
 8010106:	f003 0308 	and.w	r3, r3, #8
 801010a:	2b08      	cmp	r3, #8
 801010c:	d122      	bne.n	8010154 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	68db      	ldr	r3, [r3, #12]
 8010114:	f003 0308 	and.w	r3, r3, #8
 8010118:	2b08      	cmp	r3, #8
 801011a:	d11b      	bne.n	8010154 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	f06f 0208 	mvn.w	r2, #8
 8010124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	2204      	movs	r2, #4
 801012a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	69db      	ldr	r3, [r3, #28]
 8010132:	f003 0303 	and.w	r3, r3, #3
 8010136:	2b00      	cmp	r3, #0
 8010138:	d003      	beq.n	8010142 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801013a:	6878      	ldr	r0, [r7, #4]
 801013c:	f000 f95c 	bl	80103f8 <HAL_TIM_IC_CaptureCallback>
 8010140:	e005      	b.n	801014e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010142:	6878      	ldr	r0, [r7, #4]
 8010144:	f000 f94e 	bl	80103e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010148:	6878      	ldr	r0, [r7, #4]
 801014a:	f000 f95f 	bl	801040c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	2200      	movs	r2, #0
 8010152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	691b      	ldr	r3, [r3, #16]
 801015a:	f003 0310 	and.w	r3, r3, #16
 801015e:	2b10      	cmp	r3, #16
 8010160:	d122      	bne.n	80101a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	68db      	ldr	r3, [r3, #12]
 8010168:	f003 0310 	and.w	r3, r3, #16
 801016c:	2b10      	cmp	r3, #16
 801016e:	d11b      	bne.n	80101a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	f06f 0210 	mvn.w	r2, #16
 8010178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	2208      	movs	r2, #8
 801017e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	69db      	ldr	r3, [r3, #28]
 8010186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801018a:	2b00      	cmp	r3, #0
 801018c:	d003      	beq.n	8010196 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801018e:	6878      	ldr	r0, [r7, #4]
 8010190:	f000 f932 	bl	80103f8 <HAL_TIM_IC_CaptureCallback>
 8010194:	e005      	b.n	80101a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010196:	6878      	ldr	r0, [r7, #4]
 8010198:	f000 f924 	bl	80103e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801019c:	6878      	ldr	r0, [r7, #4]
 801019e:	f000 f935 	bl	801040c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	2200      	movs	r2, #0
 80101a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	691b      	ldr	r3, [r3, #16]
 80101ae:	f003 0301 	and.w	r3, r3, #1
 80101b2:	2b01      	cmp	r3, #1
 80101b4:	d10e      	bne.n	80101d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	68db      	ldr	r3, [r3, #12]
 80101bc:	f003 0301 	and.w	r3, r3, #1
 80101c0:	2b01      	cmp	r3, #1
 80101c2:	d107      	bne.n	80101d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	f06f 0201 	mvn.w	r2, #1
 80101cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80101ce:	6878      	ldr	r0, [r7, #4]
 80101d0:	f7f8 fb40 	bl	8008854 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	691b      	ldr	r3, [r3, #16]
 80101da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80101de:	2b80      	cmp	r3, #128	; 0x80
 80101e0:	d10e      	bne.n	8010200 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	68db      	ldr	r3, [r3, #12]
 80101e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80101ec:	2b80      	cmp	r3, #128	; 0x80
 80101ee:	d107      	bne.n	8010200 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80101f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80101fa:	6878      	ldr	r0, [r7, #4]
 80101fc:	f000 fbc4 	bl	8010988 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	691b      	ldr	r3, [r3, #16]
 8010206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801020a:	2b40      	cmp	r3, #64	; 0x40
 801020c:	d10e      	bne.n	801022c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	68db      	ldr	r3, [r3, #12]
 8010214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010218:	2b40      	cmp	r3, #64	; 0x40
 801021a:	d107      	bne.n	801022c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010226:	6878      	ldr	r0, [r7, #4]
 8010228:	f000 f8fa 	bl	8010420 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	691b      	ldr	r3, [r3, #16]
 8010232:	f003 0320 	and.w	r3, r3, #32
 8010236:	2b20      	cmp	r3, #32
 8010238:	d10e      	bne.n	8010258 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	68db      	ldr	r3, [r3, #12]
 8010240:	f003 0320 	and.w	r3, r3, #32
 8010244:	2b20      	cmp	r3, #32
 8010246:	d107      	bne.n	8010258 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	f06f 0220 	mvn.w	r2, #32
 8010250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010252:	6878      	ldr	r0, [r7, #4]
 8010254:	f000 fb8e 	bl	8010974 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010258:	bf00      	nop
 801025a:	3708      	adds	r7, #8
 801025c:	46bd      	mov	sp, r7
 801025e:	bd80      	pop	{r7, pc}

08010260 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010260:	b580      	push	{r7, lr}
 8010262:	b086      	sub	sp, #24
 8010264:	af00      	add	r7, sp, #0
 8010266:	60f8      	str	r0, [r7, #12]
 8010268:	60b9      	str	r1, [r7, #8]
 801026a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801026c:	2300      	movs	r3, #0
 801026e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010276:	2b01      	cmp	r3, #1
 8010278:	d101      	bne.n	801027e <HAL_TIM_PWM_ConfigChannel+0x1e>
 801027a:	2302      	movs	r3, #2
 801027c:	e0ae      	b.n	80103dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	2201      	movs	r2, #1
 8010282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	2b0c      	cmp	r3, #12
 801028a:	f200 809f 	bhi.w	80103cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 801028e:	a201      	add	r2, pc, #4	; (adr r2, 8010294 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8010290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010294:	080102c9 	.word	0x080102c9
 8010298:	080103cd 	.word	0x080103cd
 801029c:	080103cd 	.word	0x080103cd
 80102a0:	080103cd 	.word	0x080103cd
 80102a4:	08010309 	.word	0x08010309
 80102a8:	080103cd 	.word	0x080103cd
 80102ac:	080103cd 	.word	0x080103cd
 80102b0:	080103cd 	.word	0x080103cd
 80102b4:	0801034b 	.word	0x0801034b
 80102b8:	080103cd 	.word	0x080103cd
 80102bc:	080103cd 	.word	0x080103cd
 80102c0:	080103cd 	.word	0x080103cd
 80102c4:	0801038b 	.word	0x0801038b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	68b9      	ldr	r1, [r7, #8]
 80102ce:	4618      	mov	r0, r3
 80102d0:	f000 f930 	bl	8010534 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	699a      	ldr	r2, [r3, #24]
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	f042 0208 	orr.w	r2, r2, #8
 80102e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	699a      	ldr	r2, [r3, #24]
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	f022 0204 	bic.w	r2, r2, #4
 80102f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	6999      	ldr	r1, [r3, #24]
 80102fa:	68bb      	ldr	r3, [r7, #8]
 80102fc:	691a      	ldr	r2, [r3, #16]
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	430a      	orrs	r2, r1
 8010304:	619a      	str	r2, [r3, #24]
      break;
 8010306:	e064      	b.n	80103d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	68b9      	ldr	r1, [r7, #8]
 801030e:	4618      	mov	r0, r3
 8010310:	f000 f976 	bl	8010600 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	699a      	ldr	r2, [r3, #24]
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010322:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	699a      	ldr	r2, [r3, #24]
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010332:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	6999      	ldr	r1, [r3, #24]
 801033a:	68bb      	ldr	r3, [r7, #8]
 801033c:	691b      	ldr	r3, [r3, #16]
 801033e:	021a      	lsls	r2, r3, #8
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	430a      	orrs	r2, r1
 8010346:	619a      	str	r2, [r3, #24]
      break;
 8010348:	e043      	b.n	80103d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	68b9      	ldr	r1, [r7, #8]
 8010350:	4618      	mov	r0, r3
 8010352:	f000 f9c1 	bl	80106d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	69da      	ldr	r2, [r3, #28]
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	f042 0208 	orr.w	r2, r2, #8
 8010364:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	69da      	ldr	r2, [r3, #28]
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	f022 0204 	bic.w	r2, r2, #4
 8010374:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	69d9      	ldr	r1, [r3, #28]
 801037c:	68bb      	ldr	r3, [r7, #8]
 801037e:	691a      	ldr	r2, [r3, #16]
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	430a      	orrs	r2, r1
 8010386:	61da      	str	r2, [r3, #28]
      break;
 8010388:	e023      	b.n	80103d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	68b9      	ldr	r1, [r7, #8]
 8010390:	4618      	mov	r0, r3
 8010392:	f000 fa0b 	bl	80107ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	69da      	ldr	r2, [r3, #28]
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80103a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	69da      	ldr	r2, [r3, #28]
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80103b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	69d9      	ldr	r1, [r3, #28]
 80103bc:	68bb      	ldr	r3, [r7, #8]
 80103be:	691b      	ldr	r3, [r3, #16]
 80103c0:	021a      	lsls	r2, r3, #8
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	430a      	orrs	r2, r1
 80103c8:	61da      	str	r2, [r3, #28]
      break;
 80103ca:	e002      	b.n	80103d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80103cc:	2301      	movs	r3, #1
 80103ce:	75fb      	strb	r3, [r7, #23]
      break;
 80103d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	2200      	movs	r2, #0
 80103d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80103da:	7dfb      	ldrb	r3, [r7, #23]
}
 80103dc:	4618      	mov	r0, r3
 80103de:	3718      	adds	r7, #24
 80103e0:	46bd      	mov	sp, r7
 80103e2:	bd80      	pop	{r7, pc}

080103e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80103e4:	b480      	push	{r7}
 80103e6:	b083      	sub	sp, #12
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80103ec:	bf00      	nop
 80103ee:	370c      	adds	r7, #12
 80103f0:	46bd      	mov	sp, r7
 80103f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f6:	4770      	bx	lr

080103f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80103f8:	b480      	push	{r7}
 80103fa:	b083      	sub	sp, #12
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010400:	bf00      	nop
 8010402:	370c      	adds	r7, #12
 8010404:	46bd      	mov	sp, r7
 8010406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040a:	4770      	bx	lr

0801040c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801040c:	b480      	push	{r7}
 801040e:	b083      	sub	sp, #12
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010414:	bf00      	nop
 8010416:	370c      	adds	r7, #12
 8010418:	46bd      	mov	sp, r7
 801041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801041e:	4770      	bx	lr

08010420 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010420:	b480      	push	{r7}
 8010422:	b083      	sub	sp, #12
 8010424:	af00      	add	r7, sp, #0
 8010426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010428:	bf00      	nop
 801042a:	370c      	adds	r7, #12
 801042c:	46bd      	mov	sp, r7
 801042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010432:	4770      	bx	lr

08010434 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010434:	b480      	push	{r7}
 8010436:	b085      	sub	sp, #20
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]
 801043c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	4a34      	ldr	r2, [pc, #208]	; (8010518 <TIM_Base_SetConfig+0xe4>)
 8010448:	4293      	cmp	r3, r2
 801044a:	d00f      	beq.n	801046c <TIM_Base_SetConfig+0x38>
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010452:	d00b      	beq.n	801046c <TIM_Base_SetConfig+0x38>
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	4a31      	ldr	r2, [pc, #196]	; (801051c <TIM_Base_SetConfig+0xe8>)
 8010458:	4293      	cmp	r3, r2
 801045a:	d007      	beq.n	801046c <TIM_Base_SetConfig+0x38>
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	4a30      	ldr	r2, [pc, #192]	; (8010520 <TIM_Base_SetConfig+0xec>)
 8010460:	4293      	cmp	r3, r2
 8010462:	d003      	beq.n	801046c <TIM_Base_SetConfig+0x38>
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	4a2f      	ldr	r2, [pc, #188]	; (8010524 <TIM_Base_SetConfig+0xf0>)
 8010468:	4293      	cmp	r3, r2
 801046a:	d108      	bne.n	801047e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010472:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010474:	683b      	ldr	r3, [r7, #0]
 8010476:	685b      	ldr	r3, [r3, #4]
 8010478:	68fa      	ldr	r2, [r7, #12]
 801047a:	4313      	orrs	r3, r2
 801047c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	4a25      	ldr	r2, [pc, #148]	; (8010518 <TIM_Base_SetConfig+0xe4>)
 8010482:	4293      	cmp	r3, r2
 8010484:	d01b      	beq.n	80104be <TIM_Base_SetConfig+0x8a>
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801048c:	d017      	beq.n	80104be <TIM_Base_SetConfig+0x8a>
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	4a22      	ldr	r2, [pc, #136]	; (801051c <TIM_Base_SetConfig+0xe8>)
 8010492:	4293      	cmp	r3, r2
 8010494:	d013      	beq.n	80104be <TIM_Base_SetConfig+0x8a>
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	4a21      	ldr	r2, [pc, #132]	; (8010520 <TIM_Base_SetConfig+0xec>)
 801049a:	4293      	cmp	r3, r2
 801049c:	d00f      	beq.n	80104be <TIM_Base_SetConfig+0x8a>
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	4a20      	ldr	r2, [pc, #128]	; (8010524 <TIM_Base_SetConfig+0xf0>)
 80104a2:	4293      	cmp	r3, r2
 80104a4:	d00b      	beq.n	80104be <TIM_Base_SetConfig+0x8a>
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	4a1f      	ldr	r2, [pc, #124]	; (8010528 <TIM_Base_SetConfig+0xf4>)
 80104aa:	4293      	cmp	r3, r2
 80104ac:	d007      	beq.n	80104be <TIM_Base_SetConfig+0x8a>
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	4a1e      	ldr	r2, [pc, #120]	; (801052c <TIM_Base_SetConfig+0xf8>)
 80104b2:	4293      	cmp	r3, r2
 80104b4:	d003      	beq.n	80104be <TIM_Base_SetConfig+0x8a>
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	4a1d      	ldr	r2, [pc, #116]	; (8010530 <TIM_Base_SetConfig+0xfc>)
 80104ba:	4293      	cmp	r3, r2
 80104bc:	d108      	bne.n	80104d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80104c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80104c6:	683b      	ldr	r3, [r7, #0]
 80104c8:	68db      	ldr	r3, [r3, #12]
 80104ca:	68fa      	ldr	r2, [r7, #12]
 80104cc:	4313      	orrs	r3, r2
 80104ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80104d6:	683b      	ldr	r3, [r7, #0]
 80104d8:	695b      	ldr	r3, [r3, #20]
 80104da:	4313      	orrs	r3, r2
 80104dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	68fa      	ldr	r2, [r7, #12]
 80104e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80104e4:	683b      	ldr	r3, [r7, #0]
 80104e6:	689a      	ldr	r2, [r3, #8]
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80104ec:	683b      	ldr	r3, [r7, #0]
 80104ee:	681a      	ldr	r2, [r3, #0]
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	4a08      	ldr	r2, [pc, #32]	; (8010518 <TIM_Base_SetConfig+0xe4>)
 80104f8:	4293      	cmp	r3, r2
 80104fa:	d103      	bne.n	8010504 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80104fc:	683b      	ldr	r3, [r7, #0]
 80104fe:	691a      	ldr	r2, [r3, #16]
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	2201      	movs	r2, #1
 8010508:	615a      	str	r2, [r3, #20]
}
 801050a:	bf00      	nop
 801050c:	3714      	adds	r7, #20
 801050e:	46bd      	mov	sp, r7
 8010510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010514:	4770      	bx	lr
 8010516:	bf00      	nop
 8010518:	40010000 	.word	0x40010000
 801051c:	40000400 	.word	0x40000400
 8010520:	40000800 	.word	0x40000800
 8010524:	40000c00 	.word	0x40000c00
 8010528:	40014000 	.word	0x40014000
 801052c:	40014400 	.word	0x40014400
 8010530:	40014800 	.word	0x40014800

08010534 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010534:	b480      	push	{r7}
 8010536:	b087      	sub	sp, #28
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
 801053c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	6a1b      	ldr	r3, [r3, #32]
 8010542:	f023 0201 	bic.w	r2, r3, #1
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	6a1b      	ldr	r3, [r3, #32]
 801054e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	685b      	ldr	r3, [r3, #4]
 8010554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	699b      	ldr	r3, [r3, #24]
 801055a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	f023 0303 	bic.w	r3, r3, #3
 801056a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801056c:	683b      	ldr	r3, [r7, #0]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	68fa      	ldr	r2, [r7, #12]
 8010572:	4313      	orrs	r3, r2
 8010574:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010576:	697b      	ldr	r3, [r7, #20]
 8010578:	f023 0302 	bic.w	r3, r3, #2
 801057c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801057e:	683b      	ldr	r3, [r7, #0]
 8010580:	689b      	ldr	r3, [r3, #8]
 8010582:	697a      	ldr	r2, [r7, #20]
 8010584:	4313      	orrs	r3, r2
 8010586:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	4a1c      	ldr	r2, [pc, #112]	; (80105fc <TIM_OC1_SetConfig+0xc8>)
 801058c:	4293      	cmp	r3, r2
 801058e:	d10c      	bne.n	80105aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010590:	697b      	ldr	r3, [r7, #20]
 8010592:	f023 0308 	bic.w	r3, r3, #8
 8010596:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010598:	683b      	ldr	r3, [r7, #0]
 801059a:	68db      	ldr	r3, [r3, #12]
 801059c:	697a      	ldr	r2, [r7, #20]
 801059e:	4313      	orrs	r3, r2
 80105a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80105a2:	697b      	ldr	r3, [r7, #20]
 80105a4:	f023 0304 	bic.w	r3, r3, #4
 80105a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	4a13      	ldr	r2, [pc, #76]	; (80105fc <TIM_OC1_SetConfig+0xc8>)
 80105ae:	4293      	cmp	r3, r2
 80105b0:	d111      	bne.n	80105d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80105b2:	693b      	ldr	r3, [r7, #16]
 80105b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80105b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80105ba:	693b      	ldr	r3, [r7, #16]
 80105bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80105c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80105c2:	683b      	ldr	r3, [r7, #0]
 80105c4:	695b      	ldr	r3, [r3, #20]
 80105c6:	693a      	ldr	r2, [r7, #16]
 80105c8:	4313      	orrs	r3, r2
 80105ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80105cc:	683b      	ldr	r3, [r7, #0]
 80105ce:	699b      	ldr	r3, [r3, #24]
 80105d0:	693a      	ldr	r2, [r7, #16]
 80105d2:	4313      	orrs	r3, r2
 80105d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	693a      	ldr	r2, [r7, #16]
 80105da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	68fa      	ldr	r2, [r7, #12]
 80105e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80105e2:	683b      	ldr	r3, [r7, #0]
 80105e4:	685a      	ldr	r2, [r3, #4]
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	697a      	ldr	r2, [r7, #20]
 80105ee:	621a      	str	r2, [r3, #32]
}
 80105f0:	bf00      	nop
 80105f2:	371c      	adds	r7, #28
 80105f4:	46bd      	mov	sp, r7
 80105f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fa:	4770      	bx	lr
 80105fc:	40010000 	.word	0x40010000

08010600 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010600:	b480      	push	{r7}
 8010602:	b087      	sub	sp, #28
 8010604:	af00      	add	r7, sp, #0
 8010606:	6078      	str	r0, [r7, #4]
 8010608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	6a1b      	ldr	r3, [r3, #32]
 801060e:	f023 0210 	bic.w	r2, r3, #16
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	6a1b      	ldr	r3, [r3, #32]
 801061a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	685b      	ldr	r3, [r3, #4]
 8010620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	699b      	ldr	r3, [r3, #24]
 8010626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801062e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010636:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010638:	683b      	ldr	r3, [r7, #0]
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	021b      	lsls	r3, r3, #8
 801063e:	68fa      	ldr	r2, [r7, #12]
 8010640:	4313      	orrs	r3, r2
 8010642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010644:	697b      	ldr	r3, [r7, #20]
 8010646:	f023 0320 	bic.w	r3, r3, #32
 801064a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801064c:	683b      	ldr	r3, [r7, #0]
 801064e:	689b      	ldr	r3, [r3, #8]
 8010650:	011b      	lsls	r3, r3, #4
 8010652:	697a      	ldr	r2, [r7, #20]
 8010654:	4313      	orrs	r3, r2
 8010656:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	4a1e      	ldr	r2, [pc, #120]	; (80106d4 <TIM_OC2_SetConfig+0xd4>)
 801065c:	4293      	cmp	r3, r2
 801065e:	d10d      	bne.n	801067c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010660:	697b      	ldr	r3, [r7, #20]
 8010662:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010666:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010668:	683b      	ldr	r3, [r7, #0]
 801066a:	68db      	ldr	r3, [r3, #12]
 801066c:	011b      	lsls	r3, r3, #4
 801066e:	697a      	ldr	r2, [r7, #20]
 8010670:	4313      	orrs	r3, r2
 8010672:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010674:	697b      	ldr	r3, [r7, #20]
 8010676:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801067a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	4a15      	ldr	r2, [pc, #84]	; (80106d4 <TIM_OC2_SetConfig+0xd4>)
 8010680:	4293      	cmp	r3, r2
 8010682:	d113      	bne.n	80106ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010684:	693b      	ldr	r3, [r7, #16]
 8010686:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801068a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801068c:	693b      	ldr	r3, [r7, #16]
 801068e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010692:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010694:	683b      	ldr	r3, [r7, #0]
 8010696:	695b      	ldr	r3, [r3, #20]
 8010698:	009b      	lsls	r3, r3, #2
 801069a:	693a      	ldr	r2, [r7, #16]
 801069c:	4313      	orrs	r3, r2
 801069e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80106a0:	683b      	ldr	r3, [r7, #0]
 80106a2:	699b      	ldr	r3, [r3, #24]
 80106a4:	009b      	lsls	r3, r3, #2
 80106a6:	693a      	ldr	r2, [r7, #16]
 80106a8:	4313      	orrs	r3, r2
 80106aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	693a      	ldr	r2, [r7, #16]
 80106b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	68fa      	ldr	r2, [r7, #12]
 80106b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80106b8:	683b      	ldr	r3, [r7, #0]
 80106ba:	685a      	ldr	r2, [r3, #4]
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	697a      	ldr	r2, [r7, #20]
 80106c4:	621a      	str	r2, [r3, #32]
}
 80106c6:	bf00      	nop
 80106c8:	371c      	adds	r7, #28
 80106ca:	46bd      	mov	sp, r7
 80106cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d0:	4770      	bx	lr
 80106d2:	bf00      	nop
 80106d4:	40010000 	.word	0x40010000

080106d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80106d8:	b480      	push	{r7}
 80106da:	b087      	sub	sp, #28
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
 80106e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	6a1b      	ldr	r3, [r3, #32]
 80106e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	6a1b      	ldr	r3, [r3, #32]
 80106f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	685b      	ldr	r3, [r3, #4]
 80106f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	69db      	ldr	r3, [r3, #28]
 80106fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	f023 0303 	bic.w	r3, r3, #3
 801070e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010710:	683b      	ldr	r3, [r7, #0]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	68fa      	ldr	r2, [r7, #12]
 8010716:	4313      	orrs	r3, r2
 8010718:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801071a:	697b      	ldr	r3, [r7, #20]
 801071c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010720:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010722:	683b      	ldr	r3, [r7, #0]
 8010724:	689b      	ldr	r3, [r3, #8]
 8010726:	021b      	lsls	r3, r3, #8
 8010728:	697a      	ldr	r2, [r7, #20]
 801072a:	4313      	orrs	r3, r2
 801072c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	4a1d      	ldr	r2, [pc, #116]	; (80107a8 <TIM_OC3_SetConfig+0xd0>)
 8010732:	4293      	cmp	r3, r2
 8010734:	d10d      	bne.n	8010752 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010736:	697b      	ldr	r3, [r7, #20]
 8010738:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801073c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801073e:	683b      	ldr	r3, [r7, #0]
 8010740:	68db      	ldr	r3, [r3, #12]
 8010742:	021b      	lsls	r3, r3, #8
 8010744:	697a      	ldr	r2, [r7, #20]
 8010746:	4313      	orrs	r3, r2
 8010748:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801074a:	697b      	ldr	r3, [r7, #20]
 801074c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010750:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	4a14      	ldr	r2, [pc, #80]	; (80107a8 <TIM_OC3_SetConfig+0xd0>)
 8010756:	4293      	cmp	r3, r2
 8010758:	d113      	bne.n	8010782 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801075a:	693b      	ldr	r3, [r7, #16]
 801075c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010760:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010762:	693b      	ldr	r3, [r7, #16]
 8010764:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010768:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801076a:	683b      	ldr	r3, [r7, #0]
 801076c:	695b      	ldr	r3, [r3, #20]
 801076e:	011b      	lsls	r3, r3, #4
 8010770:	693a      	ldr	r2, [r7, #16]
 8010772:	4313      	orrs	r3, r2
 8010774:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010776:	683b      	ldr	r3, [r7, #0]
 8010778:	699b      	ldr	r3, [r3, #24]
 801077a:	011b      	lsls	r3, r3, #4
 801077c:	693a      	ldr	r2, [r7, #16]
 801077e:	4313      	orrs	r3, r2
 8010780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	693a      	ldr	r2, [r7, #16]
 8010786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	68fa      	ldr	r2, [r7, #12]
 801078c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801078e:	683b      	ldr	r3, [r7, #0]
 8010790:	685a      	ldr	r2, [r3, #4]
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	697a      	ldr	r2, [r7, #20]
 801079a:	621a      	str	r2, [r3, #32]
}
 801079c:	bf00      	nop
 801079e:	371c      	adds	r7, #28
 80107a0:	46bd      	mov	sp, r7
 80107a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a6:	4770      	bx	lr
 80107a8:	40010000 	.word	0x40010000

080107ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80107ac:	b480      	push	{r7}
 80107ae:	b087      	sub	sp, #28
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	6078      	str	r0, [r7, #4]
 80107b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	6a1b      	ldr	r3, [r3, #32]
 80107ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	6a1b      	ldr	r3, [r3, #32]
 80107c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	685b      	ldr	r3, [r3, #4]
 80107cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	69db      	ldr	r3, [r3, #28]
 80107d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80107da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80107e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80107e4:	683b      	ldr	r3, [r7, #0]
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	021b      	lsls	r3, r3, #8
 80107ea:	68fa      	ldr	r2, [r7, #12]
 80107ec:	4313      	orrs	r3, r2
 80107ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80107f0:	693b      	ldr	r3, [r7, #16]
 80107f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80107f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80107f8:	683b      	ldr	r3, [r7, #0]
 80107fa:	689b      	ldr	r3, [r3, #8]
 80107fc:	031b      	lsls	r3, r3, #12
 80107fe:	693a      	ldr	r2, [r7, #16]
 8010800:	4313      	orrs	r3, r2
 8010802:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	4a10      	ldr	r2, [pc, #64]	; (8010848 <TIM_OC4_SetConfig+0x9c>)
 8010808:	4293      	cmp	r3, r2
 801080a:	d109      	bne.n	8010820 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801080c:	697b      	ldr	r3, [r7, #20]
 801080e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010812:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010814:	683b      	ldr	r3, [r7, #0]
 8010816:	695b      	ldr	r3, [r3, #20]
 8010818:	019b      	lsls	r3, r3, #6
 801081a:	697a      	ldr	r2, [r7, #20]
 801081c:	4313      	orrs	r3, r2
 801081e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	697a      	ldr	r2, [r7, #20]
 8010824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	68fa      	ldr	r2, [r7, #12]
 801082a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	685a      	ldr	r2, [r3, #4]
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	693a      	ldr	r2, [r7, #16]
 8010838:	621a      	str	r2, [r3, #32]
}
 801083a:	bf00      	nop
 801083c:	371c      	adds	r7, #28
 801083e:	46bd      	mov	sp, r7
 8010840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010844:	4770      	bx	lr
 8010846:	bf00      	nop
 8010848:	40010000 	.word	0x40010000

0801084c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801084c:	b480      	push	{r7}
 801084e:	b087      	sub	sp, #28
 8010850:	af00      	add	r7, sp, #0
 8010852:	60f8      	str	r0, [r7, #12]
 8010854:	60b9      	str	r1, [r7, #8]
 8010856:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010858:	68bb      	ldr	r3, [r7, #8]
 801085a:	f003 031f 	and.w	r3, r3, #31
 801085e:	2201      	movs	r2, #1
 8010860:	fa02 f303 	lsl.w	r3, r2, r3
 8010864:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	6a1a      	ldr	r2, [r3, #32]
 801086a:	697b      	ldr	r3, [r7, #20]
 801086c:	43db      	mvns	r3, r3
 801086e:	401a      	ands	r2, r3
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	6a1a      	ldr	r2, [r3, #32]
 8010878:	68bb      	ldr	r3, [r7, #8]
 801087a:	f003 031f 	and.w	r3, r3, #31
 801087e:	6879      	ldr	r1, [r7, #4]
 8010880:	fa01 f303 	lsl.w	r3, r1, r3
 8010884:	431a      	orrs	r2, r3
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	621a      	str	r2, [r3, #32]
}
 801088a:	bf00      	nop
 801088c:	371c      	adds	r7, #28
 801088e:	46bd      	mov	sp, r7
 8010890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010894:	4770      	bx	lr
	...

08010898 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010898:	b480      	push	{r7}
 801089a:	b085      	sub	sp, #20
 801089c:	af00      	add	r7, sp, #0
 801089e:	6078      	str	r0, [r7, #4]
 80108a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80108a8:	2b01      	cmp	r3, #1
 80108aa:	d101      	bne.n	80108b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80108ac:	2302      	movs	r3, #2
 80108ae:	e050      	b.n	8010952 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	2201      	movs	r2, #1
 80108b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	2202      	movs	r2, #2
 80108bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	685b      	ldr	r3, [r3, #4]
 80108c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	689b      	ldr	r3, [r3, #8]
 80108ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80108d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80108d8:	683b      	ldr	r3, [r7, #0]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	68fa      	ldr	r2, [r7, #12]
 80108de:	4313      	orrs	r3, r2
 80108e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	68fa      	ldr	r2, [r7, #12]
 80108e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	4a1c      	ldr	r2, [pc, #112]	; (8010960 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80108f0:	4293      	cmp	r3, r2
 80108f2:	d018      	beq.n	8010926 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80108fc:	d013      	beq.n	8010926 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	4a18      	ldr	r2, [pc, #96]	; (8010964 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8010904:	4293      	cmp	r3, r2
 8010906:	d00e      	beq.n	8010926 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	4a16      	ldr	r2, [pc, #88]	; (8010968 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 801090e:	4293      	cmp	r3, r2
 8010910:	d009      	beq.n	8010926 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	4a15      	ldr	r2, [pc, #84]	; (801096c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8010918:	4293      	cmp	r3, r2
 801091a:	d004      	beq.n	8010926 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	4a13      	ldr	r2, [pc, #76]	; (8010970 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8010922:	4293      	cmp	r3, r2
 8010924:	d10c      	bne.n	8010940 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010926:	68bb      	ldr	r3, [r7, #8]
 8010928:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801092c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801092e:	683b      	ldr	r3, [r7, #0]
 8010930:	685b      	ldr	r3, [r3, #4]
 8010932:	68ba      	ldr	r2, [r7, #8]
 8010934:	4313      	orrs	r3, r2
 8010936:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	68ba      	ldr	r2, [r7, #8]
 801093e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	2201      	movs	r2, #1
 8010944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	2200      	movs	r2, #0
 801094c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010950:	2300      	movs	r3, #0
}
 8010952:	4618      	mov	r0, r3
 8010954:	3714      	adds	r7, #20
 8010956:	46bd      	mov	sp, r7
 8010958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801095c:	4770      	bx	lr
 801095e:	bf00      	nop
 8010960:	40010000 	.word	0x40010000
 8010964:	40000400 	.word	0x40000400
 8010968:	40000800 	.word	0x40000800
 801096c:	40000c00 	.word	0x40000c00
 8010970:	40014000 	.word	0x40014000

08010974 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010974:	b480      	push	{r7}
 8010976:	b083      	sub	sp, #12
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801097c:	bf00      	nop
 801097e:	370c      	adds	r7, #12
 8010980:	46bd      	mov	sp, r7
 8010982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010986:	4770      	bx	lr

08010988 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010988:	b480      	push	{r7}
 801098a:	b083      	sub	sp, #12
 801098c:	af00      	add	r7, sp, #0
 801098e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010990:	bf00      	nop
 8010992:	370c      	adds	r7, #12
 8010994:	46bd      	mov	sp, r7
 8010996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801099a:	4770      	bx	lr

0801099c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801099c:	b580      	push	{r7, lr}
 801099e:	b082      	sub	sp, #8
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d101      	bne.n	80109ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80109aa:	2301      	movs	r3, #1
 80109ac:	e03f      	b.n	8010a2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80109b4:	b2db      	uxtb	r3, r3
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d106      	bne.n	80109c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	2200      	movs	r2, #0
 80109be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80109c2:	6878      	ldr	r0, [r7, #4]
 80109c4:	f7f8 f87c 	bl	8008ac0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	2224      	movs	r2, #36	; 0x24
 80109cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	68da      	ldr	r2, [r3, #12]
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80109de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80109e0:	6878      	ldr	r0, [r7, #4]
 80109e2:	f000 ff8b 	bl	80118fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	691a      	ldr	r2, [r3, #16]
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80109f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	695a      	ldr	r2, [r3, #20]
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010a04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	68da      	ldr	r2, [r3, #12]
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010a14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	2200      	movs	r2, #0
 8010a1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	2220      	movs	r2, #32
 8010a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	2220      	movs	r2, #32
 8010a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8010a2c:	2300      	movs	r3, #0
}
 8010a2e:	4618      	mov	r0, r3
 8010a30:	3708      	adds	r7, #8
 8010a32:	46bd      	mov	sp, r7
 8010a34:	bd80      	pop	{r7, pc}

08010a36 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8010a36:	b580      	push	{r7, lr}
 8010a38:	b082      	sub	sp, #8
 8010a3a:	af00      	add	r7, sp, #0
 8010a3c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d101      	bne.n	8010a48 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8010a44:	2301      	movs	r3, #1
 8010a46:	e021      	b.n	8010a8c <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	2224      	movs	r2, #36	; 0x24
 8010a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	68da      	ldr	r2, [r3, #12]
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010a5e:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8010a60:	6878      	ldr	r0, [r7, #4]
 8010a62:	f7f8 f8b1 	bl	8008bc8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	2200      	movs	r2, #0
 8010a6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	2200      	movs	r2, #0
 8010a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	2200      	movs	r2, #0
 8010a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	2200      	movs	r2, #0
 8010a80:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	2200      	movs	r2, #0
 8010a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010a8a:	2300      	movs	r3, #0
}
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	3708      	adds	r7, #8
 8010a90:	46bd      	mov	sp, r7
 8010a92:	bd80      	pop	{r7, pc}

08010a94 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b08a      	sub	sp, #40	; 0x28
 8010a98:	af02      	add	r7, sp, #8
 8010a9a:	60f8      	str	r0, [r7, #12]
 8010a9c:	60b9      	str	r1, [r7, #8]
 8010a9e:	603b      	str	r3, [r7, #0]
 8010aa0:	4613      	mov	r3, r2
 8010aa2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010aae:	b2db      	uxtb	r3, r3
 8010ab0:	2b20      	cmp	r3, #32
 8010ab2:	d17c      	bne.n	8010bae <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8010ab4:	68bb      	ldr	r3, [r7, #8]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d002      	beq.n	8010ac0 <HAL_UART_Transmit+0x2c>
 8010aba:	88fb      	ldrh	r3, [r7, #6]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d101      	bne.n	8010ac4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8010ac0:	2301      	movs	r3, #1
 8010ac2:	e075      	b.n	8010bb0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010aca:	2b01      	cmp	r3, #1
 8010acc:	d101      	bne.n	8010ad2 <HAL_UART_Transmit+0x3e>
 8010ace:	2302      	movs	r3, #2
 8010ad0:	e06e      	b.n	8010bb0 <HAL_UART_Transmit+0x11c>
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	2201      	movs	r2, #1
 8010ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	2200      	movs	r2, #0
 8010ade:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	2221      	movs	r2, #33	; 0x21
 8010ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010ae8:	f7fa ff46 	bl	800b978 <HAL_GetTick>
 8010aec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	88fa      	ldrh	r2, [r7, #6]
 8010af2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	88fa      	ldrh	r2, [r7, #6]
 8010af8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	689b      	ldr	r3, [r3, #8]
 8010afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010b02:	d108      	bne.n	8010b16 <HAL_UART_Transmit+0x82>
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	691b      	ldr	r3, [r3, #16]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d104      	bne.n	8010b16 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010b10:	68bb      	ldr	r3, [r7, #8]
 8010b12:	61bb      	str	r3, [r7, #24]
 8010b14:	e003      	b.n	8010b1e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8010b16:	68bb      	ldr	r3, [r7, #8]
 8010b18:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	2200      	movs	r2, #0
 8010b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8010b26:	e02a      	b.n	8010b7e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010b28:	683b      	ldr	r3, [r7, #0]
 8010b2a:	9300      	str	r3, [sp, #0]
 8010b2c:	697b      	ldr	r3, [r7, #20]
 8010b2e:	2200      	movs	r2, #0
 8010b30:	2180      	movs	r1, #128	; 0x80
 8010b32:	68f8      	ldr	r0, [r7, #12]
 8010b34:	f000 fc3c 	bl	80113b0 <UART_WaitOnFlagUntilTimeout>
 8010b38:	4603      	mov	r3, r0
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d001      	beq.n	8010b42 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8010b3e:	2303      	movs	r3, #3
 8010b40:	e036      	b.n	8010bb0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8010b42:	69fb      	ldr	r3, [r7, #28]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d10b      	bne.n	8010b60 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010b48:	69bb      	ldr	r3, [r7, #24]
 8010b4a:	881b      	ldrh	r3, [r3, #0]
 8010b4c:	461a      	mov	r2, r3
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010b56:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8010b58:	69bb      	ldr	r3, [r7, #24]
 8010b5a:	3302      	adds	r3, #2
 8010b5c:	61bb      	str	r3, [r7, #24]
 8010b5e:	e007      	b.n	8010b70 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8010b60:	69fb      	ldr	r3, [r7, #28]
 8010b62:	781a      	ldrb	r2, [r3, #0]
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8010b6a:	69fb      	ldr	r3, [r7, #28]
 8010b6c:	3301      	adds	r3, #1
 8010b6e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010b74:	b29b      	uxth	r3, r3
 8010b76:	3b01      	subs	r3, #1
 8010b78:	b29a      	uxth	r2, r3
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010b82:	b29b      	uxth	r3, r3
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d1cf      	bne.n	8010b28 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010b88:	683b      	ldr	r3, [r7, #0]
 8010b8a:	9300      	str	r3, [sp, #0]
 8010b8c:	697b      	ldr	r3, [r7, #20]
 8010b8e:	2200      	movs	r2, #0
 8010b90:	2140      	movs	r1, #64	; 0x40
 8010b92:	68f8      	ldr	r0, [r7, #12]
 8010b94:	f000 fc0c 	bl	80113b0 <UART_WaitOnFlagUntilTimeout>
 8010b98:	4603      	mov	r3, r0
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d001      	beq.n	8010ba2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8010b9e:	2303      	movs	r3, #3
 8010ba0:	e006      	b.n	8010bb0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	2220      	movs	r2, #32
 8010ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8010baa:	2300      	movs	r3, #0
 8010bac:	e000      	b.n	8010bb0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8010bae:	2302      	movs	r3, #2
  }
}
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	3720      	adds	r7, #32
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	bd80      	pop	{r7, pc}

08010bb8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b084      	sub	sp, #16
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	60f8      	str	r0, [r7, #12]
 8010bc0:	60b9      	str	r1, [r7, #8]
 8010bc2:	4613      	mov	r3, r2
 8010bc4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010bcc:	b2db      	uxtb	r3, r3
 8010bce:	2b20      	cmp	r3, #32
 8010bd0:	d11d      	bne.n	8010c0e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8010bd2:	68bb      	ldr	r3, [r7, #8]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d002      	beq.n	8010bde <HAL_UART_Receive_IT+0x26>
 8010bd8:	88fb      	ldrh	r3, [r7, #6]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d101      	bne.n	8010be2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8010bde:	2301      	movs	r3, #1
 8010be0:	e016      	b.n	8010c10 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010be8:	2b01      	cmp	r3, #1
 8010bea:	d101      	bne.n	8010bf0 <HAL_UART_Receive_IT+0x38>
 8010bec:	2302      	movs	r3, #2
 8010bee:	e00f      	b.n	8010c10 <HAL_UART_Receive_IT+0x58>
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	2201      	movs	r2, #1
 8010bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	2200      	movs	r2, #0
 8010bfc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8010bfe:	88fb      	ldrh	r3, [r7, #6]
 8010c00:	461a      	mov	r2, r3
 8010c02:	68b9      	ldr	r1, [r7, #8]
 8010c04:	68f8      	ldr	r0, [r7, #12]
 8010c06:	f000 fc41 	bl	801148c <UART_Start_Receive_IT>
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	e000      	b.n	8010c10 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8010c0e:	2302      	movs	r3, #2
  }
}
 8010c10:	4618      	mov	r0, r3
 8010c12:	3710      	adds	r7, #16
 8010c14:	46bd      	mov	sp, r7
 8010c16:	bd80      	pop	{r7, pc}

08010c18 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b0a2      	sub	sp, #136	; 0x88
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8010c20:	2301      	movs	r3, #1
 8010c22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	330c      	adds	r3, #12
 8010c2c:	663b      	str	r3, [r7, #96]	; 0x60
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010c30:	e853 3f00 	ldrex	r3, [r3]
 8010c34:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010c36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010c38:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8010c3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	330c      	adds	r3, #12
 8010c46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010c4a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010c4c:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c4e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010c50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010c52:	e841 2300 	strex	r3, r2, [r1]
 8010c56:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010c58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d1e3      	bne.n	8010c26 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	3314      	adds	r3, #20
 8010c64:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c68:	e853 3f00 	ldrex	r3, [r3]
 8010c6c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c70:	f023 0301 	bic.w	r3, r3, #1
 8010c74:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	3314      	adds	r3, #20
 8010c7c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010c7e:	65ba      	str	r2, [r7, #88]	; 0x58
 8010c80:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c82:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010c84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010c86:	e841 2300 	strex	r3, r2, [r1]
 8010c8a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010c8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d1e5      	bne.n	8010c5e <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c96:	2b01      	cmp	r3, #1
 8010c98:	d119      	bne.n	8010cce <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	330c      	adds	r3, #12
 8010ca0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ca4:	e853 3f00 	ldrex	r3, [r3]
 8010ca8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cac:	f023 0310 	bic.w	r3, r3, #16
 8010cb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	330c      	adds	r3, #12
 8010cb8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010cba:	647a      	str	r2, [r7, #68]	; 0x44
 8010cbc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010cc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010cc2:	e841 2300 	strex	r3, r2, [r1]
 8010cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d1e5      	bne.n	8010c9a <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d00f      	beq.n	8010cf6 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	695b      	ldr	r3, [r3, #20]
 8010cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ce0:	2b80      	cmp	r3, #128	; 0x80
 8010ce2:	d104      	bne.n	8010cee <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ce8:	4a53      	ldr	r2, [pc, #332]	; (8010e38 <HAL_UART_Abort_IT+0x220>)
 8010cea:	651a      	str	r2, [r3, #80]	; 0x50
 8010cec:	e003      	b.n	8010cf6 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d00f      	beq.n	8010d1e <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	695b      	ldr	r3, [r3, #20]
 8010d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d08:	2b40      	cmp	r3, #64	; 0x40
 8010d0a:	d104      	bne.n	8010d16 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d10:	4a4a      	ldr	r2, [pc, #296]	; (8010e3c <HAL_UART_Abort_IT+0x224>)
 8010d12:	651a      	str	r2, [r3, #80]	; 0x50
 8010d14:	e003      	b.n	8010d1e <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d1a:	2200      	movs	r2, #0
 8010d1c:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	695b      	ldr	r3, [r3, #20]
 8010d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d28:	2b80      	cmp	r3, #128	; 0x80
 8010d2a:	d12d      	bne.n	8010d88 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	3314      	adds	r3, #20
 8010d32:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d36:	e853 3f00 	ldrex	r3, [r3]
 8010d3a:	623b      	str	r3, [r7, #32]
   return(result);
 8010d3c:	6a3b      	ldr	r3, [r7, #32]
 8010d3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010d42:	677b      	str	r3, [r7, #116]	; 0x74
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	3314      	adds	r3, #20
 8010d4a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010d4c:	633a      	str	r2, [r7, #48]	; 0x30
 8010d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010d52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d54:	e841 2300 	strex	r3, r2, [r1]
 8010d58:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d1e5      	bne.n	8010d2c <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d00f      	beq.n	8010d88 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	f7fb fc23 	bl	800c5b8 <HAL_DMA_Abort_IT>
 8010d72:	4603      	mov	r3, r0
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d004      	beq.n	8010d82 <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d7c:	2200      	movs	r2, #0
 8010d7e:	651a      	str	r2, [r3, #80]	; 0x50
 8010d80:	e002      	b.n	8010d88 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 8010d82:	2300      	movs	r3, #0
 8010d84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	695b      	ldr	r3, [r3, #20]
 8010d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d92:	2b40      	cmp	r3, #64	; 0x40
 8010d94:	d130      	bne.n	8010df8 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	3314      	adds	r3, #20
 8010d9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d9e:	693b      	ldr	r3, [r7, #16]
 8010da0:	e853 3f00 	ldrex	r3, [r3]
 8010da4:	60fb      	str	r3, [r7, #12]
   return(result);
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010dac:	673b      	str	r3, [r7, #112]	; 0x70
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	3314      	adds	r3, #20
 8010db4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010db6:	61fa      	str	r2, [r7, #28]
 8010db8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dba:	69b9      	ldr	r1, [r7, #24]
 8010dbc:	69fa      	ldr	r2, [r7, #28]
 8010dbe:	e841 2300 	strex	r3, r2, [r1]
 8010dc2:	617b      	str	r3, [r7, #20]
   return(result);
 8010dc4:	697b      	ldr	r3, [r7, #20]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d1e5      	bne.n	8010d96 <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d012      	beq.n	8010df8 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	f7fb fbee 	bl	800c5b8 <HAL_DMA_Abort_IT>
 8010ddc:	4603      	mov	r3, r0
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d007      	beq.n	8010df2 <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010de6:	2200      	movs	r2, #0
 8010de8:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 8010dea:	2301      	movs	r3, #1
 8010dec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010df0:	e002      	b.n	8010df8 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 8010df2:	2300      	movs	r3, #0
 8010df4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 8010df8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010dfc:	2b01      	cmp	r3, #1
 8010dfe:	d116      	bne.n	8010e2e <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	2200      	movs	r2, #0
 8010e04:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	2200      	movs	r2, #0
 8010e0a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	2200      	movs	r2, #0
 8010e10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	2220      	movs	r2, #32
 8010e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	2220      	movs	r2, #32
 8010e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	2200      	movs	r2, #0
 8010e26:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8010e28:	6878      	ldr	r0, [r7, #4]
 8010e2a:	f000 faab 	bl	8011384 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8010e2e:	2300      	movs	r3, #0
}
 8010e30:	4618      	mov	r0, r3
 8010e32:	3788      	adds	r7, #136	; 0x88
 8010e34:	46bd      	mov	sp, r7
 8010e36:	bd80      	pop	{r7, pc}
 8010e38:	080115f7 	.word	0x080115f7
 8010e3c:	08011657 	.word	0x08011657

08010e40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010e40:	b580      	push	{r7, lr}
 8010e42:	b0ba      	sub	sp, #232	; 0xe8
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	68db      	ldr	r3, [r3, #12]
 8010e58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	695b      	ldr	r3, [r3, #20]
 8010e62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8010e66:	2300      	movs	r3, #0
 8010e68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8010e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e76:	f003 030f 	and.w	r3, r3, #15
 8010e7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8010e7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d10f      	bne.n	8010ea6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e8a:	f003 0320 	and.w	r3, r3, #32
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d009      	beq.n	8010ea6 <HAL_UART_IRQHandler+0x66>
 8010e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010e96:	f003 0320 	and.w	r3, r3, #32
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d003      	beq.n	8010ea6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8010e9e:	6878      	ldr	r0, [r7, #4]
 8010ea0:	f000 fc71 	bl	8011786 <UART_Receive_IT>
      return;
 8010ea4:	e256      	b.n	8011354 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8010ea6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	f000 80de 	beq.w	801106c <HAL_UART_IRQHandler+0x22c>
 8010eb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010eb4:	f003 0301 	and.w	r3, r3, #1
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d106      	bne.n	8010eca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8010ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010ec0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	f000 80d1 	beq.w	801106c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8010eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010ece:	f003 0301 	and.w	r3, r3, #1
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d00b      	beq.n	8010eee <HAL_UART_IRQHandler+0xae>
 8010ed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d005      	beq.n	8010eee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ee6:	f043 0201 	orr.w	r2, r3, #1
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010ef2:	f003 0304 	and.w	r3, r3, #4
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d00b      	beq.n	8010f12 <HAL_UART_IRQHandler+0xd2>
 8010efa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010efe:	f003 0301 	and.w	r3, r3, #1
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d005      	beq.n	8010f12 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f0a:	f043 0202 	orr.w	r2, r3, #2
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010f16:	f003 0302 	and.w	r3, r3, #2
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d00b      	beq.n	8010f36 <HAL_UART_IRQHandler+0xf6>
 8010f1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010f22:	f003 0301 	and.w	r3, r3, #1
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d005      	beq.n	8010f36 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f2e:	f043 0204 	orr.w	r2, r3, #4
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8010f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010f3a:	f003 0308 	and.w	r3, r3, #8
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d011      	beq.n	8010f66 <HAL_UART_IRQHandler+0x126>
 8010f42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010f46:	f003 0320 	and.w	r3, r3, #32
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d105      	bne.n	8010f5a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8010f4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010f52:	f003 0301 	and.w	r3, r3, #1
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d005      	beq.n	8010f66 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f5e:	f043 0208 	orr.w	r2, r3, #8
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	f000 81ed 	beq.w	801134a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010f70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010f74:	f003 0320 	and.w	r3, r3, #32
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d008      	beq.n	8010f8e <HAL_UART_IRQHandler+0x14e>
 8010f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010f80:	f003 0320 	and.w	r3, r3, #32
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d002      	beq.n	8010f8e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8010f88:	6878      	ldr	r0, [r7, #4]
 8010f8a:	f000 fbfc 	bl	8011786 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	695b      	ldr	r3, [r3, #20]
 8010f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f98:	2b40      	cmp	r3, #64	; 0x40
 8010f9a:	bf0c      	ite	eq
 8010f9c:	2301      	moveq	r3, #1
 8010f9e:	2300      	movne	r3, #0
 8010fa0:	b2db      	uxtb	r3, r3
 8010fa2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010faa:	f003 0308 	and.w	r3, r3, #8
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d103      	bne.n	8010fba <HAL_UART_IRQHandler+0x17a>
 8010fb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d04f      	beq.n	801105a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010fba:	6878      	ldr	r0, [r7, #4]
 8010fbc:	f000 faa4 	bl	8011508 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	695b      	ldr	r3, [r3, #20]
 8010fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010fca:	2b40      	cmp	r3, #64	; 0x40
 8010fcc:	d141      	bne.n	8011052 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	3314      	adds	r3, #20
 8010fd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010fdc:	e853 3f00 	ldrex	r3, [r3]
 8010fe0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010fe4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010fe8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010fec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	3314      	adds	r3, #20
 8010ff6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010ffa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010ffe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011002:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8011006:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801100a:	e841 2300 	strex	r3, r2, [r1]
 801100e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8011012:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011016:	2b00      	cmp	r3, #0
 8011018:	d1d9      	bne.n	8010fce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801101e:	2b00      	cmp	r3, #0
 8011020:	d013      	beq.n	801104a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011026:	4a7d      	ldr	r2, [pc, #500]	; (801121c <HAL_UART_IRQHandler+0x3dc>)
 8011028:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801102e:	4618      	mov	r0, r3
 8011030:	f7fb fac2 	bl	800c5b8 <HAL_DMA_Abort_IT>
 8011034:	4603      	mov	r3, r0
 8011036:	2b00      	cmp	r3, #0
 8011038:	d016      	beq.n	8011068 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801103e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011040:	687a      	ldr	r2, [r7, #4]
 8011042:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8011044:	4610      	mov	r0, r2
 8011046:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011048:	e00e      	b.n	8011068 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801104a:	6878      	ldr	r0, [r7, #4]
 801104c:	f000 f990 	bl	8011370 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011050:	e00a      	b.n	8011068 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011052:	6878      	ldr	r0, [r7, #4]
 8011054:	f000 f98c 	bl	8011370 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011058:	e006      	b.n	8011068 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801105a:	6878      	ldr	r0, [r7, #4]
 801105c:	f000 f988 	bl	8011370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	2200      	movs	r2, #0
 8011064:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8011066:	e170      	b.n	801134a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011068:	bf00      	nop
    return;
 801106a:	e16e      	b.n	801134a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011070:	2b01      	cmp	r3, #1
 8011072:	f040 814a 	bne.w	801130a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8011076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801107a:	f003 0310 	and.w	r3, r3, #16
 801107e:	2b00      	cmp	r3, #0
 8011080:	f000 8143 	beq.w	801130a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8011084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011088:	f003 0310 	and.w	r3, r3, #16
 801108c:	2b00      	cmp	r3, #0
 801108e:	f000 813c 	beq.w	801130a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8011092:	2300      	movs	r3, #0
 8011094:	60bb      	str	r3, [r7, #8]
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	60bb      	str	r3, [r7, #8]
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	685b      	ldr	r3, [r3, #4]
 80110a4:	60bb      	str	r3, [r7, #8]
 80110a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	695b      	ldr	r3, [r3, #20]
 80110ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80110b2:	2b40      	cmp	r3, #64	; 0x40
 80110b4:	f040 80b4 	bne.w	8011220 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	685b      	ldr	r3, [r3, #4]
 80110c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80110c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	f000 8140 	beq.w	801134e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80110d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80110d6:	429a      	cmp	r2, r3
 80110d8:	f080 8139 	bcs.w	801134e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80110e2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110e8:	69db      	ldr	r3, [r3, #28]
 80110ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80110ee:	f000 8088 	beq.w	8011202 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	330c      	adds	r3, #12
 80110f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011100:	e853 3f00 	ldrex	r3, [r3]
 8011104:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8011108:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801110c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011110:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	330c      	adds	r3, #12
 801111a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801111e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8011122:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011126:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801112a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801112e:	e841 2300 	strex	r3, r2, [r1]
 8011132:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8011136:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801113a:	2b00      	cmp	r3, #0
 801113c:	d1d9      	bne.n	80110f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	3314      	adds	r3, #20
 8011144:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011146:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011148:	e853 3f00 	ldrex	r3, [r3]
 801114c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801114e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011150:	f023 0301 	bic.w	r3, r3, #1
 8011154:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	3314      	adds	r3, #20
 801115e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8011162:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8011166:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011168:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801116a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801116e:	e841 2300 	strex	r3, r2, [r1]
 8011172:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8011174:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011176:	2b00      	cmp	r3, #0
 8011178:	d1e1      	bne.n	801113e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	3314      	adds	r3, #20
 8011180:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011182:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011184:	e853 3f00 	ldrex	r3, [r3]
 8011188:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801118a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801118c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011190:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	3314      	adds	r3, #20
 801119a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801119e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80111a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80111a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80111a6:	e841 2300 	strex	r3, r2, [r1]
 80111aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80111ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d1e3      	bne.n	801117a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	2220      	movs	r2, #32
 80111b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	2200      	movs	r2, #0
 80111be:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	330c      	adds	r3, #12
 80111c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111ca:	e853 3f00 	ldrex	r3, [r3]
 80111ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80111d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80111d2:	f023 0310 	bic.w	r3, r3, #16
 80111d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	330c      	adds	r3, #12
 80111e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80111e4:	65ba      	str	r2, [r7, #88]	; 0x58
 80111e6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80111ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80111ec:	e841 2300 	strex	r3, r2, [r1]
 80111f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80111f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d1e3      	bne.n	80111c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111fc:	4618      	mov	r0, r3
 80111fe:	f7fb f96b 	bl	800c4d8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801120a:	b29b      	uxth	r3, r3
 801120c:	1ad3      	subs	r3, r2, r3
 801120e:	b29b      	uxth	r3, r3
 8011210:	4619      	mov	r1, r3
 8011212:	6878      	ldr	r0, [r7, #4]
 8011214:	f000 f8c0 	bl	8011398 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8011218:	e099      	b.n	801134e <HAL_UART_IRQHandler+0x50e>
 801121a:	bf00      	nop
 801121c:	080115cf 	.word	0x080115cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011228:	b29b      	uxth	r3, r3
 801122a:	1ad3      	subs	r3, r2, r3
 801122c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011234:	b29b      	uxth	r3, r3
 8011236:	2b00      	cmp	r3, #0
 8011238:	f000 808b 	beq.w	8011352 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 801123c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8011240:	2b00      	cmp	r3, #0
 8011242:	f000 8086 	beq.w	8011352 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	330c      	adds	r3, #12
 801124c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801124e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011250:	e853 3f00 	ldrex	r3, [r3]
 8011254:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011258:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801125c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	330c      	adds	r3, #12
 8011266:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801126a:	647a      	str	r2, [r7, #68]	; 0x44
 801126c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801126e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011270:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011272:	e841 2300 	strex	r3, r2, [r1]
 8011276:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801127a:	2b00      	cmp	r3, #0
 801127c:	d1e3      	bne.n	8011246 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	3314      	adds	r3, #20
 8011284:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011288:	e853 3f00 	ldrex	r3, [r3]
 801128c:	623b      	str	r3, [r7, #32]
   return(result);
 801128e:	6a3b      	ldr	r3, [r7, #32]
 8011290:	f023 0301 	bic.w	r3, r3, #1
 8011294:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	3314      	adds	r3, #20
 801129e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80112a2:	633a      	str	r2, [r7, #48]	; 0x30
 80112a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80112a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80112aa:	e841 2300 	strex	r3, r2, [r1]
 80112ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80112b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d1e3      	bne.n	801127e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	2220      	movs	r2, #32
 80112ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	2200      	movs	r2, #0
 80112c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	330c      	adds	r3, #12
 80112ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112cc:	693b      	ldr	r3, [r7, #16]
 80112ce:	e853 3f00 	ldrex	r3, [r3]
 80112d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	f023 0310 	bic.w	r3, r3, #16
 80112da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	330c      	adds	r3, #12
 80112e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80112e8:	61fa      	str	r2, [r7, #28]
 80112ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112ec:	69b9      	ldr	r1, [r7, #24]
 80112ee:	69fa      	ldr	r2, [r7, #28]
 80112f0:	e841 2300 	strex	r3, r2, [r1]
 80112f4:	617b      	str	r3, [r7, #20]
   return(result);
 80112f6:	697b      	ldr	r3, [r7, #20]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d1e3      	bne.n	80112c4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80112fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8011300:	4619      	mov	r1, r3
 8011302:	6878      	ldr	r0, [r7, #4]
 8011304:	f000 f848 	bl	8011398 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8011308:	e023      	b.n	8011352 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801130a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801130e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011312:	2b00      	cmp	r3, #0
 8011314:	d009      	beq.n	801132a <HAL_UART_IRQHandler+0x4ea>
 8011316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801131a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801131e:	2b00      	cmp	r3, #0
 8011320:	d003      	beq.n	801132a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8011322:	6878      	ldr	r0, [r7, #4]
 8011324:	f000 f9c7 	bl	80116b6 <UART_Transmit_IT>
    return;
 8011328:	e014      	b.n	8011354 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801132a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801132e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011332:	2b00      	cmp	r3, #0
 8011334:	d00e      	beq.n	8011354 <HAL_UART_IRQHandler+0x514>
 8011336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801133a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801133e:	2b00      	cmp	r3, #0
 8011340:	d008      	beq.n	8011354 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8011342:	6878      	ldr	r0, [r7, #4]
 8011344:	f000 fa07 	bl	8011756 <UART_EndTransmit_IT>
    return;
 8011348:	e004      	b.n	8011354 <HAL_UART_IRQHandler+0x514>
    return;
 801134a:	bf00      	nop
 801134c:	e002      	b.n	8011354 <HAL_UART_IRQHandler+0x514>
      return;
 801134e:	bf00      	nop
 8011350:	e000      	b.n	8011354 <HAL_UART_IRQHandler+0x514>
      return;
 8011352:	bf00      	nop
  }
}
 8011354:	37e8      	adds	r7, #232	; 0xe8
 8011356:	46bd      	mov	sp, r7
 8011358:	bd80      	pop	{r7, pc}
 801135a:	bf00      	nop

0801135c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801135c:	b480      	push	{r7}
 801135e:	b083      	sub	sp, #12
 8011360:	af00      	add	r7, sp, #0
 8011362:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8011364:	bf00      	nop
 8011366:	370c      	adds	r7, #12
 8011368:	46bd      	mov	sp, r7
 801136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801136e:	4770      	bx	lr

08011370 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011370:	b480      	push	{r7}
 8011372:	b083      	sub	sp, #12
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8011378:	bf00      	nop
 801137a:	370c      	adds	r7, #12
 801137c:	46bd      	mov	sp, r7
 801137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011382:	4770      	bx	lr

08011384 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8011384:	b480      	push	{r7}
 8011386:	b083      	sub	sp, #12
 8011388:	af00      	add	r7, sp, #0
 801138a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801138c:	bf00      	nop
 801138e:	370c      	adds	r7, #12
 8011390:	46bd      	mov	sp, r7
 8011392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011396:	4770      	bx	lr

08011398 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011398:	b480      	push	{r7}
 801139a:	b083      	sub	sp, #12
 801139c:	af00      	add	r7, sp, #0
 801139e:	6078      	str	r0, [r7, #4]
 80113a0:	460b      	mov	r3, r1
 80113a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80113a4:	bf00      	nop
 80113a6:	370c      	adds	r7, #12
 80113a8:	46bd      	mov	sp, r7
 80113aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ae:	4770      	bx	lr

080113b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b090      	sub	sp, #64	; 0x40
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	60f8      	str	r0, [r7, #12]
 80113b8:	60b9      	str	r1, [r7, #8]
 80113ba:	603b      	str	r3, [r7, #0]
 80113bc:	4613      	mov	r3, r2
 80113be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80113c0:	e050      	b.n	8011464 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80113c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80113c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113c8:	d04c      	beq.n	8011464 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80113ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d007      	beq.n	80113e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80113d0:	f7fa fad2 	bl	800b978 <HAL_GetTick>
 80113d4:	4602      	mov	r2, r0
 80113d6:	683b      	ldr	r3, [r7, #0]
 80113d8:	1ad3      	subs	r3, r2, r3
 80113da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80113dc:	429a      	cmp	r2, r3
 80113de:	d241      	bcs.n	8011464 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	330c      	adds	r3, #12
 80113e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113ea:	e853 3f00 	ldrex	r3, [r3]
 80113ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80113f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80113f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	330c      	adds	r3, #12
 80113fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011400:	637a      	str	r2, [r7, #52]	; 0x34
 8011402:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011404:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011406:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011408:	e841 2300 	strex	r3, r2, [r1]
 801140c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801140e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011410:	2b00      	cmp	r3, #0
 8011412:	d1e5      	bne.n	80113e0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	3314      	adds	r3, #20
 801141a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801141c:	697b      	ldr	r3, [r7, #20]
 801141e:	e853 3f00 	ldrex	r3, [r3]
 8011422:	613b      	str	r3, [r7, #16]
   return(result);
 8011424:	693b      	ldr	r3, [r7, #16]
 8011426:	f023 0301 	bic.w	r3, r3, #1
 801142a:	63bb      	str	r3, [r7, #56]	; 0x38
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	3314      	adds	r3, #20
 8011432:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011434:	623a      	str	r2, [r7, #32]
 8011436:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011438:	69f9      	ldr	r1, [r7, #28]
 801143a:	6a3a      	ldr	r2, [r7, #32]
 801143c:	e841 2300 	strex	r3, r2, [r1]
 8011440:	61bb      	str	r3, [r7, #24]
   return(result);
 8011442:	69bb      	ldr	r3, [r7, #24]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d1e5      	bne.n	8011414 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	2220      	movs	r2, #32
 801144c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	2220      	movs	r2, #32
 8011454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	2200      	movs	r2, #0
 801145c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8011460:	2303      	movs	r3, #3
 8011462:	e00f      	b.n	8011484 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	681a      	ldr	r2, [r3, #0]
 801146a:	68bb      	ldr	r3, [r7, #8]
 801146c:	4013      	ands	r3, r2
 801146e:	68ba      	ldr	r2, [r7, #8]
 8011470:	429a      	cmp	r2, r3
 8011472:	bf0c      	ite	eq
 8011474:	2301      	moveq	r3, #1
 8011476:	2300      	movne	r3, #0
 8011478:	b2db      	uxtb	r3, r3
 801147a:	461a      	mov	r2, r3
 801147c:	79fb      	ldrb	r3, [r7, #7]
 801147e:	429a      	cmp	r2, r3
 8011480:	d09f      	beq.n	80113c2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8011482:	2300      	movs	r3, #0
}
 8011484:	4618      	mov	r0, r3
 8011486:	3740      	adds	r7, #64	; 0x40
 8011488:	46bd      	mov	sp, r7
 801148a:	bd80      	pop	{r7, pc}

0801148c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801148c:	b480      	push	{r7}
 801148e:	b085      	sub	sp, #20
 8011490:	af00      	add	r7, sp, #0
 8011492:	60f8      	str	r0, [r7, #12]
 8011494:	60b9      	str	r1, [r7, #8]
 8011496:	4613      	mov	r3, r2
 8011498:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	68ba      	ldr	r2, [r7, #8]
 801149e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	88fa      	ldrh	r2, [r7, #6]
 80114a4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	88fa      	ldrh	r2, [r7, #6]
 80114aa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	2200      	movs	r2, #0
 80114b0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	2222      	movs	r2, #34	; 0x22
 80114b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	2200      	movs	r2, #0
 80114be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	691b      	ldr	r3, [r3, #16]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d007      	beq.n	80114da <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	68da      	ldr	r2, [r3, #12]
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80114d8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	695a      	ldr	r2, [r3, #20]
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	f042 0201 	orr.w	r2, r2, #1
 80114e8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	68da      	ldr	r2, [r3, #12]
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	f042 0220 	orr.w	r2, r2, #32
 80114f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80114fa:	2300      	movs	r3, #0
}
 80114fc:	4618      	mov	r0, r3
 80114fe:	3714      	adds	r7, #20
 8011500:	46bd      	mov	sp, r7
 8011502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011506:	4770      	bx	lr

08011508 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011508:	b480      	push	{r7}
 801150a:	b095      	sub	sp, #84	; 0x54
 801150c:	af00      	add	r7, sp, #0
 801150e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	330c      	adds	r3, #12
 8011516:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801151a:	e853 3f00 	ldrex	r3, [r3]
 801151e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011522:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011526:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	330c      	adds	r3, #12
 801152e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011530:	643a      	str	r2, [r7, #64]	; 0x40
 8011532:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011534:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011536:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011538:	e841 2300 	strex	r3, r2, [r1]
 801153c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801153e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011540:	2b00      	cmp	r3, #0
 8011542:	d1e5      	bne.n	8011510 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	3314      	adds	r3, #20
 801154a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801154c:	6a3b      	ldr	r3, [r7, #32]
 801154e:	e853 3f00 	ldrex	r3, [r3]
 8011552:	61fb      	str	r3, [r7, #28]
   return(result);
 8011554:	69fb      	ldr	r3, [r7, #28]
 8011556:	f023 0301 	bic.w	r3, r3, #1
 801155a:	64bb      	str	r3, [r7, #72]	; 0x48
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	3314      	adds	r3, #20
 8011562:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011564:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011566:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011568:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801156a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801156c:	e841 2300 	strex	r3, r2, [r1]
 8011570:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011574:	2b00      	cmp	r3, #0
 8011576:	d1e5      	bne.n	8011544 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801157c:	2b01      	cmp	r3, #1
 801157e:	d119      	bne.n	80115b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	330c      	adds	r3, #12
 8011586:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	e853 3f00 	ldrex	r3, [r3]
 801158e:	60bb      	str	r3, [r7, #8]
   return(result);
 8011590:	68bb      	ldr	r3, [r7, #8]
 8011592:	f023 0310 	bic.w	r3, r3, #16
 8011596:	647b      	str	r3, [r7, #68]	; 0x44
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	330c      	adds	r3, #12
 801159e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80115a0:	61ba      	str	r2, [r7, #24]
 80115a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115a4:	6979      	ldr	r1, [r7, #20]
 80115a6:	69ba      	ldr	r2, [r7, #24]
 80115a8:	e841 2300 	strex	r3, r2, [r1]
 80115ac:	613b      	str	r3, [r7, #16]
   return(result);
 80115ae:	693b      	ldr	r3, [r7, #16]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d1e5      	bne.n	8011580 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	2220      	movs	r2, #32
 80115b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	2200      	movs	r2, #0
 80115c0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80115c2:	bf00      	nop
 80115c4:	3754      	adds	r7, #84	; 0x54
 80115c6:	46bd      	mov	sp, r7
 80115c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115cc:	4770      	bx	lr

080115ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80115ce:	b580      	push	{r7, lr}
 80115d0:	b084      	sub	sp, #16
 80115d2:	af00      	add	r7, sp, #0
 80115d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	2200      	movs	r2, #0
 80115e0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	2200      	movs	r2, #0
 80115e6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80115e8:	68f8      	ldr	r0, [r7, #12]
 80115ea:	f7ff fec1 	bl	8011370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80115ee:	bf00      	nop
 80115f0:	3710      	adds	r7, #16
 80115f2:	46bd      	mov	sp, r7
 80115f4:	bd80      	pop	{r7, pc}

080115f6 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80115f6:	b580      	push	{r7, lr}
 80115f8:	b084      	sub	sp, #16
 80115fa:	af00      	add	r7, sp, #0
 80115fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011602:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011608:	2200      	movs	r2, #0
 801160a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011610:	2b00      	cmp	r3, #0
 8011612:	d004      	beq.n	801161e <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801161a:	2b00      	cmp	r3, #0
 801161c:	d117      	bne.n	801164e <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	2200      	movs	r2, #0
 8011622:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	2200      	movs	r2, #0
 8011628:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	2200      	movs	r2, #0
 801162e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	2220      	movs	r2, #32
 8011634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	2220      	movs	r2, #32
 801163c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	2200      	movs	r2, #0
 8011644:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8011646:	68f8      	ldr	r0, [r7, #12]
 8011648:	f7ff fe9c 	bl	8011384 <HAL_UART_AbortCpltCallback>
 801164c:	e000      	b.n	8011650 <UART_DMATxAbortCallback+0x5a>
      return;
 801164e:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011650:	3710      	adds	r7, #16
 8011652:	46bd      	mov	sp, r7
 8011654:	bd80      	pop	{r7, pc}

08011656 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8011656:	b580      	push	{r7, lr}
 8011658:	b084      	sub	sp, #16
 801165a:	af00      	add	r7, sp, #0
 801165c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011662:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011668:	2200      	movs	r2, #0
 801166a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011670:	2b00      	cmp	r3, #0
 8011672:	d004      	beq.n	801167e <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801167a:	2b00      	cmp	r3, #0
 801167c:	d117      	bne.n	80116ae <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	2200      	movs	r2, #0
 8011682:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	2200      	movs	r2, #0
 8011688:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	2200      	movs	r2, #0
 801168e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	2220      	movs	r2, #32
 8011694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	2220      	movs	r2, #32
 801169c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	2200      	movs	r2, #0
 80116a4:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80116a6:	68f8      	ldr	r0, [r7, #12]
 80116a8:	f7ff fe6c 	bl	8011384 <HAL_UART_AbortCpltCallback>
 80116ac:	e000      	b.n	80116b0 <UART_DMARxAbortCallback+0x5a>
      return;
 80116ae:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80116b0:	3710      	adds	r7, #16
 80116b2:	46bd      	mov	sp, r7
 80116b4:	bd80      	pop	{r7, pc}

080116b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80116b6:	b480      	push	{r7}
 80116b8:	b085      	sub	sp, #20
 80116ba:	af00      	add	r7, sp, #0
 80116bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80116c4:	b2db      	uxtb	r3, r3
 80116c6:	2b21      	cmp	r3, #33	; 0x21
 80116c8:	d13e      	bne.n	8011748 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	689b      	ldr	r3, [r3, #8]
 80116ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80116d2:	d114      	bne.n	80116fe <UART_Transmit_IT+0x48>
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	691b      	ldr	r3, [r3, #16]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d110      	bne.n	80116fe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	6a1b      	ldr	r3, [r3, #32]
 80116e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	881b      	ldrh	r3, [r3, #0]
 80116e6:	461a      	mov	r2, r3
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80116f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	6a1b      	ldr	r3, [r3, #32]
 80116f6:	1c9a      	adds	r2, r3, #2
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	621a      	str	r2, [r3, #32]
 80116fc:	e008      	b.n	8011710 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	6a1b      	ldr	r3, [r3, #32]
 8011702:	1c59      	adds	r1, r3, #1
 8011704:	687a      	ldr	r2, [r7, #4]
 8011706:	6211      	str	r1, [r2, #32]
 8011708:	781a      	ldrb	r2, [r3, #0]
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011714:	b29b      	uxth	r3, r3
 8011716:	3b01      	subs	r3, #1
 8011718:	b29b      	uxth	r3, r3
 801171a:	687a      	ldr	r2, [r7, #4]
 801171c:	4619      	mov	r1, r3
 801171e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8011720:	2b00      	cmp	r3, #0
 8011722:	d10f      	bne.n	8011744 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	68da      	ldr	r2, [r3, #12]
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011732:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	68da      	ldr	r2, [r3, #12]
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011742:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8011744:	2300      	movs	r3, #0
 8011746:	e000      	b.n	801174a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8011748:	2302      	movs	r3, #2
  }
}
 801174a:	4618      	mov	r0, r3
 801174c:	3714      	adds	r7, #20
 801174e:	46bd      	mov	sp, r7
 8011750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011754:	4770      	bx	lr

08011756 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011756:	b580      	push	{r7, lr}
 8011758:	b082      	sub	sp, #8
 801175a:	af00      	add	r7, sp, #0
 801175c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	68da      	ldr	r2, [r3, #12]
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801176c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	2220      	movs	r2, #32
 8011772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011776:	6878      	ldr	r0, [r7, #4]
 8011778:	f7ff fdf0 	bl	801135c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 801177c:	2300      	movs	r3, #0
}
 801177e:	4618      	mov	r0, r3
 8011780:	3708      	adds	r7, #8
 8011782:	46bd      	mov	sp, r7
 8011784:	bd80      	pop	{r7, pc}

08011786 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8011786:	b580      	push	{r7, lr}
 8011788:	b08c      	sub	sp, #48	; 0x30
 801178a:	af00      	add	r7, sp, #0
 801178c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011794:	b2db      	uxtb	r3, r3
 8011796:	2b22      	cmp	r3, #34	; 0x22
 8011798:	f040 80ab 	bne.w	80118f2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	689b      	ldr	r3, [r3, #8]
 80117a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80117a4:	d117      	bne.n	80117d6 <UART_Receive_IT+0x50>
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	691b      	ldr	r3, [r3, #16]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d113      	bne.n	80117d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80117ae:	2300      	movs	r3, #0
 80117b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117b6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	685b      	ldr	r3, [r3, #4]
 80117be:	b29b      	uxth	r3, r3
 80117c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80117c4:	b29a      	uxth	r2, r3
 80117c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117ce:	1c9a      	adds	r2, r3, #2
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	629a      	str	r2, [r3, #40]	; 0x28
 80117d4:	e026      	b.n	8011824 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117da:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80117dc:	2300      	movs	r3, #0
 80117de:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	689b      	ldr	r3, [r3, #8]
 80117e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80117e8:	d007      	beq.n	80117fa <UART_Receive_IT+0x74>
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	689b      	ldr	r3, [r3, #8]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d10a      	bne.n	8011808 <UART_Receive_IT+0x82>
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	691b      	ldr	r3, [r3, #16]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d106      	bne.n	8011808 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	685b      	ldr	r3, [r3, #4]
 8011800:	b2da      	uxtb	r2, r3
 8011802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011804:	701a      	strb	r2, [r3, #0]
 8011806:	e008      	b.n	801181a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	685b      	ldr	r3, [r3, #4]
 801180e:	b2db      	uxtb	r3, r3
 8011810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011814:	b2da      	uxtb	r2, r3
 8011816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011818:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801181e:	1c5a      	adds	r2, r3, #1
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011828:	b29b      	uxth	r3, r3
 801182a:	3b01      	subs	r3, #1
 801182c:	b29b      	uxth	r3, r3
 801182e:	687a      	ldr	r2, [r7, #4]
 8011830:	4619      	mov	r1, r3
 8011832:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8011834:	2b00      	cmp	r3, #0
 8011836:	d15a      	bne.n	80118ee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	68da      	ldr	r2, [r3, #12]
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	f022 0220 	bic.w	r2, r2, #32
 8011846:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	68da      	ldr	r2, [r3, #12]
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011856:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	695a      	ldr	r2, [r3, #20]
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	f022 0201 	bic.w	r2, r2, #1
 8011866:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	2220      	movs	r2, #32
 801186c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011874:	2b01      	cmp	r3, #1
 8011876:	d135      	bne.n	80118e4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	2200      	movs	r2, #0
 801187c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	330c      	adds	r3, #12
 8011884:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011886:	697b      	ldr	r3, [r7, #20]
 8011888:	e853 3f00 	ldrex	r3, [r3]
 801188c:	613b      	str	r3, [r7, #16]
   return(result);
 801188e:	693b      	ldr	r3, [r7, #16]
 8011890:	f023 0310 	bic.w	r3, r3, #16
 8011894:	627b      	str	r3, [r7, #36]	; 0x24
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	330c      	adds	r3, #12
 801189c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801189e:	623a      	str	r2, [r7, #32]
 80118a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118a2:	69f9      	ldr	r1, [r7, #28]
 80118a4:	6a3a      	ldr	r2, [r7, #32]
 80118a6:	e841 2300 	strex	r3, r2, [r1]
 80118aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80118ac:	69bb      	ldr	r3, [r7, #24]
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d1e5      	bne.n	801187e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	f003 0310 	and.w	r3, r3, #16
 80118bc:	2b10      	cmp	r3, #16
 80118be:	d10a      	bne.n	80118d6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80118c0:	2300      	movs	r3, #0
 80118c2:	60fb      	str	r3, [r7, #12]
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	60fb      	str	r3, [r7, #12]
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	685b      	ldr	r3, [r3, #4]
 80118d2:	60fb      	str	r3, [r7, #12]
 80118d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80118da:	4619      	mov	r1, r3
 80118dc:	6878      	ldr	r0, [r7, #4]
 80118de:	f7ff fd5b 	bl	8011398 <HAL_UARTEx_RxEventCallback>
 80118e2:	e002      	b.n	80118ea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80118e4:	6878      	ldr	r0, [r7, #4]
 80118e6:	f7f6 ff91 	bl	800880c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80118ea:	2300      	movs	r3, #0
 80118ec:	e002      	b.n	80118f4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80118ee:	2300      	movs	r3, #0
 80118f0:	e000      	b.n	80118f4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80118f2:	2302      	movs	r3, #2
  }
}
 80118f4:	4618      	mov	r0, r3
 80118f6:	3730      	adds	r7, #48	; 0x30
 80118f8:	46bd      	mov	sp, r7
 80118fa:	bd80      	pop	{r7, pc}

080118fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80118fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011900:	b0c0      	sub	sp, #256	; 0x100
 8011902:	af00      	add	r7, sp, #0
 8011904:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	691b      	ldr	r3, [r3, #16]
 8011910:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8011914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011918:	68d9      	ldr	r1, [r3, #12]
 801191a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801191e:	681a      	ldr	r2, [r3, #0]
 8011920:	ea40 0301 	orr.w	r3, r0, r1
 8011924:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801192a:	689a      	ldr	r2, [r3, #8]
 801192c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011930:	691b      	ldr	r3, [r3, #16]
 8011932:	431a      	orrs	r2, r3
 8011934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011938:	695b      	ldr	r3, [r3, #20]
 801193a:	431a      	orrs	r2, r3
 801193c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011940:	69db      	ldr	r3, [r3, #28]
 8011942:	4313      	orrs	r3, r2
 8011944:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8011948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	68db      	ldr	r3, [r3, #12]
 8011950:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8011954:	f021 010c 	bic.w	r1, r1, #12
 8011958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801195c:	681a      	ldr	r2, [r3, #0]
 801195e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011962:	430b      	orrs	r3, r1
 8011964:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8011966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	695b      	ldr	r3, [r3, #20]
 801196e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8011972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011976:	6999      	ldr	r1, [r3, #24]
 8011978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801197c:	681a      	ldr	r2, [r3, #0]
 801197e:	ea40 0301 	orr.w	r3, r0, r1
 8011982:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011988:	681a      	ldr	r2, [r3, #0]
 801198a:	4b8f      	ldr	r3, [pc, #572]	; (8011bc8 <UART_SetConfig+0x2cc>)
 801198c:	429a      	cmp	r2, r3
 801198e:	d005      	beq.n	801199c <UART_SetConfig+0xa0>
 8011990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011994:	681a      	ldr	r2, [r3, #0]
 8011996:	4b8d      	ldr	r3, [pc, #564]	; (8011bcc <UART_SetConfig+0x2d0>)
 8011998:	429a      	cmp	r2, r3
 801199a:	d104      	bne.n	80119a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801199c:	f7fe f956 	bl	800fc4c <HAL_RCC_GetPCLK2Freq>
 80119a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80119a4:	e003      	b.n	80119ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80119a6:	f7fe f93d 	bl	800fc24 <HAL_RCC_GetPCLK1Freq>
 80119aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80119ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80119b2:	69db      	ldr	r3, [r3, #28]
 80119b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80119b8:	f040 810c 	bne.w	8011bd4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80119bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80119c0:	2200      	movs	r2, #0
 80119c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80119c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80119ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80119ce:	4622      	mov	r2, r4
 80119d0:	462b      	mov	r3, r5
 80119d2:	1891      	adds	r1, r2, r2
 80119d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80119d6:	415b      	adcs	r3, r3
 80119d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80119da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80119de:	4621      	mov	r1, r4
 80119e0:	eb12 0801 	adds.w	r8, r2, r1
 80119e4:	4629      	mov	r1, r5
 80119e6:	eb43 0901 	adc.w	r9, r3, r1
 80119ea:	f04f 0200 	mov.w	r2, #0
 80119ee:	f04f 0300 	mov.w	r3, #0
 80119f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80119f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80119fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80119fe:	4690      	mov	r8, r2
 8011a00:	4699      	mov	r9, r3
 8011a02:	4623      	mov	r3, r4
 8011a04:	eb18 0303 	adds.w	r3, r8, r3
 8011a08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011a0c:	462b      	mov	r3, r5
 8011a0e:	eb49 0303 	adc.w	r3, r9, r3
 8011a12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011a1a:	685b      	ldr	r3, [r3, #4]
 8011a1c:	2200      	movs	r2, #0
 8011a1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011a22:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8011a26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8011a2a:	460b      	mov	r3, r1
 8011a2c:	18db      	adds	r3, r3, r3
 8011a2e:	653b      	str	r3, [r7, #80]	; 0x50
 8011a30:	4613      	mov	r3, r2
 8011a32:	eb42 0303 	adc.w	r3, r2, r3
 8011a36:	657b      	str	r3, [r7, #84]	; 0x54
 8011a38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8011a3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8011a40:	f7ef f88e 	bl	8000b60 <__aeabi_uldivmod>
 8011a44:	4602      	mov	r2, r0
 8011a46:	460b      	mov	r3, r1
 8011a48:	4b61      	ldr	r3, [pc, #388]	; (8011bd0 <UART_SetConfig+0x2d4>)
 8011a4a:	fba3 2302 	umull	r2, r3, r3, r2
 8011a4e:	095b      	lsrs	r3, r3, #5
 8011a50:	011c      	lsls	r4, r3, #4
 8011a52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011a56:	2200      	movs	r2, #0
 8011a58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8011a5c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8011a60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8011a64:	4642      	mov	r2, r8
 8011a66:	464b      	mov	r3, r9
 8011a68:	1891      	adds	r1, r2, r2
 8011a6a:	64b9      	str	r1, [r7, #72]	; 0x48
 8011a6c:	415b      	adcs	r3, r3
 8011a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011a70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8011a74:	4641      	mov	r1, r8
 8011a76:	eb12 0a01 	adds.w	sl, r2, r1
 8011a7a:	4649      	mov	r1, r9
 8011a7c:	eb43 0b01 	adc.w	fp, r3, r1
 8011a80:	f04f 0200 	mov.w	r2, #0
 8011a84:	f04f 0300 	mov.w	r3, #0
 8011a88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8011a8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8011a90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011a94:	4692      	mov	sl, r2
 8011a96:	469b      	mov	fp, r3
 8011a98:	4643      	mov	r3, r8
 8011a9a:	eb1a 0303 	adds.w	r3, sl, r3
 8011a9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011aa2:	464b      	mov	r3, r9
 8011aa4:	eb4b 0303 	adc.w	r3, fp, r3
 8011aa8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8011aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011ab0:	685b      	ldr	r3, [r3, #4]
 8011ab2:	2200      	movs	r2, #0
 8011ab4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011ab8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8011abc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8011ac0:	460b      	mov	r3, r1
 8011ac2:	18db      	adds	r3, r3, r3
 8011ac4:	643b      	str	r3, [r7, #64]	; 0x40
 8011ac6:	4613      	mov	r3, r2
 8011ac8:	eb42 0303 	adc.w	r3, r2, r3
 8011acc:	647b      	str	r3, [r7, #68]	; 0x44
 8011ace:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011ad2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8011ad6:	f7ef f843 	bl	8000b60 <__aeabi_uldivmod>
 8011ada:	4602      	mov	r2, r0
 8011adc:	460b      	mov	r3, r1
 8011ade:	4611      	mov	r1, r2
 8011ae0:	4b3b      	ldr	r3, [pc, #236]	; (8011bd0 <UART_SetConfig+0x2d4>)
 8011ae2:	fba3 2301 	umull	r2, r3, r3, r1
 8011ae6:	095b      	lsrs	r3, r3, #5
 8011ae8:	2264      	movs	r2, #100	; 0x64
 8011aea:	fb02 f303 	mul.w	r3, r2, r3
 8011aee:	1acb      	subs	r3, r1, r3
 8011af0:	00db      	lsls	r3, r3, #3
 8011af2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8011af6:	4b36      	ldr	r3, [pc, #216]	; (8011bd0 <UART_SetConfig+0x2d4>)
 8011af8:	fba3 2302 	umull	r2, r3, r3, r2
 8011afc:	095b      	lsrs	r3, r3, #5
 8011afe:	005b      	lsls	r3, r3, #1
 8011b00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8011b04:	441c      	add	r4, r3
 8011b06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011b0a:	2200      	movs	r2, #0
 8011b0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011b10:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8011b14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8011b18:	4642      	mov	r2, r8
 8011b1a:	464b      	mov	r3, r9
 8011b1c:	1891      	adds	r1, r2, r2
 8011b1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8011b20:	415b      	adcs	r3, r3
 8011b22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011b24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8011b28:	4641      	mov	r1, r8
 8011b2a:	1851      	adds	r1, r2, r1
 8011b2c:	6339      	str	r1, [r7, #48]	; 0x30
 8011b2e:	4649      	mov	r1, r9
 8011b30:	414b      	adcs	r3, r1
 8011b32:	637b      	str	r3, [r7, #52]	; 0x34
 8011b34:	f04f 0200 	mov.w	r2, #0
 8011b38:	f04f 0300 	mov.w	r3, #0
 8011b3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8011b40:	4659      	mov	r1, fp
 8011b42:	00cb      	lsls	r3, r1, #3
 8011b44:	4651      	mov	r1, sl
 8011b46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011b4a:	4651      	mov	r1, sl
 8011b4c:	00ca      	lsls	r2, r1, #3
 8011b4e:	4610      	mov	r0, r2
 8011b50:	4619      	mov	r1, r3
 8011b52:	4603      	mov	r3, r0
 8011b54:	4642      	mov	r2, r8
 8011b56:	189b      	adds	r3, r3, r2
 8011b58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011b5c:	464b      	mov	r3, r9
 8011b5e:	460a      	mov	r2, r1
 8011b60:	eb42 0303 	adc.w	r3, r2, r3
 8011b64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011b6c:	685b      	ldr	r3, [r3, #4]
 8011b6e:	2200      	movs	r2, #0
 8011b70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8011b74:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8011b78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8011b7c:	460b      	mov	r3, r1
 8011b7e:	18db      	adds	r3, r3, r3
 8011b80:	62bb      	str	r3, [r7, #40]	; 0x28
 8011b82:	4613      	mov	r3, r2
 8011b84:	eb42 0303 	adc.w	r3, r2, r3
 8011b88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011b8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8011b8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8011b92:	f7ee ffe5 	bl	8000b60 <__aeabi_uldivmod>
 8011b96:	4602      	mov	r2, r0
 8011b98:	460b      	mov	r3, r1
 8011b9a:	4b0d      	ldr	r3, [pc, #52]	; (8011bd0 <UART_SetConfig+0x2d4>)
 8011b9c:	fba3 1302 	umull	r1, r3, r3, r2
 8011ba0:	095b      	lsrs	r3, r3, #5
 8011ba2:	2164      	movs	r1, #100	; 0x64
 8011ba4:	fb01 f303 	mul.w	r3, r1, r3
 8011ba8:	1ad3      	subs	r3, r2, r3
 8011baa:	00db      	lsls	r3, r3, #3
 8011bac:	3332      	adds	r3, #50	; 0x32
 8011bae:	4a08      	ldr	r2, [pc, #32]	; (8011bd0 <UART_SetConfig+0x2d4>)
 8011bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8011bb4:	095b      	lsrs	r3, r3, #5
 8011bb6:	f003 0207 	and.w	r2, r3, #7
 8011bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	4422      	add	r2, r4
 8011bc2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8011bc4:	e106      	b.n	8011dd4 <UART_SetConfig+0x4d8>
 8011bc6:	bf00      	nop
 8011bc8:	40011000 	.word	0x40011000
 8011bcc:	40011400 	.word	0x40011400
 8011bd0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011bd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011bd8:	2200      	movs	r2, #0
 8011bda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8011bde:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8011be2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8011be6:	4642      	mov	r2, r8
 8011be8:	464b      	mov	r3, r9
 8011bea:	1891      	adds	r1, r2, r2
 8011bec:	6239      	str	r1, [r7, #32]
 8011bee:	415b      	adcs	r3, r3
 8011bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8011bf2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011bf6:	4641      	mov	r1, r8
 8011bf8:	1854      	adds	r4, r2, r1
 8011bfa:	4649      	mov	r1, r9
 8011bfc:	eb43 0501 	adc.w	r5, r3, r1
 8011c00:	f04f 0200 	mov.w	r2, #0
 8011c04:	f04f 0300 	mov.w	r3, #0
 8011c08:	00eb      	lsls	r3, r5, #3
 8011c0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8011c0e:	00e2      	lsls	r2, r4, #3
 8011c10:	4614      	mov	r4, r2
 8011c12:	461d      	mov	r5, r3
 8011c14:	4643      	mov	r3, r8
 8011c16:	18e3      	adds	r3, r4, r3
 8011c18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011c1c:	464b      	mov	r3, r9
 8011c1e:	eb45 0303 	adc.w	r3, r5, r3
 8011c22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011c2a:	685b      	ldr	r3, [r3, #4]
 8011c2c:	2200      	movs	r2, #0
 8011c2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011c32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8011c36:	f04f 0200 	mov.w	r2, #0
 8011c3a:	f04f 0300 	mov.w	r3, #0
 8011c3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8011c42:	4629      	mov	r1, r5
 8011c44:	008b      	lsls	r3, r1, #2
 8011c46:	4621      	mov	r1, r4
 8011c48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011c4c:	4621      	mov	r1, r4
 8011c4e:	008a      	lsls	r2, r1, #2
 8011c50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8011c54:	f7ee ff84 	bl	8000b60 <__aeabi_uldivmod>
 8011c58:	4602      	mov	r2, r0
 8011c5a:	460b      	mov	r3, r1
 8011c5c:	4b60      	ldr	r3, [pc, #384]	; (8011de0 <UART_SetConfig+0x4e4>)
 8011c5e:	fba3 2302 	umull	r2, r3, r3, r2
 8011c62:	095b      	lsrs	r3, r3, #5
 8011c64:	011c      	lsls	r4, r3, #4
 8011c66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011c6a:	2200      	movs	r2, #0
 8011c6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011c70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8011c74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8011c78:	4642      	mov	r2, r8
 8011c7a:	464b      	mov	r3, r9
 8011c7c:	1891      	adds	r1, r2, r2
 8011c7e:	61b9      	str	r1, [r7, #24]
 8011c80:	415b      	adcs	r3, r3
 8011c82:	61fb      	str	r3, [r7, #28]
 8011c84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011c88:	4641      	mov	r1, r8
 8011c8a:	1851      	adds	r1, r2, r1
 8011c8c:	6139      	str	r1, [r7, #16]
 8011c8e:	4649      	mov	r1, r9
 8011c90:	414b      	adcs	r3, r1
 8011c92:	617b      	str	r3, [r7, #20]
 8011c94:	f04f 0200 	mov.w	r2, #0
 8011c98:	f04f 0300 	mov.w	r3, #0
 8011c9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8011ca0:	4659      	mov	r1, fp
 8011ca2:	00cb      	lsls	r3, r1, #3
 8011ca4:	4651      	mov	r1, sl
 8011ca6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011caa:	4651      	mov	r1, sl
 8011cac:	00ca      	lsls	r2, r1, #3
 8011cae:	4610      	mov	r0, r2
 8011cb0:	4619      	mov	r1, r3
 8011cb2:	4603      	mov	r3, r0
 8011cb4:	4642      	mov	r2, r8
 8011cb6:	189b      	adds	r3, r3, r2
 8011cb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011cbc:	464b      	mov	r3, r9
 8011cbe:	460a      	mov	r2, r1
 8011cc0:	eb42 0303 	adc.w	r3, r2, r3
 8011cc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011ccc:	685b      	ldr	r3, [r3, #4]
 8011cce:	2200      	movs	r2, #0
 8011cd0:	67bb      	str	r3, [r7, #120]	; 0x78
 8011cd2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8011cd4:	f04f 0200 	mov.w	r2, #0
 8011cd8:	f04f 0300 	mov.w	r3, #0
 8011cdc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8011ce0:	4649      	mov	r1, r9
 8011ce2:	008b      	lsls	r3, r1, #2
 8011ce4:	4641      	mov	r1, r8
 8011ce6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011cea:	4641      	mov	r1, r8
 8011cec:	008a      	lsls	r2, r1, #2
 8011cee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8011cf2:	f7ee ff35 	bl	8000b60 <__aeabi_uldivmod>
 8011cf6:	4602      	mov	r2, r0
 8011cf8:	460b      	mov	r3, r1
 8011cfa:	4611      	mov	r1, r2
 8011cfc:	4b38      	ldr	r3, [pc, #224]	; (8011de0 <UART_SetConfig+0x4e4>)
 8011cfe:	fba3 2301 	umull	r2, r3, r3, r1
 8011d02:	095b      	lsrs	r3, r3, #5
 8011d04:	2264      	movs	r2, #100	; 0x64
 8011d06:	fb02 f303 	mul.w	r3, r2, r3
 8011d0a:	1acb      	subs	r3, r1, r3
 8011d0c:	011b      	lsls	r3, r3, #4
 8011d0e:	3332      	adds	r3, #50	; 0x32
 8011d10:	4a33      	ldr	r2, [pc, #204]	; (8011de0 <UART_SetConfig+0x4e4>)
 8011d12:	fba2 2303 	umull	r2, r3, r2, r3
 8011d16:	095b      	lsrs	r3, r3, #5
 8011d18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011d1c:	441c      	add	r4, r3
 8011d1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011d22:	2200      	movs	r2, #0
 8011d24:	673b      	str	r3, [r7, #112]	; 0x70
 8011d26:	677a      	str	r2, [r7, #116]	; 0x74
 8011d28:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8011d2c:	4642      	mov	r2, r8
 8011d2e:	464b      	mov	r3, r9
 8011d30:	1891      	adds	r1, r2, r2
 8011d32:	60b9      	str	r1, [r7, #8]
 8011d34:	415b      	adcs	r3, r3
 8011d36:	60fb      	str	r3, [r7, #12]
 8011d38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011d3c:	4641      	mov	r1, r8
 8011d3e:	1851      	adds	r1, r2, r1
 8011d40:	6039      	str	r1, [r7, #0]
 8011d42:	4649      	mov	r1, r9
 8011d44:	414b      	adcs	r3, r1
 8011d46:	607b      	str	r3, [r7, #4]
 8011d48:	f04f 0200 	mov.w	r2, #0
 8011d4c:	f04f 0300 	mov.w	r3, #0
 8011d50:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8011d54:	4659      	mov	r1, fp
 8011d56:	00cb      	lsls	r3, r1, #3
 8011d58:	4651      	mov	r1, sl
 8011d5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011d5e:	4651      	mov	r1, sl
 8011d60:	00ca      	lsls	r2, r1, #3
 8011d62:	4610      	mov	r0, r2
 8011d64:	4619      	mov	r1, r3
 8011d66:	4603      	mov	r3, r0
 8011d68:	4642      	mov	r2, r8
 8011d6a:	189b      	adds	r3, r3, r2
 8011d6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8011d6e:	464b      	mov	r3, r9
 8011d70:	460a      	mov	r2, r1
 8011d72:	eb42 0303 	adc.w	r3, r2, r3
 8011d76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011d7c:	685b      	ldr	r3, [r3, #4]
 8011d7e:	2200      	movs	r2, #0
 8011d80:	663b      	str	r3, [r7, #96]	; 0x60
 8011d82:	667a      	str	r2, [r7, #100]	; 0x64
 8011d84:	f04f 0200 	mov.w	r2, #0
 8011d88:	f04f 0300 	mov.w	r3, #0
 8011d8c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8011d90:	4649      	mov	r1, r9
 8011d92:	008b      	lsls	r3, r1, #2
 8011d94:	4641      	mov	r1, r8
 8011d96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011d9a:	4641      	mov	r1, r8
 8011d9c:	008a      	lsls	r2, r1, #2
 8011d9e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8011da2:	f7ee fedd 	bl	8000b60 <__aeabi_uldivmod>
 8011da6:	4602      	mov	r2, r0
 8011da8:	460b      	mov	r3, r1
 8011daa:	4b0d      	ldr	r3, [pc, #52]	; (8011de0 <UART_SetConfig+0x4e4>)
 8011dac:	fba3 1302 	umull	r1, r3, r3, r2
 8011db0:	095b      	lsrs	r3, r3, #5
 8011db2:	2164      	movs	r1, #100	; 0x64
 8011db4:	fb01 f303 	mul.w	r3, r1, r3
 8011db8:	1ad3      	subs	r3, r2, r3
 8011dba:	011b      	lsls	r3, r3, #4
 8011dbc:	3332      	adds	r3, #50	; 0x32
 8011dbe:	4a08      	ldr	r2, [pc, #32]	; (8011de0 <UART_SetConfig+0x4e4>)
 8011dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8011dc4:	095b      	lsrs	r3, r3, #5
 8011dc6:	f003 020f 	and.w	r2, r3, #15
 8011dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	4422      	add	r2, r4
 8011dd2:	609a      	str	r2, [r3, #8]
}
 8011dd4:	bf00      	nop
 8011dd6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8011dda:	46bd      	mov	sp, r7
 8011ddc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011de0:	51eb851f 	.word	0x51eb851f

08011de4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011de4:	b084      	sub	sp, #16
 8011de6:	b580      	push	{r7, lr}
 8011de8:	b084      	sub	sp, #16
 8011dea:	af00      	add	r7, sp, #0
 8011dec:	6078      	str	r0, [r7, #4]
 8011dee:	f107 001c 	add.w	r0, r7, #28
 8011df2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011df8:	2b01      	cmp	r3, #1
 8011dfa:	d122      	bne.n	8011e42 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	68db      	ldr	r3, [r3, #12]
 8011e0c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8011e10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011e14:	687a      	ldr	r2, [r7, #4]
 8011e16:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	68db      	ldr	r3, [r3, #12]
 8011e1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8011e24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e26:	2b01      	cmp	r3, #1
 8011e28:	d105      	bne.n	8011e36 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	68db      	ldr	r3, [r3, #12]
 8011e2e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011e36:	6878      	ldr	r0, [r7, #4]
 8011e38:	f001 fbee 	bl	8013618 <USB_CoreReset>
 8011e3c:	4603      	mov	r3, r0
 8011e3e:	73fb      	strb	r3, [r7, #15]
 8011e40:	e01a      	b.n	8011e78 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	68db      	ldr	r3, [r3, #12]
 8011e46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011e4e:	6878      	ldr	r0, [r7, #4]
 8011e50:	f001 fbe2 	bl	8013618 <USB_CoreReset>
 8011e54:	4603      	mov	r3, r0
 8011e56:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8011e58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d106      	bne.n	8011e6c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	639a      	str	r2, [r3, #56]	; 0x38
 8011e6a:	e005      	b.n	8011e78 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8011e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e7a:	2b01      	cmp	r3, #1
 8011e7c:	d10b      	bne.n	8011e96 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	689b      	ldr	r3, [r3, #8]
 8011e82:	f043 0206 	orr.w	r2, r3, #6
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	689b      	ldr	r3, [r3, #8]
 8011e8e:	f043 0220 	orr.w	r2, r3, #32
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8011e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e98:	4618      	mov	r0, r3
 8011e9a:	3710      	adds	r7, #16
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011ea2:	b004      	add	sp, #16
 8011ea4:	4770      	bx	lr
	...

08011ea8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8011ea8:	b480      	push	{r7}
 8011eaa:	b087      	sub	sp, #28
 8011eac:	af00      	add	r7, sp, #0
 8011eae:	60f8      	str	r0, [r7, #12]
 8011eb0:	60b9      	str	r1, [r7, #8]
 8011eb2:	4613      	mov	r3, r2
 8011eb4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8011eb6:	79fb      	ldrb	r3, [r7, #7]
 8011eb8:	2b02      	cmp	r3, #2
 8011eba:	d165      	bne.n	8011f88 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8011ebc:	68bb      	ldr	r3, [r7, #8]
 8011ebe:	4a41      	ldr	r2, [pc, #260]	; (8011fc4 <USB_SetTurnaroundTime+0x11c>)
 8011ec0:	4293      	cmp	r3, r2
 8011ec2:	d906      	bls.n	8011ed2 <USB_SetTurnaroundTime+0x2a>
 8011ec4:	68bb      	ldr	r3, [r7, #8]
 8011ec6:	4a40      	ldr	r2, [pc, #256]	; (8011fc8 <USB_SetTurnaroundTime+0x120>)
 8011ec8:	4293      	cmp	r3, r2
 8011eca:	d202      	bcs.n	8011ed2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8011ecc:	230f      	movs	r3, #15
 8011ece:	617b      	str	r3, [r7, #20]
 8011ed0:	e062      	b.n	8011f98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8011ed2:	68bb      	ldr	r3, [r7, #8]
 8011ed4:	4a3c      	ldr	r2, [pc, #240]	; (8011fc8 <USB_SetTurnaroundTime+0x120>)
 8011ed6:	4293      	cmp	r3, r2
 8011ed8:	d306      	bcc.n	8011ee8 <USB_SetTurnaroundTime+0x40>
 8011eda:	68bb      	ldr	r3, [r7, #8]
 8011edc:	4a3b      	ldr	r2, [pc, #236]	; (8011fcc <USB_SetTurnaroundTime+0x124>)
 8011ede:	4293      	cmp	r3, r2
 8011ee0:	d202      	bcs.n	8011ee8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8011ee2:	230e      	movs	r3, #14
 8011ee4:	617b      	str	r3, [r7, #20]
 8011ee6:	e057      	b.n	8011f98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8011ee8:	68bb      	ldr	r3, [r7, #8]
 8011eea:	4a38      	ldr	r2, [pc, #224]	; (8011fcc <USB_SetTurnaroundTime+0x124>)
 8011eec:	4293      	cmp	r3, r2
 8011eee:	d306      	bcc.n	8011efe <USB_SetTurnaroundTime+0x56>
 8011ef0:	68bb      	ldr	r3, [r7, #8]
 8011ef2:	4a37      	ldr	r2, [pc, #220]	; (8011fd0 <USB_SetTurnaroundTime+0x128>)
 8011ef4:	4293      	cmp	r3, r2
 8011ef6:	d202      	bcs.n	8011efe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8011ef8:	230d      	movs	r3, #13
 8011efa:	617b      	str	r3, [r7, #20]
 8011efc:	e04c      	b.n	8011f98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8011efe:	68bb      	ldr	r3, [r7, #8]
 8011f00:	4a33      	ldr	r2, [pc, #204]	; (8011fd0 <USB_SetTurnaroundTime+0x128>)
 8011f02:	4293      	cmp	r3, r2
 8011f04:	d306      	bcc.n	8011f14 <USB_SetTurnaroundTime+0x6c>
 8011f06:	68bb      	ldr	r3, [r7, #8]
 8011f08:	4a32      	ldr	r2, [pc, #200]	; (8011fd4 <USB_SetTurnaroundTime+0x12c>)
 8011f0a:	4293      	cmp	r3, r2
 8011f0c:	d802      	bhi.n	8011f14 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8011f0e:	230c      	movs	r3, #12
 8011f10:	617b      	str	r3, [r7, #20]
 8011f12:	e041      	b.n	8011f98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8011f14:	68bb      	ldr	r3, [r7, #8]
 8011f16:	4a2f      	ldr	r2, [pc, #188]	; (8011fd4 <USB_SetTurnaroundTime+0x12c>)
 8011f18:	4293      	cmp	r3, r2
 8011f1a:	d906      	bls.n	8011f2a <USB_SetTurnaroundTime+0x82>
 8011f1c:	68bb      	ldr	r3, [r7, #8]
 8011f1e:	4a2e      	ldr	r2, [pc, #184]	; (8011fd8 <USB_SetTurnaroundTime+0x130>)
 8011f20:	4293      	cmp	r3, r2
 8011f22:	d802      	bhi.n	8011f2a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8011f24:	230b      	movs	r3, #11
 8011f26:	617b      	str	r3, [r7, #20]
 8011f28:	e036      	b.n	8011f98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8011f2a:	68bb      	ldr	r3, [r7, #8]
 8011f2c:	4a2a      	ldr	r2, [pc, #168]	; (8011fd8 <USB_SetTurnaroundTime+0x130>)
 8011f2e:	4293      	cmp	r3, r2
 8011f30:	d906      	bls.n	8011f40 <USB_SetTurnaroundTime+0x98>
 8011f32:	68bb      	ldr	r3, [r7, #8]
 8011f34:	4a29      	ldr	r2, [pc, #164]	; (8011fdc <USB_SetTurnaroundTime+0x134>)
 8011f36:	4293      	cmp	r3, r2
 8011f38:	d802      	bhi.n	8011f40 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8011f3a:	230a      	movs	r3, #10
 8011f3c:	617b      	str	r3, [r7, #20]
 8011f3e:	e02b      	b.n	8011f98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8011f40:	68bb      	ldr	r3, [r7, #8]
 8011f42:	4a26      	ldr	r2, [pc, #152]	; (8011fdc <USB_SetTurnaroundTime+0x134>)
 8011f44:	4293      	cmp	r3, r2
 8011f46:	d906      	bls.n	8011f56 <USB_SetTurnaroundTime+0xae>
 8011f48:	68bb      	ldr	r3, [r7, #8]
 8011f4a:	4a25      	ldr	r2, [pc, #148]	; (8011fe0 <USB_SetTurnaroundTime+0x138>)
 8011f4c:	4293      	cmp	r3, r2
 8011f4e:	d202      	bcs.n	8011f56 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8011f50:	2309      	movs	r3, #9
 8011f52:	617b      	str	r3, [r7, #20]
 8011f54:	e020      	b.n	8011f98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8011f56:	68bb      	ldr	r3, [r7, #8]
 8011f58:	4a21      	ldr	r2, [pc, #132]	; (8011fe0 <USB_SetTurnaroundTime+0x138>)
 8011f5a:	4293      	cmp	r3, r2
 8011f5c:	d306      	bcc.n	8011f6c <USB_SetTurnaroundTime+0xc4>
 8011f5e:	68bb      	ldr	r3, [r7, #8]
 8011f60:	4a20      	ldr	r2, [pc, #128]	; (8011fe4 <USB_SetTurnaroundTime+0x13c>)
 8011f62:	4293      	cmp	r3, r2
 8011f64:	d802      	bhi.n	8011f6c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8011f66:	2308      	movs	r3, #8
 8011f68:	617b      	str	r3, [r7, #20]
 8011f6a:	e015      	b.n	8011f98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8011f6c:	68bb      	ldr	r3, [r7, #8]
 8011f6e:	4a1d      	ldr	r2, [pc, #116]	; (8011fe4 <USB_SetTurnaroundTime+0x13c>)
 8011f70:	4293      	cmp	r3, r2
 8011f72:	d906      	bls.n	8011f82 <USB_SetTurnaroundTime+0xda>
 8011f74:	68bb      	ldr	r3, [r7, #8]
 8011f76:	4a1c      	ldr	r2, [pc, #112]	; (8011fe8 <USB_SetTurnaroundTime+0x140>)
 8011f78:	4293      	cmp	r3, r2
 8011f7a:	d202      	bcs.n	8011f82 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8011f7c:	2307      	movs	r3, #7
 8011f7e:	617b      	str	r3, [r7, #20]
 8011f80:	e00a      	b.n	8011f98 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8011f82:	2306      	movs	r3, #6
 8011f84:	617b      	str	r3, [r7, #20]
 8011f86:	e007      	b.n	8011f98 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8011f88:	79fb      	ldrb	r3, [r7, #7]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d102      	bne.n	8011f94 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8011f8e:	2309      	movs	r3, #9
 8011f90:	617b      	str	r3, [r7, #20]
 8011f92:	e001      	b.n	8011f98 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8011f94:	2309      	movs	r3, #9
 8011f96:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	68db      	ldr	r3, [r3, #12]
 8011f9c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	68da      	ldr	r2, [r3, #12]
 8011fa8:	697b      	ldr	r3, [r7, #20]
 8011faa:	029b      	lsls	r3, r3, #10
 8011fac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8011fb0:	431a      	orrs	r2, r3
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011fb6:	2300      	movs	r3, #0
}
 8011fb8:	4618      	mov	r0, r3
 8011fba:	371c      	adds	r7, #28
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc2:	4770      	bx	lr
 8011fc4:	00d8acbf 	.word	0x00d8acbf
 8011fc8:	00e4e1c0 	.word	0x00e4e1c0
 8011fcc:	00f42400 	.word	0x00f42400
 8011fd0:	01067380 	.word	0x01067380
 8011fd4:	011a499f 	.word	0x011a499f
 8011fd8:	01312cff 	.word	0x01312cff
 8011fdc:	014ca43f 	.word	0x014ca43f
 8011fe0:	016e3600 	.word	0x016e3600
 8011fe4:	01a6ab1f 	.word	0x01a6ab1f
 8011fe8:	01e84800 	.word	0x01e84800

08011fec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011fec:	b480      	push	{r7}
 8011fee:	b083      	sub	sp, #12
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	689b      	ldr	r3, [r3, #8]
 8011ff8:	f043 0201 	orr.w	r2, r3, #1
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012000:	2300      	movs	r3, #0
}
 8012002:	4618      	mov	r0, r3
 8012004:	370c      	adds	r7, #12
 8012006:	46bd      	mov	sp, r7
 8012008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801200c:	4770      	bx	lr

0801200e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801200e:	b480      	push	{r7}
 8012010:	b083      	sub	sp, #12
 8012012:	af00      	add	r7, sp, #0
 8012014:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	689b      	ldr	r3, [r3, #8]
 801201a:	f023 0201 	bic.w	r2, r3, #1
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012022:	2300      	movs	r3, #0
}
 8012024:	4618      	mov	r0, r3
 8012026:	370c      	adds	r7, #12
 8012028:	46bd      	mov	sp, r7
 801202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801202e:	4770      	bx	lr

08012030 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8012030:	b580      	push	{r7, lr}
 8012032:	b084      	sub	sp, #16
 8012034:	af00      	add	r7, sp, #0
 8012036:	6078      	str	r0, [r7, #4]
 8012038:	460b      	mov	r3, r1
 801203a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801203c:	2300      	movs	r3, #0
 801203e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	68db      	ldr	r3, [r3, #12]
 8012044:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801204c:	78fb      	ldrb	r3, [r7, #3]
 801204e:	2b01      	cmp	r3, #1
 8012050:	d115      	bne.n	801207e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	68db      	ldr	r3, [r3, #12]
 8012056:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801205e:	2001      	movs	r0, #1
 8012060:	f7f9 fc96 	bl	800b990 <HAL_Delay>
      ms++;
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	3301      	adds	r3, #1
 8012068:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 801206a:	6878      	ldr	r0, [r7, #4]
 801206c:	f001 fa45 	bl	80134fa <USB_GetMode>
 8012070:	4603      	mov	r3, r0
 8012072:	2b01      	cmp	r3, #1
 8012074:	d01e      	beq.n	80120b4 <USB_SetCurrentMode+0x84>
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	2b31      	cmp	r3, #49	; 0x31
 801207a:	d9f0      	bls.n	801205e <USB_SetCurrentMode+0x2e>
 801207c:	e01a      	b.n	80120b4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801207e:	78fb      	ldrb	r3, [r7, #3]
 8012080:	2b00      	cmp	r3, #0
 8012082:	d115      	bne.n	80120b0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	68db      	ldr	r3, [r3, #12]
 8012088:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012090:	2001      	movs	r0, #1
 8012092:	f7f9 fc7d 	bl	800b990 <HAL_Delay>
      ms++;
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	3301      	adds	r3, #1
 801209a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 801209c:	6878      	ldr	r0, [r7, #4]
 801209e:	f001 fa2c 	bl	80134fa <USB_GetMode>
 80120a2:	4603      	mov	r3, r0
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d005      	beq.n	80120b4 <USB_SetCurrentMode+0x84>
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	2b31      	cmp	r3, #49	; 0x31
 80120ac:	d9f0      	bls.n	8012090 <USB_SetCurrentMode+0x60>
 80120ae:	e001      	b.n	80120b4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80120b0:	2301      	movs	r3, #1
 80120b2:	e005      	b.n	80120c0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	2b32      	cmp	r3, #50	; 0x32
 80120b8:	d101      	bne.n	80120be <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80120ba:	2301      	movs	r3, #1
 80120bc:	e000      	b.n	80120c0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80120be:	2300      	movs	r3, #0
}
 80120c0:	4618      	mov	r0, r3
 80120c2:	3710      	adds	r7, #16
 80120c4:	46bd      	mov	sp, r7
 80120c6:	bd80      	pop	{r7, pc}

080120c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80120c8:	b084      	sub	sp, #16
 80120ca:	b580      	push	{r7, lr}
 80120cc:	b086      	sub	sp, #24
 80120ce:	af00      	add	r7, sp, #0
 80120d0:	6078      	str	r0, [r7, #4]
 80120d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80120d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80120da:	2300      	movs	r3, #0
 80120dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80120e2:	2300      	movs	r3, #0
 80120e4:	613b      	str	r3, [r7, #16]
 80120e6:	e009      	b.n	80120fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80120e8:	687a      	ldr	r2, [r7, #4]
 80120ea:	693b      	ldr	r3, [r7, #16]
 80120ec:	3340      	adds	r3, #64	; 0x40
 80120ee:	009b      	lsls	r3, r3, #2
 80120f0:	4413      	add	r3, r2
 80120f2:	2200      	movs	r2, #0
 80120f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80120f6:	693b      	ldr	r3, [r7, #16]
 80120f8:	3301      	adds	r3, #1
 80120fa:	613b      	str	r3, [r7, #16]
 80120fc:	693b      	ldr	r3, [r7, #16]
 80120fe:	2b0e      	cmp	r3, #14
 8012100:	d9f2      	bls.n	80120e8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8012102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012104:	2b00      	cmp	r3, #0
 8012106:	d11c      	bne.n	8012142 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801210e:	685b      	ldr	r3, [r3, #4]
 8012110:	68fa      	ldr	r2, [r7, #12]
 8012112:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012116:	f043 0302 	orr.w	r3, r3, #2
 801211a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012120:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801212c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012138:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	639a      	str	r2, [r3, #56]	; 0x38
 8012140:	e00b      	b.n	801215a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012146:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012152:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012160:	461a      	mov	r2, r3
 8012162:	2300      	movs	r3, #0
 8012164:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801216c:	4619      	mov	r1, r3
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012174:	461a      	mov	r2, r3
 8012176:	680b      	ldr	r3, [r1, #0]
 8012178:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801217a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801217c:	2b01      	cmp	r3, #1
 801217e:	d10c      	bne.n	801219a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8012180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012182:	2b00      	cmp	r3, #0
 8012184:	d104      	bne.n	8012190 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8012186:	2100      	movs	r1, #0
 8012188:	6878      	ldr	r0, [r7, #4]
 801218a:	f000 f965 	bl	8012458 <USB_SetDevSpeed>
 801218e:	e008      	b.n	80121a2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8012190:	2101      	movs	r1, #1
 8012192:	6878      	ldr	r0, [r7, #4]
 8012194:	f000 f960 	bl	8012458 <USB_SetDevSpeed>
 8012198:	e003      	b.n	80121a2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801219a:	2103      	movs	r1, #3
 801219c:	6878      	ldr	r0, [r7, #4]
 801219e:	f000 f95b 	bl	8012458 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80121a2:	2110      	movs	r1, #16
 80121a4:	6878      	ldr	r0, [r7, #4]
 80121a6:	f000 f8f3 	bl	8012390 <USB_FlushTxFifo>
 80121aa:	4603      	mov	r3, r0
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d001      	beq.n	80121b4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80121b0:	2301      	movs	r3, #1
 80121b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80121b4:	6878      	ldr	r0, [r7, #4]
 80121b6:	f000 f91f 	bl	80123f8 <USB_FlushRxFifo>
 80121ba:	4603      	mov	r3, r0
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d001      	beq.n	80121c4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80121c0:	2301      	movs	r3, #1
 80121c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80121ca:	461a      	mov	r2, r3
 80121cc:	2300      	movs	r3, #0
 80121ce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80121d6:	461a      	mov	r2, r3
 80121d8:	2300      	movs	r3, #0
 80121da:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80121e2:	461a      	mov	r2, r3
 80121e4:	2300      	movs	r3, #0
 80121e6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80121e8:	2300      	movs	r3, #0
 80121ea:	613b      	str	r3, [r7, #16]
 80121ec:	e043      	b.n	8012276 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80121ee:	693b      	ldr	r3, [r7, #16]
 80121f0:	015a      	lsls	r2, r3, #5
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	4413      	add	r3, r2
 80121f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012200:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012204:	d118      	bne.n	8012238 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8012206:	693b      	ldr	r3, [r7, #16]
 8012208:	2b00      	cmp	r3, #0
 801220a:	d10a      	bne.n	8012222 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801220c:	693b      	ldr	r3, [r7, #16]
 801220e:	015a      	lsls	r2, r3, #5
 8012210:	68fb      	ldr	r3, [r7, #12]
 8012212:	4413      	add	r3, r2
 8012214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012218:	461a      	mov	r2, r3
 801221a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801221e:	6013      	str	r3, [r2, #0]
 8012220:	e013      	b.n	801224a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8012222:	693b      	ldr	r3, [r7, #16]
 8012224:	015a      	lsls	r2, r3, #5
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	4413      	add	r3, r2
 801222a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801222e:	461a      	mov	r2, r3
 8012230:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012234:	6013      	str	r3, [r2, #0]
 8012236:	e008      	b.n	801224a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8012238:	693b      	ldr	r3, [r7, #16]
 801223a:	015a      	lsls	r2, r3, #5
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	4413      	add	r3, r2
 8012240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012244:	461a      	mov	r2, r3
 8012246:	2300      	movs	r3, #0
 8012248:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801224a:	693b      	ldr	r3, [r7, #16]
 801224c:	015a      	lsls	r2, r3, #5
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	4413      	add	r3, r2
 8012252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012256:	461a      	mov	r2, r3
 8012258:	2300      	movs	r3, #0
 801225a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801225c:	693b      	ldr	r3, [r7, #16]
 801225e:	015a      	lsls	r2, r3, #5
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	4413      	add	r3, r2
 8012264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012268:	461a      	mov	r2, r3
 801226a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801226e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012270:	693b      	ldr	r3, [r7, #16]
 8012272:	3301      	adds	r3, #1
 8012274:	613b      	str	r3, [r7, #16]
 8012276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012278:	693a      	ldr	r2, [r7, #16]
 801227a:	429a      	cmp	r2, r3
 801227c:	d3b7      	bcc.n	80121ee <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801227e:	2300      	movs	r3, #0
 8012280:	613b      	str	r3, [r7, #16]
 8012282:	e043      	b.n	801230c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012284:	693b      	ldr	r3, [r7, #16]
 8012286:	015a      	lsls	r2, r3, #5
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	4413      	add	r3, r2
 801228c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012296:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801229a:	d118      	bne.n	80122ce <USB_DevInit+0x206>
    {
      if (i == 0U)
 801229c:	693b      	ldr	r3, [r7, #16]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d10a      	bne.n	80122b8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80122a2:	693b      	ldr	r3, [r7, #16]
 80122a4:	015a      	lsls	r2, r3, #5
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	4413      	add	r3, r2
 80122aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122ae:	461a      	mov	r2, r3
 80122b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80122b4:	6013      	str	r3, [r2, #0]
 80122b6:	e013      	b.n	80122e0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80122b8:	693b      	ldr	r3, [r7, #16]
 80122ba:	015a      	lsls	r2, r3, #5
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	4413      	add	r3, r2
 80122c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122c4:	461a      	mov	r2, r3
 80122c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80122ca:	6013      	str	r3, [r2, #0]
 80122cc:	e008      	b.n	80122e0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80122ce:	693b      	ldr	r3, [r7, #16]
 80122d0:	015a      	lsls	r2, r3, #5
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	4413      	add	r3, r2
 80122d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122da:	461a      	mov	r2, r3
 80122dc:	2300      	movs	r3, #0
 80122de:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80122e0:	693b      	ldr	r3, [r7, #16]
 80122e2:	015a      	lsls	r2, r3, #5
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	4413      	add	r3, r2
 80122e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122ec:	461a      	mov	r2, r3
 80122ee:	2300      	movs	r3, #0
 80122f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80122f2:	693b      	ldr	r3, [r7, #16]
 80122f4:	015a      	lsls	r2, r3, #5
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	4413      	add	r3, r2
 80122fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122fe:	461a      	mov	r2, r3
 8012300:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012304:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012306:	693b      	ldr	r3, [r7, #16]
 8012308:	3301      	adds	r3, #1
 801230a:	613b      	str	r3, [r7, #16]
 801230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801230e:	693a      	ldr	r2, [r7, #16]
 8012310:	429a      	cmp	r2, r3
 8012312:	d3b7      	bcc.n	8012284 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801231a:	691b      	ldr	r3, [r3, #16]
 801231c:	68fa      	ldr	r2, [r7, #12]
 801231e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012322:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012326:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	2200      	movs	r2, #0
 801232c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8012334:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8012336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012338:	2b00      	cmp	r3, #0
 801233a:	d105      	bne.n	8012348 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	699b      	ldr	r3, [r3, #24]
 8012340:	f043 0210 	orr.w	r2, r3, #16
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	699a      	ldr	r2, [r3, #24]
 801234c:	4b0f      	ldr	r3, [pc, #60]	; (801238c <USB_DevInit+0x2c4>)
 801234e:	4313      	orrs	r3, r2
 8012350:	687a      	ldr	r2, [r7, #4]
 8012352:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8012354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012356:	2b00      	cmp	r3, #0
 8012358:	d005      	beq.n	8012366 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	699b      	ldr	r3, [r3, #24]
 801235e:	f043 0208 	orr.w	r2, r3, #8
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8012366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012368:	2b01      	cmp	r3, #1
 801236a:	d107      	bne.n	801237c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	699b      	ldr	r3, [r3, #24]
 8012370:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012374:	f043 0304 	orr.w	r3, r3, #4
 8012378:	687a      	ldr	r2, [r7, #4]
 801237a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801237c:	7dfb      	ldrb	r3, [r7, #23]
}
 801237e:	4618      	mov	r0, r3
 8012380:	3718      	adds	r7, #24
 8012382:	46bd      	mov	sp, r7
 8012384:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012388:	b004      	add	sp, #16
 801238a:	4770      	bx	lr
 801238c:	803c3800 	.word	0x803c3800

08012390 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012390:	b480      	push	{r7}
 8012392:	b085      	sub	sp, #20
 8012394:	af00      	add	r7, sp, #0
 8012396:	6078      	str	r0, [r7, #4]
 8012398:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801239a:	2300      	movs	r3, #0
 801239c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	3301      	adds	r3, #1
 80123a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	4a13      	ldr	r2, [pc, #76]	; (80123f4 <USB_FlushTxFifo+0x64>)
 80123a8:	4293      	cmp	r3, r2
 80123aa:	d901      	bls.n	80123b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80123ac:	2303      	movs	r3, #3
 80123ae:	e01b      	b.n	80123e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	691b      	ldr	r3, [r3, #16]
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	daf2      	bge.n	801239e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80123b8:	2300      	movs	r3, #0
 80123ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80123bc:	683b      	ldr	r3, [r7, #0]
 80123be:	019b      	lsls	r3, r3, #6
 80123c0:	f043 0220 	orr.w	r2, r3, #32
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	3301      	adds	r3, #1
 80123cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	4a08      	ldr	r2, [pc, #32]	; (80123f4 <USB_FlushTxFifo+0x64>)
 80123d2:	4293      	cmp	r3, r2
 80123d4:	d901      	bls.n	80123da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80123d6:	2303      	movs	r3, #3
 80123d8:	e006      	b.n	80123e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	691b      	ldr	r3, [r3, #16]
 80123de:	f003 0320 	and.w	r3, r3, #32
 80123e2:	2b20      	cmp	r3, #32
 80123e4:	d0f0      	beq.n	80123c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80123e6:	2300      	movs	r3, #0
}
 80123e8:	4618      	mov	r0, r3
 80123ea:	3714      	adds	r7, #20
 80123ec:	46bd      	mov	sp, r7
 80123ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f2:	4770      	bx	lr
 80123f4:	00030d40 	.word	0x00030d40

080123f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80123f8:	b480      	push	{r7}
 80123fa:	b085      	sub	sp, #20
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012400:	2300      	movs	r3, #0
 8012402:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	3301      	adds	r3, #1
 8012408:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	4a11      	ldr	r2, [pc, #68]	; (8012454 <USB_FlushRxFifo+0x5c>)
 801240e:	4293      	cmp	r3, r2
 8012410:	d901      	bls.n	8012416 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8012412:	2303      	movs	r3, #3
 8012414:	e018      	b.n	8012448 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	691b      	ldr	r3, [r3, #16]
 801241a:	2b00      	cmp	r3, #0
 801241c:	daf2      	bge.n	8012404 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801241e:	2300      	movs	r3, #0
 8012420:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	2210      	movs	r2, #16
 8012426:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	3301      	adds	r3, #1
 801242c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	4a08      	ldr	r2, [pc, #32]	; (8012454 <USB_FlushRxFifo+0x5c>)
 8012432:	4293      	cmp	r3, r2
 8012434:	d901      	bls.n	801243a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8012436:	2303      	movs	r3, #3
 8012438:	e006      	b.n	8012448 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	691b      	ldr	r3, [r3, #16]
 801243e:	f003 0310 	and.w	r3, r3, #16
 8012442:	2b10      	cmp	r3, #16
 8012444:	d0f0      	beq.n	8012428 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8012446:	2300      	movs	r3, #0
}
 8012448:	4618      	mov	r0, r3
 801244a:	3714      	adds	r7, #20
 801244c:	46bd      	mov	sp, r7
 801244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012452:	4770      	bx	lr
 8012454:	00030d40 	.word	0x00030d40

08012458 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8012458:	b480      	push	{r7}
 801245a:	b085      	sub	sp, #20
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]
 8012460:	460b      	mov	r3, r1
 8012462:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801246e:	681a      	ldr	r2, [r3, #0]
 8012470:	78fb      	ldrb	r3, [r7, #3]
 8012472:	68f9      	ldr	r1, [r7, #12]
 8012474:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012478:	4313      	orrs	r3, r2
 801247a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801247c:	2300      	movs	r3, #0
}
 801247e:	4618      	mov	r0, r3
 8012480:	3714      	adds	r7, #20
 8012482:	46bd      	mov	sp, r7
 8012484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012488:	4770      	bx	lr

0801248a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801248a:	b480      	push	{r7}
 801248c:	b087      	sub	sp, #28
 801248e:	af00      	add	r7, sp, #0
 8012490:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8012496:	693b      	ldr	r3, [r7, #16]
 8012498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801249c:	689b      	ldr	r3, [r3, #8]
 801249e:	f003 0306 	and.w	r3, r3, #6
 80124a2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d102      	bne.n	80124b0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80124aa:	2300      	movs	r3, #0
 80124ac:	75fb      	strb	r3, [r7, #23]
 80124ae:	e00a      	b.n	80124c6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	2b02      	cmp	r3, #2
 80124b4:	d002      	beq.n	80124bc <USB_GetDevSpeed+0x32>
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	2b06      	cmp	r3, #6
 80124ba:	d102      	bne.n	80124c2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80124bc:	2302      	movs	r3, #2
 80124be:	75fb      	strb	r3, [r7, #23]
 80124c0:	e001      	b.n	80124c6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80124c2:	230f      	movs	r3, #15
 80124c4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80124c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80124c8:	4618      	mov	r0, r3
 80124ca:	371c      	adds	r7, #28
 80124cc:	46bd      	mov	sp, r7
 80124ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d2:	4770      	bx	lr

080124d4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80124d4:	b480      	push	{r7}
 80124d6:	b085      	sub	sp, #20
 80124d8:	af00      	add	r7, sp, #0
 80124da:	6078      	str	r0, [r7, #4]
 80124dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80124e2:	683b      	ldr	r3, [r7, #0]
 80124e4:	781b      	ldrb	r3, [r3, #0]
 80124e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80124e8:	683b      	ldr	r3, [r7, #0]
 80124ea:	785b      	ldrb	r3, [r3, #1]
 80124ec:	2b01      	cmp	r3, #1
 80124ee:	d13a      	bne.n	8012566 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80124f6:	69da      	ldr	r2, [r3, #28]
 80124f8:	683b      	ldr	r3, [r7, #0]
 80124fa:	781b      	ldrb	r3, [r3, #0]
 80124fc:	f003 030f 	and.w	r3, r3, #15
 8012500:	2101      	movs	r1, #1
 8012502:	fa01 f303 	lsl.w	r3, r1, r3
 8012506:	b29b      	uxth	r3, r3
 8012508:	68f9      	ldr	r1, [r7, #12]
 801250a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801250e:	4313      	orrs	r3, r2
 8012510:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8012512:	68bb      	ldr	r3, [r7, #8]
 8012514:	015a      	lsls	r2, r3, #5
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	4413      	add	r3, r2
 801251a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012524:	2b00      	cmp	r3, #0
 8012526:	d155      	bne.n	80125d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012528:	68bb      	ldr	r3, [r7, #8]
 801252a:	015a      	lsls	r2, r3, #5
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	4413      	add	r3, r2
 8012530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012534:	681a      	ldr	r2, [r3, #0]
 8012536:	683b      	ldr	r3, [r7, #0]
 8012538:	68db      	ldr	r3, [r3, #12]
 801253a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801253e:	683b      	ldr	r3, [r7, #0]
 8012540:	791b      	ldrb	r3, [r3, #4]
 8012542:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012544:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012546:	68bb      	ldr	r3, [r7, #8]
 8012548:	059b      	lsls	r3, r3, #22
 801254a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801254c:	4313      	orrs	r3, r2
 801254e:	68ba      	ldr	r2, [r7, #8]
 8012550:	0151      	lsls	r1, r2, #5
 8012552:	68fa      	ldr	r2, [r7, #12]
 8012554:	440a      	add	r2, r1
 8012556:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801255a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801255e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012562:	6013      	str	r3, [r2, #0]
 8012564:	e036      	b.n	80125d4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801256c:	69da      	ldr	r2, [r3, #28]
 801256e:	683b      	ldr	r3, [r7, #0]
 8012570:	781b      	ldrb	r3, [r3, #0]
 8012572:	f003 030f 	and.w	r3, r3, #15
 8012576:	2101      	movs	r1, #1
 8012578:	fa01 f303 	lsl.w	r3, r1, r3
 801257c:	041b      	lsls	r3, r3, #16
 801257e:	68f9      	ldr	r1, [r7, #12]
 8012580:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012584:	4313      	orrs	r3, r2
 8012586:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8012588:	68bb      	ldr	r3, [r7, #8]
 801258a:	015a      	lsls	r2, r3, #5
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	4413      	add	r3, r2
 8012590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801259a:	2b00      	cmp	r3, #0
 801259c:	d11a      	bne.n	80125d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801259e:	68bb      	ldr	r3, [r7, #8]
 80125a0:	015a      	lsls	r2, r3, #5
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	4413      	add	r3, r2
 80125a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80125aa:	681a      	ldr	r2, [r3, #0]
 80125ac:	683b      	ldr	r3, [r7, #0]
 80125ae:	68db      	ldr	r3, [r3, #12]
 80125b0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80125b4:	683b      	ldr	r3, [r7, #0]
 80125b6:	791b      	ldrb	r3, [r3, #4]
 80125b8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80125ba:	430b      	orrs	r3, r1
 80125bc:	4313      	orrs	r3, r2
 80125be:	68ba      	ldr	r2, [r7, #8]
 80125c0:	0151      	lsls	r1, r2, #5
 80125c2:	68fa      	ldr	r2, [r7, #12]
 80125c4:	440a      	add	r2, r1
 80125c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80125ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80125ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80125d2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80125d4:	2300      	movs	r3, #0
}
 80125d6:	4618      	mov	r0, r3
 80125d8:	3714      	adds	r7, #20
 80125da:	46bd      	mov	sp, r7
 80125dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e0:	4770      	bx	lr
	...

080125e4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80125e4:	b480      	push	{r7}
 80125e6:	b085      	sub	sp, #20
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	6078      	str	r0, [r7, #4]
 80125ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80125f2:	683b      	ldr	r3, [r7, #0]
 80125f4:	781b      	ldrb	r3, [r3, #0]
 80125f6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80125f8:	683b      	ldr	r3, [r7, #0]
 80125fa:	785b      	ldrb	r3, [r3, #1]
 80125fc:	2b01      	cmp	r3, #1
 80125fe:	d161      	bne.n	80126c4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012600:	68bb      	ldr	r3, [r7, #8]
 8012602:	015a      	lsls	r2, r3, #5
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	4413      	add	r3, r2
 8012608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012612:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012616:	d11f      	bne.n	8012658 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8012618:	68bb      	ldr	r3, [r7, #8]
 801261a:	015a      	lsls	r2, r3, #5
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	4413      	add	r3, r2
 8012620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	68ba      	ldr	r2, [r7, #8]
 8012628:	0151      	lsls	r1, r2, #5
 801262a:	68fa      	ldr	r2, [r7, #12]
 801262c:	440a      	add	r2, r1
 801262e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012632:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012636:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8012638:	68bb      	ldr	r3, [r7, #8]
 801263a:	015a      	lsls	r2, r3, #5
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	4413      	add	r3, r2
 8012640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	68ba      	ldr	r2, [r7, #8]
 8012648:	0151      	lsls	r1, r2, #5
 801264a:	68fa      	ldr	r2, [r7, #12]
 801264c:	440a      	add	r2, r1
 801264e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012652:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012656:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801265e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012660:	683b      	ldr	r3, [r7, #0]
 8012662:	781b      	ldrb	r3, [r3, #0]
 8012664:	f003 030f 	and.w	r3, r3, #15
 8012668:	2101      	movs	r1, #1
 801266a:	fa01 f303 	lsl.w	r3, r1, r3
 801266e:	b29b      	uxth	r3, r3
 8012670:	43db      	mvns	r3, r3
 8012672:	68f9      	ldr	r1, [r7, #12]
 8012674:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012678:	4013      	ands	r3, r2
 801267a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012682:	69da      	ldr	r2, [r3, #28]
 8012684:	683b      	ldr	r3, [r7, #0]
 8012686:	781b      	ldrb	r3, [r3, #0]
 8012688:	f003 030f 	and.w	r3, r3, #15
 801268c:	2101      	movs	r1, #1
 801268e:	fa01 f303 	lsl.w	r3, r1, r3
 8012692:	b29b      	uxth	r3, r3
 8012694:	43db      	mvns	r3, r3
 8012696:	68f9      	ldr	r1, [r7, #12]
 8012698:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801269c:	4013      	ands	r3, r2
 801269e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80126a0:	68bb      	ldr	r3, [r7, #8]
 80126a2:	015a      	lsls	r2, r3, #5
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	4413      	add	r3, r2
 80126a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126ac:	681a      	ldr	r2, [r3, #0]
 80126ae:	68bb      	ldr	r3, [r7, #8]
 80126b0:	0159      	lsls	r1, r3, #5
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	440b      	add	r3, r1
 80126b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126ba:	4619      	mov	r1, r3
 80126bc:	4b35      	ldr	r3, [pc, #212]	; (8012794 <USB_DeactivateEndpoint+0x1b0>)
 80126be:	4013      	ands	r3, r2
 80126c0:	600b      	str	r3, [r1, #0]
 80126c2:	e060      	b.n	8012786 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80126c4:	68bb      	ldr	r3, [r7, #8]
 80126c6:	015a      	lsls	r2, r3, #5
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	4413      	add	r3, r2
 80126cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80126d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80126da:	d11f      	bne.n	801271c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80126dc:	68bb      	ldr	r3, [r7, #8]
 80126de:	015a      	lsls	r2, r3, #5
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	4413      	add	r3, r2
 80126e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	68ba      	ldr	r2, [r7, #8]
 80126ec:	0151      	lsls	r1, r2, #5
 80126ee:	68fa      	ldr	r2, [r7, #12]
 80126f0:	440a      	add	r2, r1
 80126f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80126f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80126fa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80126fc:	68bb      	ldr	r3, [r7, #8]
 80126fe:	015a      	lsls	r2, r3, #5
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	4413      	add	r3, r2
 8012704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	68ba      	ldr	r2, [r7, #8]
 801270c:	0151      	lsls	r1, r2, #5
 801270e:	68fa      	ldr	r2, [r7, #12]
 8012710:	440a      	add	r2, r1
 8012712:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012716:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801271a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012722:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012724:	683b      	ldr	r3, [r7, #0]
 8012726:	781b      	ldrb	r3, [r3, #0]
 8012728:	f003 030f 	and.w	r3, r3, #15
 801272c:	2101      	movs	r1, #1
 801272e:	fa01 f303 	lsl.w	r3, r1, r3
 8012732:	041b      	lsls	r3, r3, #16
 8012734:	43db      	mvns	r3, r3
 8012736:	68f9      	ldr	r1, [r7, #12]
 8012738:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801273c:	4013      	ands	r3, r2
 801273e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012746:	69da      	ldr	r2, [r3, #28]
 8012748:	683b      	ldr	r3, [r7, #0]
 801274a:	781b      	ldrb	r3, [r3, #0]
 801274c:	f003 030f 	and.w	r3, r3, #15
 8012750:	2101      	movs	r1, #1
 8012752:	fa01 f303 	lsl.w	r3, r1, r3
 8012756:	041b      	lsls	r3, r3, #16
 8012758:	43db      	mvns	r3, r3
 801275a:	68f9      	ldr	r1, [r7, #12]
 801275c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012760:	4013      	ands	r3, r2
 8012762:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8012764:	68bb      	ldr	r3, [r7, #8]
 8012766:	015a      	lsls	r2, r3, #5
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	4413      	add	r3, r2
 801276c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012770:	681a      	ldr	r2, [r3, #0]
 8012772:	68bb      	ldr	r3, [r7, #8]
 8012774:	0159      	lsls	r1, r3, #5
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	440b      	add	r3, r1
 801277a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801277e:	4619      	mov	r1, r3
 8012780:	4b05      	ldr	r3, [pc, #20]	; (8012798 <USB_DeactivateEndpoint+0x1b4>)
 8012782:	4013      	ands	r3, r2
 8012784:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8012786:	2300      	movs	r3, #0
}
 8012788:	4618      	mov	r0, r3
 801278a:	3714      	adds	r7, #20
 801278c:	46bd      	mov	sp, r7
 801278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012792:	4770      	bx	lr
 8012794:	ec337800 	.word	0xec337800
 8012798:	eff37800 	.word	0xeff37800

0801279c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801279c:	b580      	push	{r7, lr}
 801279e:	b08a      	sub	sp, #40	; 0x28
 80127a0:	af02      	add	r7, sp, #8
 80127a2:	60f8      	str	r0, [r7, #12]
 80127a4:	60b9      	str	r1, [r7, #8]
 80127a6:	4613      	mov	r3, r2
 80127a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80127ae:	68bb      	ldr	r3, [r7, #8]
 80127b0:	781b      	ldrb	r3, [r3, #0]
 80127b2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80127b4:	68bb      	ldr	r3, [r7, #8]
 80127b6:	785b      	ldrb	r3, [r3, #1]
 80127b8:	2b01      	cmp	r3, #1
 80127ba:	f040 815c 	bne.w	8012a76 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80127be:	68bb      	ldr	r3, [r7, #8]
 80127c0:	699b      	ldr	r3, [r3, #24]
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d132      	bne.n	801282c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80127c6:	69bb      	ldr	r3, [r7, #24]
 80127c8:	015a      	lsls	r2, r3, #5
 80127ca:	69fb      	ldr	r3, [r7, #28]
 80127cc:	4413      	add	r3, r2
 80127ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80127d2:	691b      	ldr	r3, [r3, #16]
 80127d4:	69ba      	ldr	r2, [r7, #24]
 80127d6:	0151      	lsls	r1, r2, #5
 80127d8:	69fa      	ldr	r2, [r7, #28]
 80127da:	440a      	add	r2, r1
 80127dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80127e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80127e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80127e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80127ea:	69bb      	ldr	r3, [r7, #24]
 80127ec:	015a      	lsls	r2, r3, #5
 80127ee:	69fb      	ldr	r3, [r7, #28]
 80127f0:	4413      	add	r3, r2
 80127f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80127f6:	691b      	ldr	r3, [r3, #16]
 80127f8:	69ba      	ldr	r2, [r7, #24]
 80127fa:	0151      	lsls	r1, r2, #5
 80127fc:	69fa      	ldr	r2, [r7, #28]
 80127fe:	440a      	add	r2, r1
 8012800:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012804:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012808:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801280a:	69bb      	ldr	r3, [r7, #24]
 801280c:	015a      	lsls	r2, r3, #5
 801280e:	69fb      	ldr	r3, [r7, #28]
 8012810:	4413      	add	r3, r2
 8012812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012816:	691b      	ldr	r3, [r3, #16]
 8012818:	69ba      	ldr	r2, [r7, #24]
 801281a:	0151      	lsls	r1, r2, #5
 801281c:	69fa      	ldr	r2, [r7, #28]
 801281e:	440a      	add	r2, r1
 8012820:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012824:	0cdb      	lsrs	r3, r3, #19
 8012826:	04db      	lsls	r3, r3, #19
 8012828:	6113      	str	r3, [r2, #16]
 801282a:	e074      	b.n	8012916 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801282c:	69bb      	ldr	r3, [r7, #24]
 801282e:	015a      	lsls	r2, r3, #5
 8012830:	69fb      	ldr	r3, [r7, #28]
 8012832:	4413      	add	r3, r2
 8012834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012838:	691b      	ldr	r3, [r3, #16]
 801283a:	69ba      	ldr	r2, [r7, #24]
 801283c:	0151      	lsls	r1, r2, #5
 801283e:	69fa      	ldr	r2, [r7, #28]
 8012840:	440a      	add	r2, r1
 8012842:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012846:	0cdb      	lsrs	r3, r3, #19
 8012848:	04db      	lsls	r3, r3, #19
 801284a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801284c:	69bb      	ldr	r3, [r7, #24]
 801284e:	015a      	lsls	r2, r3, #5
 8012850:	69fb      	ldr	r3, [r7, #28]
 8012852:	4413      	add	r3, r2
 8012854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012858:	691b      	ldr	r3, [r3, #16]
 801285a:	69ba      	ldr	r2, [r7, #24]
 801285c:	0151      	lsls	r1, r2, #5
 801285e:	69fa      	ldr	r2, [r7, #28]
 8012860:	440a      	add	r2, r1
 8012862:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012866:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801286a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801286e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8012870:	69bb      	ldr	r3, [r7, #24]
 8012872:	015a      	lsls	r2, r3, #5
 8012874:	69fb      	ldr	r3, [r7, #28]
 8012876:	4413      	add	r3, r2
 8012878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801287c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801287e:	68bb      	ldr	r3, [r7, #8]
 8012880:	6999      	ldr	r1, [r3, #24]
 8012882:	68bb      	ldr	r3, [r7, #8]
 8012884:	68db      	ldr	r3, [r3, #12]
 8012886:	440b      	add	r3, r1
 8012888:	1e59      	subs	r1, r3, #1
 801288a:	68bb      	ldr	r3, [r7, #8]
 801288c:	68db      	ldr	r3, [r3, #12]
 801288e:	fbb1 f3f3 	udiv	r3, r1, r3
 8012892:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8012894:	4b9d      	ldr	r3, [pc, #628]	; (8012b0c <USB_EPStartXfer+0x370>)
 8012896:	400b      	ands	r3, r1
 8012898:	69b9      	ldr	r1, [r7, #24]
 801289a:	0148      	lsls	r0, r1, #5
 801289c:	69f9      	ldr	r1, [r7, #28]
 801289e:	4401      	add	r1, r0
 80128a0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80128a4:	4313      	orrs	r3, r2
 80128a6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80128a8:	69bb      	ldr	r3, [r7, #24]
 80128aa:	015a      	lsls	r2, r3, #5
 80128ac:	69fb      	ldr	r3, [r7, #28]
 80128ae:	4413      	add	r3, r2
 80128b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80128b4:	691a      	ldr	r2, [r3, #16]
 80128b6:	68bb      	ldr	r3, [r7, #8]
 80128b8:	699b      	ldr	r3, [r3, #24]
 80128ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80128be:	69b9      	ldr	r1, [r7, #24]
 80128c0:	0148      	lsls	r0, r1, #5
 80128c2:	69f9      	ldr	r1, [r7, #28]
 80128c4:	4401      	add	r1, r0
 80128c6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80128ca:	4313      	orrs	r3, r2
 80128cc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80128ce:	68bb      	ldr	r3, [r7, #8]
 80128d0:	791b      	ldrb	r3, [r3, #4]
 80128d2:	2b01      	cmp	r3, #1
 80128d4:	d11f      	bne.n	8012916 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80128d6:	69bb      	ldr	r3, [r7, #24]
 80128d8:	015a      	lsls	r2, r3, #5
 80128da:	69fb      	ldr	r3, [r7, #28]
 80128dc:	4413      	add	r3, r2
 80128de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80128e2:	691b      	ldr	r3, [r3, #16]
 80128e4:	69ba      	ldr	r2, [r7, #24]
 80128e6:	0151      	lsls	r1, r2, #5
 80128e8:	69fa      	ldr	r2, [r7, #28]
 80128ea:	440a      	add	r2, r1
 80128ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80128f0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80128f4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80128f6:	69bb      	ldr	r3, [r7, #24]
 80128f8:	015a      	lsls	r2, r3, #5
 80128fa:	69fb      	ldr	r3, [r7, #28]
 80128fc:	4413      	add	r3, r2
 80128fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012902:	691b      	ldr	r3, [r3, #16]
 8012904:	69ba      	ldr	r2, [r7, #24]
 8012906:	0151      	lsls	r1, r2, #5
 8012908:	69fa      	ldr	r2, [r7, #28]
 801290a:	440a      	add	r2, r1
 801290c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012910:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012914:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8012916:	79fb      	ldrb	r3, [r7, #7]
 8012918:	2b01      	cmp	r3, #1
 801291a:	d14b      	bne.n	80129b4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801291c:	68bb      	ldr	r3, [r7, #8]
 801291e:	695b      	ldr	r3, [r3, #20]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d009      	beq.n	8012938 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8012924:	69bb      	ldr	r3, [r7, #24]
 8012926:	015a      	lsls	r2, r3, #5
 8012928:	69fb      	ldr	r3, [r7, #28]
 801292a:	4413      	add	r3, r2
 801292c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012930:	461a      	mov	r2, r3
 8012932:	68bb      	ldr	r3, [r7, #8]
 8012934:	695b      	ldr	r3, [r3, #20]
 8012936:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8012938:	68bb      	ldr	r3, [r7, #8]
 801293a:	791b      	ldrb	r3, [r3, #4]
 801293c:	2b01      	cmp	r3, #1
 801293e:	d128      	bne.n	8012992 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012940:	69fb      	ldr	r3, [r7, #28]
 8012942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012946:	689b      	ldr	r3, [r3, #8]
 8012948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801294c:	2b00      	cmp	r3, #0
 801294e:	d110      	bne.n	8012972 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012950:	69bb      	ldr	r3, [r7, #24]
 8012952:	015a      	lsls	r2, r3, #5
 8012954:	69fb      	ldr	r3, [r7, #28]
 8012956:	4413      	add	r3, r2
 8012958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	69ba      	ldr	r2, [r7, #24]
 8012960:	0151      	lsls	r1, r2, #5
 8012962:	69fa      	ldr	r2, [r7, #28]
 8012964:	440a      	add	r2, r1
 8012966:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801296a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801296e:	6013      	str	r3, [r2, #0]
 8012970:	e00f      	b.n	8012992 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8012972:	69bb      	ldr	r3, [r7, #24]
 8012974:	015a      	lsls	r2, r3, #5
 8012976:	69fb      	ldr	r3, [r7, #28]
 8012978:	4413      	add	r3, r2
 801297a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	69ba      	ldr	r2, [r7, #24]
 8012982:	0151      	lsls	r1, r2, #5
 8012984:	69fa      	ldr	r2, [r7, #28]
 8012986:	440a      	add	r2, r1
 8012988:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801298c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012990:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012992:	69bb      	ldr	r3, [r7, #24]
 8012994:	015a      	lsls	r2, r3, #5
 8012996:	69fb      	ldr	r3, [r7, #28]
 8012998:	4413      	add	r3, r2
 801299a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	69ba      	ldr	r2, [r7, #24]
 80129a2:	0151      	lsls	r1, r2, #5
 80129a4:	69fa      	ldr	r2, [r7, #28]
 80129a6:	440a      	add	r2, r1
 80129a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80129ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80129b0:	6013      	str	r3, [r2, #0]
 80129b2:	e133      	b.n	8012c1c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80129b4:	69bb      	ldr	r3, [r7, #24]
 80129b6:	015a      	lsls	r2, r3, #5
 80129b8:	69fb      	ldr	r3, [r7, #28]
 80129ba:	4413      	add	r3, r2
 80129bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	69ba      	ldr	r2, [r7, #24]
 80129c4:	0151      	lsls	r1, r2, #5
 80129c6:	69fa      	ldr	r2, [r7, #28]
 80129c8:	440a      	add	r2, r1
 80129ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80129ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80129d2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80129d4:	68bb      	ldr	r3, [r7, #8]
 80129d6:	791b      	ldrb	r3, [r3, #4]
 80129d8:	2b01      	cmp	r3, #1
 80129da:	d015      	beq.n	8012a08 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80129dc:	68bb      	ldr	r3, [r7, #8]
 80129de:	699b      	ldr	r3, [r3, #24]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	f000 811b 	beq.w	8012c1c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80129e6:	69fb      	ldr	r3, [r7, #28]
 80129e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80129ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80129ee:	68bb      	ldr	r3, [r7, #8]
 80129f0:	781b      	ldrb	r3, [r3, #0]
 80129f2:	f003 030f 	and.w	r3, r3, #15
 80129f6:	2101      	movs	r1, #1
 80129f8:	fa01 f303 	lsl.w	r3, r1, r3
 80129fc:	69f9      	ldr	r1, [r7, #28]
 80129fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012a02:	4313      	orrs	r3, r2
 8012a04:	634b      	str	r3, [r1, #52]	; 0x34
 8012a06:	e109      	b.n	8012c1c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012a08:	69fb      	ldr	r3, [r7, #28]
 8012a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a0e:	689b      	ldr	r3, [r3, #8]
 8012a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d110      	bne.n	8012a3a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012a18:	69bb      	ldr	r3, [r7, #24]
 8012a1a:	015a      	lsls	r2, r3, #5
 8012a1c:	69fb      	ldr	r3, [r7, #28]
 8012a1e:	4413      	add	r3, r2
 8012a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	69ba      	ldr	r2, [r7, #24]
 8012a28:	0151      	lsls	r1, r2, #5
 8012a2a:	69fa      	ldr	r2, [r7, #28]
 8012a2c:	440a      	add	r2, r1
 8012a2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012a32:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012a36:	6013      	str	r3, [r2, #0]
 8012a38:	e00f      	b.n	8012a5a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8012a3a:	69bb      	ldr	r3, [r7, #24]
 8012a3c:	015a      	lsls	r2, r3, #5
 8012a3e:	69fb      	ldr	r3, [r7, #28]
 8012a40:	4413      	add	r3, r2
 8012a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	69ba      	ldr	r2, [r7, #24]
 8012a4a:	0151      	lsls	r1, r2, #5
 8012a4c:	69fa      	ldr	r2, [r7, #28]
 8012a4e:	440a      	add	r2, r1
 8012a50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012a58:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8012a5a:	68bb      	ldr	r3, [r7, #8]
 8012a5c:	6919      	ldr	r1, [r3, #16]
 8012a5e:	68bb      	ldr	r3, [r7, #8]
 8012a60:	781a      	ldrb	r2, [r3, #0]
 8012a62:	68bb      	ldr	r3, [r7, #8]
 8012a64:	699b      	ldr	r3, [r3, #24]
 8012a66:	b298      	uxth	r0, r3
 8012a68:	79fb      	ldrb	r3, [r7, #7]
 8012a6a:	9300      	str	r3, [sp, #0]
 8012a6c:	4603      	mov	r3, r0
 8012a6e:	68f8      	ldr	r0, [r7, #12]
 8012a70:	f000 fade 	bl	8013030 <USB_WritePacket>
 8012a74:	e0d2      	b.n	8012c1c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8012a76:	69bb      	ldr	r3, [r7, #24]
 8012a78:	015a      	lsls	r2, r3, #5
 8012a7a:	69fb      	ldr	r3, [r7, #28]
 8012a7c:	4413      	add	r3, r2
 8012a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a82:	691b      	ldr	r3, [r3, #16]
 8012a84:	69ba      	ldr	r2, [r7, #24]
 8012a86:	0151      	lsls	r1, r2, #5
 8012a88:	69fa      	ldr	r2, [r7, #28]
 8012a8a:	440a      	add	r2, r1
 8012a8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012a90:	0cdb      	lsrs	r3, r3, #19
 8012a92:	04db      	lsls	r3, r3, #19
 8012a94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8012a96:	69bb      	ldr	r3, [r7, #24]
 8012a98:	015a      	lsls	r2, r3, #5
 8012a9a:	69fb      	ldr	r3, [r7, #28]
 8012a9c:	4413      	add	r3, r2
 8012a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012aa2:	691b      	ldr	r3, [r3, #16]
 8012aa4:	69ba      	ldr	r2, [r7, #24]
 8012aa6:	0151      	lsls	r1, r2, #5
 8012aa8:	69fa      	ldr	r2, [r7, #28]
 8012aaa:	440a      	add	r2, r1
 8012aac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012ab0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012ab4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012ab8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8012aba:	68bb      	ldr	r3, [r7, #8]
 8012abc:	699b      	ldr	r3, [r3, #24]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d126      	bne.n	8012b10 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8012ac2:	69bb      	ldr	r3, [r7, #24]
 8012ac4:	015a      	lsls	r2, r3, #5
 8012ac6:	69fb      	ldr	r3, [r7, #28]
 8012ac8:	4413      	add	r3, r2
 8012aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ace:	691a      	ldr	r2, [r3, #16]
 8012ad0:	68bb      	ldr	r3, [r7, #8]
 8012ad2:	68db      	ldr	r3, [r3, #12]
 8012ad4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012ad8:	69b9      	ldr	r1, [r7, #24]
 8012ada:	0148      	lsls	r0, r1, #5
 8012adc:	69f9      	ldr	r1, [r7, #28]
 8012ade:	4401      	add	r1, r0
 8012ae0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012ae4:	4313      	orrs	r3, r2
 8012ae6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012ae8:	69bb      	ldr	r3, [r7, #24]
 8012aea:	015a      	lsls	r2, r3, #5
 8012aec:	69fb      	ldr	r3, [r7, #28]
 8012aee:	4413      	add	r3, r2
 8012af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012af4:	691b      	ldr	r3, [r3, #16]
 8012af6:	69ba      	ldr	r2, [r7, #24]
 8012af8:	0151      	lsls	r1, r2, #5
 8012afa:	69fa      	ldr	r2, [r7, #28]
 8012afc:	440a      	add	r2, r1
 8012afe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012b02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012b06:	6113      	str	r3, [r2, #16]
 8012b08:	e03a      	b.n	8012b80 <USB_EPStartXfer+0x3e4>
 8012b0a:	bf00      	nop
 8012b0c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8012b10:	68bb      	ldr	r3, [r7, #8]
 8012b12:	699a      	ldr	r2, [r3, #24]
 8012b14:	68bb      	ldr	r3, [r7, #8]
 8012b16:	68db      	ldr	r3, [r3, #12]
 8012b18:	4413      	add	r3, r2
 8012b1a:	1e5a      	subs	r2, r3, #1
 8012b1c:	68bb      	ldr	r3, [r7, #8]
 8012b1e:	68db      	ldr	r3, [r3, #12]
 8012b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8012b24:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8012b26:	68bb      	ldr	r3, [r7, #8]
 8012b28:	68db      	ldr	r3, [r3, #12]
 8012b2a:	8afa      	ldrh	r2, [r7, #22]
 8012b2c:	fb03 f202 	mul.w	r2, r3, r2
 8012b30:	68bb      	ldr	r3, [r7, #8]
 8012b32:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8012b34:	69bb      	ldr	r3, [r7, #24]
 8012b36:	015a      	lsls	r2, r3, #5
 8012b38:	69fb      	ldr	r3, [r7, #28]
 8012b3a:	4413      	add	r3, r2
 8012b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b40:	691a      	ldr	r2, [r3, #16]
 8012b42:	8afb      	ldrh	r3, [r7, #22]
 8012b44:	04d9      	lsls	r1, r3, #19
 8012b46:	4b38      	ldr	r3, [pc, #224]	; (8012c28 <USB_EPStartXfer+0x48c>)
 8012b48:	400b      	ands	r3, r1
 8012b4a:	69b9      	ldr	r1, [r7, #24]
 8012b4c:	0148      	lsls	r0, r1, #5
 8012b4e:	69f9      	ldr	r1, [r7, #28]
 8012b50:	4401      	add	r1, r0
 8012b52:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012b56:	4313      	orrs	r3, r2
 8012b58:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8012b5a:	69bb      	ldr	r3, [r7, #24]
 8012b5c:	015a      	lsls	r2, r3, #5
 8012b5e:	69fb      	ldr	r3, [r7, #28]
 8012b60:	4413      	add	r3, r2
 8012b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b66:	691a      	ldr	r2, [r3, #16]
 8012b68:	68bb      	ldr	r3, [r7, #8]
 8012b6a:	69db      	ldr	r3, [r3, #28]
 8012b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012b70:	69b9      	ldr	r1, [r7, #24]
 8012b72:	0148      	lsls	r0, r1, #5
 8012b74:	69f9      	ldr	r1, [r7, #28]
 8012b76:	4401      	add	r1, r0
 8012b78:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012b7c:	4313      	orrs	r3, r2
 8012b7e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8012b80:	79fb      	ldrb	r3, [r7, #7]
 8012b82:	2b01      	cmp	r3, #1
 8012b84:	d10d      	bne.n	8012ba2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8012b86:	68bb      	ldr	r3, [r7, #8]
 8012b88:	691b      	ldr	r3, [r3, #16]
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d009      	beq.n	8012ba2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8012b8e:	68bb      	ldr	r3, [r7, #8]
 8012b90:	6919      	ldr	r1, [r3, #16]
 8012b92:	69bb      	ldr	r3, [r7, #24]
 8012b94:	015a      	lsls	r2, r3, #5
 8012b96:	69fb      	ldr	r3, [r7, #28]
 8012b98:	4413      	add	r3, r2
 8012b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b9e:	460a      	mov	r2, r1
 8012ba0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8012ba2:	68bb      	ldr	r3, [r7, #8]
 8012ba4:	791b      	ldrb	r3, [r3, #4]
 8012ba6:	2b01      	cmp	r3, #1
 8012ba8:	d128      	bne.n	8012bfc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012baa:	69fb      	ldr	r3, [r7, #28]
 8012bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012bb0:	689b      	ldr	r3, [r3, #8]
 8012bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d110      	bne.n	8012bdc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8012bba:	69bb      	ldr	r3, [r7, #24]
 8012bbc:	015a      	lsls	r2, r3, #5
 8012bbe:	69fb      	ldr	r3, [r7, #28]
 8012bc0:	4413      	add	r3, r2
 8012bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	69ba      	ldr	r2, [r7, #24]
 8012bca:	0151      	lsls	r1, r2, #5
 8012bcc:	69fa      	ldr	r2, [r7, #28]
 8012bce:	440a      	add	r2, r1
 8012bd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012bd4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012bd8:	6013      	str	r3, [r2, #0]
 8012bda:	e00f      	b.n	8012bfc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8012bdc:	69bb      	ldr	r3, [r7, #24]
 8012bde:	015a      	lsls	r2, r3, #5
 8012be0:	69fb      	ldr	r3, [r7, #28]
 8012be2:	4413      	add	r3, r2
 8012be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	69ba      	ldr	r2, [r7, #24]
 8012bec:	0151      	lsls	r1, r2, #5
 8012bee:	69fa      	ldr	r2, [r7, #28]
 8012bf0:	440a      	add	r2, r1
 8012bf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012bf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012bfa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012bfc:	69bb      	ldr	r3, [r7, #24]
 8012bfe:	015a      	lsls	r2, r3, #5
 8012c00:	69fb      	ldr	r3, [r7, #28]
 8012c02:	4413      	add	r3, r2
 8012c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	69ba      	ldr	r2, [r7, #24]
 8012c0c:	0151      	lsls	r1, r2, #5
 8012c0e:	69fa      	ldr	r2, [r7, #28]
 8012c10:	440a      	add	r2, r1
 8012c12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012c16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012c1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012c1c:	2300      	movs	r3, #0
}
 8012c1e:	4618      	mov	r0, r3
 8012c20:	3720      	adds	r7, #32
 8012c22:	46bd      	mov	sp, r7
 8012c24:	bd80      	pop	{r7, pc}
 8012c26:	bf00      	nop
 8012c28:	1ff80000 	.word	0x1ff80000

08012c2c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8012c2c:	b480      	push	{r7}
 8012c2e:	b087      	sub	sp, #28
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	60f8      	str	r0, [r7, #12]
 8012c34:	60b9      	str	r1, [r7, #8]
 8012c36:	4613      	mov	r3, r2
 8012c38:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8012c3e:	68bb      	ldr	r3, [r7, #8]
 8012c40:	781b      	ldrb	r3, [r3, #0]
 8012c42:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012c44:	68bb      	ldr	r3, [r7, #8]
 8012c46:	785b      	ldrb	r3, [r3, #1]
 8012c48:	2b01      	cmp	r3, #1
 8012c4a:	f040 80ce 	bne.w	8012dea <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8012c4e:	68bb      	ldr	r3, [r7, #8]
 8012c50:	699b      	ldr	r3, [r3, #24]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d132      	bne.n	8012cbc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012c56:	693b      	ldr	r3, [r7, #16]
 8012c58:	015a      	lsls	r2, r3, #5
 8012c5a:	697b      	ldr	r3, [r7, #20]
 8012c5c:	4413      	add	r3, r2
 8012c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012c62:	691b      	ldr	r3, [r3, #16]
 8012c64:	693a      	ldr	r2, [r7, #16]
 8012c66:	0151      	lsls	r1, r2, #5
 8012c68:	697a      	ldr	r2, [r7, #20]
 8012c6a:	440a      	add	r2, r1
 8012c6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012c70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012c74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012c78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012c7a:	693b      	ldr	r3, [r7, #16]
 8012c7c:	015a      	lsls	r2, r3, #5
 8012c7e:	697b      	ldr	r3, [r7, #20]
 8012c80:	4413      	add	r3, r2
 8012c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012c86:	691b      	ldr	r3, [r3, #16]
 8012c88:	693a      	ldr	r2, [r7, #16]
 8012c8a:	0151      	lsls	r1, r2, #5
 8012c8c:	697a      	ldr	r2, [r7, #20]
 8012c8e:	440a      	add	r2, r1
 8012c90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012c94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012c98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012c9a:	693b      	ldr	r3, [r7, #16]
 8012c9c:	015a      	lsls	r2, r3, #5
 8012c9e:	697b      	ldr	r3, [r7, #20]
 8012ca0:	4413      	add	r3, r2
 8012ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ca6:	691b      	ldr	r3, [r3, #16]
 8012ca8:	693a      	ldr	r2, [r7, #16]
 8012caa:	0151      	lsls	r1, r2, #5
 8012cac:	697a      	ldr	r2, [r7, #20]
 8012cae:	440a      	add	r2, r1
 8012cb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012cb4:	0cdb      	lsrs	r3, r3, #19
 8012cb6:	04db      	lsls	r3, r3, #19
 8012cb8:	6113      	str	r3, [r2, #16]
 8012cba:	e04e      	b.n	8012d5a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012cbc:	693b      	ldr	r3, [r7, #16]
 8012cbe:	015a      	lsls	r2, r3, #5
 8012cc0:	697b      	ldr	r3, [r7, #20]
 8012cc2:	4413      	add	r3, r2
 8012cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012cc8:	691b      	ldr	r3, [r3, #16]
 8012cca:	693a      	ldr	r2, [r7, #16]
 8012ccc:	0151      	lsls	r1, r2, #5
 8012cce:	697a      	ldr	r2, [r7, #20]
 8012cd0:	440a      	add	r2, r1
 8012cd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012cd6:	0cdb      	lsrs	r3, r3, #19
 8012cd8:	04db      	lsls	r3, r3, #19
 8012cda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012cdc:	693b      	ldr	r3, [r7, #16]
 8012cde:	015a      	lsls	r2, r3, #5
 8012ce0:	697b      	ldr	r3, [r7, #20]
 8012ce2:	4413      	add	r3, r2
 8012ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ce8:	691b      	ldr	r3, [r3, #16]
 8012cea:	693a      	ldr	r2, [r7, #16]
 8012cec:	0151      	lsls	r1, r2, #5
 8012cee:	697a      	ldr	r2, [r7, #20]
 8012cf0:	440a      	add	r2, r1
 8012cf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012cf6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012cfa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012cfe:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8012d00:	68bb      	ldr	r3, [r7, #8]
 8012d02:	699a      	ldr	r2, [r3, #24]
 8012d04:	68bb      	ldr	r3, [r7, #8]
 8012d06:	68db      	ldr	r3, [r3, #12]
 8012d08:	429a      	cmp	r2, r3
 8012d0a:	d903      	bls.n	8012d14 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8012d0c:	68bb      	ldr	r3, [r7, #8]
 8012d0e:	68da      	ldr	r2, [r3, #12]
 8012d10:	68bb      	ldr	r3, [r7, #8]
 8012d12:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012d14:	693b      	ldr	r3, [r7, #16]
 8012d16:	015a      	lsls	r2, r3, #5
 8012d18:	697b      	ldr	r3, [r7, #20]
 8012d1a:	4413      	add	r3, r2
 8012d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d20:	691b      	ldr	r3, [r3, #16]
 8012d22:	693a      	ldr	r2, [r7, #16]
 8012d24:	0151      	lsls	r1, r2, #5
 8012d26:	697a      	ldr	r2, [r7, #20]
 8012d28:	440a      	add	r2, r1
 8012d2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012d2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012d32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012d34:	693b      	ldr	r3, [r7, #16]
 8012d36:	015a      	lsls	r2, r3, #5
 8012d38:	697b      	ldr	r3, [r7, #20]
 8012d3a:	4413      	add	r3, r2
 8012d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d40:	691a      	ldr	r2, [r3, #16]
 8012d42:	68bb      	ldr	r3, [r7, #8]
 8012d44:	699b      	ldr	r3, [r3, #24]
 8012d46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012d4a:	6939      	ldr	r1, [r7, #16]
 8012d4c:	0148      	lsls	r0, r1, #5
 8012d4e:	6979      	ldr	r1, [r7, #20]
 8012d50:	4401      	add	r1, r0
 8012d52:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012d56:	4313      	orrs	r3, r2
 8012d58:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8012d5a:	79fb      	ldrb	r3, [r7, #7]
 8012d5c:	2b01      	cmp	r3, #1
 8012d5e:	d11e      	bne.n	8012d9e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8012d60:	68bb      	ldr	r3, [r7, #8]
 8012d62:	695b      	ldr	r3, [r3, #20]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d009      	beq.n	8012d7c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8012d68:	693b      	ldr	r3, [r7, #16]
 8012d6a:	015a      	lsls	r2, r3, #5
 8012d6c:	697b      	ldr	r3, [r7, #20]
 8012d6e:	4413      	add	r3, r2
 8012d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d74:	461a      	mov	r2, r3
 8012d76:	68bb      	ldr	r3, [r7, #8]
 8012d78:	695b      	ldr	r3, [r3, #20]
 8012d7a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012d7c:	693b      	ldr	r3, [r7, #16]
 8012d7e:	015a      	lsls	r2, r3, #5
 8012d80:	697b      	ldr	r3, [r7, #20]
 8012d82:	4413      	add	r3, r2
 8012d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	693a      	ldr	r2, [r7, #16]
 8012d8c:	0151      	lsls	r1, r2, #5
 8012d8e:	697a      	ldr	r2, [r7, #20]
 8012d90:	440a      	add	r2, r1
 8012d92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012d96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012d9a:	6013      	str	r3, [r2, #0]
 8012d9c:	e097      	b.n	8012ece <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012d9e:	693b      	ldr	r3, [r7, #16]
 8012da0:	015a      	lsls	r2, r3, #5
 8012da2:	697b      	ldr	r3, [r7, #20]
 8012da4:	4413      	add	r3, r2
 8012da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	693a      	ldr	r2, [r7, #16]
 8012dae:	0151      	lsls	r1, r2, #5
 8012db0:	697a      	ldr	r2, [r7, #20]
 8012db2:	440a      	add	r2, r1
 8012db4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012db8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012dbc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8012dbe:	68bb      	ldr	r3, [r7, #8]
 8012dc0:	699b      	ldr	r3, [r3, #24]
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	f000 8083 	beq.w	8012ece <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012dc8:	697b      	ldr	r3, [r7, #20]
 8012dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012dce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012dd0:	68bb      	ldr	r3, [r7, #8]
 8012dd2:	781b      	ldrb	r3, [r3, #0]
 8012dd4:	f003 030f 	and.w	r3, r3, #15
 8012dd8:	2101      	movs	r1, #1
 8012dda:	fa01 f303 	lsl.w	r3, r1, r3
 8012dde:	6979      	ldr	r1, [r7, #20]
 8012de0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012de4:	4313      	orrs	r3, r2
 8012de6:	634b      	str	r3, [r1, #52]	; 0x34
 8012de8:	e071      	b.n	8012ece <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8012dea:	693b      	ldr	r3, [r7, #16]
 8012dec:	015a      	lsls	r2, r3, #5
 8012dee:	697b      	ldr	r3, [r7, #20]
 8012df0:	4413      	add	r3, r2
 8012df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012df6:	691b      	ldr	r3, [r3, #16]
 8012df8:	693a      	ldr	r2, [r7, #16]
 8012dfa:	0151      	lsls	r1, r2, #5
 8012dfc:	697a      	ldr	r2, [r7, #20]
 8012dfe:	440a      	add	r2, r1
 8012e00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012e04:	0cdb      	lsrs	r3, r3, #19
 8012e06:	04db      	lsls	r3, r3, #19
 8012e08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8012e0a:	693b      	ldr	r3, [r7, #16]
 8012e0c:	015a      	lsls	r2, r3, #5
 8012e0e:	697b      	ldr	r3, [r7, #20]
 8012e10:	4413      	add	r3, r2
 8012e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e16:	691b      	ldr	r3, [r3, #16]
 8012e18:	693a      	ldr	r2, [r7, #16]
 8012e1a:	0151      	lsls	r1, r2, #5
 8012e1c:	697a      	ldr	r2, [r7, #20]
 8012e1e:	440a      	add	r2, r1
 8012e20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012e24:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012e28:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012e2c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8012e2e:	68bb      	ldr	r3, [r7, #8]
 8012e30:	699b      	ldr	r3, [r3, #24]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d003      	beq.n	8012e3e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8012e36:	68bb      	ldr	r3, [r7, #8]
 8012e38:	68da      	ldr	r2, [r3, #12]
 8012e3a:	68bb      	ldr	r3, [r7, #8]
 8012e3c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8012e3e:	68bb      	ldr	r3, [r7, #8]
 8012e40:	68da      	ldr	r2, [r3, #12]
 8012e42:	68bb      	ldr	r3, [r7, #8]
 8012e44:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012e46:	693b      	ldr	r3, [r7, #16]
 8012e48:	015a      	lsls	r2, r3, #5
 8012e4a:	697b      	ldr	r3, [r7, #20]
 8012e4c:	4413      	add	r3, r2
 8012e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e52:	691b      	ldr	r3, [r3, #16]
 8012e54:	693a      	ldr	r2, [r7, #16]
 8012e56:	0151      	lsls	r1, r2, #5
 8012e58:	697a      	ldr	r2, [r7, #20]
 8012e5a:	440a      	add	r2, r1
 8012e5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012e60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012e64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8012e66:	693b      	ldr	r3, [r7, #16]
 8012e68:	015a      	lsls	r2, r3, #5
 8012e6a:	697b      	ldr	r3, [r7, #20]
 8012e6c:	4413      	add	r3, r2
 8012e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e72:	691a      	ldr	r2, [r3, #16]
 8012e74:	68bb      	ldr	r3, [r7, #8]
 8012e76:	69db      	ldr	r3, [r3, #28]
 8012e78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012e7c:	6939      	ldr	r1, [r7, #16]
 8012e7e:	0148      	lsls	r0, r1, #5
 8012e80:	6979      	ldr	r1, [r7, #20]
 8012e82:	4401      	add	r1, r0
 8012e84:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012e88:	4313      	orrs	r3, r2
 8012e8a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8012e8c:	79fb      	ldrb	r3, [r7, #7]
 8012e8e:	2b01      	cmp	r3, #1
 8012e90:	d10d      	bne.n	8012eae <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8012e92:	68bb      	ldr	r3, [r7, #8]
 8012e94:	691b      	ldr	r3, [r3, #16]
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d009      	beq.n	8012eae <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8012e9a:	68bb      	ldr	r3, [r7, #8]
 8012e9c:	6919      	ldr	r1, [r3, #16]
 8012e9e:	693b      	ldr	r3, [r7, #16]
 8012ea0:	015a      	lsls	r2, r3, #5
 8012ea2:	697b      	ldr	r3, [r7, #20]
 8012ea4:	4413      	add	r3, r2
 8012ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012eaa:	460a      	mov	r2, r1
 8012eac:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012eae:	693b      	ldr	r3, [r7, #16]
 8012eb0:	015a      	lsls	r2, r3, #5
 8012eb2:	697b      	ldr	r3, [r7, #20]
 8012eb4:	4413      	add	r3, r2
 8012eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	693a      	ldr	r2, [r7, #16]
 8012ebe:	0151      	lsls	r1, r2, #5
 8012ec0:	697a      	ldr	r2, [r7, #20]
 8012ec2:	440a      	add	r2, r1
 8012ec4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012ec8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012ecc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012ece:	2300      	movs	r3, #0
}
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	371c      	adds	r7, #28
 8012ed4:	46bd      	mov	sp, r7
 8012ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eda:	4770      	bx	lr

08012edc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012edc:	b480      	push	{r7}
 8012ede:	b087      	sub	sp, #28
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	6078      	str	r0, [r7, #4]
 8012ee4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012ee6:	2300      	movs	r3, #0
 8012ee8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8012eea:	2300      	movs	r3, #0
 8012eec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012ef2:	683b      	ldr	r3, [r7, #0]
 8012ef4:	785b      	ldrb	r3, [r3, #1]
 8012ef6:	2b01      	cmp	r3, #1
 8012ef8:	d14a      	bne.n	8012f90 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012efa:	683b      	ldr	r3, [r7, #0]
 8012efc:	781b      	ldrb	r3, [r3, #0]
 8012efe:	015a      	lsls	r2, r3, #5
 8012f00:	693b      	ldr	r3, [r7, #16]
 8012f02:	4413      	add	r3, r2
 8012f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012f0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012f12:	f040 8086 	bne.w	8013022 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8012f16:	683b      	ldr	r3, [r7, #0]
 8012f18:	781b      	ldrb	r3, [r3, #0]
 8012f1a:	015a      	lsls	r2, r3, #5
 8012f1c:	693b      	ldr	r3, [r7, #16]
 8012f1e:	4413      	add	r3, r2
 8012f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	683a      	ldr	r2, [r7, #0]
 8012f28:	7812      	ldrb	r2, [r2, #0]
 8012f2a:	0151      	lsls	r1, r2, #5
 8012f2c:	693a      	ldr	r2, [r7, #16]
 8012f2e:	440a      	add	r2, r1
 8012f30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012f34:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012f38:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8012f3a:	683b      	ldr	r3, [r7, #0]
 8012f3c:	781b      	ldrb	r3, [r3, #0]
 8012f3e:	015a      	lsls	r2, r3, #5
 8012f40:	693b      	ldr	r3, [r7, #16]
 8012f42:	4413      	add	r3, r2
 8012f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	683a      	ldr	r2, [r7, #0]
 8012f4c:	7812      	ldrb	r2, [r2, #0]
 8012f4e:	0151      	lsls	r1, r2, #5
 8012f50:	693a      	ldr	r2, [r7, #16]
 8012f52:	440a      	add	r2, r1
 8012f54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012f58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012f5c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	3301      	adds	r3, #1
 8012f62:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	f242 7210 	movw	r2, #10000	; 0x2710
 8012f6a:	4293      	cmp	r3, r2
 8012f6c:	d902      	bls.n	8012f74 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8012f6e:	2301      	movs	r3, #1
 8012f70:	75fb      	strb	r3, [r7, #23]
          break;
 8012f72:	e056      	b.n	8013022 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8012f74:	683b      	ldr	r3, [r7, #0]
 8012f76:	781b      	ldrb	r3, [r3, #0]
 8012f78:	015a      	lsls	r2, r3, #5
 8012f7a:	693b      	ldr	r3, [r7, #16]
 8012f7c:	4413      	add	r3, r2
 8012f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f82:	681b      	ldr	r3, [r3, #0]
 8012f84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012f88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012f8c:	d0e7      	beq.n	8012f5e <USB_EPStopXfer+0x82>
 8012f8e:	e048      	b.n	8013022 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012f90:	683b      	ldr	r3, [r7, #0]
 8012f92:	781b      	ldrb	r3, [r3, #0]
 8012f94:	015a      	lsls	r2, r3, #5
 8012f96:	693b      	ldr	r3, [r7, #16]
 8012f98:	4413      	add	r3, r2
 8012f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012fa4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012fa8:	d13b      	bne.n	8013022 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8012faa:	683b      	ldr	r3, [r7, #0]
 8012fac:	781b      	ldrb	r3, [r3, #0]
 8012fae:	015a      	lsls	r2, r3, #5
 8012fb0:	693b      	ldr	r3, [r7, #16]
 8012fb2:	4413      	add	r3, r2
 8012fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fb8:	681b      	ldr	r3, [r3, #0]
 8012fba:	683a      	ldr	r2, [r7, #0]
 8012fbc:	7812      	ldrb	r2, [r2, #0]
 8012fbe:	0151      	lsls	r1, r2, #5
 8012fc0:	693a      	ldr	r2, [r7, #16]
 8012fc2:	440a      	add	r2, r1
 8012fc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012fc8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012fcc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8012fce:	683b      	ldr	r3, [r7, #0]
 8012fd0:	781b      	ldrb	r3, [r3, #0]
 8012fd2:	015a      	lsls	r2, r3, #5
 8012fd4:	693b      	ldr	r3, [r7, #16]
 8012fd6:	4413      	add	r3, r2
 8012fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	683a      	ldr	r2, [r7, #0]
 8012fe0:	7812      	ldrb	r2, [r2, #0]
 8012fe2:	0151      	lsls	r1, r2, #5
 8012fe4:	693a      	ldr	r2, [r7, #16]
 8012fe6:	440a      	add	r2, r1
 8012fe8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012fec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012ff0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	3301      	adds	r3, #1
 8012ff6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	f242 7210 	movw	r2, #10000	; 0x2710
 8012ffe:	4293      	cmp	r3, r2
 8013000:	d902      	bls.n	8013008 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8013002:	2301      	movs	r3, #1
 8013004:	75fb      	strb	r3, [r7, #23]
          break;
 8013006:	e00c      	b.n	8013022 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8013008:	683b      	ldr	r3, [r7, #0]
 801300a:	781b      	ldrb	r3, [r3, #0]
 801300c:	015a      	lsls	r2, r3, #5
 801300e:	693b      	ldr	r3, [r7, #16]
 8013010:	4413      	add	r3, r2
 8013012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801301c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013020:	d0e7      	beq.n	8012ff2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8013022:	7dfb      	ldrb	r3, [r7, #23]
}
 8013024:	4618      	mov	r0, r3
 8013026:	371c      	adds	r7, #28
 8013028:	46bd      	mov	sp, r7
 801302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801302e:	4770      	bx	lr

08013030 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8013030:	b480      	push	{r7}
 8013032:	b089      	sub	sp, #36	; 0x24
 8013034:	af00      	add	r7, sp, #0
 8013036:	60f8      	str	r0, [r7, #12]
 8013038:	60b9      	str	r1, [r7, #8]
 801303a:	4611      	mov	r1, r2
 801303c:	461a      	mov	r2, r3
 801303e:	460b      	mov	r3, r1
 8013040:	71fb      	strb	r3, [r7, #7]
 8013042:	4613      	mov	r3, r2
 8013044:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801304a:	68bb      	ldr	r3, [r7, #8]
 801304c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801304e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013052:	2b00      	cmp	r3, #0
 8013054:	d123      	bne.n	801309e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8013056:	88bb      	ldrh	r3, [r7, #4]
 8013058:	3303      	adds	r3, #3
 801305a:	089b      	lsrs	r3, r3, #2
 801305c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801305e:	2300      	movs	r3, #0
 8013060:	61bb      	str	r3, [r7, #24]
 8013062:	e018      	b.n	8013096 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013064:	79fb      	ldrb	r3, [r7, #7]
 8013066:	031a      	lsls	r2, r3, #12
 8013068:	697b      	ldr	r3, [r7, #20]
 801306a:	4413      	add	r3, r2
 801306c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013070:	461a      	mov	r2, r3
 8013072:	69fb      	ldr	r3, [r7, #28]
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	6013      	str	r3, [r2, #0]
      pSrc++;
 8013078:	69fb      	ldr	r3, [r7, #28]
 801307a:	3301      	adds	r3, #1
 801307c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801307e:	69fb      	ldr	r3, [r7, #28]
 8013080:	3301      	adds	r3, #1
 8013082:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013084:	69fb      	ldr	r3, [r7, #28]
 8013086:	3301      	adds	r3, #1
 8013088:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801308a:	69fb      	ldr	r3, [r7, #28]
 801308c:	3301      	adds	r3, #1
 801308e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8013090:	69bb      	ldr	r3, [r7, #24]
 8013092:	3301      	adds	r3, #1
 8013094:	61bb      	str	r3, [r7, #24]
 8013096:	69ba      	ldr	r2, [r7, #24]
 8013098:	693b      	ldr	r3, [r7, #16]
 801309a:	429a      	cmp	r2, r3
 801309c:	d3e2      	bcc.n	8013064 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801309e:	2300      	movs	r3, #0
}
 80130a0:	4618      	mov	r0, r3
 80130a2:	3724      	adds	r7, #36	; 0x24
 80130a4:	46bd      	mov	sp, r7
 80130a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130aa:	4770      	bx	lr

080130ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80130ac:	b480      	push	{r7}
 80130ae:	b08b      	sub	sp, #44	; 0x2c
 80130b0:	af00      	add	r7, sp, #0
 80130b2:	60f8      	str	r0, [r7, #12]
 80130b4:	60b9      	str	r1, [r7, #8]
 80130b6:	4613      	mov	r3, r2
 80130b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80130be:	68bb      	ldr	r3, [r7, #8]
 80130c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80130c2:	88fb      	ldrh	r3, [r7, #6]
 80130c4:	089b      	lsrs	r3, r3, #2
 80130c6:	b29b      	uxth	r3, r3
 80130c8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80130ca:	88fb      	ldrh	r3, [r7, #6]
 80130cc:	f003 0303 	and.w	r3, r3, #3
 80130d0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80130d2:	2300      	movs	r3, #0
 80130d4:	623b      	str	r3, [r7, #32]
 80130d6:	e014      	b.n	8013102 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80130d8:	69bb      	ldr	r3, [r7, #24]
 80130da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80130de:	681a      	ldr	r2, [r3, #0]
 80130e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130e2:	601a      	str	r2, [r3, #0]
    pDest++;
 80130e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130e6:	3301      	adds	r3, #1
 80130e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80130ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ec:	3301      	adds	r3, #1
 80130ee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80130f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130f2:	3301      	adds	r3, #1
 80130f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80130f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130f8:	3301      	adds	r3, #1
 80130fa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80130fc:	6a3b      	ldr	r3, [r7, #32]
 80130fe:	3301      	adds	r3, #1
 8013100:	623b      	str	r3, [r7, #32]
 8013102:	6a3a      	ldr	r2, [r7, #32]
 8013104:	697b      	ldr	r3, [r7, #20]
 8013106:	429a      	cmp	r2, r3
 8013108:	d3e6      	bcc.n	80130d8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801310a:	8bfb      	ldrh	r3, [r7, #30]
 801310c:	2b00      	cmp	r3, #0
 801310e:	d01e      	beq.n	801314e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8013110:	2300      	movs	r3, #0
 8013112:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013114:	69bb      	ldr	r3, [r7, #24]
 8013116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801311a:	461a      	mov	r2, r3
 801311c:	f107 0310 	add.w	r3, r7, #16
 8013120:	6812      	ldr	r2, [r2, #0]
 8013122:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8013124:	693a      	ldr	r2, [r7, #16]
 8013126:	6a3b      	ldr	r3, [r7, #32]
 8013128:	b2db      	uxtb	r3, r3
 801312a:	00db      	lsls	r3, r3, #3
 801312c:	fa22 f303 	lsr.w	r3, r2, r3
 8013130:	b2da      	uxtb	r2, r3
 8013132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013134:	701a      	strb	r2, [r3, #0]
      i++;
 8013136:	6a3b      	ldr	r3, [r7, #32]
 8013138:	3301      	adds	r3, #1
 801313a:	623b      	str	r3, [r7, #32]
      pDest++;
 801313c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801313e:	3301      	adds	r3, #1
 8013140:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8013142:	8bfb      	ldrh	r3, [r7, #30]
 8013144:	3b01      	subs	r3, #1
 8013146:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8013148:	8bfb      	ldrh	r3, [r7, #30]
 801314a:	2b00      	cmp	r3, #0
 801314c:	d1ea      	bne.n	8013124 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013150:	4618      	mov	r0, r3
 8013152:	372c      	adds	r7, #44	; 0x2c
 8013154:	46bd      	mov	sp, r7
 8013156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801315a:	4770      	bx	lr

0801315c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801315c:	b480      	push	{r7}
 801315e:	b085      	sub	sp, #20
 8013160:	af00      	add	r7, sp, #0
 8013162:	6078      	str	r0, [r7, #4]
 8013164:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801316a:	683b      	ldr	r3, [r7, #0]
 801316c:	781b      	ldrb	r3, [r3, #0]
 801316e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013170:	683b      	ldr	r3, [r7, #0]
 8013172:	785b      	ldrb	r3, [r3, #1]
 8013174:	2b01      	cmp	r3, #1
 8013176:	d12c      	bne.n	80131d2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013178:	68bb      	ldr	r3, [r7, #8]
 801317a:	015a      	lsls	r2, r3, #5
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	4413      	add	r3, r2
 8013180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	2b00      	cmp	r3, #0
 8013188:	db12      	blt.n	80131b0 <USB_EPSetStall+0x54>
 801318a:	68bb      	ldr	r3, [r7, #8]
 801318c:	2b00      	cmp	r3, #0
 801318e:	d00f      	beq.n	80131b0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013190:	68bb      	ldr	r3, [r7, #8]
 8013192:	015a      	lsls	r2, r3, #5
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	4413      	add	r3, r2
 8013198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	68ba      	ldr	r2, [r7, #8]
 80131a0:	0151      	lsls	r1, r2, #5
 80131a2:	68fa      	ldr	r2, [r7, #12]
 80131a4:	440a      	add	r2, r1
 80131a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80131aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80131ae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80131b0:	68bb      	ldr	r3, [r7, #8]
 80131b2:	015a      	lsls	r2, r3, #5
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	4413      	add	r3, r2
 80131b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	68ba      	ldr	r2, [r7, #8]
 80131c0:	0151      	lsls	r1, r2, #5
 80131c2:	68fa      	ldr	r2, [r7, #12]
 80131c4:	440a      	add	r2, r1
 80131c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80131ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80131ce:	6013      	str	r3, [r2, #0]
 80131d0:	e02b      	b.n	801322a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80131d2:	68bb      	ldr	r3, [r7, #8]
 80131d4:	015a      	lsls	r2, r3, #5
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	4413      	add	r3, r2
 80131da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	db12      	blt.n	801320a <USB_EPSetStall+0xae>
 80131e4:	68bb      	ldr	r3, [r7, #8]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d00f      	beq.n	801320a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80131ea:	68bb      	ldr	r3, [r7, #8]
 80131ec:	015a      	lsls	r2, r3, #5
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	4413      	add	r3, r2
 80131f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	68ba      	ldr	r2, [r7, #8]
 80131fa:	0151      	lsls	r1, r2, #5
 80131fc:	68fa      	ldr	r2, [r7, #12]
 80131fe:	440a      	add	r2, r1
 8013200:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013204:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013208:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801320a:	68bb      	ldr	r3, [r7, #8]
 801320c:	015a      	lsls	r2, r3, #5
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	4413      	add	r3, r2
 8013212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	68ba      	ldr	r2, [r7, #8]
 801321a:	0151      	lsls	r1, r2, #5
 801321c:	68fa      	ldr	r2, [r7, #12]
 801321e:	440a      	add	r2, r1
 8013220:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013224:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013228:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801322a:	2300      	movs	r3, #0
}
 801322c:	4618      	mov	r0, r3
 801322e:	3714      	adds	r7, #20
 8013230:	46bd      	mov	sp, r7
 8013232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013236:	4770      	bx	lr

08013238 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013238:	b480      	push	{r7}
 801323a:	b085      	sub	sp, #20
 801323c:	af00      	add	r7, sp, #0
 801323e:	6078      	str	r0, [r7, #4]
 8013240:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013246:	683b      	ldr	r3, [r7, #0]
 8013248:	781b      	ldrb	r3, [r3, #0]
 801324a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801324c:	683b      	ldr	r3, [r7, #0]
 801324e:	785b      	ldrb	r3, [r3, #1]
 8013250:	2b01      	cmp	r3, #1
 8013252:	d128      	bne.n	80132a6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8013254:	68bb      	ldr	r3, [r7, #8]
 8013256:	015a      	lsls	r2, r3, #5
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	4413      	add	r3, r2
 801325c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	68ba      	ldr	r2, [r7, #8]
 8013264:	0151      	lsls	r1, r2, #5
 8013266:	68fa      	ldr	r2, [r7, #12]
 8013268:	440a      	add	r2, r1
 801326a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801326e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013272:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013274:	683b      	ldr	r3, [r7, #0]
 8013276:	791b      	ldrb	r3, [r3, #4]
 8013278:	2b03      	cmp	r3, #3
 801327a:	d003      	beq.n	8013284 <USB_EPClearStall+0x4c>
 801327c:	683b      	ldr	r3, [r7, #0]
 801327e:	791b      	ldrb	r3, [r3, #4]
 8013280:	2b02      	cmp	r3, #2
 8013282:	d138      	bne.n	80132f6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013284:	68bb      	ldr	r3, [r7, #8]
 8013286:	015a      	lsls	r2, r3, #5
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	4413      	add	r3, r2
 801328c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	68ba      	ldr	r2, [r7, #8]
 8013294:	0151      	lsls	r1, r2, #5
 8013296:	68fa      	ldr	r2, [r7, #12]
 8013298:	440a      	add	r2, r1
 801329a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801329e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80132a2:	6013      	str	r3, [r2, #0]
 80132a4:	e027      	b.n	80132f6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80132a6:	68bb      	ldr	r3, [r7, #8]
 80132a8:	015a      	lsls	r2, r3, #5
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	4413      	add	r3, r2
 80132ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	68ba      	ldr	r2, [r7, #8]
 80132b6:	0151      	lsls	r1, r2, #5
 80132b8:	68fa      	ldr	r2, [r7, #12]
 80132ba:	440a      	add	r2, r1
 80132bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80132c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80132c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80132c6:	683b      	ldr	r3, [r7, #0]
 80132c8:	791b      	ldrb	r3, [r3, #4]
 80132ca:	2b03      	cmp	r3, #3
 80132cc:	d003      	beq.n	80132d6 <USB_EPClearStall+0x9e>
 80132ce:	683b      	ldr	r3, [r7, #0]
 80132d0:	791b      	ldrb	r3, [r3, #4]
 80132d2:	2b02      	cmp	r3, #2
 80132d4:	d10f      	bne.n	80132f6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80132d6:	68bb      	ldr	r3, [r7, #8]
 80132d8:	015a      	lsls	r2, r3, #5
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	4413      	add	r3, r2
 80132de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	68ba      	ldr	r2, [r7, #8]
 80132e6:	0151      	lsls	r1, r2, #5
 80132e8:	68fa      	ldr	r2, [r7, #12]
 80132ea:	440a      	add	r2, r1
 80132ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80132f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80132f4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80132f6:	2300      	movs	r3, #0
}
 80132f8:	4618      	mov	r0, r3
 80132fa:	3714      	adds	r7, #20
 80132fc:	46bd      	mov	sp, r7
 80132fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013302:	4770      	bx	lr

08013304 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8013304:	b480      	push	{r7}
 8013306:	b085      	sub	sp, #20
 8013308:	af00      	add	r7, sp, #0
 801330a:	6078      	str	r0, [r7, #4]
 801330c:	460b      	mov	r3, r1
 801330e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	68fa      	ldr	r2, [r7, #12]
 801331e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013322:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8013326:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801332e:	681a      	ldr	r2, [r3, #0]
 8013330:	78fb      	ldrb	r3, [r7, #3]
 8013332:	011b      	lsls	r3, r3, #4
 8013334:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8013338:	68f9      	ldr	r1, [r7, #12]
 801333a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801333e:	4313      	orrs	r3, r2
 8013340:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8013342:	2300      	movs	r3, #0
}
 8013344:	4618      	mov	r0, r3
 8013346:	3714      	adds	r7, #20
 8013348:	46bd      	mov	sp, r7
 801334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801334e:	4770      	bx	lr

08013350 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013350:	b480      	push	{r7}
 8013352:	b085      	sub	sp, #20
 8013354:	af00      	add	r7, sp, #0
 8013356:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	68fa      	ldr	r2, [r7, #12]
 8013366:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801336a:	f023 0303 	bic.w	r3, r3, #3
 801336e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013370:	68fb      	ldr	r3, [r7, #12]
 8013372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013376:	685b      	ldr	r3, [r3, #4]
 8013378:	68fa      	ldr	r2, [r7, #12]
 801337a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801337e:	f023 0302 	bic.w	r3, r3, #2
 8013382:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013384:	2300      	movs	r3, #0
}
 8013386:	4618      	mov	r0, r3
 8013388:	3714      	adds	r7, #20
 801338a:	46bd      	mov	sp, r7
 801338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013390:	4770      	bx	lr

08013392 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013392:	b480      	push	{r7}
 8013394:	b085      	sub	sp, #20
 8013396:	af00      	add	r7, sp, #0
 8013398:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	68fa      	ldr	r2, [r7, #12]
 80133a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80133ac:	f023 0303 	bic.w	r3, r3, #3
 80133b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80133b8:	685b      	ldr	r3, [r3, #4]
 80133ba:	68fa      	ldr	r2, [r7, #12]
 80133bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80133c0:	f043 0302 	orr.w	r3, r3, #2
 80133c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80133c6:	2300      	movs	r3, #0
}
 80133c8:	4618      	mov	r0, r3
 80133ca:	3714      	adds	r7, #20
 80133cc:	46bd      	mov	sp, r7
 80133ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133d2:	4770      	bx	lr

080133d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80133d4:	b480      	push	{r7}
 80133d6:	b085      	sub	sp, #20
 80133d8:	af00      	add	r7, sp, #0
 80133da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	695b      	ldr	r3, [r3, #20]
 80133e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	699b      	ldr	r3, [r3, #24]
 80133e6:	68fa      	ldr	r2, [r7, #12]
 80133e8:	4013      	ands	r3, r2
 80133ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80133ec:	68fb      	ldr	r3, [r7, #12]
}
 80133ee:	4618      	mov	r0, r3
 80133f0:	3714      	adds	r7, #20
 80133f2:	46bd      	mov	sp, r7
 80133f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133f8:	4770      	bx	lr

080133fa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80133fa:	b480      	push	{r7}
 80133fc:	b085      	sub	sp, #20
 80133fe:	af00      	add	r7, sp, #0
 8013400:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801340c:	699b      	ldr	r3, [r3, #24]
 801340e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013416:	69db      	ldr	r3, [r3, #28]
 8013418:	68ba      	ldr	r2, [r7, #8]
 801341a:	4013      	ands	r3, r2
 801341c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801341e:	68bb      	ldr	r3, [r7, #8]
 8013420:	0c1b      	lsrs	r3, r3, #16
}
 8013422:	4618      	mov	r0, r3
 8013424:	3714      	adds	r7, #20
 8013426:	46bd      	mov	sp, r7
 8013428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801342c:	4770      	bx	lr

0801342e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801342e:	b480      	push	{r7}
 8013430:	b085      	sub	sp, #20
 8013432:	af00      	add	r7, sp, #0
 8013434:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013440:	699b      	ldr	r3, [r3, #24]
 8013442:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801344a:	69db      	ldr	r3, [r3, #28]
 801344c:	68ba      	ldr	r2, [r7, #8]
 801344e:	4013      	ands	r3, r2
 8013450:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8013452:	68bb      	ldr	r3, [r7, #8]
 8013454:	b29b      	uxth	r3, r3
}
 8013456:	4618      	mov	r0, r3
 8013458:	3714      	adds	r7, #20
 801345a:	46bd      	mov	sp, r7
 801345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013460:	4770      	bx	lr

08013462 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013462:	b480      	push	{r7}
 8013464:	b085      	sub	sp, #20
 8013466:	af00      	add	r7, sp, #0
 8013468:	6078      	str	r0, [r7, #4]
 801346a:	460b      	mov	r3, r1
 801346c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8013472:	78fb      	ldrb	r3, [r7, #3]
 8013474:	015a      	lsls	r2, r3, #5
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	4413      	add	r3, r2
 801347a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801347e:	689b      	ldr	r3, [r3, #8]
 8013480:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013488:	695b      	ldr	r3, [r3, #20]
 801348a:	68ba      	ldr	r2, [r7, #8]
 801348c:	4013      	ands	r3, r2
 801348e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013490:	68bb      	ldr	r3, [r7, #8]
}
 8013492:	4618      	mov	r0, r3
 8013494:	3714      	adds	r7, #20
 8013496:	46bd      	mov	sp, r7
 8013498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801349c:	4770      	bx	lr

0801349e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801349e:	b480      	push	{r7}
 80134a0:	b087      	sub	sp, #28
 80134a2:	af00      	add	r7, sp, #0
 80134a4:	6078      	str	r0, [r7, #4]
 80134a6:	460b      	mov	r3, r1
 80134a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80134ae:	697b      	ldr	r3, [r7, #20]
 80134b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80134b4:	691b      	ldr	r3, [r3, #16]
 80134b6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80134b8:	697b      	ldr	r3, [r7, #20]
 80134ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80134be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80134c0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80134c2:	78fb      	ldrb	r3, [r7, #3]
 80134c4:	f003 030f 	and.w	r3, r3, #15
 80134c8:	68fa      	ldr	r2, [r7, #12]
 80134ca:	fa22 f303 	lsr.w	r3, r2, r3
 80134ce:	01db      	lsls	r3, r3, #7
 80134d0:	b2db      	uxtb	r3, r3
 80134d2:	693a      	ldr	r2, [r7, #16]
 80134d4:	4313      	orrs	r3, r2
 80134d6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80134d8:	78fb      	ldrb	r3, [r7, #3]
 80134da:	015a      	lsls	r2, r3, #5
 80134dc:	697b      	ldr	r3, [r7, #20]
 80134de:	4413      	add	r3, r2
 80134e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134e4:	689b      	ldr	r3, [r3, #8]
 80134e6:	693a      	ldr	r2, [r7, #16]
 80134e8:	4013      	ands	r3, r2
 80134ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80134ec:	68bb      	ldr	r3, [r7, #8]
}
 80134ee:	4618      	mov	r0, r3
 80134f0:	371c      	adds	r7, #28
 80134f2:	46bd      	mov	sp, r7
 80134f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134f8:	4770      	bx	lr

080134fa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80134fa:	b480      	push	{r7}
 80134fc:	b083      	sub	sp, #12
 80134fe:	af00      	add	r7, sp, #0
 8013500:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	695b      	ldr	r3, [r3, #20]
 8013506:	f003 0301 	and.w	r3, r3, #1
}
 801350a:	4618      	mov	r0, r3
 801350c:	370c      	adds	r7, #12
 801350e:	46bd      	mov	sp, r7
 8013510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013514:	4770      	bx	lr

08013516 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8013516:	b480      	push	{r7}
 8013518:	b085      	sub	sp, #20
 801351a:	af00      	add	r7, sp, #0
 801351c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	68fa      	ldr	r2, [r7, #12]
 801352c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013530:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8013534:	f023 0307 	bic.w	r3, r3, #7
 8013538:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013540:	685b      	ldr	r3, [r3, #4]
 8013542:	68fa      	ldr	r2, [r7, #12]
 8013544:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801354c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801354e:	2300      	movs	r3, #0
}
 8013550:	4618      	mov	r0, r3
 8013552:	3714      	adds	r7, #20
 8013554:	46bd      	mov	sp, r7
 8013556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801355a:	4770      	bx	lr

0801355c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 801355c:	b480      	push	{r7}
 801355e:	b087      	sub	sp, #28
 8013560:	af00      	add	r7, sp, #0
 8013562:	60f8      	str	r0, [r7, #12]
 8013564:	460b      	mov	r3, r1
 8013566:	607a      	str	r2, [r7, #4]
 8013568:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801356e:	68fb      	ldr	r3, [r7, #12]
 8013570:	333c      	adds	r3, #60	; 0x3c
 8013572:	3304      	adds	r3, #4
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8013578:	693b      	ldr	r3, [r7, #16]
 801357a:	4a26      	ldr	r2, [pc, #152]	; (8013614 <USB_EP0_OutStart+0xb8>)
 801357c:	4293      	cmp	r3, r2
 801357e:	d90a      	bls.n	8013596 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013580:	697b      	ldr	r3, [r7, #20]
 8013582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801358c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013590:	d101      	bne.n	8013596 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8013592:	2300      	movs	r3, #0
 8013594:	e037      	b.n	8013606 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8013596:	697b      	ldr	r3, [r7, #20]
 8013598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801359c:	461a      	mov	r2, r3
 801359e:	2300      	movs	r3, #0
 80135a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80135a2:	697b      	ldr	r3, [r7, #20]
 80135a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135a8:	691b      	ldr	r3, [r3, #16]
 80135aa:	697a      	ldr	r2, [r7, #20]
 80135ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80135b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80135b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80135b6:	697b      	ldr	r3, [r7, #20]
 80135b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135bc:	691b      	ldr	r3, [r3, #16]
 80135be:	697a      	ldr	r2, [r7, #20]
 80135c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80135c4:	f043 0318 	orr.w	r3, r3, #24
 80135c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80135ca:	697b      	ldr	r3, [r7, #20]
 80135cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135d0:	691b      	ldr	r3, [r3, #16]
 80135d2:	697a      	ldr	r2, [r7, #20]
 80135d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80135d8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80135dc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80135de:	7afb      	ldrb	r3, [r7, #11]
 80135e0:	2b01      	cmp	r3, #1
 80135e2:	d10f      	bne.n	8013604 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80135e4:	697b      	ldr	r3, [r7, #20]
 80135e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135ea:	461a      	mov	r2, r3
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80135f0:	697b      	ldr	r3, [r7, #20]
 80135f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	697a      	ldr	r2, [r7, #20]
 80135fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80135fe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8013602:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013604:	2300      	movs	r3, #0
}
 8013606:	4618      	mov	r0, r3
 8013608:	371c      	adds	r7, #28
 801360a:	46bd      	mov	sp, r7
 801360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013610:	4770      	bx	lr
 8013612:	bf00      	nop
 8013614:	4f54300a 	.word	0x4f54300a

08013618 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013618:	b480      	push	{r7}
 801361a:	b085      	sub	sp, #20
 801361c:	af00      	add	r7, sp, #0
 801361e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013620:	2300      	movs	r3, #0
 8013622:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	3301      	adds	r3, #1
 8013628:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	4a13      	ldr	r2, [pc, #76]	; (801367c <USB_CoreReset+0x64>)
 801362e:	4293      	cmp	r3, r2
 8013630:	d901      	bls.n	8013636 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8013632:	2303      	movs	r3, #3
 8013634:	e01b      	b.n	801366e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	691b      	ldr	r3, [r3, #16]
 801363a:	2b00      	cmp	r3, #0
 801363c:	daf2      	bge.n	8013624 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801363e:	2300      	movs	r3, #0
 8013640:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	691b      	ldr	r3, [r3, #16]
 8013646:	f043 0201 	orr.w	r2, r3, #1
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	3301      	adds	r3, #1
 8013652:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	4a09      	ldr	r2, [pc, #36]	; (801367c <USB_CoreReset+0x64>)
 8013658:	4293      	cmp	r3, r2
 801365a:	d901      	bls.n	8013660 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801365c:	2303      	movs	r3, #3
 801365e:	e006      	b.n	801366e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	691b      	ldr	r3, [r3, #16]
 8013664:	f003 0301 	and.w	r3, r3, #1
 8013668:	2b01      	cmp	r3, #1
 801366a:	d0f0      	beq.n	801364e <USB_CoreReset+0x36>

  return HAL_OK;
 801366c:	2300      	movs	r3, #0
}
 801366e:	4618      	mov	r0, r3
 8013670:	3714      	adds	r7, #20
 8013672:	46bd      	mov	sp, r7
 8013674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013678:	4770      	bx	lr
 801367a:	bf00      	nop
 801367c:	00030d40 	.word	0x00030d40

08013680 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013680:	b580      	push	{r7, lr}
 8013682:	b084      	sub	sp, #16
 8013684:	af00      	add	r7, sp, #0
 8013686:	6078      	str	r0, [r7, #4]
 8013688:	460b      	mov	r3, r1
 801368a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801368c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8013690:	f002 fca2 	bl	8015fd8 <USBD_static_malloc>
 8013694:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d109      	bne.n	80136b0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	32b0      	adds	r2, #176	; 0xb0
 80136a6:	2100      	movs	r1, #0
 80136a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80136ac:	2302      	movs	r3, #2
 80136ae:	e0d4      	b.n	801385a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80136b0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80136b4:	2100      	movs	r1, #0
 80136b6:	68f8      	ldr	r0, [r7, #12]
 80136b8:	f002 fcd2 	bl	8016060 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	32b0      	adds	r2, #176	; 0xb0
 80136c6:	68f9      	ldr	r1, [r7, #12]
 80136c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	32b0      	adds	r2, #176	; 0xb0
 80136d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	7c1b      	ldrb	r3, [r3, #16]
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d138      	bne.n	801375a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80136e8:	4b5e      	ldr	r3, [pc, #376]	; (8013864 <USBD_CDC_Init+0x1e4>)
 80136ea:	7819      	ldrb	r1, [r3, #0]
 80136ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80136f0:	2202      	movs	r2, #2
 80136f2:	6878      	ldr	r0, [r7, #4]
 80136f4:	f002 fb4d 	bl	8015d92 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80136f8:	4b5a      	ldr	r3, [pc, #360]	; (8013864 <USBD_CDC_Init+0x1e4>)
 80136fa:	781b      	ldrb	r3, [r3, #0]
 80136fc:	f003 020f 	and.w	r2, r3, #15
 8013700:	6879      	ldr	r1, [r7, #4]
 8013702:	4613      	mov	r3, r2
 8013704:	009b      	lsls	r3, r3, #2
 8013706:	4413      	add	r3, r2
 8013708:	009b      	lsls	r3, r3, #2
 801370a:	440b      	add	r3, r1
 801370c:	3324      	adds	r3, #36	; 0x24
 801370e:	2201      	movs	r2, #1
 8013710:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8013712:	4b55      	ldr	r3, [pc, #340]	; (8013868 <USBD_CDC_Init+0x1e8>)
 8013714:	7819      	ldrb	r1, [r3, #0]
 8013716:	f44f 7300 	mov.w	r3, #512	; 0x200
 801371a:	2202      	movs	r2, #2
 801371c:	6878      	ldr	r0, [r7, #4]
 801371e:	f002 fb38 	bl	8015d92 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8013722:	4b51      	ldr	r3, [pc, #324]	; (8013868 <USBD_CDC_Init+0x1e8>)
 8013724:	781b      	ldrb	r3, [r3, #0]
 8013726:	f003 020f 	and.w	r2, r3, #15
 801372a:	6879      	ldr	r1, [r7, #4]
 801372c:	4613      	mov	r3, r2
 801372e:	009b      	lsls	r3, r3, #2
 8013730:	4413      	add	r3, r2
 8013732:	009b      	lsls	r3, r3, #2
 8013734:	440b      	add	r3, r1
 8013736:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801373a:	2201      	movs	r2, #1
 801373c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801373e:	4b4b      	ldr	r3, [pc, #300]	; (801386c <USBD_CDC_Init+0x1ec>)
 8013740:	781b      	ldrb	r3, [r3, #0]
 8013742:	f003 020f 	and.w	r2, r3, #15
 8013746:	6879      	ldr	r1, [r7, #4]
 8013748:	4613      	mov	r3, r2
 801374a:	009b      	lsls	r3, r3, #2
 801374c:	4413      	add	r3, r2
 801374e:	009b      	lsls	r3, r3, #2
 8013750:	440b      	add	r3, r1
 8013752:	3326      	adds	r3, #38	; 0x26
 8013754:	2210      	movs	r2, #16
 8013756:	801a      	strh	r2, [r3, #0]
 8013758:	e035      	b.n	80137c6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801375a:	4b42      	ldr	r3, [pc, #264]	; (8013864 <USBD_CDC_Init+0x1e4>)
 801375c:	7819      	ldrb	r1, [r3, #0]
 801375e:	2340      	movs	r3, #64	; 0x40
 8013760:	2202      	movs	r2, #2
 8013762:	6878      	ldr	r0, [r7, #4]
 8013764:	f002 fb15 	bl	8015d92 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8013768:	4b3e      	ldr	r3, [pc, #248]	; (8013864 <USBD_CDC_Init+0x1e4>)
 801376a:	781b      	ldrb	r3, [r3, #0]
 801376c:	f003 020f 	and.w	r2, r3, #15
 8013770:	6879      	ldr	r1, [r7, #4]
 8013772:	4613      	mov	r3, r2
 8013774:	009b      	lsls	r3, r3, #2
 8013776:	4413      	add	r3, r2
 8013778:	009b      	lsls	r3, r3, #2
 801377a:	440b      	add	r3, r1
 801377c:	3324      	adds	r3, #36	; 0x24
 801377e:	2201      	movs	r2, #1
 8013780:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8013782:	4b39      	ldr	r3, [pc, #228]	; (8013868 <USBD_CDC_Init+0x1e8>)
 8013784:	7819      	ldrb	r1, [r3, #0]
 8013786:	2340      	movs	r3, #64	; 0x40
 8013788:	2202      	movs	r2, #2
 801378a:	6878      	ldr	r0, [r7, #4]
 801378c:	f002 fb01 	bl	8015d92 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8013790:	4b35      	ldr	r3, [pc, #212]	; (8013868 <USBD_CDC_Init+0x1e8>)
 8013792:	781b      	ldrb	r3, [r3, #0]
 8013794:	f003 020f 	and.w	r2, r3, #15
 8013798:	6879      	ldr	r1, [r7, #4]
 801379a:	4613      	mov	r3, r2
 801379c:	009b      	lsls	r3, r3, #2
 801379e:	4413      	add	r3, r2
 80137a0:	009b      	lsls	r3, r3, #2
 80137a2:	440b      	add	r3, r1
 80137a4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80137a8:	2201      	movs	r2, #1
 80137aa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80137ac:	4b2f      	ldr	r3, [pc, #188]	; (801386c <USBD_CDC_Init+0x1ec>)
 80137ae:	781b      	ldrb	r3, [r3, #0]
 80137b0:	f003 020f 	and.w	r2, r3, #15
 80137b4:	6879      	ldr	r1, [r7, #4]
 80137b6:	4613      	mov	r3, r2
 80137b8:	009b      	lsls	r3, r3, #2
 80137ba:	4413      	add	r3, r2
 80137bc:	009b      	lsls	r3, r3, #2
 80137be:	440b      	add	r3, r1
 80137c0:	3326      	adds	r3, #38	; 0x26
 80137c2:	2210      	movs	r2, #16
 80137c4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80137c6:	4b29      	ldr	r3, [pc, #164]	; (801386c <USBD_CDC_Init+0x1ec>)
 80137c8:	7819      	ldrb	r1, [r3, #0]
 80137ca:	2308      	movs	r3, #8
 80137cc:	2203      	movs	r2, #3
 80137ce:	6878      	ldr	r0, [r7, #4]
 80137d0:	f002 fadf 	bl	8015d92 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80137d4:	4b25      	ldr	r3, [pc, #148]	; (801386c <USBD_CDC_Init+0x1ec>)
 80137d6:	781b      	ldrb	r3, [r3, #0]
 80137d8:	f003 020f 	and.w	r2, r3, #15
 80137dc:	6879      	ldr	r1, [r7, #4]
 80137de:	4613      	mov	r3, r2
 80137e0:	009b      	lsls	r3, r3, #2
 80137e2:	4413      	add	r3, r2
 80137e4:	009b      	lsls	r3, r3, #2
 80137e6:	440b      	add	r3, r1
 80137e8:	3324      	adds	r3, #36	; 0x24
 80137ea:	2201      	movs	r2, #1
 80137ec:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80137ee:	68fb      	ldr	r3, [r7, #12]
 80137f0:	2200      	movs	r2, #0
 80137f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80137fc:	687a      	ldr	r2, [r7, #4]
 80137fe:	33b0      	adds	r3, #176	; 0xb0
 8013800:	009b      	lsls	r3, r3, #2
 8013802:	4413      	add	r3, r2
 8013804:	685b      	ldr	r3, [r3, #4]
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	2200      	movs	r2, #0
 801380e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	2200      	movs	r2, #0
 8013816:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8013820:	2b00      	cmp	r3, #0
 8013822:	d101      	bne.n	8013828 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8013824:	2302      	movs	r3, #2
 8013826:	e018      	b.n	801385a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	7c1b      	ldrb	r3, [r3, #16]
 801382c:	2b00      	cmp	r3, #0
 801382e:	d10a      	bne.n	8013846 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013830:	4b0d      	ldr	r3, [pc, #52]	; (8013868 <USBD_CDC_Init+0x1e8>)
 8013832:	7819      	ldrb	r1, [r3, #0]
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801383a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801383e:	6878      	ldr	r0, [r7, #4]
 8013840:	f002 fb96 	bl	8015f70 <USBD_LL_PrepareReceive>
 8013844:	e008      	b.n	8013858 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013846:	4b08      	ldr	r3, [pc, #32]	; (8013868 <USBD_CDC_Init+0x1e8>)
 8013848:	7819      	ldrb	r1, [r3, #0]
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013850:	2340      	movs	r3, #64	; 0x40
 8013852:	6878      	ldr	r0, [r7, #4]
 8013854:	f002 fb8c 	bl	8015f70 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013858:	2300      	movs	r3, #0
}
 801385a:	4618      	mov	r0, r3
 801385c:	3710      	adds	r7, #16
 801385e:	46bd      	mov	sp, r7
 8013860:	bd80      	pop	{r7, pc}
 8013862:	bf00      	nop
 8013864:	2000019f 	.word	0x2000019f
 8013868:	200001a0 	.word	0x200001a0
 801386c:	200001a1 	.word	0x200001a1

08013870 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013870:	b580      	push	{r7, lr}
 8013872:	b082      	sub	sp, #8
 8013874:	af00      	add	r7, sp, #0
 8013876:	6078      	str	r0, [r7, #4]
 8013878:	460b      	mov	r3, r1
 801387a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 801387c:	4b3a      	ldr	r3, [pc, #232]	; (8013968 <USBD_CDC_DeInit+0xf8>)
 801387e:	781b      	ldrb	r3, [r3, #0]
 8013880:	4619      	mov	r1, r3
 8013882:	6878      	ldr	r0, [r7, #4]
 8013884:	f002 faab 	bl	8015dde <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8013888:	4b37      	ldr	r3, [pc, #220]	; (8013968 <USBD_CDC_DeInit+0xf8>)
 801388a:	781b      	ldrb	r3, [r3, #0]
 801388c:	f003 020f 	and.w	r2, r3, #15
 8013890:	6879      	ldr	r1, [r7, #4]
 8013892:	4613      	mov	r3, r2
 8013894:	009b      	lsls	r3, r3, #2
 8013896:	4413      	add	r3, r2
 8013898:	009b      	lsls	r3, r3, #2
 801389a:	440b      	add	r3, r1
 801389c:	3324      	adds	r3, #36	; 0x24
 801389e:	2200      	movs	r2, #0
 80138a0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80138a2:	4b32      	ldr	r3, [pc, #200]	; (801396c <USBD_CDC_DeInit+0xfc>)
 80138a4:	781b      	ldrb	r3, [r3, #0]
 80138a6:	4619      	mov	r1, r3
 80138a8:	6878      	ldr	r0, [r7, #4]
 80138aa:	f002 fa98 	bl	8015dde <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80138ae:	4b2f      	ldr	r3, [pc, #188]	; (801396c <USBD_CDC_DeInit+0xfc>)
 80138b0:	781b      	ldrb	r3, [r3, #0]
 80138b2:	f003 020f 	and.w	r2, r3, #15
 80138b6:	6879      	ldr	r1, [r7, #4]
 80138b8:	4613      	mov	r3, r2
 80138ba:	009b      	lsls	r3, r3, #2
 80138bc:	4413      	add	r3, r2
 80138be:	009b      	lsls	r3, r3, #2
 80138c0:	440b      	add	r3, r1
 80138c2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80138c6:	2200      	movs	r2, #0
 80138c8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80138ca:	4b29      	ldr	r3, [pc, #164]	; (8013970 <USBD_CDC_DeInit+0x100>)
 80138cc:	781b      	ldrb	r3, [r3, #0]
 80138ce:	4619      	mov	r1, r3
 80138d0:	6878      	ldr	r0, [r7, #4]
 80138d2:	f002 fa84 	bl	8015dde <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80138d6:	4b26      	ldr	r3, [pc, #152]	; (8013970 <USBD_CDC_DeInit+0x100>)
 80138d8:	781b      	ldrb	r3, [r3, #0]
 80138da:	f003 020f 	and.w	r2, r3, #15
 80138de:	6879      	ldr	r1, [r7, #4]
 80138e0:	4613      	mov	r3, r2
 80138e2:	009b      	lsls	r3, r3, #2
 80138e4:	4413      	add	r3, r2
 80138e6:	009b      	lsls	r3, r3, #2
 80138e8:	440b      	add	r3, r1
 80138ea:	3324      	adds	r3, #36	; 0x24
 80138ec:	2200      	movs	r2, #0
 80138ee:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80138f0:	4b1f      	ldr	r3, [pc, #124]	; (8013970 <USBD_CDC_DeInit+0x100>)
 80138f2:	781b      	ldrb	r3, [r3, #0]
 80138f4:	f003 020f 	and.w	r2, r3, #15
 80138f8:	6879      	ldr	r1, [r7, #4]
 80138fa:	4613      	mov	r3, r2
 80138fc:	009b      	lsls	r3, r3, #2
 80138fe:	4413      	add	r3, r2
 8013900:	009b      	lsls	r3, r3, #2
 8013902:	440b      	add	r3, r1
 8013904:	3326      	adds	r3, #38	; 0x26
 8013906:	2200      	movs	r2, #0
 8013908:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	32b0      	adds	r2, #176	; 0xb0
 8013914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013918:	2b00      	cmp	r3, #0
 801391a:	d01f      	beq.n	801395c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013922:	687a      	ldr	r2, [r7, #4]
 8013924:	33b0      	adds	r3, #176	; 0xb0
 8013926:	009b      	lsls	r3, r3, #2
 8013928:	4413      	add	r3, r2
 801392a:	685b      	ldr	r3, [r3, #4]
 801392c:	685b      	ldr	r3, [r3, #4]
 801392e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	32b0      	adds	r2, #176	; 0xb0
 801393a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801393e:	4618      	mov	r0, r3
 8013940:	f002 fb58 	bl	8015ff4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	32b0      	adds	r2, #176	; 0xb0
 801394e:	2100      	movs	r1, #0
 8013950:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	2200      	movs	r2, #0
 8013958:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801395c:	2300      	movs	r3, #0
}
 801395e:	4618      	mov	r0, r3
 8013960:	3708      	adds	r7, #8
 8013962:	46bd      	mov	sp, r7
 8013964:	bd80      	pop	{r7, pc}
 8013966:	bf00      	nop
 8013968:	2000019f 	.word	0x2000019f
 801396c:	200001a0 	.word	0x200001a0
 8013970:	200001a1 	.word	0x200001a1

08013974 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8013974:	b580      	push	{r7, lr}
 8013976:	b086      	sub	sp, #24
 8013978:	af00      	add	r7, sp, #0
 801397a:	6078      	str	r0, [r7, #4]
 801397c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	32b0      	adds	r2, #176	; 0xb0
 8013988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801398c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801398e:	2300      	movs	r3, #0
 8013990:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8013992:	2300      	movs	r3, #0
 8013994:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8013996:	2300      	movs	r3, #0
 8013998:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801399a:	693b      	ldr	r3, [r7, #16]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d101      	bne.n	80139a4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80139a0:	2303      	movs	r3, #3
 80139a2:	e0bf      	b.n	8013b24 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80139a4:	683b      	ldr	r3, [r7, #0]
 80139a6:	781b      	ldrb	r3, [r3, #0]
 80139a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d050      	beq.n	8013a52 <USBD_CDC_Setup+0xde>
 80139b0:	2b20      	cmp	r3, #32
 80139b2:	f040 80af 	bne.w	8013b14 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80139b6:	683b      	ldr	r3, [r7, #0]
 80139b8:	88db      	ldrh	r3, [r3, #6]
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d03a      	beq.n	8013a34 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80139be:	683b      	ldr	r3, [r7, #0]
 80139c0:	781b      	ldrb	r3, [r3, #0]
 80139c2:	b25b      	sxtb	r3, r3
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	da1b      	bge.n	8013a00 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80139ce:	687a      	ldr	r2, [r7, #4]
 80139d0:	33b0      	adds	r3, #176	; 0xb0
 80139d2:	009b      	lsls	r3, r3, #2
 80139d4:	4413      	add	r3, r2
 80139d6:	685b      	ldr	r3, [r3, #4]
 80139d8:	689b      	ldr	r3, [r3, #8]
 80139da:	683a      	ldr	r2, [r7, #0]
 80139dc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80139de:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80139e0:	683a      	ldr	r2, [r7, #0]
 80139e2:	88d2      	ldrh	r2, [r2, #6]
 80139e4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80139e6:	683b      	ldr	r3, [r7, #0]
 80139e8:	88db      	ldrh	r3, [r3, #6]
 80139ea:	2b07      	cmp	r3, #7
 80139ec:	bf28      	it	cs
 80139ee:	2307      	movcs	r3, #7
 80139f0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80139f2:	693b      	ldr	r3, [r7, #16]
 80139f4:	89fa      	ldrh	r2, [r7, #14]
 80139f6:	4619      	mov	r1, r3
 80139f8:	6878      	ldr	r0, [r7, #4]
 80139fa:	f001 fd89 	bl	8015510 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80139fe:	e090      	b.n	8013b22 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8013a00:	683b      	ldr	r3, [r7, #0]
 8013a02:	785a      	ldrb	r2, [r3, #1]
 8013a04:	693b      	ldr	r3, [r7, #16]
 8013a06:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8013a0a:	683b      	ldr	r3, [r7, #0]
 8013a0c:	88db      	ldrh	r3, [r3, #6]
 8013a0e:	2b3f      	cmp	r3, #63	; 0x3f
 8013a10:	d803      	bhi.n	8013a1a <USBD_CDC_Setup+0xa6>
 8013a12:	683b      	ldr	r3, [r7, #0]
 8013a14:	88db      	ldrh	r3, [r3, #6]
 8013a16:	b2da      	uxtb	r2, r3
 8013a18:	e000      	b.n	8013a1c <USBD_CDC_Setup+0xa8>
 8013a1a:	2240      	movs	r2, #64	; 0x40
 8013a1c:	693b      	ldr	r3, [r7, #16]
 8013a1e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8013a22:	6939      	ldr	r1, [r7, #16]
 8013a24:	693b      	ldr	r3, [r7, #16]
 8013a26:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8013a2a:	461a      	mov	r2, r3
 8013a2c:	6878      	ldr	r0, [r7, #4]
 8013a2e:	f001 fd9b 	bl	8015568 <USBD_CtlPrepareRx>
      break;
 8013a32:	e076      	b.n	8013b22 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013a3a:	687a      	ldr	r2, [r7, #4]
 8013a3c:	33b0      	adds	r3, #176	; 0xb0
 8013a3e:	009b      	lsls	r3, r3, #2
 8013a40:	4413      	add	r3, r2
 8013a42:	685b      	ldr	r3, [r3, #4]
 8013a44:	689b      	ldr	r3, [r3, #8]
 8013a46:	683a      	ldr	r2, [r7, #0]
 8013a48:	7850      	ldrb	r0, [r2, #1]
 8013a4a:	2200      	movs	r2, #0
 8013a4c:	6839      	ldr	r1, [r7, #0]
 8013a4e:	4798      	blx	r3
      break;
 8013a50:	e067      	b.n	8013b22 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013a52:	683b      	ldr	r3, [r7, #0]
 8013a54:	785b      	ldrb	r3, [r3, #1]
 8013a56:	2b0b      	cmp	r3, #11
 8013a58:	d851      	bhi.n	8013afe <USBD_CDC_Setup+0x18a>
 8013a5a:	a201      	add	r2, pc, #4	; (adr r2, 8013a60 <USBD_CDC_Setup+0xec>)
 8013a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a60:	08013a91 	.word	0x08013a91
 8013a64:	08013b0d 	.word	0x08013b0d
 8013a68:	08013aff 	.word	0x08013aff
 8013a6c:	08013aff 	.word	0x08013aff
 8013a70:	08013aff 	.word	0x08013aff
 8013a74:	08013aff 	.word	0x08013aff
 8013a78:	08013aff 	.word	0x08013aff
 8013a7c:	08013aff 	.word	0x08013aff
 8013a80:	08013aff 	.word	0x08013aff
 8013a84:	08013aff 	.word	0x08013aff
 8013a88:	08013abb 	.word	0x08013abb
 8013a8c:	08013ae5 	.word	0x08013ae5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013a96:	b2db      	uxtb	r3, r3
 8013a98:	2b03      	cmp	r3, #3
 8013a9a:	d107      	bne.n	8013aac <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8013a9c:	f107 030a 	add.w	r3, r7, #10
 8013aa0:	2202      	movs	r2, #2
 8013aa2:	4619      	mov	r1, r3
 8013aa4:	6878      	ldr	r0, [r7, #4]
 8013aa6:	f001 fd33 	bl	8015510 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013aaa:	e032      	b.n	8013b12 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8013aac:	6839      	ldr	r1, [r7, #0]
 8013aae:	6878      	ldr	r0, [r7, #4]
 8013ab0:	f001 fcbd 	bl	801542e <USBD_CtlError>
            ret = USBD_FAIL;
 8013ab4:	2303      	movs	r3, #3
 8013ab6:	75fb      	strb	r3, [r7, #23]
          break;
 8013ab8:	e02b      	b.n	8013b12 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013ac0:	b2db      	uxtb	r3, r3
 8013ac2:	2b03      	cmp	r3, #3
 8013ac4:	d107      	bne.n	8013ad6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8013ac6:	f107 030d 	add.w	r3, r7, #13
 8013aca:	2201      	movs	r2, #1
 8013acc:	4619      	mov	r1, r3
 8013ace:	6878      	ldr	r0, [r7, #4]
 8013ad0:	f001 fd1e 	bl	8015510 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013ad4:	e01d      	b.n	8013b12 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8013ad6:	6839      	ldr	r1, [r7, #0]
 8013ad8:	6878      	ldr	r0, [r7, #4]
 8013ada:	f001 fca8 	bl	801542e <USBD_CtlError>
            ret = USBD_FAIL;
 8013ade:	2303      	movs	r3, #3
 8013ae0:	75fb      	strb	r3, [r7, #23]
          break;
 8013ae2:	e016      	b.n	8013b12 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013aea:	b2db      	uxtb	r3, r3
 8013aec:	2b03      	cmp	r3, #3
 8013aee:	d00f      	beq.n	8013b10 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8013af0:	6839      	ldr	r1, [r7, #0]
 8013af2:	6878      	ldr	r0, [r7, #4]
 8013af4:	f001 fc9b 	bl	801542e <USBD_CtlError>
            ret = USBD_FAIL;
 8013af8:	2303      	movs	r3, #3
 8013afa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8013afc:	e008      	b.n	8013b10 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8013afe:	6839      	ldr	r1, [r7, #0]
 8013b00:	6878      	ldr	r0, [r7, #4]
 8013b02:	f001 fc94 	bl	801542e <USBD_CtlError>
          ret = USBD_FAIL;
 8013b06:	2303      	movs	r3, #3
 8013b08:	75fb      	strb	r3, [r7, #23]
          break;
 8013b0a:	e002      	b.n	8013b12 <USBD_CDC_Setup+0x19e>
          break;
 8013b0c:	bf00      	nop
 8013b0e:	e008      	b.n	8013b22 <USBD_CDC_Setup+0x1ae>
          break;
 8013b10:	bf00      	nop
      }
      break;
 8013b12:	e006      	b.n	8013b22 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8013b14:	6839      	ldr	r1, [r7, #0]
 8013b16:	6878      	ldr	r0, [r7, #4]
 8013b18:	f001 fc89 	bl	801542e <USBD_CtlError>
      ret = USBD_FAIL;
 8013b1c:	2303      	movs	r3, #3
 8013b1e:	75fb      	strb	r3, [r7, #23]
      break;
 8013b20:	bf00      	nop
  }

  return (uint8_t)ret;
 8013b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b24:	4618      	mov	r0, r3
 8013b26:	3718      	adds	r7, #24
 8013b28:	46bd      	mov	sp, r7
 8013b2a:	bd80      	pop	{r7, pc}

08013b2c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013b2c:	b580      	push	{r7, lr}
 8013b2e:	b084      	sub	sp, #16
 8013b30:	af00      	add	r7, sp, #0
 8013b32:	6078      	str	r0, [r7, #4]
 8013b34:	460b      	mov	r3, r1
 8013b36:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013b3e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	32b0      	adds	r2, #176	; 0xb0
 8013b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d101      	bne.n	8013b56 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8013b52:	2303      	movs	r3, #3
 8013b54:	e065      	b.n	8013c22 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	32b0      	adds	r2, #176	; 0xb0
 8013b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b64:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8013b66:	78fb      	ldrb	r3, [r7, #3]
 8013b68:	f003 020f 	and.w	r2, r3, #15
 8013b6c:	6879      	ldr	r1, [r7, #4]
 8013b6e:	4613      	mov	r3, r2
 8013b70:	009b      	lsls	r3, r3, #2
 8013b72:	4413      	add	r3, r2
 8013b74:	009b      	lsls	r3, r3, #2
 8013b76:	440b      	add	r3, r1
 8013b78:	3318      	adds	r3, #24
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d02f      	beq.n	8013be0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8013b80:	78fb      	ldrb	r3, [r7, #3]
 8013b82:	f003 020f 	and.w	r2, r3, #15
 8013b86:	6879      	ldr	r1, [r7, #4]
 8013b88:	4613      	mov	r3, r2
 8013b8a:	009b      	lsls	r3, r3, #2
 8013b8c:	4413      	add	r3, r2
 8013b8e:	009b      	lsls	r3, r3, #2
 8013b90:	440b      	add	r3, r1
 8013b92:	3318      	adds	r3, #24
 8013b94:	681a      	ldr	r2, [r3, #0]
 8013b96:	78fb      	ldrb	r3, [r7, #3]
 8013b98:	f003 010f 	and.w	r1, r3, #15
 8013b9c:	68f8      	ldr	r0, [r7, #12]
 8013b9e:	460b      	mov	r3, r1
 8013ba0:	00db      	lsls	r3, r3, #3
 8013ba2:	440b      	add	r3, r1
 8013ba4:	009b      	lsls	r3, r3, #2
 8013ba6:	4403      	add	r3, r0
 8013ba8:	3348      	adds	r3, #72	; 0x48
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	fbb2 f1f3 	udiv	r1, r2, r3
 8013bb0:	fb01 f303 	mul.w	r3, r1, r3
 8013bb4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d112      	bne.n	8013be0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8013bba:	78fb      	ldrb	r3, [r7, #3]
 8013bbc:	f003 020f 	and.w	r2, r3, #15
 8013bc0:	6879      	ldr	r1, [r7, #4]
 8013bc2:	4613      	mov	r3, r2
 8013bc4:	009b      	lsls	r3, r3, #2
 8013bc6:	4413      	add	r3, r2
 8013bc8:	009b      	lsls	r3, r3, #2
 8013bca:	440b      	add	r3, r1
 8013bcc:	3318      	adds	r3, #24
 8013bce:	2200      	movs	r2, #0
 8013bd0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8013bd2:	78f9      	ldrb	r1, [r7, #3]
 8013bd4:	2300      	movs	r3, #0
 8013bd6:	2200      	movs	r2, #0
 8013bd8:	6878      	ldr	r0, [r7, #4]
 8013bda:	f002 f9a8 	bl	8015f2e <USBD_LL_Transmit>
 8013bde:	e01f      	b.n	8013c20 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8013be0:	68bb      	ldr	r3, [r7, #8]
 8013be2:	2200      	movs	r2, #0
 8013be4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013bee:	687a      	ldr	r2, [r7, #4]
 8013bf0:	33b0      	adds	r3, #176	; 0xb0
 8013bf2:	009b      	lsls	r3, r3, #2
 8013bf4:	4413      	add	r3, r2
 8013bf6:	685b      	ldr	r3, [r3, #4]
 8013bf8:	691b      	ldr	r3, [r3, #16]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d010      	beq.n	8013c20 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013c04:	687a      	ldr	r2, [r7, #4]
 8013c06:	33b0      	adds	r3, #176	; 0xb0
 8013c08:	009b      	lsls	r3, r3, #2
 8013c0a:	4413      	add	r3, r2
 8013c0c:	685b      	ldr	r3, [r3, #4]
 8013c0e:	691b      	ldr	r3, [r3, #16]
 8013c10:	68ba      	ldr	r2, [r7, #8]
 8013c12:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8013c16:	68ba      	ldr	r2, [r7, #8]
 8013c18:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8013c1c:	78fa      	ldrb	r2, [r7, #3]
 8013c1e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8013c20:	2300      	movs	r3, #0
}
 8013c22:	4618      	mov	r0, r3
 8013c24:	3710      	adds	r7, #16
 8013c26:	46bd      	mov	sp, r7
 8013c28:	bd80      	pop	{r7, pc}

08013c2a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013c2a:	b580      	push	{r7, lr}
 8013c2c:	b084      	sub	sp, #16
 8013c2e:	af00      	add	r7, sp, #0
 8013c30:	6078      	str	r0, [r7, #4]
 8013c32:	460b      	mov	r3, r1
 8013c34:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	32b0      	adds	r2, #176	; 0xb0
 8013c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c44:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	32b0      	adds	r2, #176	; 0xb0
 8013c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d101      	bne.n	8013c5c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8013c58:	2303      	movs	r3, #3
 8013c5a:	e01a      	b.n	8013c92 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013c5c:	78fb      	ldrb	r3, [r7, #3]
 8013c5e:	4619      	mov	r1, r3
 8013c60:	6878      	ldr	r0, [r7, #4]
 8013c62:	f002 f9a6 	bl	8015fb2 <USBD_LL_GetRxDataSize>
 8013c66:	4602      	mov	r2, r0
 8013c68:	68fb      	ldr	r3, [r7, #12]
 8013c6a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013c74:	687a      	ldr	r2, [r7, #4]
 8013c76:	33b0      	adds	r3, #176	; 0xb0
 8013c78:	009b      	lsls	r3, r3, #2
 8013c7a:	4413      	add	r3, r2
 8013c7c:	685b      	ldr	r3, [r3, #4]
 8013c7e:	68db      	ldr	r3, [r3, #12]
 8013c80:	68fa      	ldr	r2, [r7, #12]
 8013c82:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8013c86:	68fa      	ldr	r2, [r7, #12]
 8013c88:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8013c8c:	4611      	mov	r1, r2
 8013c8e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8013c90:	2300      	movs	r3, #0
}
 8013c92:	4618      	mov	r0, r3
 8013c94:	3710      	adds	r7, #16
 8013c96:	46bd      	mov	sp, r7
 8013c98:	bd80      	pop	{r7, pc}

08013c9a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8013c9a:	b580      	push	{r7, lr}
 8013c9c:	b084      	sub	sp, #16
 8013c9e:	af00      	add	r7, sp, #0
 8013ca0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	32b0      	adds	r2, #176	; 0xb0
 8013cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013cb0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d101      	bne.n	8013cbc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8013cb8:	2303      	movs	r3, #3
 8013cba:	e025      	b.n	8013d08 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013cc2:	687a      	ldr	r2, [r7, #4]
 8013cc4:	33b0      	adds	r3, #176	; 0xb0
 8013cc6:	009b      	lsls	r3, r3, #2
 8013cc8:	4413      	add	r3, r2
 8013cca:	685b      	ldr	r3, [r3, #4]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d01a      	beq.n	8013d06 <USBD_CDC_EP0_RxReady+0x6c>
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8013cd6:	2bff      	cmp	r3, #255	; 0xff
 8013cd8:	d015      	beq.n	8013d06 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013ce0:	687a      	ldr	r2, [r7, #4]
 8013ce2:	33b0      	adds	r3, #176	; 0xb0
 8013ce4:	009b      	lsls	r3, r3, #2
 8013ce6:	4413      	add	r3, r2
 8013ce8:	685b      	ldr	r3, [r3, #4]
 8013cea:	689b      	ldr	r3, [r3, #8]
 8013cec:	68fa      	ldr	r2, [r7, #12]
 8013cee:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8013cf2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8013cf4:	68fa      	ldr	r2, [r7, #12]
 8013cf6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8013cfa:	b292      	uxth	r2, r2
 8013cfc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	22ff      	movs	r2, #255	; 0xff
 8013d02:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8013d06:	2300      	movs	r3, #0
}
 8013d08:	4618      	mov	r0, r3
 8013d0a:	3710      	adds	r7, #16
 8013d0c:	46bd      	mov	sp, r7
 8013d0e:	bd80      	pop	{r7, pc}

08013d10 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8013d10:	b580      	push	{r7, lr}
 8013d12:	b086      	sub	sp, #24
 8013d14:	af00      	add	r7, sp, #0
 8013d16:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013d18:	2182      	movs	r1, #130	; 0x82
 8013d1a:	4818      	ldr	r0, [pc, #96]	; (8013d7c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013d1c:	f000 fd4f 	bl	80147be <USBD_GetEpDesc>
 8013d20:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8013d22:	2101      	movs	r1, #1
 8013d24:	4815      	ldr	r0, [pc, #84]	; (8013d7c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013d26:	f000 fd4a 	bl	80147be <USBD_GetEpDesc>
 8013d2a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013d2c:	2181      	movs	r1, #129	; 0x81
 8013d2e:	4813      	ldr	r0, [pc, #76]	; (8013d7c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013d30:	f000 fd45 	bl	80147be <USBD_GetEpDesc>
 8013d34:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013d36:	697b      	ldr	r3, [r7, #20]
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d002      	beq.n	8013d42 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013d3c:	697b      	ldr	r3, [r7, #20]
 8013d3e:	2210      	movs	r2, #16
 8013d40:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8013d42:	693b      	ldr	r3, [r7, #16]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d006      	beq.n	8013d56 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013d48:	693b      	ldr	r3, [r7, #16]
 8013d4a:	2200      	movs	r2, #0
 8013d4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013d50:	711a      	strb	r2, [r3, #4]
 8013d52:	2200      	movs	r2, #0
 8013d54:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d006      	beq.n	8013d6a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	2200      	movs	r2, #0
 8013d60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013d64:	711a      	strb	r2, [r3, #4]
 8013d66:	2200      	movs	r2, #0
 8013d68:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	2243      	movs	r2, #67	; 0x43
 8013d6e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013d70:	4b02      	ldr	r3, [pc, #8]	; (8013d7c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8013d72:	4618      	mov	r0, r3
 8013d74:	3718      	adds	r7, #24
 8013d76:	46bd      	mov	sp, r7
 8013d78:	bd80      	pop	{r7, pc}
 8013d7a:	bf00      	nop
 8013d7c:	2000015c 	.word	0x2000015c

08013d80 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8013d80:	b580      	push	{r7, lr}
 8013d82:	b086      	sub	sp, #24
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013d88:	2182      	movs	r1, #130	; 0x82
 8013d8a:	4818      	ldr	r0, [pc, #96]	; (8013dec <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013d8c:	f000 fd17 	bl	80147be <USBD_GetEpDesc>
 8013d90:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8013d92:	2101      	movs	r1, #1
 8013d94:	4815      	ldr	r0, [pc, #84]	; (8013dec <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013d96:	f000 fd12 	bl	80147be <USBD_GetEpDesc>
 8013d9a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013d9c:	2181      	movs	r1, #129	; 0x81
 8013d9e:	4813      	ldr	r0, [pc, #76]	; (8013dec <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013da0:	f000 fd0d 	bl	80147be <USBD_GetEpDesc>
 8013da4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013da6:	697b      	ldr	r3, [r7, #20]
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d002      	beq.n	8013db2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8013dac:	697b      	ldr	r3, [r7, #20]
 8013dae:	2210      	movs	r2, #16
 8013db0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8013db2:	693b      	ldr	r3, [r7, #16]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d006      	beq.n	8013dc6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8013db8:	693b      	ldr	r3, [r7, #16]
 8013dba:	2200      	movs	r2, #0
 8013dbc:	711a      	strb	r2, [r3, #4]
 8013dbe:	2200      	movs	r2, #0
 8013dc0:	f042 0202 	orr.w	r2, r2, #2
 8013dc4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d006      	beq.n	8013dda <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	2200      	movs	r2, #0
 8013dd0:	711a      	strb	r2, [r3, #4]
 8013dd2:	2200      	movs	r2, #0
 8013dd4:	f042 0202 	orr.w	r2, r2, #2
 8013dd8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	2243      	movs	r2, #67	; 0x43
 8013dde:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013de0:	4b02      	ldr	r3, [pc, #8]	; (8013dec <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8013de2:	4618      	mov	r0, r3
 8013de4:	3718      	adds	r7, #24
 8013de6:	46bd      	mov	sp, r7
 8013de8:	bd80      	pop	{r7, pc}
 8013dea:	bf00      	nop
 8013dec:	2000015c 	.word	0x2000015c

08013df0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8013df0:	b580      	push	{r7, lr}
 8013df2:	b086      	sub	sp, #24
 8013df4:	af00      	add	r7, sp, #0
 8013df6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013df8:	2182      	movs	r1, #130	; 0x82
 8013dfa:	4818      	ldr	r0, [pc, #96]	; (8013e5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013dfc:	f000 fcdf 	bl	80147be <USBD_GetEpDesc>
 8013e00:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8013e02:	2101      	movs	r1, #1
 8013e04:	4815      	ldr	r0, [pc, #84]	; (8013e5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013e06:	f000 fcda 	bl	80147be <USBD_GetEpDesc>
 8013e0a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013e0c:	2181      	movs	r1, #129	; 0x81
 8013e0e:	4813      	ldr	r0, [pc, #76]	; (8013e5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013e10:	f000 fcd5 	bl	80147be <USBD_GetEpDesc>
 8013e14:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013e16:	697b      	ldr	r3, [r7, #20]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d002      	beq.n	8013e22 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013e1c:	697b      	ldr	r3, [r7, #20]
 8013e1e:	2210      	movs	r2, #16
 8013e20:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8013e22:	693b      	ldr	r3, [r7, #16]
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d006      	beq.n	8013e36 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013e28:	693b      	ldr	r3, [r7, #16]
 8013e2a:	2200      	movs	r2, #0
 8013e2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013e30:	711a      	strb	r2, [r3, #4]
 8013e32:	2200      	movs	r2, #0
 8013e34:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d006      	beq.n	8013e4a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013e3c:	68fb      	ldr	r3, [r7, #12]
 8013e3e:	2200      	movs	r2, #0
 8013e40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013e44:	711a      	strb	r2, [r3, #4]
 8013e46:	2200      	movs	r2, #0
 8013e48:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	2243      	movs	r2, #67	; 0x43
 8013e4e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013e50:	4b02      	ldr	r3, [pc, #8]	; (8013e5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8013e52:	4618      	mov	r0, r3
 8013e54:	3718      	adds	r7, #24
 8013e56:	46bd      	mov	sp, r7
 8013e58:	bd80      	pop	{r7, pc}
 8013e5a:	bf00      	nop
 8013e5c:	2000015c 	.word	0x2000015c

08013e60 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013e60:	b480      	push	{r7}
 8013e62:	b083      	sub	sp, #12
 8013e64:	af00      	add	r7, sp, #0
 8013e66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	220a      	movs	r2, #10
 8013e6c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8013e6e:	4b03      	ldr	r3, [pc, #12]	; (8013e7c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8013e70:	4618      	mov	r0, r3
 8013e72:	370c      	adds	r7, #12
 8013e74:	46bd      	mov	sp, r7
 8013e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e7a:	4770      	bx	lr
 8013e7c:	20000118 	.word	0x20000118

08013e80 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8013e80:	b480      	push	{r7}
 8013e82:	b083      	sub	sp, #12
 8013e84:	af00      	add	r7, sp, #0
 8013e86:	6078      	str	r0, [r7, #4]
 8013e88:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8013e8a:	683b      	ldr	r3, [r7, #0]
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d101      	bne.n	8013e94 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8013e90:	2303      	movs	r3, #3
 8013e92:	e009      	b.n	8013ea8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013e9a:	687a      	ldr	r2, [r7, #4]
 8013e9c:	33b0      	adds	r3, #176	; 0xb0
 8013e9e:	009b      	lsls	r3, r3, #2
 8013ea0:	4413      	add	r3, r2
 8013ea2:	683a      	ldr	r2, [r7, #0]
 8013ea4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8013ea6:	2300      	movs	r3, #0
}
 8013ea8:	4618      	mov	r0, r3
 8013eaa:	370c      	adds	r7, #12
 8013eac:	46bd      	mov	sp, r7
 8013eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eb2:	4770      	bx	lr

08013eb4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8013eb4:	b480      	push	{r7}
 8013eb6:	b087      	sub	sp, #28
 8013eb8:	af00      	add	r7, sp, #0
 8013eba:	60f8      	str	r0, [r7, #12]
 8013ebc:	60b9      	str	r1, [r7, #8]
 8013ebe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013ec0:	68fb      	ldr	r3, [r7, #12]
 8013ec2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013ec6:	68fb      	ldr	r3, [r7, #12]
 8013ec8:	32b0      	adds	r2, #176	; 0xb0
 8013eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ece:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8013ed0:	697b      	ldr	r3, [r7, #20]
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d101      	bne.n	8013eda <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8013ed6:	2303      	movs	r3, #3
 8013ed8:	e008      	b.n	8013eec <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8013eda:	697b      	ldr	r3, [r7, #20]
 8013edc:	68ba      	ldr	r2, [r7, #8]
 8013ede:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8013ee2:	697b      	ldr	r3, [r7, #20]
 8013ee4:	687a      	ldr	r2, [r7, #4]
 8013ee6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8013eea:	2300      	movs	r3, #0
}
 8013eec:	4618      	mov	r0, r3
 8013eee:	371c      	adds	r7, #28
 8013ef0:	46bd      	mov	sp, r7
 8013ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ef6:	4770      	bx	lr

08013ef8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8013ef8:	b480      	push	{r7}
 8013efa:	b085      	sub	sp, #20
 8013efc:	af00      	add	r7, sp, #0
 8013efe:	6078      	str	r0, [r7, #4]
 8013f00:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	32b0      	adds	r2, #176	; 0xb0
 8013f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f10:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d101      	bne.n	8013f1c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8013f18:	2303      	movs	r3, #3
 8013f1a:	e004      	b.n	8013f26 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	683a      	ldr	r2, [r7, #0]
 8013f20:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8013f24:	2300      	movs	r3, #0
}
 8013f26:	4618      	mov	r0, r3
 8013f28:	3714      	adds	r7, #20
 8013f2a:	46bd      	mov	sp, r7
 8013f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f30:	4770      	bx	lr
	...

08013f34 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8013f34:	b580      	push	{r7, lr}
 8013f36:	b084      	sub	sp, #16
 8013f38:	af00      	add	r7, sp, #0
 8013f3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	32b0      	adds	r2, #176	; 0xb0
 8013f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f4a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8013f4c:	2301      	movs	r3, #1
 8013f4e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	32b0      	adds	r2, #176	; 0xb0
 8013f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d101      	bne.n	8013f66 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8013f62:	2303      	movs	r3, #3
 8013f64:	e025      	b.n	8013fb2 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8013f66:	68bb      	ldr	r3, [r7, #8]
 8013f68:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d11f      	bne.n	8013fb0 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8013f70:	68bb      	ldr	r3, [r7, #8]
 8013f72:	2201      	movs	r2, #1
 8013f74:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8013f78:	4b10      	ldr	r3, [pc, #64]	; (8013fbc <USBD_CDC_TransmitPacket+0x88>)
 8013f7a:	781b      	ldrb	r3, [r3, #0]
 8013f7c:	f003 020f 	and.w	r2, r3, #15
 8013f80:	68bb      	ldr	r3, [r7, #8]
 8013f82:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8013f86:	6878      	ldr	r0, [r7, #4]
 8013f88:	4613      	mov	r3, r2
 8013f8a:	009b      	lsls	r3, r3, #2
 8013f8c:	4413      	add	r3, r2
 8013f8e:	009b      	lsls	r3, r3, #2
 8013f90:	4403      	add	r3, r0
 8013f92:	3318      	adds	r3, #24
 8013f94:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8013f96:	4b09      	ldr	r3, [pc, #36]	; (8013fbc <USBD_CDC_TransmitPacket+0x88>)
 8013f98:	7819      	ldrb	r1, [r3, #0]
 8013f9a:	68bb      	ldr	r3, [r7, #8]
 8013f9c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8013fa0:	68bb      	ldr	r3, [r7, #8]
 8013fa2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8013fa6:	6878      	ldr	r0, [r7, #4]
 8013fa8:	f001 ffc1 	bl	8015f2e <USBD_LL_Transmit>

    ret = USBD_OK;
 8013fac:	2300      	movs	r3, #0
 8013fae:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8013fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8013fb2:	4618      	mov	r0, r3
 8013fb4:	3710      	adds	r7, #16
 8013fb6:	46bd      	mov	sp, r7
 8013fb8:	bd80      	pop	{r7, pc}
 8013fba:	bf00      	nop
 8013fbc:	2000019f 	.word	0x2000019f

08013fc0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8013fc0:	b580      	push	{r7, lr}
 8013fc2:	b084      	sub	sp, #16
 8013fc4:	af00      	add	r7, sp, #0
 8013fc6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	32b0      	adds	r2, #176	; 0xb0
 8013fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013fd6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	32b0      	adds	r2, #176	; 0xb0
 8013fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d101      	bne.n	8013fee <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8013fea:	2303      	movs	r3, #3
 8013fec:	e018      	b.n	8014020 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	7c1b      	ldrb	r3, [r3, #16]
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d10a      	bne.n	801400c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013ff6:	4b0c      	ldr	r3, [pc, #48]	; (8014028 <USBD_CDC_ReceivePacket+0x68>)
 8013ff8:	7819      	ldrb	r1, [r3, #0]
 8013ffa:	68fb      	ldr	r3, [r7, #12]
 8013ffc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014000:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014004:	6878      	ldr	r0, [r7, #4]
 8014006:	f001 ffb3 	bl	8015f70 <USBD_LL_PrepareReceive>
 801400a:	e008      	b.n	801401e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801400c:	4b06      	ldr	r3, [pc, #24]	; (8014028 <USBD_CDC_ReceivePacket+0x68>)
 801400e:	7819      	ldrb	r1, [r3, #0]
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014016:	2340      	movs	r3, #64	; 0x40
 8014018:	6878      	ldr	r0, [r7, #4]
 801401a:	f001 ffa9 	bl	8015f70 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801401e:	2300      	movs	r3, #0
}
 8014020:	4618      	mov	r0, r3
 8014022:	3710      	adds	r7, #16
 8014024:	46bd      	mov	sp, r7
 8014026:	bd80      	pop	{r7, pc}
 8014028:	200001a0 	.word	0x200001a0

0801402c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801402c:	b580      	push	{r7, lr}
 801402e:	b086      	sub	sp, #24
 8014030:	af00      	add	r7, sp, #0
 8014032:	60f8      	str	r0, [r7, #12]
 8014034:	60b9      	str	r1, [r7, #8]
 8014036:	4613      	mov	r3, r2
 8014038:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	2b00      	cmp	r3, #0
 801403e:	d101      	bne.n	8014044 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014040:	2303      	movs	r3, #3
 8014042:	e01f      	b.n	8014084 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8014044:	68fb      	ldr	r3, [r7, #12]
 8014046:	2200      	movs	r2, #0
 8014048:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	2200      	movs	r2, #0
 8014050:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	2200      	movs	r2, #0
 8014058:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801405c:	68bb      	ldr	r3, [r7, #8]
 801405e:	2b00      	cmp	r3, #0
 8014060:	d003      	beq.n	801406a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8014062:	68fb      	ldr	r3, [r7, #12]
 8014064:	68ba      	ldr	r2, [r7, #8]
 8014066:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	2201      	movs	r2, #1
 801406e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	79fa      	ldrb	r2, [r7, #7]
 8014076:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014078:	68f8      	ldr	r0, [r7, #12]
 801407a:	f001 fe23 	bl	8015cc4 <USBD_LL_Init>
 801407e:	4603      	mov	r3, r0
 8014080:	75fb      	strb	r3, [r7, #23]

  return ret;
 8014082:	7dfb      	ldrb	r3, [r7, #23]
}
 8014084:	4618      	mov	r0, r3
 8014086:	3718      	adds	r7, #24
 8014088:	46bd      	mov	sp, r7
 801408a:	bd80      	pop	{r7, pc}

0801408c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801408c:	b580      	push	{r7, lr}
 801408e:	b084      	sub	sp, #16
 8014090:	af00      	add	r7, sp, #0
 8014092:	6078      	str	r0, [r7, #4]
 8014094:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014096:	2300      	movs	r3, #0
 8014098:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801409a:	683b      	ldr	r3, [r7, #0]
 801409c:	2b00      	cmp	r3, #0
 801409e:	d101      	bne.n	80140a4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80140a0:	2303      	movs	r3, #3
 80140a2:	e025      	b.n	80140f0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	683a      	ldr	r2, [r7, #0]
 80140a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	32ae      	adds	r2, #174	; 0xae
 80140b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80140ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d00f      	beq.n	80140e0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	32ae      	adds	r2, #174	; 0xae
 80140ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80140ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140d0:	f107 020e 	add.w	r2, r7, #14
 80140d4:	4610      	mov	r0, r2
 80140d6:	4798      	blx	r3
 80140d8:	4602      	mov	r2, r0
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80140e6:	1c5a      	adds	r2, r3, #1
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80140ee:	2300      	movs	r3, #0
}
 80140f0:	4618      	mov	r0, r3
 80140f2:	3710      	adds	r7, #16
 80140f4:	46bd      	mov	sp, r7
 80140f6:	bd80      	pop	{r7, pc}

080140f8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80140f8:	b580      	push	{r7, lr}
 80140fa:	b082      	sub	sp, #8
 80140fc:	af00      	add	r7, sp, #0
 80140fe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8014100:	6878      	ldr	r0, [r7, #4]
 8014102:	f001 fe2b 	bl	8015d5c <USBD_LL_Start>
 8014106:	4603      	mov	r3, r0
}
 8014108:	4618      	mov	r0, r3
 801410a:	3708      	adds	r7, #8
 801410c:	46bd      	mov	sp, r7
 801410e:	bd80      	pop	{r7, pc}

08014110 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8014110:	b480      	push	{r7}
 8014112:	b083      	sub	sp, #12
 8014114:	af00      	add	r7, sp, #0
 8014116:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014118:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801411a:	4618      	mov	r0, r3
 801411c:	370c      	adds	r7, #12
 801411e:	46bd      	mov	sp, r7
 8014120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014124:	4770      	bx	lr

08014126 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014126:	b580      	push	{r7, lr}
 8014128:	b084      	sub	sp, #16
 801412a:	af00      	add	r7, sp, #0
 801412c:	6078      	str	r0, [r7, #4]
 801412e:	460b      	mov	r3, r1
 8014130:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014132:	2300      	movs	r3, #0
 8014134:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801413c:	2b00      	cmp	r3, #0
 801413e:	d009      	beq.n	8014154 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	78fa      	ldrb	r2, [r7, #3]
 801414a:	4611      	mov	r1, r2
 801414c:	6878      	ldr	r0, [r7, #4]
 801414e:	4798      	blx	r3
 8014150:	4603      	mov	r3, r0
 8014152:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014154:	7bfb      	ldrb	r3, [r7, #15]
}
 8014156:	4618      	mov	r0, r3
 8014158:	3710      	adds	r7, #16
 801415a:	46bd      	mov	sp, r7
 801415c:	bd80      	pop	{r7, pc}

0801415e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801415e:	b580      	push	{r7, lr}
 8014160:	b084      	sub	sp, #16
 8014162:	af00      	add	r7, sp, #0
 8014164:	6078      	str	r0, [r7, #4]
 8014166:	460b      	mov	r3, r1
 8014168:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801416a:	2300      	movs	r3, #0
 801416c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014174:	685b      	ldr	r3, [r3, #4]
 8014176:	78fa      	ldrb	r2, [r7, #3]
 8014178:	4611      	mov	r1, r2
 801417a:	6878      	ldr	r0, [r7, #4]
 801417c:	4798      	blx	r3
 801417e:	4603      	mov	r3, r0
 8014180:	2b00      	cmp	r3, #0
 8014182:	d001      	beq.n	8014188 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8014184:	2303      	movs	r3, #3
 8014186:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014188:	7bfb      	ldrb	r3, [r7, #15]
}
 801418a:	4618      	mov	r0, r3
 801418c:	3710      	adds	r7, #16
 801418e:	46bd      	mov	sp, r7
 8014190:	bd80      	pop	{r7, pc}

08014192 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8014192:	b580      	push	{r7, lr}
 8014194:	b084      	sub	sp, #16
 8014196:	af00      	add	r7, sp, #0
 8014198:	6078      	str	r0, [r7, #4]
 801419a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80141a2:	6839      	ldr	r1, [r7, #0]
 80141a4:	4618      	mov	r0, r3
 80141a6:	f001 f908 	bl	80153ba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	2201      	movs	r2, #1
 80141ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80141b8:	461a      	mov	r2, r3
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80141c6:	f003 031f 	and.w	r3, r3, #31
 80141ca:	2b02      	cmp	r3, #2
 80141cc:	d01a      	beq.n	8014204 <USBD_LL_SetupStage+0x72>
 80141ce:	2b02      	cmp	r3, #2
 80141d0:	d822      	bhi.n	8014218 <USBD_LL_SetupStage+0x86>
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d002      	beq.n	80141dc <USBD_LL_SetupStage+0x4a>
 80141d6:	2b01      	cmp	r3, #1
 80141d8:	d00a      	beq.n	80141f0 <USBD_LL_SetupStage+0x5e>
 80141da:	e01d      	b.n	8014218 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80141e2:	4619      	mov	r1, r3
 80141e4:	6878      	ldr	r0, [r7, #4]
 80141e6:	f000 fb5f 	bl	80148a8 <USBD_StdDevReq>
 80141ea:	4603      	mov	r3, r0
 80141ec:	73fb      	strb	r3, [r7, #15]
      break;
 80141ee:	e020      	b.n	8014232 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80141f6:	4619      	mov	r1, r3
 80141f8:	6878      	ldr	r0, [r7, #4]
 80141fa:	f000 fbc7 	bl	801498c <USBD_StdItfReq>
 80141fe:	4603      	mov	r3, r0
 8014200:	73fb      	strb	r3, [r7, #15]
      break;
 8014202:	e016      	b.n	8014232 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801420a:	4619      	mov	r1, r3
 801420c:	6878      	ldr	r0, [r7, #4]
 801420e:	f000 fc29 	bl	8014a64 <USBD_StdEPReq>
 8014212:	4603      	mov	r3, r0
 8014214:	73fb      	strb	r3, [r7, #15]
      break;
 8014216:	e00c      	b.n	8014232 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801421e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014222:	b2db      	uxtb	r3, r3
 8014224:	4619      	mov	r1, r3
 8014226:	6878      	ldr	r0, [r7, #4]
 8014228:	f001 fdf8 	bl	8015e1c <USBD_LL_StallEP>
 801422c:	4603      	mov	r3, r0
 801422e:	73fb      	strb	r3, [r7, #15]
      break;
 8014230:	bf00      	nop
  }

  return ret;
 8014232:	7bfb      	ldrb	r3, [r7, #15]
}
 8014234:	4618      	mov	r0, r3
 8014236:	3710      	adds	r7, #16
 8014238:	46bd      	mov	sp, r7
 801423a:	bd80      	pop	{r7, pc}

0801423c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801423c:	b580      	push	{r7, lr}
 801423e:	b086      	sub	sp, #24
 8014240:	af00      	add	r7, sp, #0
 8014242:	60f8      	str	r0, [r7, #12]
 8014244:	460b      	mov	r3, r1
 8014246:	607a      	str	r2, [r7, #4]
 8014248:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801424a:	2300      	movs	r3, #0
 801424c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801424e:	7afb      	ldrb	r3, [r7, #11]
 8014250:	2b00      	cmp	r3, #0
 8014252:	d16e      	bne.n	8014332 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8014254:	68fb      	ldr	r3, [r7, #12]
 8014256:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801425a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801425c:	68fb      	ldr	r3, [r7, #12]
 801425e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014262:	2b03      	cmp	r3, #3
 8014264:	f040 8098 	bne.w	8014398 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8014268:	693b      	ldr	r3, [r7, #16]
 801426a:	689a      	ldr	r2, [r3, #8]
 801426c:	693b      	ldr	r3, [r7, #16]
 801426e:	68db      	ldr	r3, [r3, #12]
 8014270:	429a      	cmp	r2, r3
 8014272:	d913      	bls.n	801429c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8014274:	693b      	ldr	r3, [r7, #16]
 8014276:	689a      	ldr	r2, [r3, #8]
 8014278:	693b      	ldr	r3, [r7, #16]
 801427a:	68db      	ldr	r3, [r3, #12]
 801427c:	1ad2      	subs	r2, r2, r3
 801427e:	693b      	ldr	r3, [r7, #16]
 8014280:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8014282:	693b      	ldr	r3, [r7, #16]
 8014284:	68da      	ldr	r2, [r3, #12]
 8014286:	693b      	ldr	r3, [r7, #16]
 8014288:	689b      	ldr	r3, [r3, #8]
 801428a:	4293      	cmp	r3, r2
 801428c:	bf28      	it	cs
 801428e:	4613      	movcs	r3, r2
 8014290:	461a      	mov	r2, r3
 8014292:	6879      	ldr	r1, [r7, #4]
 8014294:	68f8      	ldr	r0, [r7, #12]
 8014296:	f001 f984 	bl	80155a2 <USBD_CtlContinueRx>
 801429a:	e07d      	b.n	8014398 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80142a2:	f003 031f 	and.w	r3, r3, #31
 80142a6:	2b02      	cmp	r3, #2
 80142a8:	d014      	beq.n	80142d4 <USBD_LL_DataOutStage+0x98>
 80142aa:	2b02      	cmp	r3, #2
 80142ac:	d81d      	bhi.n	80142ea <USBD_LL_DataOutStage+0xae>
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d002      	beq.n	80142b8 <USBD_LL_DataOutStage+0x7c>
 80142b2:	2b01      	cmp	r3, #1
 80142b4:	d003      	beq.n	80142be <USBD_LL_DataOutStage+0x82>
 80142b6:	e018      	b.n	80142ea <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80142b8:	2300      	movs	r3, #0
 80142ba:	75bb      	strb	r3, [r7, #22]
            break;
 80142bc:	e018      	b.n	80142f0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80142c4:	b2db      	uxtb	r3, r3
 80142c6:	4619      	mov	r1, r3
 80142c8:	68f8      	ldr	r0, [r7, #12]
 80142ca:	f000 fa5e 	bl	801478a <USBD_CoreFindIF>
 80142ce:	4603      	mov	r3, r0
 80142d0:	75bb      	strb	r3, [r7, #22]
            break;
 80142d2:	e00d      	b.n	80142f0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80142da:	b2db      	uxtb	r3, r3
 80142dc:	4619      	mov	r1, r3
 80142de:	68f8      	ldr	r0, [r7, #12]
 80142e0:	f000 fa60 	bl	80147a4 <USBD_CoreFindEP>
 80142e4:	4603      	mov	r3, r0
 80142e6:	75bb      	strb	r3, [r7, #22]
            break;
 80142e8:	e002      	b.n	80142f0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80142ea:	2300      	movs	r3, #0
 80142ec:	75bb      	strb	r3, [r7, #22]
            break;
 80142ee:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80142f0:	7dbb      	ldrb	r3, [r7, #22]
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d119      	bne.n	801432a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80142f6:	68fb      	ldr	r3, [r7, #12]
 80142f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80142fc:	b2db      	uxtb	r3, r3
 80142fe:	2b03      	cmp	r3, #3
 8014300:	d113      	bne.n	801432a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8014302:	7dba      	ldrb	r2, [r7, #22]
 8014304:	68fb      	ldr	r3, [r7, #12]
 8014306:	32ae      	adds	r2, #174	; 0xae
 8014308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801430c:	691b      	ldr	r3, [r3, #16]
 801430e:	2b00      	cmp	r3, #0
 8014310:	d00b      	beq.n	801432a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8014312:	7dba      	ldrb	r2, [r7, #22]
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801431a:	7dba      	ldrb	r2, [r7, #22]
 801431c:	68fb      	ldr	r3, [r7, #12]
 801431e:	32ae      	adds	r2, #174	; 0xae
 8014320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014324:	691b      	ldr	r3, [r3, #16]
 8014326:	68f8      	ldr	r0, [r7, #12]
 8014328:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801432a:	68f8      	ldr	r0, [r7, #12]
 801432c:	f001 f94a 	bl	80155c4 <USBD_CtlSendStatus>
 8014330:	e032      	b.n	8014398 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8014332:	7afb      	ldrb	r3, [r7, #11]
 8014334:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014338:	b2db      	uxtb	r3, r3
 801433a:	4619      	mov	r1, r3
 801433c:	68f8      	ldr	r0, [r7, #12]
 801433e:	f000 fa31 	bl	80147a4 <USBD_CoreFindEP>
 8014342:	4603      	mov	r3, r0
 8014344:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014346:	7dbb      	ldrb	r3, [r7, #22]
 8014348:	2bff      	cmp	r3, #255	; 0xff
 801434a:	d025      	beq.n	8014398 <USBD_LL_DataOutStage+0x15c>
 801434c:	7dbb      	ldrb	r3, [r7, #22]
 801434e:	2b00      	cmp	r3, #0
 8014350:	d122      	bne.n	8014398 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014352:	68fb      	ldr	r3, [r7, #12]
 8014354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014358:	b2db      	uxtb	r3, r3
 801435a:	2b03      	cmp	r3, #3
 801435c:	d117      	bne.n	801438e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801435e:	7dba      	ldrb	r2, [r7, #22]
 8014360:	68fb      	ldr	r3, [r7, #12]
 8014362:	32ae      	adds	r2, #174	; 0xae
 8014364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014368:	699b      	ldr	r3, [r3, #24]
 801436a:	2b00      	cmp	r3, #0
 801436c:	d00f      	beq.n	801438e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801436e:	7dba      	ldrb	r2, [r7, #22]
 8014370:	68fb      	ldr	r3, [r7, #12]
 8014372:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8014376:	7dba      	ldrb	r2, [r7, #22]
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	32ae      	adds	r2, #174	; 0xae
 801437c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014380:	699b      	ldr	r3, [r3, #24]
 8014382:	7afa      	ldrb	r2, [r7, #11]
 8014384:	4611      	mov	r1, r2
 8014386:	68f8      	ldr	r0, [r7, #12]
 8014388:	4798      	blx	r3
 801438a:	4603      	mov	r3, r0
 801438c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801438e:	7dfb      	ldrb	r3, [r7, #23]
 8014390:	2b00      	cmp	r3, #0
 8014392:	d001      	beq.n	8014398 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8014394:	7dfb      	ldrb	r3, [r7, #23]
 8014396:	e000      	b.n	801439a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8014398:	2300      	movs	r3, #0
}
 801439a:	4618      	mov	r0, r3
 801439c:	3718      	adds	r7, #24
 801439e:	46bd      	mov	sp, r7
 80143a0:	bd80      	pop	{r7, pc}

080143a2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80143a2:	b580      	push	{r7, lr}
 80143a4:	b086      	sub	sp, #24
 80143a6:	af00      	add	r7, sp, #0
 80143a8:	60f8      	str	r0, [r7, #12]
 80143aa:	460b      	mov	r3, r1
 80143ac:	607a      	str	r2, [r7, #4]
 80143ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80143b0:	7afb      	ldrb	r3, [r7, #11]
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d16f      	bne.n	8014496 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	3314      	adds	r3, #20
 80143ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80143bc:	68fb      	ldr	r3, [r7, #12]
 80143be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80143c2:	2b02      	cmp	r3, #2
 80143c4:	d15a      	bne.n	801447c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80143c6:	693b      	ldr	r3, [r7, #16]
 80143c8:	689a      	ldr	r2, [r3, #8]
 80143ca:	693b      	ldr	r3, [r7, #16]
 80143cc:	68db      	ldr	r3, [r3, #12]
 80143ce:	429a      	cmp	r2, r3
 80143d0:	d914      	bls.n	80143fc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80143d2:	693b      	ldr	r3, [r7, #16]
 80143d4:	689a      	ldr	r2, [r3, #8]
 80143d6:	693b      	ldr	r3, [r7, #16]
 80143d8:	68db      	ldr	r3, [r3, #12]
 80143da:	1ad2      	subs	r2, r2, r3
 80143dc:	693b      	ldr	r3, [r7, #16]
 80143de:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80143e0:	693b      	ldr	r3, [r7, #16]
 80143e2:	689b      	ldr	r3, [r3, #8]
 80143e4:	461a      	mov	r2, r3
 80143e6:	6879      	ldr	r1, [r7, #4]
 80143e8:	68f8      	ldr	r0, [r7, #12]
 80143ea:	f001 f8ac 	bl	8015546 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80143ee:	2300      	movs	r3, #0
 80143f0:	2200      	movs	r2, #0
 80143f2:	2100      	movs	r1, #0
 80143f4:	68f8      	ldr	r0, [r7, #12]
 80143f6:	f001 fdbb 	bl	8015f70 <USBD_LL_PrepareReceive>
 80143fa:	e03f      	b.n	801447c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80143fc:	693b      	ldr	r3, [r7, #16]
 80143fe:	68da      	ldr	r2, [r3, #12]
 8014400:	693b      	ldr	r3, [r7, #16]
 8014402:	689b      	ldr	r3, [r3, #8]
 8014404:	429a      	cmp	r2, r3
 8014406:	d11c      	bne.n	8014442 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8014408:	693b      	ldr	r3, [r7, #16]
 801440a:	685a      	ldr	r2, [r3, #4]
 801440c:	693b      	ldr	r3, [r7, #16]
 801440e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8014410:	429a      	cmp	r2, r3
 8014412:	d316      	bcc.n	8014442 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8014414:	693b      	ldr	r3, [r7, #16]
 8014416:	685a      	ldr	r2, [r3, #4]
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801441e:	429a      	cmp	r2, r3
 8014420:	d20f      	bcs.n	8014442 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8014422:	2200      	movs	r2, #0
 8014424:	2100      	movs	r1, #0
 8014426:	68f8      	ldr	r0, [r7, #12]
 8014428:	f001 f88d 	bl	8015546 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	2200      	movs	r2, #0
 8014430:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014434:	2300      	movs	r3, #0
 8014436:	2200      	movs	r2, #0
 8014438:	2100      	movs	r1, #0
 801443a:	68f8      	ldr	r0, [r7, #12]
 801443c:	f001 fd98 	bl	8015f70 <USBD_LL_PrepareReceive>
 8014440:	e01c      	b.n	801447c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014442:	68fb      	ldr	r3, [r7, #12]
 8014444:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014448:	b2db      	uxtb	r3, r3
 801444a:	2b03      	cmp	r3, #3
 801444c:	d10f      	bne.n	801446e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801444e:	68fb      	ldr	r3, [r7, #12]
 8014450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014454:	68db      	ldr	r3, [r3, #12]
 8014456:	2b00      	cmp	r3, #0
 8014458:	d009      	beq.n	801446e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	2200      	movs	r2, #0
 801445e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014468:	68db      	ldr	r3, [r3, #12]
 801446a:	68f8      	ldr	r0, [r7, #12]
 801446c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801446e:	2180      	movs	r1, #128	; 0x80
 8014470:	68f8      	ldr	r0, [r7, #12]
 8014472:	f001 fcd3 	bl	8015e1c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8014476:	68f8      	ldr	r0, [r7, #12]
 8014478:	f001 f8b7 	bl	80155ea <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8014482:	2b00      	cmp	r3, #0
 8014484:	d03a      	beq.n	80144fc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8014486:	68f8      	ldr	r0, [r7, #12]
 8014488:	f7ff fe42 	bl	8014110 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	2200      	movs	r2, #0
 8014490:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8014494:	e032      	b.n	80144fc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8014496:	7afb      	ldrb	r3, [r7, #11]
 8014498:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801449c:	b2db      	uxtb	r3, r3
 801449e:	4619      	mov	r1, r3
 80144a0:	68f8      	ldr	r0, [r7, #12]
 80144a2:	f000 f97f 	bl	80147a4 <USBD_CoreFindEP>
 80144a6:	4603      	mov	r3, r0
 80144a8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80144aa:	7dfb      	ldrb	r3, [r7, #23]
 80144ac:	2bff      	cmp	r3, #255	; 0xff
 80144ae:	d025      	beq.n	80144fc <USBD_LL_DataInStage+0x15a>
 80144b0:	7dfb      	ldrb	r3, [r7, #23]
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d122      	bne.n	80144fc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80144b6:	68fb      	ldr	r3, [r7, #12]
 80144b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80144bc:	b2db      	uxtb	r3, r3
 80144be:	2b03      	cmp	r3, #3
 80144c0:	d11c      	bne.n	80144fc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80144c2:	7dfa      	ldrb	r2, [r7, #23]
 80144c4:	68fb      	ldr	r3, [r7, #12]
 80144c6:	32ae      	adds	r2, #174	; 0xae
 80144c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80144cc:	695b      	ldr	r3, [r3, #20]
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d014      	beq.n	80144fc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80144d2:	7dfa      	ldrb	r2, [r7, #23]
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80144da:	7dfa      	ldrb	r2, [r7, #23]
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	32ae      	adds	r2, #174	; 0xae
 80144e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80144e4:	695b      	ldr	r3, [r3, #20]
 80144e6:	7afa      	ldrb	r2, [r7, #11]
 80144e8:	4611      	mov	r1, r2
 80144ea:	68f8      	ldr	r0, [r7, #12]
 80144ec:	4798      	blx	r3
 80144ee:	4603      	mov	r3, r0
 80144f0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80144f2:	7dbb      	ldrb	r3, [r7, #22]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d001      	beq.n	80144fc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80144f8:	7dbb      	ldrb	r3, [r7, #22]
 80144fa:	e000      	b.n	80144fe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80144fc:	2300      	movs	r3, #0
}
 80144fe:	4618      	mov	r0, r3
 8014500:	3718      	adds	r7, #24
 8014502:	46bd      	mov	sp, r7
 8014504:	bd80      	pop	{r7, pc}

08014506 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8014506:	b580      	push	{r7, lr}
 8014508:	b084      	sub	sp, #16
 801450a:	af00      	add	r7, sp, #0
 801450c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801450e:	2300      	movs	r3, #0
 8014510:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	2201      	movs	r2, #1
 8014516:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	2200      	movs	r2, #0
 801451e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	2200      	movs	r2, #0
 8014526:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	2200      	movs	r2, #0
 801452c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	2200      	movs	r2, #0
 8014534:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801453e:	2b00      	cmp	r3, #0
 8014540:	d014      	beq.n	801456c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014548:	685b      	ldr	r3, [r3, #4]
 801454a:	2b00      	cmp	r3, #0
 801454c:	d00e      	beq.n	801456c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014554:	685b      	ldr	r3, [r3, #4]
 8014556:	687a      	ldr	r2, [r7, #4]
 8014558:	6852      	ldr	r2, [r2, #4]
 801455a:	b2d2      	uxtb	r2, r2
 801455c:	4611      	mov	r1, r2
 801455e:	6878      	ldr	r0, [r7, #4]
 8014560:	4798      	blx	r3
 8014562:	4603      	mov	r3, r0
 8014564:	2b00      	cmp	r3, #0
 8014566:	d001      	beq.n	801456c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8014568:	2303      	movs	r3, #3
 801456a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801456c:	2340      	movs	r3, #64	; 0x40
 801456e:	2200      	movs	r2, #0
 8014570:	2100      	movs	r1, #0
 8014572:	6878      	ldr	r0, [r7, #4]
 8014574:	f001 fc0d 	bl	8015d92 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	2201      	movs	r2, #1
 801457c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	2240      	movs	r2, #64	; 0x40
 8014584:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014588:	2340      	movs	r3, #64	; 0x40
 801458a:	2200      	movs	r2, #0
 801458c:	2180      	movs	r1, #128	; 0x80
 801458e:	6878      	ldr	r0, [r7, #4]
 8014590:	f001 fbff 	bl	8015d92 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	2201      	movs	r2, #1
 8014598:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	2240      	movs	r2, #64	; 0x40
 801459e:	621a      	str	r2, [r3, #32]

  return ret;
 80145a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80145a2:	4618      	mov	r0, r3
 80145a4:	3710      	adds	r7, #16
 80145a6:	46bd      	mov	sp, r7
 80145a8:	bd80      	pop	{r7, pc}

080145aa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80145aa:	b480      	push	{r7}
 80145ac:	b083      	sub	sp, #12
 80145ae:	af00      	add	r7, sp, #0
 80145b0:	6078      	str	r0, [r7, #4]
 80145b2:	460b      	mov	r3, r1
 80145b4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	78fa      	ldrb	r2, [r7, #3]
 80145ba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80145bc:	2300      	movs	r3, #0
}
 80145be:	4618      	mov	r0, r3
 80145c0:	370c      	adds	r7, #12
 80145c2:	46bd      	mov	sp, r7
 80145c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145c8:	4770      	bx	lr

080145ca <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80145ca:	b480      	push	{r7}
 80145cc:	b083      	sub	sp, #12
 80145ce:	af00      	add	r7, sp, #0
 80145d0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80145d8:	b2da      	uxtb	r2, r3
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	2204      	movs	r2, #4
 80145e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80145e8:	2300      	movs	r3, #0
}
 80145ea:	4618      	mov	r0, r3
 80145ec:	370c      	adds	r7, #12
 80145ee:	46bd      	mov	sp, r7
 80145f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145f4:	4770      	bx	lr

080145f6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80145f6:	b480      	push	{r7}
 80145f8:	b083      	sub	sp, #12
 80145fa:	af00      	add	r7, sp, #0
 80145fc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014604:	b2db      	uxtb	r3, r3
 8014606:	2b04      	cmp	r3, #4
 8014608:	d106      	bne.n	8014618 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8014610:	b2da      	uxtb	r2, r3
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8014618:	2300      	movs	r3, #0
}
 801461a:	4618      	mov	r0, r3
 801461c:	370c      	adds	r7, #12
 801461e:	46bd      	mov	sp, r7
 8014620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014624:	4770      	bx	lr

08014626 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8014626:	b580      	push	{r7, lr}
 8014628:	b082      	sub	sp, #8
 801462a:	af00      	add	r7, sp, #0
 801462c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014634:	b2db      	uxtb	r3, r3
 8014636:	2b03      	cmp	r3, #3
 8014638:	d110      	bne.n	801465c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014640:	2b00      	cmp	r3, #0
 8014642:	d00b      	beq.n	801465c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801464a:	69db      	ldr	r3, [r3, #28]
 801464c:	2b00      	cmp	r3, #0
 801464e:	d005      	beq.n	801465c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014656:	69db      	ldr	r3, [r3, #28]
 8014658:	6878      	ldr	r0, [r7, #4]
 801465a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801465c:	2300      	movs	r3, #0
}
 801465e:	4618      	mov	r0, r3
 8014660:	3708      	adds	r7, #8
 8014662:	46bd      	mov	sp, r7
 8014664:	bd80      	pop	{r7, pc}

08014666 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8014666:	b580      	push	{r7, lr}
 8014668:	b082      	sub	sp, #8
 801466a:	af00      	add	r7, sp, #0
 801466c:	6078      	str	r0, [r7, #4]
 801466e:	460b      	mov	r3, r1
 8014670:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	32ae      	adds	r2, #174	; 0xae
 801467c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014680:	2b00      	cmp	r3, #0
 8014682:	d101      	bne.n	8014688 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8014684:	2303      	movs	r3, #3
 8014686:	e01c      	b.n	80146c2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801468e:	b2db      	uxtb	r3, r3
 8014690:	2b03      	cmp	r3, #3
 8014692:	d115      	bne.n	80146c0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	32ae      	adds	r2, #174	; 0xae
 801469e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146a2:	6a1b      	ldr	r3, [r3, #32]
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d00b      	beq.n	80146c0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	32ae      	adds	r2, #174	; 0xae
 80146b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146b6:	6a1b      	ldr	r3, [r3, #32]
 80146b8:	78fa      	ldrb	r2, [r7, #3]
 80146ba:	4611      	mov	r1, r2
 80146bc:	6878      	ldr	r0, [r7, #4]
 80146be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80146c0:	2300      	movs	r3, #0
}
 80146c2:	4618      	mov	r0, r3
 80146c4:	3708      	adds	r7, #8
 80146c6:	46bd      	mov	sp, r7
 80146c8:	bd80      	pop	{r7, pc}

080146ca <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80146ca:	b580      	push	{r7, lr}
 80146cc:	b082      	sub	sp, #8
 80146ce:	af00      	add	r7, sp, #0
 80146d0:	6078      	str	r0, [r7, #4]
 80146d2:	460b      	mov	r3, r1
 80146d4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	32ae      	adds	r2, #174	; 0xae
 80146e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d101      	bne.n	80146ec <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80146e8:	2303      	movs	r3, #3
 80146ea:	e01c      	b.n	8014726 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80146f2:	b2db      	uxtb	r3, r3
 80146f4:	2b03      	cmp	r3, #3
 80146f6:	d115      	bne.n	8014724 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	32ae      	adds	r2, #174	; 0xae
 8014702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014708:	2b00      	cmp	r3, #0
 801470a:	d00b      	beq.n	8014724 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	32ae      	adds	r2, #174	; 0xae
 8014716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801471c:	78fa      	ldrb	r2, [r7, #3]
 801471e:	4611      	mov	r1, r2
 8014720:	6878      	ldr	r0, [r7, #4]
 8014722:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014724:	2300      	movs	r3, #0
}
 8014726:	4618      	mov	r0, r3
 8014728:	3708      	adds	r7, #8
 801472a:	46bd      	mov	sp, r7
 801472c:	bd80      	pop	{r7, pc}

0801472e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801472e:	b480      	push	{r7}
 8014730:	b083      	sub	sp, #12
 8014732:	af00      	add	r7, sp, #0
 8014734:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014736:	2300      	movs	r3, #0
}
 8014738:	4618      	mov	r0, r3
 801473a:	370c      	adds	r7, #12
 801473c:	46bd      	mov	sp, r7
 801473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014742:	4770      	bx	lr

08014744 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8014744:	b580      	push	{r7, lr}
 8014746:	b084      	sub	sp, #16
 8014748:	af00      	add	r7, sp, #0
 801474a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 801474c:	2300      	movs	r3, #0
 801474e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	2201      	movs	r2, #1
 8014754:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801475e:	2b00      	cmp	r3, #0
 8014760:	d00e      	beq.n	8014780 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014768:	685b      	ldr	r3, [r3, #4]
 801476a:	687a      	ldr	r2, [r7, #4]
 801476c:	6852      	ldr	r2, [r2, #4]
 801476e:	b2d2      	uxtb	r2, r2
 8014770:	4611      	mov	r1, r2
 8014772:	6878      	ldr	r0, [r7, #4]
 8014774:	4798      	blx	r3
 8014776:	4603      	mov	r3, r0
 8014778:	2b00      	cmp	r3, #0
 801477a:	d001      	beq.n	8014780 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801477c:	2303      	movs	r3, #3
 801477e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014780:	7bfb      	ldrb	r3, [r7, #15]
}
 8014782:	4618      	mov	r0, r3
 8014784:	3710      	adds	r7, #16
 8014786:	46bd      	mov	sp, r7
 8014788:	bd80      	pop	{r7, pc}

0801478a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801478a:	b480      	push	{r7}
 801478c:	b083      	sub	sp, #12
 801478e:	af00      	add	r7, sp, #0
 8014790:	6078      	str	r0, [r7, #4]
 8014792:	460b      	mov	r3, r1
 8014794:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8014796:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8014798:	4618      	mov	r0, r3
 801479a:	370c      	adds	r7, #12
 801479c:	46bd      	mov	sp, r7
 801479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147a2:	4770      	bx	lr

080147a4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80147a4:	b480      	push	{r7}
 80147a6:	b083      	sub	sp, #12
 80147a8:	af00      	add	r7, sp, #0
 80147aa:	6078      	str	r0, [r7, #4]
 80147ac:	460b      	mov	r3, r1
 80147ae:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80147b0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80147b2:	4618      	mov	r0, r3
 80147b4:	370c      	adds	r7, #12
 80147b6:	46bd      	mov	sp, r7
 80147b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147bc:	4770      	bx	lr

080147be <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80147be:	b580      	push	{r7, lr}
 80147c0:	b086      	sub	sp, #24
 80147c2:	af00      	add	r7, sp, #0
 80147c4:	6078      	str	r0, [r7, #4]
 80147c6:	460b      	mov	r3, r1
 80147c8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80147d2:	2300      	movs	r3, #0
 80147d4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	885b      	ldrh	r3, [r3, #2]
 80147da:	b29a      	uxth	r2, r3
 80147dc:	68fb      	ldr	r3, [r7, #12]
 80147de:	781b      	ldrb	r3, [r3, #0]
 80147e0:	b29b      	uxth	r3, r3
 80147e2:	429a      	cmp	r2, r3
 80147e4:	d920      	bls.n	8014828 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	781b      	ldrb	r3, [r3, #0]
 80147ea:	b29b      	uxth	r3, r3
 80147ec:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80147ee:	e013      	b.n	8014818 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80147f0:	f107 030a 	add.w	r3, r7, #10
 80147f4:	4619      	mov	r1, r3
 80147f6:	6978      	ldr	r0, [r7, #20]
 80147f8:	f000 f81b 	bl	8014832 <USBD_GetNextDesc>
 80147fc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80147fe:	697b      	ldr	r3, [r7, #20]
 8014800:	785b      	ldrb	r3, [r3, #1]
 8014802:	2b05      	cmp	r3, #5
 8014804:	d108      	bne.n	8014818 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8014806:	697b      	ldr	r3, [r7, #20]
 8014808:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801480a:	693b      	ldr	r3, [r7, #16]
 801480c:	789b      	ldrb	r3, [r3, #2]
 801480e:	78fa      	ldrb	r2, [r7, #3]
 8014810:	429a      	cmp	r2, r3
 8014812:	d008      	beq.n	8014826 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8014814:	2300      	movs	r3, #0
 8014816:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	885b      	ldrh	r3, [r3, #2]
 801481c:	b29a      	uxth	r2, r3
 801481e:	897b      	ldrh	r3, [r7, #10]
 8014820:	429a      	cmp	r2, r3
 8014822:	d8e5      	bhi.n	80147f0 <USBD_GetEpDesc+0x32>
 8014824:	e000      	b.n	8014828 <USBD_GetEpDesc+0x6a>
          break;
 8014826:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8014828:	693b      	ldr	r3, [r7, #16]
}
 801482a:	4618      	mov	r0, r3
 801482c:	3718      	adds	r7, #24
 801482e:	46bd      	mov	sp, r7
 8014830:	bd80      	pop	{r7, pc}

08014832 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8014832:	b480      	push	{r7}
 8014834:	b085      	sub	sp, #20
 8014836:	af00      	add	r7, sp, #0
 8014838:	6078      	str	r0, [r7, #4]
 801483a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8014840:	683b      	ldr	r3, [r7, #0]
 8014842:	881a      	ldrh	r2, [r3, #0]
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	781b      	ldrb	r3, [r3, #0]
 8014848:	b29b      	uxth	r3, r3
 801484a:	4413      	add	r3, r2
 801484c:	b29a      	uxth	r2, r3
 801484e:	683b      	ldr	r3, [r7, #0]
 8014850:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8014852:	68fb      	ldr	r3, [r7, #12]
 8014854:	781b      	ldrb	r3, [r3, #0]
 8014856:	461a      	mov	r2, r3
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	4413      	add	r3, r2
 801485c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801485e:	68fb      	ldr	r3, [r7, #12]
}
 8014860:	4618      	mov	r0, r3
 8014862:	3714      	adds	r7, #20
 8014864:	46bd      	mov	sp, r7
 8014866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801486a:	4770      	bx	lr

0801486c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801486c:	b480      	push	{r7}
 801486e:	b087      	sub	sp, #28
 8014870:	af00      	add	r7, sp, #0
 8014872:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8014878:	697b      	ldr	r3, [r7, #20]
 801487a:	781b      	ldrb	r3, [r3, #0]
 801487c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801487e:	697b      	ldr	r3, [r7, #20]
 8014880:	3301      	adds	r3, #1
 8014882:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8014884:	697b      	ldr	r3, [r7, #20]
 8014886:	781b      	ldrb	r3, [r3, #0]
 8014888:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801488a:	8a3b      	ldrh	r3, [r7, #16]
 801488c:	021b      	lsls	r3, r3, #8
 801488e:	b21a      	sxth	r2, r3
 8014890:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014894:	4313      	orrs	r3, r2
 8014896:	b21b      	sxth	r3, r3
 8014898:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801489a:	89fb      	ldrh	r3, [r7, #14]
}
 801489c:	4618      	mov	r0, r3
 801489e:	371c      	adds	r7, #28
 80148a0:	46bd      	mov	sp, r7
 80148a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148a6:	4770      	bx	lr

080148a8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80148a8:	b580      	push	{r7, lr}
 80148aa:	b084      	sub	sp, #16
 80148ac:	af00      	add	r7, sp, #0
 80148ae:	6078      	str	r0, [r7, #4]
 80148b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80148b2:	2300      	movs	r3, #0
 80148b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80148b6:	683b      	ldr	r3, [r7, #0]
 80148b8:	781b      	ldrb	r3, [r3, #0]
 80148ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80148be:	2b40      	cmp	r3, #64	; 0x40
 80148c0:	d005      	beq.n	80148ce <USBD_StdDevReq+0x26>
 80148c2:	2b40      	cmp	r3, #64	; 0x40
 80148c4:	d857      	bhi.n	8014976 <USBD_StdDevReq+0xce>
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d00f      	beq.n	80148ea <USBD_StdDevReq+0x42>
 80148ca:	2b20      	cmp	r3, #32
 80148cc:	d153      	bne.n	8014976 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	32ae      	adds	r2, #174	; 0xae
 80148d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148dc:	689b      	ldr	r3, [r3, #8]
 80148de:	6839      	ldr	r1, [r7, #0]
 80148e0:	6878      	ldr	r0, [r7, #4]
 80148e2:	4798      	blx	r3
 80148e4:	4603      	mov	r3, r0
 80148e6:	73fb      	strb	r3, [r7, #15]
      break;
 80148e8:	e04a      	b.n	8014980 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80148ea:	683b      	ldr	r3, [r7, #0]
 80148ec:	785b      	ldrb	r3, [r3, #1]
 80148ee:	2b09      	cmp	r3, #9
 80148f0:	d83b      	bhi.n	801496a <USBD_StdDevReq+0xc2>
 80148f2:	a201      	add	r2, pc, #4	; (adr r2, 80148f8 <USBD_StdDevReq+0x50>)
 80148f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148f8:	0801494d 	.word	0x0801494d
 80148fc:	08014961 	.word	0x08014961
 8014900:	0801496b 	.word	0x0801496b
 8014904:	08014957 	.word	0x08014957
 8014908:	0801496b 	.word	0x0801496b
 801490c:	0801492b 	.word	0x0801492b
 8014910:	08014921 	.word	0x08014921
 8014914:	0801496b 	.word	0x0801496b
 8014918:	08014943 	.word	0x08014943
 801491c:	08014935 	.word	0x08014935
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014920:	6839      	ldr	r1, [r7, #0]
 8014922:	6878      	ldr	r0, [r7, #4]
 8014924:	f000 fa3c 	bl	8014da0 <USBD_GetDescriptor>
          break;
 8014928:	e024      	b.n	8014974 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801492a:	6839      	ldr	r1, [r7, #0]
 801492c:	6878      	ldr	r0, [r7, #4]
 801492e:	f000 fba1 	bl	8015074 <USBD_SetAddress>
          break;
 8014932:	e01f      	b.n	8014974 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8014934:	6839      	ldr	r1, [r7, #0]
 8014936:	6878      	ldr	r0, [r7, #4]
 8014938:	f000 fbe0 	bl	80150fc <USBD_SetConfig>
 801493c:	4603      	mov	r3, r0
 801493e:	73fb      	strb	r3, [r7, #15]
          break;
 8014940:	e018      	b.n	8014974 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8014942:	6839      	ldr	r1, [r7, #0]
 8014944:	6878      	ldr	r0, [r7, #4]
 8014946:	f000 fc83 	bl	8015250 <USBD_GetConfig>
          break;
 801494a:	e013      	b.n	8014974 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801494c:	6839      	ldr	r1, [r7, #0]
 801494e:	6878      	ldr	r0, [r7, #4]
 8014950:	f000 fcb4 	bl	80152bc <USBD_GetStatus>
          break;
 8014954:	e00e      	b.n	8014974 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8014956:	6839      	ldr	r1, [r7, #0]
 8014958:	6878      	ldr	r0, [r7, #4]
 801495a:	f000 fce3 	bl	8015324 <USBD_SetFeature>
          break;
 801495e:	e009      	b.n	8014974 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014960:	6839      	ldr	r1, [r7, #0]
 8014962:	6878      	ldr	r0, [r7, #4]
 8014964:	f000 fd07 	bl	8015376 <USBD_ClrFeature>
          break;
 8014968:	e004      	b.n	8014974 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801496a:	6839      	ldr	r1, [r7, #0]
 801496c:	6878      	ldr	r0, [r7, #4]
 801496e:	f000 fd5e 	bl	801542e <USBD_CtlError>
          break;
 8014972:	bf00      	nop
      }
      break;
 8014974:	e004      	b.n	8014980 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8014976:	6839      	ldr	r1, [r7, #0]
 8014978:	6878      	ldr	r0, [r7, #4]
 801497a:	f000 fd58 	bl	801542e <USBD_CtlError>
      break;
 801497e:	bf00      	nop
  }

  return ret;
 8014980:	7bfb      	ldrb	r3, [r7, #15]
}
 8014982:	4618      	mov	r0, r3
 8014984:	3710      	adds	r7, #16
 8014986:	46bd      	mov	sp, r7
 8014988:	bd80      	pop	{r7, pc}
 801498a:	bf00      	nop

0801498c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801498c:	b580      	push	{r7, lr}
 801498e:	b084      	sub	sp, #16
 8014990:	af00      	add	r7, sp, #0
 8014992:	6078      	str	r0, [r7, #4]
 8014994:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014996:	2300      	movs	r3, #0
 8014998:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801499a:	683b      	ldr	r3, [r7, #0]
 801499c:	781b      	ldrb	r3, [r3, #0]
 801499e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80149a2:	2b40      	cmp	r3, #64	; 0x40
 80149a4:	d005      	beq.n	80149b2 <USBD_StdItfReq+0x26>
 80149a6:	2b40      	cmp	r3, #64	; 0x40
 80149a8:	d852      	bhi.n	8014a50 <USBD_StdItfReq+0xc4>
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d001      	beq.n	80149b2 <USBD_StdItfReq+0x26>
 80149ae:	2b20      	cmp	r3, #32
 80149b0:	d14e      	bne.n	8014a50 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80149b8:	b2db      	uxtb	r3, r3
 80149ba:	3b01      	subs	r3, #1
 80149bc:	2b02      	cmp	r3, #2
 80149be:	d840      	bhi.n	8014a42 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80149c0:	683b      	ldr	r3, [r7, #0]
 80149c2:	889b      	ldrh	r3, [r3, #4]
 80149c4:	b2db      	uxtb	r3, r3
 80149c6:	2b01      	cmp	r3, #1
 80149c8:	d836      	bhi.n	8014a38 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80149ca:	683b      	ldr	r3, [r7, #0]
 80149cc:	889b      	ldrh	r3, [r3, #4]
 80149ce:	b2db      	uxtb	r3, r3
 80149d0:	4619      	mov	r1, r3
 80149d2:	6878      	ldr	r0, [r7, #4]
 80149d4:	f7ff fed9 	bl	801478a <USBD_CoreFindIF>
 80149d8:	4603      	mov	r3, r0
 80149da:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80149dc:	7bbb      	ldrb	r3, [r7, #14]
 80149de:	2bff      	cmp	r3, #255	; 0xff
 80149e0:	d01d      	beq.n	8014a1e <USBD_StdItfReq+0x92>
 80149e2:	7bbb      	ldrb	r3, [r7, #14]
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d11a      	bne.n	8014a1e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80149e8:	7bba      	ldrb	r2, [r7, #14]
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	32ae      	adds	r2, #174	; 0xae
 80149ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80149f2:	689b      	ldr	r3, [r3, #8]
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d00f      	beq.n	8014a18 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80149f8:	7bba      	ldrb	r2, [r7, #14]
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8014a00:	7bba      	ldrb	r2, [r7, #14]
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	32ae      	adds	r2, #174	; 0xae
 8014a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a0a:	689b      	ldr	r3, [r3, #8]
 8014a0c:	6839      	ldr	r1, [r7, #0]
 8014a0e:	6878      	ldr	r0, [r7, #4]
 8014a10:	4798      	blx	r3
 8014a12:	4603      	mov	r3, r0
 8014a14:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8014a16:	e004      	b.n	8014a22 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8014a18:	2303      	movs	r3, #3
 8014a1a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8014a1c:	e001      	b.n	8014a22 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8014a1e:	2303      	movs	r3, #3
 8014a20:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8014a22:	683b      	ldr	r3, [r7, #0]
 8014a24:	88db      	ldrh	r3, [r3, #6]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d110      	bne.n	8014a4c <USBD_StdItfReq+0xc0>
 8014a2a:	7bfb      	ldrb	r3, [r7, #15]
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d10d      	bne.n	8014a4c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8014a30:	6878      	ldr	r0, [r7, #4]
 8014a32:	f000 fdc7 	bl	80155c4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8014a36:	e009      	b.n	8014a4c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8014a38:	6839      	ldr	r1, [r7, #0]
 8014a3a:	6878      	ldr	r0, [r7, #4]
 8014a3c:	f000 fcf7 	bl	801542e <USBD_CtlError>
          break;
 8014a40:	e004      	b.n	8014a4c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8014a42:	6839      	ldr	r1, [r7, #0]
 8014a44:	6878      	ldr	r0, [r7, #4]
 8014a46:	f000 fcf2 	bl	801542e <USBD_CtlError>
          break;
 8014a4a:	e000      	b.n	8014a4e <USBD_StdItfReq+0xc2>
          break;
 8014a4c:	bf00      	nop
      }
      break;
 8014a4e:	e004      	b.n	8014a5a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8014a50:	6839      	ldr	r1, [r7, #0]
 8014a52:	6878      	ldr	r0, [r7, #4]
 8014a54:	f000 fceb 	bl	801542e <USBD_CtlError>
      break;
 8014a58:	bf00      	nop
  }

  return ret;
 8014a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	3710      	adds	r7, #16
 8014a60:	46bd      	mov	sp, r7
 8014a62:	bd80      	pop	{r7, pc}

08014a64 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014a64:	b580      	push	{r7, lr}
 8014a66:	b084      	sub	sp, #16
 8014a68:	af00      	add	r7, sp, #0
 8014a6a:	6078      	str	r0, [r7, #4]
 8014a6c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8014a6e:	2300      	movs	r3, #0
 8014a70:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8014a72:	683b      	ldr	r3, [r7, #0]
 8014a74:	889b      	ldrh	r3, [r3, #4]
 8014a76:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014a78:	683b      	ldr	r3, [r7, #0]
 8014a7a:	781b      	ldrb	r3, [r3, #0]
 8014a7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014a80:	2b40      	cmp	r3, #64	; 0x40
 8014a82:	d007      	beq.n	8014a94 <USBD_StdEPReq+0x30>
 8014a84:	2b40      	cmp	r3, #64	; 0x40
 8014a86:	f200 817f 	bhi.w	8014d88 <USBD_StdEPReq+0x324>
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d02a      	beq.n	8014ae4 <USBD_StdEPReq+0x80>
 8014a8e:	2b20      	cmp	r3, #32
 8014a90:	f040 817a 	bne.w	8014d88 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8014a94:	7bbb      	ldrb	r3, [r7, #14]
 8014a96:	4619      	mov	r1, r3
 8014a98:	6878      	ldr	r0, [r7, #4]
 8014a9a:	f7ff fe83 	bl	80147a4 <USBD_CoreFindEP>
 8014a9e:	4603      	mov	r3, r0
 8014aa0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014aa2:	7b7b      	ldrb	r3, [r7, #13]
 8014aa4:	2bff      	cmp	r3, #255	; 0xff
 8014aa6:	f000 8174 	beq.w	8014d92 <USBD_StdEPReq+0x32e>
 8014aaa:	7b7b      	ldrb	r3, [r7, #13]
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	f040 8170 	bne.w	8014d92 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8014ab2:	7b7a      	ldrb	r2, [r7, #13]
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8014aba:	7b7a      	ldrb	r2, [r7, #13]
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	32ae      	adds	r2, #174	; 0xae
 8014ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ac4:	689b      	ldr	r3, [r3, #8]
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	f000 8163 	beq.w	8014d92 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8014acc:	7b7a      	ldrb	r2, [r7, #13]
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	32ae      	adds	r2, #174	; 0xae
 8014ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ad6:	689b      	ldr	r3, [r3, #8]
 8014ad8:	6839      	ldr	r1, [r7, #0]
 8014ada:	6878      	ldr	r0, [r7, #4]
 8014adc:	4798      	blx	r3
 8014ade:	4603      	mov	r3, r0
 8014ae0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8014ae2:	e156      	b.n	8014d92 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014ae4:	683b      	ldr	r3, [r7, #0]
 8014ae6:	785b      	ldrb	r3, [r3, #1]
 8014ae8:	2b03      	cmp	r3, #3
 8014aea:	d008      	beq.n	8014afe <USBD_StdEPReq+0x9a>
 8014aec:	2b03      	cmp	r3, #3
 8014aee:	f300 8145 	bgt.w	8014d7c <USBD_StdEPReq+0x318>
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	f000 809b 	beq.w	8014c2e <USBD_StdEPReq+0x1ca>
 8014af8:	2b01      	cmp	r3, #1
 8014afa:	d03c      	beq.n	8014b76 <USBD_StdEPReq+0x112>
 8014afc:	e13e      	b.n	8014d7c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014b04:	b2db      	uxtb	r3, r3
 8014b06:	2b02      	cmp	r3, #2
 8014b08:	d002      	beq.n	8014b10 <USBD_StdEPReq+0xac>
 8014b0a:	2b03      	cmp	r3, #3
 8014b0c:	d016      	beq.n	8014b3c <USBD_StdEPReq+0xd8>
 8014b0e:	e02c      	b.n	8014b6a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014b10:	7bbb      	ldrb	r3, [r7, #14]
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d00d      	beq.n	8014b32 <USBD_StdEPReq+0xce>
 8014b16:	7bbb      	ldrb	r3, [r7, #14]
 8014b18:	2b80      	cmp	r3, #128	; 0x80
 8014b1a:	d00a      	beq.n	8014b32 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014b1c:	7bbb      	ldrb	r3, [r7, #14]
 8014b1e:	4619      	mov	r1, r3
 8014b20:	6878      	ldr	r0, [r7, #4]
 8014b22:	f001 f97b 	bl	8015e1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014b26:	2180      	movs	r1, #128	; 0x80
 8014b28:	6878      	ldr	r0, [r7, #4]
 8014b2a:	f001 f977 	bl	8015e1c <USBD_LL_StallEP>
 8014b2e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014b30:	e020      	b.n	8014b74 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8014b32:	6839      	ldr	r1, [r7, #0]
 8014b34:	6878      	ldr	r0, [r7, #4]
 8014b36:	f000 fc7a 	bl	801542e <USBD_CtlError>
              break;
 8014b3a:	e01b      	b.n	8014b74 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014b3c:	683b      	ldr	r3, [r7, #0]
 8014b3e:	885b      	ldrh	r3, [r3, #2]
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d10e      	bne.n	8014b62 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014b44:	7bbb      	ldrb	r3, [r7, #14]
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d00b      	beq.n	8014b62 <USBD_StdEPReq+0xfe>
 8014b4a:	7bbb      	ldrb	r3, [r7, #14]
 8014b4c:	2b80      	cmp	r3, #128	; 0x80
 8014b4e:	d008      	beq.n	8014b62 <USBD_StdEPReq+0xfe>
 8014b50:	683b      	ldr	r3, [r7, #0]
 8014b52:	88db      	ldrh	r3, [r3, #6]
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d104      	bne.n	8014b62 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8014b58:	7bbb      	ldrb	r3, [r7, #14]
 8014b5a:	4619      	mov	r1, r3
 8014b5c:	6878      	ldr	r0, [r7, #4]
 8014b5e:	f001 f95d 	bl	8015e1c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8014b62:	6878      	ldr	r0, [r7, #4]
 8014b64:	f000 fd2e 	bl	80155c4 <USBD_CtlSendStatus>

              break;
 8014b68:	e004      	b.n	8014b74 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8014b6a:	6839      	ldr	r1, [r7, #0]
 8014b6c:	6878      	ldr	r0, [r7, #4]
 8014b6e:	f000 fc5e 	bl	801542e <USBD_CtlError>
              break;
 8014b72:	bf00      	nop
          }
          break;
 8014b74:	e107      	b.n	8014d86 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014b7c:	b2db      	uxtb	r3, r3
 8014b7e:	2b02      	cmp	r3, #2
 8014b80:	d002      	beq.n	8014b88 <USBD_StdEPReq+0x124>
 8014b82:	2b03      	cmp	r3, #3
 8014b84:	d016      	beq.n	8014bb4 <USBD_StdEPReq+0x150>
 8014b86:	e04b      	b.n	8014c20 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014b88:	7bbb      	ldrb	r3, [r7, #14]
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d00d      	beq.n	8014baa <USBD_StdEPReq+0x146>
 8014b8e:	7bbb      	ldrb	r3, [r7, #14]
 8014b90:	2b80      	cmp	r3, #128	; 0x80
 8014b92:	d00a      	beq.n	8014baa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014b94:	7bbb      	ldrb	r3, [r7, #14]
 8014b96:	4619      	mov	r1, r3
 8014b98:	6878      	ldr	r0, [r7, #4]
 8014b9a:	f001 f93f 	bl	8015e1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014b9e:	2180      	movs	r1, #128	; 0x80
 8014ba0:	6878      	ldr	r0, [r7, #4]
 8014ba2:	f001 f93b 	bl	8015e1c <USBD_LL_StallEP>
 8014ba6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014ba8:	e040      	b.n	8014c2c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8014baa:	6839      	ldr	r1, [r7, #0]
 8014bac:	6878      	ldr	r0, [r7, #4]
 8014bae:	f000 fc3e 	bl	801542e <USBD_CtlError>
              break;
 8014bb2:	e03b      	b.n	8014c2c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014bb4:	683b      	ldr	r3, [r7, #0]
 8014bb6:	885b      	ldrh	r3, [r3, #2]
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d136      	bne.n	8014c2a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8014bbc:	7bbb      	ldrb	r3, [r7, #14]
 8014bbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d004      	beq.n	8014bd0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8014bc6:	7bbb      	ldrb	r3, [r7, #14]
 8014bc8:	4619      	mov	r1, r3
 8014bca:	6878      	ldr	r0, [r7, #4]
 8014bcc:	f001 f945 	bl	8015e5a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8014bd0:	6878      	ldr	r0, [r7, #4]
 8014bd2:	f000 fcf7 	bl	80155c4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8014bd6:	7bbb      	ldrb	r3, [r7, #14]
 8014bd8:	4619      	mov	r1, r3
 8014bda:	6878      	ldr	r0, [r7, #4]
 8014bdc:	f7ff fde2 	bl	80147a4 <USBD_CoreFindEP>
 8014be0:	4603      	mov	r3, r0
 8014be2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014be4:	7b7b      	ldrb	r3, [r7, #13]
 8014be6:	2bff      	cmp	r3, #255	; 0xff
 8014be8:	d01f      	beq.n	8014c2a <USBD_StdEPReq+0x1c6>
 8014bea:	7b7b      	ldrb	r3, [r7, #13]
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d11c      	bne.n	8014c2a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8014bf0:	7b7a      	ldrb	r2, [r7, #13]
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8014bf8:	7b7a      	ldrb	r2, [r7, #13]
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	32ae      	adds	r2, #174	; 0xae
 8014bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c02:	689b      	ldr	r3, [r3, #8]
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	d010      	beq.n	8014c2a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8014c08:	7b7a      	ldrb	r2, [r7, #13]
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	32ae      	adds	r2, #174	; 0xae
 8014c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c12:	689b      	ldr	r3, [r3, #8]
 8014c14:	6839      	ldr	r1, [r7, #0]
 8014c16:	6878      	ldr	r0, [r7, #4]
 8014c18:	4798      	blx	r3
 8014c1a:	4603      	mov	r3, r0
 8014c1c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8014c1e:	e004      	b.n	8014c2a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8014c20:	6839      	ldr	r1, [r7, #0]
 8014c22:	6878      	ldr	r0, [r7, #4]
 8014c24:	f000 fc03 	bl	801542e <USBD_CtlError>
              break;
 8014c28:	e000      	b.n	8014c2c <USBD_StdEPReq+0x1c8>
              break;
 8014c2a:	bf00      	nop
          }
          break;
 8014c2c:	e0ab      	b.n	8014d86 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014c34:	b2db      	uxtb	r3, r3
 8014c36:	2b02      	cmp	r3, #2
 8014c38:	d002      	beq.n	8014c40 <USBD_StdEPReq+0x1dc>
 8014c3a:	2b03      	cmp	r3, #3
 8014c3c:	d032      	beq.n	8014ca4 <USBD_StdEPReq+0x240>
 8014c3e:	e097      	b.n	8014d70 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014c40:	7bbb      	ldrb	r3, [r7, #14]
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d007      	beq.n	8014c56 <USBD_StdEPReq+0x1f2>
 8014c46:	7bbb      	ldrb	r3, [r7, #14]
 8014c48:	2b80      	cmp	r3, #128	; 0x80
 8014c4a:	d004      	beq.n	8014c56 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8014c4c:	6839      	ldr	r1, [r7, #0]
 8014c4e:	6878      	ldr	r0, [r7, #4]
 8014c50:	f000 fbed 	bl	801542e <USBD_CtlError>
                break;
 8014c54:	e091      	b.n	8014d7a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014c56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	da0b      	bge.n	8014c76 <USBD_StdEPReq+0x212>
 8014c5e:	7bbb      	ldrb	r3, [r7, #14]
 8014c60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014c64:	4613      	mov	r3, r2
 8014c66:	009b      	lsls	r3, r3, #2
 8014c68:	4413      	add	r3, r2
 8014c6a:	009b      	lsls	r3, r3, #2
 8014c6c:	3310      	adds	r3, #16
 8014c6e:	687a      	ldr	r2, [r7, #4]
 8014c70:	4413      	add	r3, r2
 8014c72:	3304      	adds	r3, #4
 8014c74:	e00b      	b.n	8014c8e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014c76:	7bbb      	ldrb	r3, [r7, #14]
 8014c78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014c7c:	4613      	mov	r3, r2
 8014c7e:	009b      	lsls	r3, r3, #2
 8014c80:	4413      	add	r3, r2
 8014c82:	009b      	lsls	r3, r3, #2
 8014c84:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014c88:	687a      	ldr	r2, [r7, #4]
 8014c8a:	4413      	add	r3, r2
 8014c8c:	3304      	adds	r3, #4
 8014c8e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014c90:	68bb      	ldr	r3, [r7, #8]
 8014c92:	2200      	movs	r2, #0
 8014c94:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014c96:	68bb      	ldr	r3, [r7, #8]
 8014c98:	2202      	movs	r2, #2
 8014c9a:	4619      	mov	r1, r3
 8014c9c:	6878      	ldr	r0, [r7, #4]
 8014c9e:	f000 fc37 	bl	8015510 <USBD_CtlSendData>
              break;
 8014ca2:	e06a      	b.n	8014d7a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8014ca4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	da11      	bge.n	8014cd0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014cac:	7bbb      	ldrb	r3, [r7, #14]
 8014cae:	f003 020f 	and.w	r2, r3, #15
 8014cb2:	6879      	ldr	r1, [r7, #4]
 8014cb4:	4613      	mov	r3, r2
 8014cb6:	009b      	lsls	r3, r3, #2
 8014cb8:	4413      	add	r3, r2
 8014cba:	009b      	lsls	r3, r3, #2
 8014cbc:	440b      	add	r3, r1
 8014cbe:	3324      	adds	r3, #36	; 0x24
 8014cc0:	881b      	ldrh	r3, [r3, #0]
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d117      	bne.n	8014cf6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014cc6:	6839      	ldr	r1, [r7, #0]
 8014cc8:	6878      	ldr	r0, [r7, #4]
 8014cca:	f000 fbb0 	bl	801542e <USBD_CtlError>
                  break;
 8014cce:	e054      	b.n	8014d7a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014cd0:	7bbb      	ldrb	r3, [r7, #14]
 8014cd2:	f003 020f 	and.w	r2, r3, #15
 8014cd6:	6879      	ldr	r1, [r7, #4]
 8014cd8:	4613      	mov	r3, r2
 8014cda:	009b      	lsls	r3, r3, #2
 8014cdc:	4413      	add	r3, r2
 8014cde:	009b      	lsls	r3, r3, #2
 8014ce0:	440b      	add	r3, r1
 8014ce2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014ce6:	881b      	ldrh	r3, [r3, #0]
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d104      	bne.n	8014cf6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014cec:	6839      	ldr	r1, [r7, #0]
 8014cee:	6878      	ldr	r0, [r7, #4]
 8014cf0:	f000 fb9d 	bl	801542e <USBD_CtlError>
                  break;
 8014cf4:	e041      	b.n	8014d7a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014cf6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	da0b      	bge.n	8014d16 <USBD_StdEPReq+0x2b2>
 8014cfe:	7bbb      	ldrb	r3, [r7, #14]
 8014d00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014d04:	4613      	mov	r3, r2
 8014d06:	009b      	lsls	r3, r3, #2
 8014d08:	4413      	add	r3, r2
 8014d0a:	009b      	lsls	r3, r3, #2
 8014d0c:	3310      	adds	r3, #16
 8014d0e:	687a      	ldr	r2, [r7, #4]
 8014d10:	4413      	add	r3, r2
 8014d12:	3304      	adds	r3, #4
 8014d14:	e00b      	b.n	8014d2e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014d16:	7bbb      	ldrb	r3, [r7, #14]
 8014d18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014d1c:	4613      	mov	r3, r2
 8014d1e:	009b      	lsls	r3, r3, #2
 8014d20:	4413      	add	r3, r2
 8014d22:	009b      	lsls	r3, r3, #2
 8014d24:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014d28:	687a      	ldr	r2, [r7, #4]
 8014d2a:	4413      	add	r3, r2
 8014d2c:	3304      	adds	r3, #4
 8014d2e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014d30:	7bbb      	ldrb	r3, [r7, #14]
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d002      	beq.n	8014d3c <USBD_StdEPReq+0x2d8>
 8014d36:	7bbb      	ldrb	r3, [r7, #14]
 8014d38:	2b80      	cmp	r3, #128	; 0x80
 8014d3a:	d103      	bne.n	8014d44 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8014d3c:	68bb      	ldr	r3, [r7, #8]
 8014d3e:	2200      	movs	r2, #0
 8014d40:	601a      	str	r2, [r3, #0]
 8014d42:	e00e      	b.n	8014d62 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014d44:	7bbb      	ldrb	r3, [r7, #14]
 8014d46:	4619      	mov	r1, r3
 8014d48:	6878      	ldr	r0, [r7, #4]
 8014d4a:	f001 f8a5 	bl	8015e98 <USBD_LL_IsStallEP>
 8014d4e:	4603      	mov	r3, r0
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d003      	beq.n	8014d5c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8014d54:	68bb      	ldr	r3, [r7, #8]
 8014d56:	2201      	movs	r2, #1
 8014d58:	601a      	str	r2, [r3, #0]
 8014d5a:	e002      	b.n	8014d62 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8014d5c:	68bb      	ldr	r3, [r7, #8]
 8014d5e:	2200      	movs	r2, #0
 8014d60:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014d62:	68bb      	ldr	r3, [r7, #8]
 8014d64:	2202      	movs	r2, #2
 8014d66:	4619      	mov	r1, r3
 8014d68:	6878      	ldr	r0, [r7, #4]
 8014d6a:	f000 fbd1 	bl	8015510 <USBD_CtlSendData>
              break;
 8014d6e:	e004      	b.n	8014d7a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8014d70:	6839      	ldr	r1, [r7, #0]
 8014d72:	6878      	ldr	r0, [r7, #4]
 8014d74:	f000 fb5b 	bl	801542e <USBD_CtlError>
              break;
 8014d78:	bf00      	nop
          }
          break;
 8014d7a:	e004      	b.n	8014d86 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8014d7c:	6839      	ldr	r1, [r7, #0]
 8014d7e:	6878      	ldr	r0, [r7, #4]
 8014d80:	f000 fb55 	bl	801542e <USBD_CtlError>
          break;
 8014d84:	bf00      	nop
      }
      break;
 8014d86:	e005      	b.n	8014d94 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8014d88:	6839      	ldr	r1, [r7, #0]
 8014d8a:	6878      	ldr	r0, [r7, #4]
 8014d8c:	f000 fb4f 	bl	801542e <USBD_CtlError>
      break;
 8014d90:	e000      	b.n	8014d94 <USBD_StdEPReq+0x330>
      break;
 8014d92:	bf00      	nop
  }

  return ret;
 8014d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d96:	4618      	mov	r0, r3
 8014d98:	3710      	adds	r7, #16
 8014d9a:	46bd      	mov	sp, r7
 8014d9c:	bd80      	pop	{r7, pc}
	...

08014da0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014da0:	b580      	push	{r7, lr}
 8014da2:	b084      	sub	sp, #16
 8014da4:	af00      	add	r7, sp, #0
 8014da6:	6078      	str	r0, [r7, #4]
 8014da8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014daa:	2300      	movs	r3, #0
 8014dac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8014dae:	2300      	movs	r3, #0
 8014db0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014db2:	2300      	movs	r3, #0
 8014db4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8014db6:	683b      	ldr	r3, [r7, #0]
 8014db8:	885b      	ldrh	r3, [r3, #2]
 8014dba:	0a1b      	lsrs	r3, r3, #8
 8014dbc:	b29b      	uxth	r3, r3
 8014dbe:	3b01      	subs	r3, #1
 8014dc0:	2b06      	cmp	r3, #6
 8014dc2:	f200 8128 	bhi.w	8015016 <USBD_GetDescriptor+0x276>
 8014dc6:	a201      	add	r2, pc, #4	; (adr r2, 8014dcc <USBD_GetDescriptor+0x2c>)
 8014dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014dcc:	08014de9 	.word	0x08014de9
 8014dd0:	08014e01 	.word	0x08014e01
 8014dd4:	08014e41 	.word	0x08014e41
 8014dd8:	08015017 	.word	0x08015017
 8014ddc:	08015017 	.word	0x08015017
 8014de0:	08014fb7 	.word	0x08014fb7
 8014de4:	08014fe3 	.word	0x08014fe3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014dee:	681b      	ldr	r3, [r3, #0]
 8014df0:	687a      	ldr	r2, [r7, #4]
 8014df2:	7c12      	ldrb	r2, [r2, #16]
 8014df4:	f107 0108 	add.w	r1, r7, #8
 8014df8:	4610      	mov	r0, r2
 8014dfa:	4798      	blx	r3
 8014dfc:	60f8      	str	r0, [r7, #12]
      break;
 8014dfe:	e112      	b.n	8015026 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	7c1b      	ldrb	r3, [r3, #16]
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d10d      	bne.n	8014e24 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e10:	f107 0208 	add.w	r2, r7, #8
 8014e14:	4610      	mov	r0, r2
 8014e16:	4798      	blx	r3
 8014e18:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	3301      	adds	r3, #1
 8014e1e:	2202      	movs	r2, #2
 8014e20:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8014e22:	e100      	b.n	8015026 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e2c:	f107 0208 	add.w	r2, r7, #8
 8014e30:	4610      	mov	r0, r2
 8014e32:	4798      	blx	r3
 8014e34:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014e36:	68fb      	ldr	r3, [r7, #12]
 8014e38:	3301      	adds	r3, #1
 8014e3a:	2202      	movs	r2, #2
 8014e3c:	701a      	strb	r2, [r3, #0]
      break;
 8014e3e:	e0f2      	b.n	8015026 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8014e40:	683b      	ldr	r3, [r7, #0]
 8014e42:	885b      	ldrh	r3, [r3, #2]
 8014e44:	b2db      	uxtb	r3, r3
 8014e46:	2b05      	cmp	r3, #5
 8014e48:	f200 80ac 	bhi.w	8014fa4 <USBD_GetDescriptor+0x204>
 8014e4c:	a201      	add	r2, pc, #4	; (adr r2, 8014e54 <USBD_GetDescriptor+0xb4>)
 8014e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e52:	bf00      	nop
 8014e54:	08014e6d 	.word	0x08014e6d
 8014e58:	08014ea1 	.word	0x08014ea1
 8014e5c:	08014ed5 	.word	0x08014ed5
 8014e60:	08014f09 	.word	0x08014f09
 8014e64:	08014f3d 	.word	0x08014f3d
 8014e68:	08014f71 	.word	0x08014f71
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014e72:	685b      	ldr	r3, [r3, #4]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d00b      	beq.n	8014e90 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014e7e:	685b      	ldr	r3, [r3, #4]
 8014e80:	687a      	ldr	r2, [r7, #4]
 8014e82:	7c12      	ldrb	r2, [r2, #16]
 8014e84:	f107 0108 	add.w	r1, r7, #8
 8014e88:	4610      	mov	r0, r2
 8014e8a:	4798      	blx	r3
 8014e8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014e8e:	e091      	b.n	8014fb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014e90:	6839      	ldr	r1, [r7, #0]
 8014e92:	6878      	ldr	r0, [r7, #4]
 8014e94:	f000 facb 	bl	801542e <USBD_CtlError>
            err++;
 8014e98:	7afb      	ldrb	r3, [r7, #11]
 8014e9a:	3301      	adds	r3, #1
 8014e9c:	72fb      	strb	r3, [r7, #11]
          break;
 8014e9e:	e089      	b.n	8014fb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014ea6:	689b      	ldr	r3, [r3, #8]
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d00b      	beq.n	8014ec4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014eb2:	689b      	ldr	r3, [r3, #8]
 8014eb4:	687a      	ldr	r2, [r7, #4]
 8014eb6:	7c12      	ldrb	r2, [r2, #16]
 8014eb8:	f107 0108 	add.w	r1, r7, #8
 8014ebc:	4610      	mov	r0, r2
 8014ebe:	4798      	blx	r3
 8014ec0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014ec2:	e077      	b.n	8014fb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014ec4:	6839      	ldr	r1, [r7, #0]
 8014ec6:	6878      	ldr	r0, [r7, #4]
 8014ec8:	f000 fab1 	bl	801542e <USBD_CtlError>
            err++;
 8014ecc:	7afb      	ldrb	r3, [r7, #11]
 8014ece:	3301      	adds	r3, #1
 8014ed0:	72fb      	strb	r3, [r7, #11]
          break;
 8014ed2:	e06f      	b.n	8014fb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014eda:	68db      	ldr	r3, [r3, #12]
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d00b      	beq.n	8014ef8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014ee6:	68db      	ldr	r3, [r3, #12]
 8014ee8:	687a      	ldr	r2, [r7, #4]
 8014eea:	7c12      	ldrb	r2, [r2, #16]
 8014eec:	f107 0108 	add.w	r1, r7, #8
 8014ef0:	4610      	mov	r0, r2
 8014ef2:	4798      	blx	r3
 8014ef4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014ef6:	e05d      	b.n	8014fb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014ef8:	6839      	ldr	r1, [r7, #0]
 8014efa:	6878      	ldr	r0, [r7, #4]
 8014efc:	f000 fa97 	bl	801542e <USBD_CtlError>
            err++;
 8014f00:	7afb      	ldrb	r3, [r7, #11]
 8014f02:	3301      	adds	r3, #1
 8014f04:	72fb      	strb	r3, [r7, #11]
          break;
 8014f06:	e055      	b.n	8014fb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014f0e:	691b      	ldr	r3, [r3, #16]
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d00b      	beq.n	8014f2c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014f1a:	691b      	ldr	r3, [r3, #16]
 8014f1c:	687a      	ldr	r2, [r7, #4]
 8014f1e:	7c12      	ldrb	r2, [r2, #16]
 8014f20:	f107 0108 	add.w	r1, r7, #8
 8014f24:	4610      	mov	r0, r2
 8014f26:	4798      	blx	r3
 8014f28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014f2a:	e043      	b.n	8014fb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014f2c:	6839      	ldr	r1, [r7, #0]
 8014f2e:	6878      	ldr	r0, [r7, #4]
 8014f30:	f000 fa7d 	bl	801542e <USBD_CtlError>
            err++;
 8014f34:	7afb      	ldrb	r3, [r7, #11]
 8014f36:	3301      	adds	r3, #1
 8014f38:	72fb      	strb	r3, [r7, #11]
          break;
 8014f3a:	e03b      	b.n	8014fb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014f42:	695b      	ldr	r3, [r3, #20]
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d00b      	beq.n	8014f60 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014f4e:	695b      	ldr	r3, [r3, #20]
 8014f50:	687a      	ldr	r2, [r7, #4]
 8014f52:	7c12      	ldrb	r2, [r2, #16]
 8014f54:	f107 0108 	add.w	r1, r7, #8
 8014f58:	4610      	mov	r0, r2
 8014f5a:	4798      	blx	r3
 8014f5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014f5e:	e029      	b.n	8014fb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014f60:	6839      	ldr	r1, [r7, #0]
 8014f62:	6878      	ldr	r0, [r7, #4]
 8014f64:	f000 fa63 	bl	801542e <USBD_CtlError>
            err++;
 8014f68:	7afb      	ldrb	r3, [r7, #11]
 8014f6a:	3301      	adds	r3, #1
 8014f6c:	72fb      	strb	r3, [r7, #11]
          break;
 8014f6e:	e021      	b.n	8014fb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014f76:	699b      	ldr	r3, [r3, #24]
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d00b      	beq.n	8014f94 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014f82:	699b      	ldr	r3, [r3, #24]
 8014f84:	687a      	ldr	r2, [r7, #4]
 8014f86:	7c12      	ldrb	r2, [r2, #16]
 8014f88:	f107 0108 	add.w	r1, r7, #8
 8014f8c:	4610      	mov	r0, r2
 8014f8e:	4798      	blx	r3
 8014f90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014f92:	e00f      	b.n	8014fb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014f94:	6839      	ldr	r1, [r7, #0]
 8014f96:	6878      	ldr	r0, [r7, #4]
 8014f98:	f000 fa49 	bl	801542e <USBD_CtlError>
            err++;
 8014f9c:	7afb      	ldrb	r3, [r7, #11]
 8014f9e:	3301      	adds	r3, #1
 8014fa0:	72fb      	strb	r3, [r7, #11]
          break;
 8014fa2:	e007      	b.n	8014fb4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014fa4:	6839      	ldr	r1, [r7, #0]
 8014fa6:	6878      	ldr	r0, [r7, #4]
 8014fa8:	f000 fa41 	bl	801542e <USBD_CtlError>
          err++;
 8014fac:	7afb      	ldrb	r3, [r7, #11]
 8014fae:	3301      	adds	r3, #1
 8014fb0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8014fb2:	bf00      	nop
      }
      break;
 8014fb4:	e037      	b.n	8015026 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	7c1b      	ldrb	r3, [r3, #16]
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d109      	bne.n	8014fd2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014fc6:	f107 0208 	add.w	r2, r7, #8
 8014fca:	4610      	mov	r0, r2
 8014fcc:	4798      	blx	r3
 8014fce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014fd0:	e029      	b.n	8015026 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8014fd2:	6839      	ldr	r1, [r7, #0]
 8014fd4:	6878      	ldr	r0, [r7, #4]
 8014fd6:	f000 fa2a 	bl	801542e <USBD_CtlError>
        err++;
 8014fda:	7afb      	ldrb	r3, [r7, #11]
 8014fdc:	3301      	adds	r3, #1
 8014fde:	72fb      	strb	r3, [r7, #11]
      break;
 8014fe0:	e021      	b.n	8015026 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	7c1b      	ldrb	r3, [r3, #16]
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d10d      	bne.n	8015006 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ff2:	f107 0208 	add.w	r2, r7, #8
 8014ff6:	4610      	mov	r0, r2
 8014ff8:	4798      	blx	r3
 8014ffa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014ffc:	68fb      	ldr	r3, [r7, #12]
 8014ffe:	3301      	adds	r3, #1
 8015000:	2207      	movs	r2, #7
 8015002:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015004:	e00f      	b.n	8015026 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015006:	6839      	ldr	r1, [r7, #0]
 8015008:	6878      	ldr	r0, [r7, #4]
 801500a:	f000 fa10 	bl	801542e <USBD_CtlError>
        err++;
 801500e:	7afb      	ldrb	r3, [r7, #11]
 8015010:	3301      	adds	r3, #1
 8015012:	72fb      	strb	r3, [r7, #11]
      break;
 8015014:	e007      	b.n	8015026 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8015016:	6839      	ldr	r1, [r7, #0]
 8015018:	6878      	ldr	r0, [r7, #4]
 801501a:	f000 fa08 	bl	801542e <USBD_CtlError>
      err++;
 801501e:	7afb      	ldrb	r3, [r7, #11]
 8015020:	3301      	adds	r3, #1
 8015022:	72fb      	strb	r3, [r7, #11]
      break;
 8015024:	bf00      	nop
  }

  if (err != 0U)
 8015026:	7afb      	ldrb	r3, [r7, #11]
 8015028:	2b00      	cmp	r3, #0
 801502a:	d11e      	bne.n	801506a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 801502c:	683b      	ldr	r3, [r7, #0]
 801502e:	88db      	ldrh	r3, [r3, #6]
 8015030:	2b00      	cmp	r3, #0
 8015032:	d016      	beq.n	8015062 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8015034:	893b      	ldrh	r3, [r7, #8]
 8015036:	2b00      	cmp	r3, #0
 8015038:	d00e      	beq.n	8015058 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801503a:	683b      	ldr	r3, [r7, #0]
 801503c:	88da      	ldrh	r2, [r3, #6]
 801503e:	893b      	ldrh	r3, [r7, #8]
 8015040:	4293      	cmp	r3, r2
 8015042:	bf28      	it	cs
 8015044:	4613      	movcs	r3, r2
 8015046:	b29b      	uxth	r3, r3
 8015048:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801504a:	893b      	ldrh	r3, [r7, #8]
 801504c:	461a      	mov	r2, r3
 801504e:	68f9      	ldr	r1, [r7, #12]
 8015050:	6878      	ldr	r0, [r7, #4]
 8015052:	f000 fa5d 	bl	8015510 <USBD_CtlSendData>
 8015056:	e009      	b.n	801506c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015058:	6839      	ldr	r1, [r7, #0]
 801505a:	6878      	ldr	r0, [r7, #4]
 801505c:	f000 f9e7 	bl	801542e <USBD_CtlError>
 8015060:	e004      	b.n	801506c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8015062:	6878      	ldr	r0, [r7, #4]
 8015064:	f000 faae 	bl	80155c4 <USBD_CtlSendStatus>
 8015068:	e000      	b.n	801506c <USBD_GetDescriptor+0x2cc>
    return;
 801506a:	bf00      	nop
  }
}
 801506c:	3710      	adds	r7, #16
 801506e:	46bd      	mov	sp, r7
 8015070:	bd80      	pop	{r7, pc}
 8015072:	bf00      	nop

08015074 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015074:	b580      	push	{r7, lr}
 8015076:	b084      	sub	sp, #16
 8015078:	af00      	add	r7, sp, #0
 801507a:	6078      	str	r0, [r7, #4]
 801507c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801507e:	683b      	ldr	r3, [r7, #0]
 8015080:	889b      	ldrh	r3, [r3, #4]
 8015082:	2b00      	cmp	r3, #0
 8015084:	d131      	bne.n	80150ea <USBD_SetAddress+0x76>
 8015086:	683b      	ldr	r3, [r7, #0]
 8015088:	88db      	ldrh	r3, [r3, #6]
 801508a:	2b00      	cmp	r3, #0
 801508c:	d12d      	bne.n	80150ea <USBD_SetAddress+0x76>
 801508e:	683b      	ldr	r3, [r7, #0]
 8015090:	885b      	ldrh	r3, [r3, #2]
 8015092:	2b7f      	cmp	r3, #127	; 0x7f
 8015094:	d829      	bhi.n	80150ea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015096:	683b      	ldr	r3, [r7, #0]
 8015098:	885b      	ldrh	r3, [r3, #2]
 801509a:	b2db      	uxtb	r3, r3
 801509c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80150a0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80150a8:	b2db      	uxtb	r3, r3
 80150aa:	2b03      	cmp	r3, #3
 80150ac:	d104      	bne.n	80150b8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80150ae:	6839      	ldr	r1, [r7, #0]
 80150b0:	6878      	ldr	r0, [r7, #4]
 80150b2:	f000 f9bc 	bl	801542e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80150b6:	e01d      	b.n	80150f4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	7bfa      	ldrb	r2, [r7, #15]
 80150bc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80150c0:	7bfb      	ldrb	r3, [r7, #15]
 80150c2:	4619      	mov	r1, r3
 80150c4:	6878      	ldr	r0, [r7, #4]
 80150c6:	f000 ff13 	bl	8015ef0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80150ca:	6878      	ldr	r0, [r7, #4]
 80150cc:	f000 fa7a 	bl	80155c4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80150d0:	7bfb      	ldrb	r3, [r7, #15]
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d004      	beq.n	80150e0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	2202      	movs	r2, #2
 80150da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80150de:	e009      	b.n	80150f4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	2201      	movs	r2, #1
 80150e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80150e8:	e004      	b.n	80150f4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80150ea:	6839      	ldr	r1, [r7, #0]
 80150ec:	6878      	ldr	r0, [r7, #4]
 80150ee:	f000 f99e 	bl	801542e <USBD_CtlError>
  }
}
 80150f2:	bf00      	nop
 80150f4:	bf00      	nop
 80150f6:	3710      	adds	r7, #16
 80150f8:	46bd      	mov	sp, r7
 80150fa:	bd80      	pop	{r7, pc}

080150fc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80150fc:	b580      	push	{r7, lr}
 80150fe:	b084      	sub	sp, #16
 8015100:	af00      	add	r7, sp, #0
 8015102:	6078      	str	r0, [r7, #4]
 8015104:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015106:	2300      	movs	r3, #0
 8015108:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801510a:	683b      	ldr	r3, [r7, #0]
 801510c:	885b      	ldrh	r3, [r3, #2]
 801510e:	b2da      	uxtb	r2, r3
 8015110:	4b4e      	ldr	r3, [pc, #312]	; (801524c <USBD_SetConfig+0x150>)
 8015112:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015114:	4b4d      	ldr	r3, [pc, #308]	; (801524c <USBD_SetConfig+0x150>)
 8015116:	781b      	ldrb	r3, [r3, #0]
 8015118:	2b01      	cmp	r3, #1
 801511a:	d905      	bls.n	8015128 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801511c:	6839      	ldr	r1, [r7, #0]
 801511e:	6878      	ldr	r0, [r7, #4]
 8015120:	f000 f985 	bl	801542e <USBD_CtlError>
    return USBD_FAIL;
 8015124:	2303      	movs	r3, #3
 8015126:	e08c      	b.n	8015242 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801512e:	b2db      	uxtb	r3, r3
 8015130:	2b02      	cmp	r3, #2
 8015132:	d002      	beq.n	801513a <USBD_SetConfig+0x3e>
 8015134:	2b03      	cmp	r3, #3
 8015136:	d029      	beq.n	801518c <USBD_SetConfig+0x90>
 8015138:	e075      	b.n	8015226 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801513a:	4b44      	ldr	r3, [pc, #272]	; (801524c <USBD_SetConfig+0x150>)
 801513c:	781b      	ldrb	r3, [r3, #0]
 801513e:	2b00      	cmp	r3, #0
 8015140:	d020      	beq.n	8015184 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8015142:	4b42      	ldr	r3, [pc, #264]	; (801524c <USBD_SetConfig+0x150>)
 8015144:	781b      	ldrb	r3, [r3, #0]
 8015146:	461a      	mov	r2, r3
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801514c:	4b3f      	ldr	r3, [pc, #252]	; (801524c <USBD_SetConfig+0x150>)
 801514e:	781b      	ldrb	r3, [r3, #0]
 8015150:	4619      	mov	r1, r3
 8015152:	6878      	ldr	r0, [r7, #4]
 8015154:	f7fe ffe7 	bl	8014126 <USBD_SetClassConfig>
 8015158:	4603      	mov	r3, r0
 801515a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801515c:	7bfb      	ldrb	r3, [r7, #15]
 801515e:	2b00      	cmp	r3, #0
 8015160:	d008      	beq.n	8015174 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8015162:	6839      	ldr	r1, [r7, #0]
 8015164:	6878      	ldr	r0, [r7, #4]
 8015166:	f000 f962 	bl	801542e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	2202      	movs	r2, #2
 801516e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015172:	e065      	b.n	8015240 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015174:	6878      	ldr	r0, [r7, #4]
 8015176:	f000 fa25 	bl	80155c4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	2203      	movs	r2, #3
 801517e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015182:	e05d      	b.n	8015240 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015184:	6878      	ldr	r0, [r7, #4]
 8015186:	f000 fa1d 	bl	80155c4 <USBD_CtlSendStatus>
      break;
 801518a:	e059      	b.n	8015240 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801518c:	4b2f      	ldr	r3, [pc, #188]	; (801524c <USBD_SetConfig+0x150>)
 801518e:	781b      	ldrb	r3, [r3, #0]
 8015190:	2b00      	cmp	r3, #0
 8015192:	d112      	bne.n	80151ba <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	2202      	movs	r2, #2
 8015198:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801519c:	4b2b      	ldr	r3, [pc, #172]	; (801524c <USBD_SetConfig+0x150>)
 801519e:	781b      	ldrb	r3, [r3, #0]
 80151a0:	461a      	mov	r2, r3
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80151a6:	4b29      	ldr	r3, [pc, #164]	; (801524c <USBD_SetConfig+0x150>)
 80151a8:	781b      	ldrb	r3, [r3, #0]
 80151aa:	4619      	mov	r1, r3
 80151ac:	6878      	ldr	r0, [r7, #4]
 80151ae:	f7fe ffd6 	bl	801415e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80151b2:	6878      	ldr	r0, [r7, #4]
 80151b4:	f000 fa06 	bl	80155c4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80151b8:	e042      	b.n	8015240 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80151ba:	4b24      	ldr	r3, [pc, #144]	; (801524c <USBD_SetConfig+0x150>)
 80151bc:	781b      	ldrb	r3, [r3, #0]
 80151be:	461a      	mov	r2, r3
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	685b      	ldr	r3, [r3, #4]
 80151c4:	429a      	cmp	r2, r3
 80151c6:	d02a      	beq.n	801521e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	685b      	ldr	r3, [r3, #4]
 80151cc:	b2db      	uxtb	r3, r3
 80151ce:	4619      	mov	r1, r3
 80151d0:	6878      	ldr	r0, [r7, #4]
 80151d2:	f7fe ffc4 	bl	801415e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80151d6:	4b1d      	ldr	r3, [pc, #116]	; (801524c <USBD_SetConfig+0x150>)
 80151d8:	781b      	ldrb	r3, [r3, #0]
 80151da:	461a      	mov	r2, r3
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80151e0:	4b1a      	ldr	r3, [pc, #104]	; (801524c <USBD_SetConfig+0x150>)
 80151e2:	781b      	ldrb	r3, [r3, #0]
 80151e4:	4619      	mov	r1, r3
 80151e6:	6878      	ldr	r0, [r7, #4]
 80151e8:	f7fe ff9d 	bl	8014126 <USBD_SetClassConfig>
 80151ec:	4603      	mov	r3, r0
 80151ee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80151f0:	7bfb      	ldrb	r3, [r7, #15]
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d00f      	beq.n	8015216 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80151f6:	6839      	ldr	r1, [r7, #0]
 80151f8:	6878      	ldr	r0, [r7, #4]
 80151fa:	f000 f918 	bl	801542e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	685b      	ldr	r3, [r3, #4]
 8015202:	b2db      	uxtb	r3, r3
 8015204:	4619      	mov	r1, r3
 8015206:	6878      	ldr	r0, [r7, #4]
 8015208:	f7fe ffa9 	bl	801415e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	2202      	movs	r2, #2
 8015210:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015214:	e014      	b.n	8015240 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015216:	6878      	ldr	r0, [r7, #4]
 8015218:	f000 f9d4 	bl	80155c4 <USBD_CtlSendStatus>
      break;
 801521c:	e010      	b.n	8015240 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801521e:	6878      	ldr	r0, [r7, #4]
 8015220:	f000 f9d0 	bl	80155c4 <USBD_CtlSendStatus>
      break;
 8015224:	e00c      	b.n	8015240 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8015226:	6839      	ldr	r1, [r7, #0]
 8015228:	6878      	ldr	r0, [r7, #4]
 801522a:	f000 f900 	bl	801542e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801522e:	4b07      	ldr	r3, [pc, #28]	; (801524c <USBD_SetConfig+0x150>)
 8015230:	781b      	ldrb	r3, [r3, #0]
 8015232:	4619      	mov	r1, r3
 8015234:	6878      	ldr	r0, [r7, #4]
 8015236:	f7fe ff92 	bl	801415e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801523a:	2303      	movs	r3, #3
 801523c:	73fb      	strb	r3, [r7, #15]
      break;
 801523e:	bf00      	nop
  }

  return ret;
 8015240:	7bfb      	ldrb	r3, [r7, #15]
}
 8015242:	4618      	mov	r0, r3
 8015244:	3710      	adds	r7, #16
 8015246:	46bd      	mov	sp, r7
 8015248:	bd80      	pop	{r7, pc}
 801524a:	bf00      	nop
 801524c:	2000113c 	.word	0x2000113c

08015250 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015250:	b580      	push	{r7, lr}
 8015252:	b082      	sub	sp, #8
 8015254:	af00      	add	r7, sp, #0
 8015256:	6078      	str	r0, [r7, #4]
 8015258:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801525a:	683b      	ldr	r3, [r7, #0]
 801525c:	88db      	ldrh	r3, [r3, #6]
 801525e:	2b01      	cmp	r3, #1
 8015260:	d004      	beq.n	801526c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8015262:	6839      	ldr	r1, [r7, #0]
 8015264:	6878      	ldr	r0, [r7, #4]
 8015266:	f000 f8e2 	bl	801542e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801526a:	e023      	b.n	80152b4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015272:	b2db      	uxtb	r3, r3
 8015274:	2b02      	cmp	r3, #2
 8015276:	dc02      	bgt.n	801527e <USBD_GetConfig+0x2e>
 8015278:	2b00      	cmp	r3, #0
 801527a:	dc03      	bgt.n	8015284 <USBD_GetConfig+0x34>
 801527c:	e015      	b.n	80152aa <USBD_GetConfig+0x5a>
 801527e:	2b03      	cmp	r3, #3
 8015280:	d00b      	beq.n	801529a <USBD_GetConfig+0x4a>
 8015282:	e012      	b.n	80152aa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	2200      	movs	r2, #0
 8015288:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	3308      	adds	r3, #8
 801528e:	2201      	movs	r2, #1
 8015290:	4619      	mov	r1, r3
 8015292:	6878      	ldr	r0, [r7, #4]
 8015294:	f000 f93c 	bl	8015510 <USBD_CtlSendData>
        break;
 8015298:	e00c      	b.n	80152b4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	3304      	adds	r3, #4
 801529e:	2201      	movs	r2, #1
 80152a0:	4619      	mov	r1, r3
 80152a2:	6878      	ldr	r0, [r7, #4]
 80152a4:	f000 f934 	bl	8015510 <USBD_CtlSendData>
        break;
 80152a8:	e004      	b.n	80152b4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80152aa:	6839      	ldr	r1, [r7, #0]
 80152ac:	6878      	ldr	r0, [r7, #4]
 80152ae:	f000 f8be 	bl	801542e <USBD_CtlError>
        break;
 80152b2:	bf00      	nop
}
 80152b4:	bf00      	nop
 80152b6:	3708      	adds	r7, #8
 80152b8:	46bd      	mov	sp, r7
 80152ba:	bd80      	pop	{r7, pc}

080152bc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80152bc:	b580      	push	{r7, lr}
 80152be:	b082      	sub	sp, #8
 80152c0:	af00      	add	r7, sp, #0
 80152c2:	6078      	str	r0, [r7, #4]
 80152c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80152cc:	b2db      	uxtb	r3, r3
 80152ce:	3b01      	subs	r3, #1
 80152d0:	2b02      	cmp	r3, #2
 80152d2:	d81e      	bhi.n	8015312 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80152d4:	683b      	ldr	r3, [r7, #0]
 80152d6:	88db      	ldrh	r3, [r3, #6]
 80152d8:	2b02      	cmp	r3, #2
 80152da:	d004      	beq.n	80152e6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80152dc:	6839      	ldr	r1, [r7, #0]
 80152de:	6878      	ldr	r0, [r7, #4]
 80152e0:	f000 f8a5 	bl	801542e <USBD_CtlError>
        break;
 80152e4:	e01a      	b.n	801531c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	2201      	movs	r2, #1
 80152ea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d005      	beq.n	8015302 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	68db      	ldr	r3, [r3, #12]
 80152fa:	f043 0202 	orr.w	r2, r3, #2
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	330c      	adds	r3, #12
 8015306:	2202      	movs	r2, #2
 8015308:	4619      	mov	r1, r3
 801530a:	6878      	ldr	r0, [r7, #4]
 801530c:	f000 f900 	bl	8015510 <USBD_CtlSendData>
      break;
 8015310:	e004      	b.n	801531c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8015312:	6839      	ldr	r1, [r7, #0]
 8015314:	6878      	ldr	r0, [r7, #4]
 8015316:	f000 f88a 	bl	801542e <USBD_CtlError>
      break;
 801531a:	bf00      	nop
  }
}
 801531c:	bf00      	nop
 801531e:	3708      	adds	r7, #8
 8015320:	46bd      	mov	sp, r7
 8015322:	bd80      	pop	{r7, pc}

08015324 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015324:	b580      	push	{r7, lr}
 8015326:	b082      	sub	sp, #8
 8015328:	af00      	add	r7, sp, #0
 801532a:	6078      	str	r0, [r7, #4]
 801532c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801532e:	683b      	ldr	r3, [r7, #0]
 8015330:	885b      	ldrh	r3, [r3, #2]
 8015332:	2b01      	cmp	r3, #1
 8015334:	d107      	bne.n	8015346 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	2201      	movs	r2, #1
 801533a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801533e:	6878      	ldr	r0, [r7, #4]
 8015340:	f000 f940 	bl	80155c4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8015344:	e013      	b.n	801536e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8015346:	683b      	ldr	r3, [r7, #0]
 8015348:	885b      	ldrh	r3, [r3, #2]
 801534a:	2b02      	cmp	r3, #2
 801534c:	d10b      	bne.n	8015366 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 801534e:	683b      	ldr	r3, [r7, #0]
 8015350:	889b      	ldrh	r3, [r3, #4]
 8015352:	0a1b      	lsrs	r3, r3, #8
 8015354:	b29b      	uxth	r3, r3
 8015356:	b2da      	uxtb	r2, r3
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801535e:	6878      	ldr	r0, [r7, #4]
 8015360:	f000 f930 	bl	80155c4 <USBD_CtlSendStatus>
}
 8015364:	e003      	b.n	801536e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8015366:	6839      	ldr	r1, [r7, #0]
 8015368:	6878      	ldr	r0, [r7, #4]
 801536a:	f000 f860 	bl	801542e <USBD_CtlError>
}
 801536e:	bf00      	nop
 8015370:	3708      	adds	r7, #8
 8015372:	46bd      	mov	sp, r7
 8015374:	bd80      	pop	{r7, pc}

08015376 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015376:	b580      	push	{r7, lr}
 8015378:	b082      	sub	sp, #8
 801537a:	af00      	add	r7, sp, #0
 801537c:	6078      	str	r0, [r7, #4]
 801537e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015386:	b2db      	uxtb	r3, r3
 8015388:	3b01      	subs	r3, #1
 801538a:	2b02      	cmp	r3, #2
 801538c:	d80b      	bhi.n	80153a6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801538e:	683b      	ldr	r3, [r7, #0]
 8015390:	885b      	ldrh	r3, [r3, #2]
 8015392:	2b01      	cmp	r3, #1
 8015394:	d10c      	bne.n	80153b0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	2200      	movs	r2, #0
 801539a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801539e:	6878      	ldr	r0, [r7, #4]
 80153a0:	f000 f910 	bl	80155c4 <USBD_CtlSendStatus>
      }
      break;
 80153a4:	e004      	b.n	80153b0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80153a6:	6839      	ldr	r1, [r7, #0]
 80153a8:	6878      	ldr	r0, [r7, #4]
 80153aa:	f000 f840 	bl	801542e <USBD_CtlError>
      break;
 80153ae:	e000      	b.n	80153b2 <USBD_ClrFeature+0x3c>
      break;
 80153b0:	bf00      	nop
  }
}
 80153b2:	bf00      	nop
 80153b4:	3708      	adds	r7, #8
 80153b6:	46bd      	mov	sp, r7
 80153b8:	bd80      	pop	{r7, pc}

080153ba <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80153ba:	b580      	push	{r7, lr}
 80153bc:	b084      	sub	sp, #16
 80153be:	af00      	add	r7, sp, #0
 80153c0:	6078      	str	r0, [r7, #4]
 80153c2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80153c4:	683b      	ldr	r3, [r7, #0]
 80153c6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80153c8:	68fb      	ldr	r3, [r7, #12]
 80153ca:	781a      	ldrb	r2, [r3, #0]
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80153d0:	68fb      	ldr	r3, [r7, #12]
 80153d2:	3301      	adds	r3, #1
 80153d4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	781a      	ldrb	r2, [r3, #0]
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	3301      	adds	r3, #1
 80153e2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80153e4:	68f8      	ldr	r0, [r7, #12]
 80153e6:	f7ff fa41 	bl	801486c <SWAPBYTE>
 80153ea:	4603      	mov	r3, r0
 80153ec:	461a      	mov	r2, r3
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80153f2:	68fb      	ldr	r3, [r7, #12]
 80153f4:	3301      	adds	r3, #1
 80153f6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	3301      	adds	r3, #1
 80153fc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80153fe:	68f8      	ldr	r0, [r7, #12]
 8015400:	f7ff fa34 	bl	801486c <SWAPBYTE>
 8015404:	4603      	mov	r3, r0
 8015406:	461a      	mov	r2, r3
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	3301      	adds	r3, #1
 8015410:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015412:	68fb      	ldr	r3, [r7, #12]
 8015414:	3301      	adds	r3, #1
 8015416:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8015418:	68f8      	ldr	r0, [r7, #12]
 801541a:	f7ff fa27 	bl	801486c <SWAPBYTE>
 801541e:	4603      	mov	r3, r0
 8015420:	461a      	mov	r2, r3
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	80da      	strh	r2, [r3, #6]
}
 8015426:	bf00      	nop
 8015428:	3710      	adds	r7, #16
 801542a:	46bd      	mov	sp, r7
 801542c:	bd80      	pop	{r7, pc}

0801542e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801542e:	b580      	push	{r7, lr}
 8015430:	b082      	sub	sp, #8
 8015432:	af00      	add	r7, sp, #0
 8015434:	6078      	str	r0, [r7, #4]
 8015436:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8015438:	2180      	movs	r1, #128	; 0x80
 801543a:	6878      	ldr	r0, [r7, #4]
 801543c:	f000 fcee 	bl	8015e1c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8015440:	2100      	movs	r1, #0
 8015442:	6878      	ldr	r0, [r7, #4]
 8015444:	f000 fcea 	bl	8015e1c <USBD_LL_StallEP>
}
 8015448:	bf00      	nop
 801544a:	3708      	adds	r7, #8
 801544c:	46bd      	mov	sp, r7
 801544e:	bd80      	pop	{r7, pc}

08015450 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8015450:	b580      	push	{r7, lr}
 8015452:	b086      	sub	sp, #24
 8015454:	af00      	add	r7, sp, #0
 8015456:	60f8      	str	r0, [r7, #12]
 8015458:	60b9      	str	r1, [r7, #8]
 801545a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801545c:	2300      	movs	r3, #0
 801545e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8015460:	68fb      	ldr	r3, [r7, #12]
 8015462:	2b00      	cmp	r3, #0
 8015464:	d036      	beq.n	80154d4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8015466:	68fb      	ldr	r3, [r7, #12]
 8015468:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801546a:	6938      	ldr	r0, [r7, #16]
 801546c:	f000 f836 	bl	80154dc <USBD_GetLen>
 8015470:	4603      	mov	r3, r0
 8015472:	3301      	adds	r3, #1
 8015474:	b29b      	uxth	r3, r3
 8015476:	005b      	lsls	r3, r3, #1
 8015478:	b29a      	uxth	r2, r3
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801547e:	7dfb      	ldrb	r3, [r7, #23]
 8015480:	68ba      	ldr	r2, [r7, #8]
 8015482:	4413      	add	r3, r2
 8015484:	687a      	ldr	r2, [r7, #4]
 8015486:	7812      	ldrb	r2, [r2, #0]
 8015488:	701a      	strb	r2, [r3, #0]
  idx++;
 801548a:	7dfb      	ldrb	r3, [r7, #23]
 801548c:	3301      	adds	r3, #1
 801548e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8015490:	7dfb      	ldrb	r3, [r7, #23]
 8015492:	68ba      	ldr	r2, [r7, #8]
 8015494:	4413      	add	r3, r2
 8015496:	2203      	movs	r2, #3
 8015498:	701a      	strb	r2, [r3, #0]
  idx++;
 801549a:	7dfb      	ldrb	r3, [r7, #23]
 801549c:	3301      	adds	r3, #1
 801549e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80154a0:	e013      	b.n	80154ca <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80154a2:	7dfb      	ldrb	r3, [r7, #23]
 80154a4:	68ba      	ldr	r2, [r7, #8]
 80154a6:	4413      	add	r3, r2
 80154a8:	693a      	ldr	r2, [r7, #16]
 80154aa:	7812      	ldrb	r2, [r2, #0]
 80154ac:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80154ae:	693b      	ldr	r3, [r7, #16]
 80154b0:	3301      	adds	r3, #1
 80154b2:	613b      	str	r3, [r7, #16]
    idx++;
 80154b4:	7dfb      	ldrb	r3, [r7, #23]
 80154b6:	3301      	adds	r3, #1
 80154b8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80154ba:	7dfb      	ldrb	r3, [r7, #23]
 80154bc:	68ba      	ldr	r2, [r7, #8]
 80154be:	4413      	add	r3, r2
 80154c0:	2200      	movs	r2, #0
 80154c2:	701a      	strb	r2, [r3, #0]
    idx++;
 80154c4:	7dfb      	ldrb	r3, [r7, #23]
 80154c6:	3301      	adds	r3, #1
 80154c8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80154ca:	693b      	ldr	r3, [r7, #16]
 80154cc:	781b      	ldrb	r3, [r3, #0]
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d1e7      	bne.n	80154a2 <USBD_GetString+0x52>
 80154d2:	e000      	b.n	80154d6 <USBD_GetString+0x86>
    return;
 80154d4:	bf00      	nop
  }
}
 80154d6:	3718      	adds	r7, #24
 80154d8:	46bd      	mov	sp, r7
 80154da:	bd80      	pop	{r7, pc}

080154dc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80154dc:	b480      	push	{r7}
 80154de:	b085      	sub	sp, #20
 80154e0:	af00      	add	r7, sp, #0
 80154e2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80154e4:	2300      	movs	r3, #0
 80154e6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80154ec:	e005      	b.n	80154fa <USBD_GetLen+0x1e>
  {
    len++;
 80154ee:	7bfb      	ldrb	r3, [r7, #15]
 80154f0:	3301      	adds	r3, #1
 80154f2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80154f4:	68bb      	ldr	r3, [r7, #8]
 80154f6:	3301      	adds	r3, #1
 80154f8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80154fa:	68bb      	ldr	r3, [r7, #8]
 80154fc:	781b      	ldrb	r3, [r3, #0]
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d1f5      	bne.n	80154ee <USBD_GetLen+0x12>
  }

  return len;
 8015502:	7bfb      	ldrb	r3, [r7, #15]
}
 8015504:	4618      	mov	r0, r3
 8015506:	3714      	adds	r7, #20
 8015508:	46bd      	mov	sp, r7
 801550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801550e:	4770      	bx	lr

08015510 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8015510:	b580      	push	{r7, lr}
 8015512:	b084      	sub	sp, #16
 8015514:	af00      	add	r7, sp, #0
 8015516:	60f8      	str	r0, [r7, #12]
 8015518:	60b9      	str	r1, [r7, #8]
 801551a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801551c:	68fb      	ldr	r3, [r7, #12]
 801551e:	2202      	movs	r2, #2
 8015520:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8015524:	68fb      	ldr	r3, [r7, #12]
 8015526:	687a      	ldr	r2, [r7, #4]
 8015528:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	687a      	ldr	r2, [r7, #4]
 801552e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	68ba      	ldr	r2, [r7, #8]
 8015534:	2100      	movs	r1, #0
 8015536:	68f8      	ldr	r0, [r7, #12]
 8015538:	f000 fcf9 	bl	8015f2e <USBD_LL_Transmit>

  return USBD_OK;
 801553c:	2300      	movs	r3, #0
}
 801553e:	4618      	mov	r0, r3
 8015540:	3710      	adds	r7, #16
 8015542:	46bd      	mov	sp, r7
 8015544:	bd80      	pop	{r7, pc}

08015546 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8015546:	b580      	push	{r7, lr}
 8015548:	b084      	sub	sp, #16
 801554a:	af00      	add	r7, sp, #0
 801554c:	60f8      	str	r0, [r7, #12]
 801554e:	60b9      	str	r1, [r7, #8]
 8015550:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	68ba      	ldr	r2, [r7, #8]
 8015556:	2100      	movs	r1, #0
 8015558:	68f8      	ldr	r0, [r7, #12]
 801555a:	f000 fce8 	bl	8015f2e <USBD_LL_Transmit>

  return USBD_OK;
 801555e:	2300      	movs	r3, #0
}
 8015560:	4618      	mov	r0, r3
 8015562:	3710      	adds	r7, #16
 8015564:	46bd      	mov	sp, r7
 8015566:	bd80      	pop	{r7, pc}

08015568 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8015568:	b580      	push	{r7, lr}
 801556a:	b084      	sub	sp, #16
 801556c:	af00      	add	r7, sp, #0
 801556e:	60f8      	str	r0, [r7, #12]
 8015570:	60b9      	str	r1, [r7, #8]
 8015572:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	2203      	movs	r2, #3
 8015578:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801557c:	68fb      	ldr	r3, [r7, #12]
 801557e:	687a      	ldr	r2, [r7, #4]
 8015580:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	687a      	ldr	r2, [r7, #4]
 8015588:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	68ba      	ldr	r2, [r7, #8]
 8015590:	2100      	movs	r1, #0
 8015592:	68f8      	ldr	r0, [r7, #12]
 8015594:	f000 fcec 	bl	8015f70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015598:	2300      	movs	r3, #0
}
 801559a:	4618      	mov	r0, r3
 801559c:	3710      	adds	r7, #16
 801559e:	46bd      	mov	sp, r7
 80155a0:	bd80      	pop	{r7, pc}

080155a2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80155a2:	b580      	push	{r7, lr}
 80155a4:	b084      	sub	sp, #16
 80155a6:	af00      	add	r7, sp, #0
 80155a8:	60f8      	str	r0, [r7, #12]
 80155aa:	60b9      	str	r1, [r7, #8]
 80155ac:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	68ba      	ldr	r2, [r7, #8]
 80155b2:	2100      	movs	r1, #0
 80155b4:	68f8      	ldr	r0, [r7, #12]
 80155b6:	f000 fcdb 	bl	8015f70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80155ba:	2300      	movs	r3, #0
}
 80155bc:	4618      	mov	r0, r3
 80155be:	3710      	adds	r7, #16
 80155c0:	46bd      	mov	sp, r7
 80155c2:	bd80      	pop	{r7, pc}

080155c4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80155c4:	b580      	push	{r7, lr}
 80155c6:	b082      	sub	sp, #8
 80155c8:	af00      	add	r7, sp, #0
 80155ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	2204      	movs	r2, #4
 80155d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80155d4:	2300      	movs	r3, #0
 80155d6:	2200      	movs	r2, #0
 80155d8:	2100      	movs	r1, #0
 80155da:	6878      	ldr	r0, [r7, #4]
 80155dc:	f000 fca7 	bl	8015f2e <USBD_LL_Transmit>

  return USBD_OK;
 80155e0:	2300      	movs	r3, #0
}
 80155e2:	4618      	mov	r0, r3
 80155e4:	3708      	adds	r7, #8
 80155e6:	46bd      	mov	sp, r7
 80155e8:	bd80      	pop	{r7, pc}

080155ea <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80155ea:	b580      	push	{r7, lr}
 80155ec:	b082      	sub	sp, #8
 80155ee:	af00      	add	r7, sp, #0
 80155f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	2205      	movs	r2, #5
 80155f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80155fa:	2300      	movs	r3, #0
 80155fc:	2200      	movs	r2, #0
 80155fe:	2100      	movs	r1, #0
 8015600:	6878      	ldr	r0, [r7, #4]
 8015602:	f000 fcb5 	bl	8015f70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015606:	2300      	movs	r3, #0
}
 8015608:	4618      	mov	r0, r3
 801560a:	3708      	adds	r7, #8
 801560c:	46bd      	mov	sp, r7
 801560e:	bd80      	pop	{r7, pc}

08015610 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8015610:	b580      	push	{r7, lr}
 8015612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015614:	2200      	movs	r2, #0
 8015616:	4912      	ldr	r1, [pc, #72]	; (8015660 <MX_USB_DEVICE_Init+0x50>)
 8015618:	4812      	ldr	r0, [pc, #72]	; (8015664 <MX_USB_DEVICE_Init+0x54>)
 801561a:	f7fe fd07 	bl	801402c <USBD_Init>
 801561e:	4603      	mov	r3, r0
 8015620:	2b00      	cmp	r3, #0
 8015622:	d001      	beq.n	8015628 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015624:	f7f3 f92e 	bl	8008884 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8015628:	490f      	ldr	r1, [pc, #60]	; (8015668 <MX_USB_DEVICE_Init+0x58>)
 801562a:	480e      	ldr	r0, [pc, #56]	; (8015664 <MX_USB_DEVICE_Init+0x54>)
 801562c:	f7fe fd2e 	bl	801408c <USBD_RegisterClass>
 8015630:	4603      	mov	r3, r0
 8015632:	2b00      	cmp	r3, #0
 8015634:	d001      	beq.n	801563a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8015636:	f7f3 f925 	bl	8008884 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801563a:	490c      	ldr	r1, [pc, #48]	; (801566c <MX_USB_DEVICE_Init+0x5c>)
 801563c:	4809      	ldr	r0, [pc, #36]	; (8015664 <MX_USB_DEVICE_Init+0x54>)
 801563e:	f7fe fc1f 	bl	8013e80 <USBD_CDC_RegisterInterface>
 8015642:	4603      	mov	r3, r0
 8015644:	2b00      	cmp	r3, #0
 8015646:	d001      	beq.n	801564c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8015648:	f7f3 f91c 	bl	8008884 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801564c:	4805      	ldr	r0, [pc, #20]	; (8015664 <MX_USB_DEVICE_Init+0x54>)
 801564e:	f7fe fd53 	bl	80140f8 <USBD_Start>
 8015652:	4603      	mov	r3, r0
 8015654:	2b00      	cmp	r3, #0
 8015656:	d001      	beq.n	801565c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8015658:	f7f3 f914 	bl	8008884 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801565c:	bf00      	nop
 801565e:	bd80      	pop	{r7, pc}
 8015660:	200001b8 	.word	0x200001b8
 8015664:	20001140 	.word	0x20001140
 8015668:	20000124 	.word	0x20000124
 801566c:	200001a4 	.word	0x200001a4

08015670 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8015670:	b580      	push	{r7, lr}
 8015672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8015674:	2200      	movs	r2, #0
 8015676:	4905      	ldr	r1, [pc, #20]	; (801568c <CDC_Init_FS+0x1c>)
 8015678:	4805      	ldr	r0, [pc, #20]	; (8015690 <CDC_Init_FS+0x20>)
 801567a:	f7fe fc1b 	bl	8013eb4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801567e:	4905      	ldr	r1, [pc, #20]	; (8015694 <CDC_Init_FS+0x24>)
 8015680:	4803      	ldr	r0, [pc, #12]	; (8015690 <CDC_Init_FS+0x20>)
 8015682:	f7fe fc39 	bl	8013ef8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8015686:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8015688:	4618      	mov	r0, r3
 801568a:	bd80      	pop	{r7, pc}
 801568c:	20001c1c 	.word	0x20001c1c
 8015690:	20001140 	.word	0x20001140
 8015694:	2000141c 	.word	0x2000141c

08015698 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8015698:	b480      	push	{r7}
 801569a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801569c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801569e:	4618      	mov	r0, r3
 80156a0:	46bd      	mov	sp, r7
 80156a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156a6:	4770      	bx	lr

080156a8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80156a8:	b480      	push	{r7}
 80156aa:	b083      	sub	sp, #12
 80156ac:	af00      	add	r7, sp, #0
 80156ae:	4603      	mov	r3, r0
 80156b0:	6039      	str	r1, [r7, #0]
 80156b2:	71fb      	strb	r3, [r7, #7]
 80156b4:	4613      	mov	r3, r2
 80156b6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80156b8:	79fb      	ldrb	r3, [r7, #7]
 80156ba:	2b23      	cmp	r3, #35	; 0x23
 80156bc:	d84a      	bhi.n	8015754 <CDC_Control_FS+0xac>
 80156be:	a201      	add	r2, pc, #4	; (adr r2, 80156c4 <CDC_Control_FS+0x1c>)
 80156c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80156c4:	08015755 	.word	0x08015755
 80156c8:	08015755 	.word	0x08015755
 80156cc:	08015755 	.word	0x08015755
 80156d0:	08015755 	.word	0x08015755
 80156d4:	08015755 	.word	0x08015755
 80156d8:	08015755 	.word	0x08015755
 80156dc:	08015755 	.word	0x08015755
 80156e0:	08015755 	.word	0x08015755
 80156e4:	08015755 	.word	0x08015755
 80156e8:	08015755 	.word	0x08015755
 80156ec:	08015755 	.word	0x08015755
 80156f0:	08015755 	.word	0x08015755
 80156f4:	08015755 	.word	0x08015755
 80156f8:	08015755 	.word	0x08015755
 80156fc:	08015755 	.word	0x08015755
 8015700:	08015755 	.word	0x08015755
 8015704:	08015755 	.word	0x08015755
 8015708:	08015755 	.word	0x08015755
 801570c:	08015755 	.word	0x08015755
 8015710:	08015755 	.word	0x08015755
 8015714:	08015755 	.word	0x08015755
 8015718:	08015755 	.word	0x08015755
 801571c:	08015755 	.word	0x08015755
 8015720:	08015755 	.word	0x08015755
 8015724:	08015755 	.word	0x08015755
 8015728:	08015755 	.word	0x08015755
 801572c:	08015755 	.word	0x08015755
 8015730:	08015755 	.word	0x08015755
 8015734:	08015755 	.word	0x08015755
 8015738:	08015755 	.word	0x08015755
 801573c:	08015755 	.word	0x08015755
 8015740:	08015755 	.word	0x08015755
 8015744:	08015755 	.word	0x08015755
 8015748:	08015755 	.word	0x08015755
 801574c:	08015755 	.word	0x08015755
 8015750:	08015755 	.word	0x08015755
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015754:	bf00      	nop
  }

  return (USBD_OK);
 8015756:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015758:	4618      	mov	r0, r3
 801575a:	370c      	adds	r7, #12
 801575c:	46bd      	mov	sp, r7
 801575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015762:	4770      	bx	lr

08015764 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015764:	b580      	push	{r7, lr}
 8015766:	b082      	sub	sp, #8
 8015768:	af00      	add	r7, sp, #0
 801576a:	6078      	str	r0, [r7, #4]
 801576c:	6039      	str	r1, [r7, #0]

	/*for( uint32_t i = 0; i < *Len; i++ ){

	}*/

	if( system_info.usb_rx_flag == 0 )
 801576e:	4b10      	ldr	r3, [pc, #64]	; (80157b0 <CDC_Receive_FS+0x4c>)
 8015770:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015774:	b2db      	uxtb	r3, r3
 8015776:	2b00      	cmp	r3, #0
 8015778:	d10e      	bne.n	8015798 <CDC_Receive_FS+0x34>
	{
		memcpy((void*)system_info.usb_rx_buf, Buf, *Len);
 801577a:	683b      	ldr	r3, [r7, #0]
 801577c:	681b      	ldr	r3, [r3, #0]
 801577e:	461a      	mov	r2, r3
 8015780:	6879      	ldr	r1, [r7, #4]
 8015782:	480c      	ldr	r0, [pc, #48]	; (80157b4 <CDC_Receive_FS+0x50>)
 8015784:	f000 fc9e 	bl	80160c4 <memcpy>
		system_info.usb_rx_flag = 1;
 8015788:	4b09      	ldr	r3, [pc, #36]	; (80157b0 <CDC_Receive_FS+0x4c>)
 801578a:	2201      	movs	r2, #1
 801578c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
		system_info.usb_rx_len = *Len;
 8015790:	683b      	ldr	r3, [r7, #0]
 8015792:	681b      	ldr	r3, [r3, #0]
 8015794:	4a06      	ldr	r2, [pc, #24]	; (80157b0 <CDC_Receive_FS+0x4c>)
 8015796:	6453      	str	r3, [r2, #68]	; 0x44
	}

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8015798:	6879      	ldr	r1, [r7, #4]
 801579a:	4807      	ldr	r0, [pc, #28]	; (80157b8 <CDC_Receive_FS+0x54>)
 801579c:	f7fe fbac 	bl	8013ef8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80157a0:	4805      	ldr	r0, [pc, #20]	; (80157b8 <CDC_Receive_FS+0x54>)
 80157a2:	f7fe fc0d 	bl	8013fc0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80157a6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80157a8:	4618      	mov	r0, r3
 80157aa:	3708      	adds	r7, #8
 80157ac:	46bd      	mov	sp, r7
 80157ae:	bd80      	pop	{r7, pc}
 80157b0:	200010c0 	.word	0x200010c0
 80157b4:	200010c3 	.word	0x200010c3
 80157b8:	20001140 	.word	0x20001140

080157bc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80157bc:	b580      	push	{r7, lr}
 80157be:	b084      	sub	sp, #16
 80157c0:	af00      	add	r7, sp, #0
 80157c2:	6078      	str	r0, [r7, #4]
 80157c4:	460b      	mov	r3, r1
 80157c6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80157c8:	2300      	movs	r3, #0
 80157ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80157cc:	4b0d      	ldr	r3, [pc, #52]	; (8015804 <CDC_Transmit_FS+0x48>)
 80157ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80157d2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80157d4:	68bb      	ldr	r3, [r7, #8]
 80157d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d001      	beq.n	80157e2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80157de:	2301      	movs	r3, #1
 80157e0:	e00b      	b.n	80157fa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80157e2:	887b      	ldrh	r3, [r7, #2]
 80157e4:	461a      	mov	r2, r3
 80157e6:	6879      	ldr	r1, [r7, #4]
 80157e8:	4806      	ldr	r0, [pc, #24]	; (8015804 <CDC_Transmit_FS+0x48>)
 80157ea:	f7fe fb63 	bl	8013eb4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80157ee:	4805      	ldr	r0, [pc, #20]	; (8015804 <CDC_Transmit_FS+0x48>)
 80157f0:	f7fe fba0 	bl	8013f34 <USBD_CDC_TransmitPacket>
 80157f4:	4603      	mov	r3, r0
 80157f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80157f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80157fa:	4618      	mov	r0, r3
 80157fc:	3710      	adds	r7, #16
 80157fe:	46bd      	mov	sp, r7
 8015800:	bd80      	pop	{r7, pc}
 8015802:	bf00      	nop
 8015804:	20001140 	.word	0x20001140

08015808 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8015808:	b480      	push	{r7}
 801580a:	b087      	sub	sp, #28
 801580c:	af00      	add	r7, sp, #0
 801580e:	60f8      	str	r0, [r7, #12]
 8015810:	60b9      	str	r1, [r7, #8]
 8015812:	4613      	mov	r3, r2
 8015814:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8015816:	2300      	movs	r3, #0
 8015818:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801581a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801581e:	4618      	mov	r0, r3
 8015820:	371c      	adds	r7, #28
 8015822:	46bd      	mov	sp, r7
 8015824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015828:	4770      	bx	lr
	...

0801582c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801582c:	b480      	push	{r7}
 801582e:	b083      	sub	sp, #12
 8015830:	af00      	add	r7, sp, #0
 8015832:	4603      	mov	r3, r0
 8015834:	6039      	str	r1, [r7, #0]
 8015836:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8015838:	683b      	ldr	r3, [r7, #0]
 801583a:	2212      	movs	r2, #18
 801583c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801583e:	4b03      	ldr	r3, [pc, #12]	; (801584c <USBD_FS_DeviceDescriptor+0x20>)
}
 8015840:	4618      	mov	r0, r3
 8015842:	370c      	adds	r7, #12
 8015844:	46bd      	mov	sp, r7
 8015846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801584a:	4770      	bx	lr
 801584c:	200001d4 	.word	0x200001d4

08015850 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015850:	b480      	push	{r7}
 8015852:	b083      	sub	sp, #12
 8015854:	af00      	add	r7, sp, #0
 8015856:	4603      	mov	r3, r0
 8015858:	6039      	str	r1, [r7, #0]
 801585a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801585c:	683b      	ldr	r3, [r7, #0]
 801585e:	2204      	movs	r2, #4
 8015860:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015862:	4b03      	ldr	r3, [pc, #12]	; (8015870 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8015864:	4618      	mov	r0, r3
 8015866:	370c      	adds	r7, #12
 8015868:	46bd      	mov	sp, r7
 801586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801586e:	4770      	bx	lr
 8015870:	200001e8 	.word	0x200001e8

08015874 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015874:	b580      	push	{r7, lr}
 8015876:	b082      	sub	sp, #8
 8015878:	af00      	add	r7, sp, #0
 801587a:	4603      	mov	r3, r0
 801587c:	6039      	str	r1, [r7, #0]
 801587e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015880:	79fb      	ldrb	r3, [r7, #7]
 8015882:	2b00      	cmp	r3, #0
 8015884:	d105      	bne.n	8015892 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015886:	683a      	ldr	r2, [r7, #0]
 8015888:	4907      	ldr	r1, [pc, #28]	; (80158a8 <USBD_FS_ProductStrDescriptor+0x34>)
 801588a:	4808      	ldr	r0, [pc, #32]	; (80158ac <USBD_FS_ProductStrDescriptor+0x38>)
 801588c:	f7ff fde0 	bl	8015450 <USBD_GetString>
 8015890:	e004      	b.n	801589c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015892:	683a      	ldr	r2, [r7, #0]
 8015894:	4904      	ldr	r1, [pc, #16]	; (80158a8 <USBD_FS_ProductStrDescriptor+0x34>)
 8015896:	4805      	ldr	r0, [pc, #20]	; (80158ac <USBD_FS_ProductStrDescriptor+0x38>)
 8015898:	f7ff fdda 	bl	8015450 <USBD_GetString>
  }
  return USBD_StrDesc;
 801589c:	4b02      	ldr	r3, [pc, #8]	; (80158a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801589e:	4618      	mov	r0, r3
 80158a0:	3708      	adds	r7, #8
 80158a2:	46bd      	mov	sp, r7
 80158a4:	bd80      	pop	{r7, pc}
 80158a6:	bf00      	nop
 80158a8:	2000241c 	.word	0x2000241c
 80158ac:	08016be8 	.word	0x08016be8

080158b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80158b0:	b580      	push	{r7, lr}
 80158b2:	b082      	sub	sp, #8
 80158b4:	af00      	add	r7, sp, #0
 80158b6:	4603      	mov	r3, r0
 80158b8:	6039      	str	r1, [r7, #0]
 80158ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80158bc:	683a      	ldr	r2, [r7, #0]
 80158be:	4904      	ldr	r1, [pc, #16]	; (80158d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80158c0:	4804      	ldr	r0, [pc, #16]	; (80158d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80158c2:	f7ff fdc5 	bl	8015450 <USBD_GetString>
  return USBD_StrDesc;
 80158c6:	4b02      	ldr	r3, [pc, #8]	; (80158d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80158c8:	4618      	mov	r0, r3
 80158ca:	3708      	adds	r7, #8
 80158cc:	46bd      	mov	sp, r7
 80158ce:	bd80      	pop	{r7, pc}
 80158d0:	2000241c 	.word	0x2000241c
 80158d4:	08016c00 	.word	0x08016c00

080158d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80158d8:	b580      	push	{r7, lr}
 80158da:	b082      	sub	sp, #8
 80158dc:	af00      	add	r7, sp, #0
 80158de:	4603      	mov	r3, r0
 80158e0:	6039      	str	r1, [r7, #0]
 80158e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80158e4:	683b      	ldr	r3, [r7, #0]
 80158e6:	221a      	movs	r2, #26
 80158e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80158ea:	f000 f843 	bl	8015974 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80158ee:	4b02      	ldr	r3, [pc, #8]	; (80158f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80158f0:	4618      	mov	r0, r3
 80158f2:	3708      	adds	r7, #8
 80158f4:	46bd      	mov	sp, r7
 80158f6:	bd80      	pop	{r7, pc}
 80158f8:	200001ec 	.word	0x200001ec

080158fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80158fc:	b580      	push	{r7, lr}
 80158fe:	b082      	sub	sp, #8
 8015900:	af00      	add	r7, sp, #0
 8015902:	4603      	mov	r3, r0
 8015904:	6039      	str	r1, [r7, #0]
 8015906:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015908:	79fb      	ldrb	r3, [r7, #7]
 801590a:	2b00      	cmp	r3, #0
 801590c:	d105      	bne.n	801591a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801590e:	683a      	ldr	r2, [r7, #0]
 8015910:	4907      	ldr	r1, [pc, #28]	; (8015930 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015912:	4808      	ldr	r0, [pc, #32]	; (8015934 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015914:	f7ff fd9c 	bl	8015450 <USBD_GetString>
 8015918:	e004      	b.n	8015924 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801591a:	683a      	ldr	r2, [r7, #0]
 801591c:	4904      	ldr	r1, [pc, #16]	; (8015930 <USBD_FS_ConfigStrDescriptor+0x34>)
 801591e:	4805      	ldr	r0, [pc, #20]	; (8015934 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015920:	f7ff fd96 	bl	8015450 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015924:	4b02      	ldr	r3, [pc, #8]	; (8015930 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8015926:	4618      	mov	r0, r3
 8015928:	3708      	adds	r7, #8
 801592a:	46bd      	mov	sp, r7
 801592c:	bd80      	pop	{r7, pc}
 801592e:	bf00      	nop
 8015930:	2000241c 	.word	0x2000241c
 8015934:	08016c14 	.word	0x08016c14

08015938 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015938:	b580      	push	{r7, lr}
 801593a:	b082      	sub	sp, #8
 801593c:	af00      	add	r7, sp, #0
 801593e:	4603      	mov	r3, r0
 8015940:	6039      	str	r1, [r7, #0]
 8015942:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015944:	79fb      	ldrb	r3, [r7, #7]
 8015946:	2b00      	cmp	r3, #0
 8015948:	d105      	bne.n	8015956 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801594a:	683a      	ldr	r2, [r7, #0]
 801594c:	4907      	ldr	r1, [pc, #28]	; (801596c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801594e:	4808      	ldr	r0, [pc, #32]	; (8015970 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015950:	f7ff fd7e 	bl	8015450 <USBD_GetString>
 8015954:	e004      	b.n	8015960 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015956:	683a      	ldr	r2, [r7, #0]
 8015958:	4904      	ldr	r1, [pc, #16]	; (801596c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801595a:	4805      	ldr	r0, [pc, #20]	; (8015970 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801595c:	f7ff fd78 	bl	8015450 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015960:	4b02      	ldr	r3, [pc, #8]	; (801596c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8015962:	4618      	mov	r0, r3
 8015964:	3708      	adds	r7, #8
 8015966:	46bd      	mov	sp, r7
 8015968:	bd80      	pop	{r7, pc}
 801596a:	bf00      	nop
 801596c:	2000241c 	.word	0x2000241c
 8015970:	08016c20 	.word	0x08016c20

08015974 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015974:	b580      	push	{r7, lr}
 8015976:	b084      	sub	sp, #16
 8015978:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801597a:	4b0f      	ldr	r3, [pc, #60]	; (80159b8 <Get_SerialNum+0x44>)
 801597c:	681b      	ldr	r3, [r3, #0]
 801597e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015980:	4b0e      	ldr	r3, [pc, #56]	; (80159bc <Get_SerialNum+0x48>)
 8015982:	681b      	ldr	r3, [r3, #0]
 8015984:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015986:	4b0e      	ldr	r3, [pc, #56]	; (80159c0 <Get_SerialNum+0x4c>)
 8015988:	681b      	ldr	r3, [r3, #0]
 801598a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801598c:	68fa      	ldr	r2, [r7, #12]
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	4413      	add	r3, r2
 8015992:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	2b00      	cmp	r3, #0
 8015998:	d009      	beq.n	80159ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801599a:	2208      	movs	r2, #8
 801599c:	4909      	ldr	r1, [pc, #36]	; (80159c4 <Get_SerialNum+0x50>)
 801599e:	68f8      	ldr	r0, [r7, #12]
 80159a0:	f000 f814 	bl	80159cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80159a4:	2204      	movs	r2, #4
 80159a6:	4908      	ldr	r1, [pc, #32]	; (80159c8 <Get_SerialNum+0x54>)
 80159a8:	68b8      	ldr	r0, [r7, #8]
 80159aa:	f000 f80f 	bl	80159cc <IntToUnicode>
  }
}
 80159ae:	bf00      	nop
 80159b0:	3710      	adds	r7, #16
 80159b2:	46bd      	mov	sp, r7
 80159b4:	bd80      	pop	{r7, pc}
 80159b6:	bf00      	nop
 80159b8:	1fff7a10 	.word	0x1fff7a10
 80159bc:	1fff7a14 	.word	0x1fff7a14
 80159c0:	1fff7a18 	.word	0x1fff7a18
 80159c4:	200001ee 	.word	0x200001ee
 80159c8:	200001fe 	.word	0x200001fe

080159cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80159cc:	b480      	push	{r7}
 80159ce:	b087      	sub	sp, #28
 80159d0:	af00      	add	r7, sp, #0
 80159d2:	60f8      	str	r0, [r7, #12]
 80159d4:	60b9      	str	r1, [r7, #8]
 80159d6:	4613      	mov	r3, r2
 80159d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80159da:	2300      	movs	r3, #0
 80159dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80159de:	2300      	movs	r3, #0
 80159e0:	75fb      	strb	r3, [r7, #23]
 80159e2:	e027      	b.n	8015a34 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80159e4:	68fb      	ldr	r3, [r7, #12]
 80159e6:	0f1b      	lsrs	r3, r3, #28
 80159e8:	2b09      	cmp	r3, #9
 80159ea:	d80b      	bhi.n	8015a04 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80159ec:	68fb      	ldr	r3, [r7, #12]
 80159ee:	0f1b      	lsrs	r3, r3, #28
 80159f0:	b2da      	uxtb	r2, r3
 80159f2:	7dfb      	ldrb	r3, [r7, #23]
 80159f4:	005b      	lsls	r3, r3, #1
 80159f6:	4619      	mov	r1, r3
 80159f8:	68bb      	ldr	r3, [r7, #8]
 80159fa:	440b      	add	r3, r1
 80159fc:	3230      	adds	r2, #48	; 0x30
 80159fe:	b2d2      	uxtb	r2, r2
 8015a00:	701a      	strb	r2, [r3, #0]
 8015a02:	e00a      	b.n	8015a1a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015a04:	68fb      	ldr	r3, [r7, #12]
 8015a06:	0f1b      	lsrs	r3, r3, #28
 8015a08:	b2da      	uxtb	r2, r3
 8015a0a:	7dfb      	ldrb	r3, [r7, #23]
 8015a0c:	005b      	lsls	r3, r3, #1
 8015a0e:	4619      	mov	r1, r3
 8015a10:	68bb      	ldr	r3, [r7, #8]
 8015a12:	440b      	add	r3, r1
 8015a14:	3237      	adds	r2, #55	; 0x37
 8015a16:	b2d2      	uxtb	r2, r2
 8015a18:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	011b      	lsls	r3, r3, #4
 8015a1e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015a20:	7dfb      	ldrb	r3, [r7, #23]
 8015a22:	005b      	lsls	r3, r3, #1
 8015a24:	3301      	adds	r3, #1
 8015a26:	68ba      	ldr	r2, [r7, #8]
 8015a28:	4413      	add	r3, r2
 8015a2a:	2200      	movs	r2, #0
 8015a2c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015a2e:	7dfb      	ldrb	r3, [r7, #23]
 8015a30:	3301      	adds	r3, #1
 8015a32:	75fb      	strb	r3, [r7, #23]
 8015a34:	7dfa      	ldrb	r2, [r7, #23]
 8015a36:	79fb      	ldrb	r3, [r7, #7]
 8015a38:	429a      	cmp	r2, r3
 8015a3a:	d3d3      	bcc.n	80159e4 <IntToUnicode+0x18>
  }
}
 8015a3c:	bf00      	nop
 8015a3e:	bf00      	nop
 8015a40:	371c      	adds	r7, #28
 8015a42:	46bd      	mov	sp, r7
 8015a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a48:	4770      	bx	lr
	...

08015a4c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015a4c:	b580      	push	{r7, lr}
 8015a4e:	b08a      	sub	sp, #40	; 0x28
 8015a50:	af00      	add	r7, sp, #0
 8015a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015a54:	f107 0314 	add.w	r3, r7, #20
 8015a58:	2200      	movs	r2, #0
 8015a5a:	601a      	str	r2, [r3, #0]
 8015a5c:	605a      	str	r2, [r3, #4]
 8015a5e:	609a      	str	r2, [r3, #8]
 8015a60:	60da      	str	r2, [r3, #12]
 8015a62:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	681b      	ldr	r3, [r3, #0]
 8015a68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015a6c:	d13a      	bne.n	8015ae4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015a6e:	2300      	movs	r3, #0
 8015a70:	613b      	str	r3, [r7, #16]
 8015a72:	4b1e      	ldr	r3, [pc, #120]	; (8015aec <HAL_PCD_MspInit+0xa0>)
 8015a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a76:	4a1d      	ldr	r2, [pc, #116]	; (8015aec <HAL_PCD_MspInit+0xa0>)
 8015a78:	f043 0301 	orr.w	r3, r3, #1
 8015a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8015a7e:	4b1b      	ldr	r3, [pc, #108]	; (8015aec <HAL_PCD_MspInit+0xa0>)
 8015a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a82:	f003 0301 	and.w	r3, r3, #1
 8015a86:	613b      	str	r3, [r7, #16]
 8015a88:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8015a8a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8015a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015a90:	2302      	movs	r3, #2
 8015a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015a94:	2300      	movs	r3, #0
 8015a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015a98:	2303      	movs	r3, #3
 8015a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8015a9c:	230a      	movs	r3, #10
 8015a9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015aa0:	f107 0314 	add.w	r3, r7, #20
 8015aa4:	4619      	mov	r1, r3
 8015aa6:	4812      	ldr	r0, [pc, #72]	; (8015af0 <HAL_PCD_MspInit+0xa4>)
 8015aa8:	f7f6 ffb6 	bl	800ca18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015aac:	4b0f      	ldr	r3, [pc, #60]	; (8015aec <HAL_PCD_MspInit+0xa0>)
 8015aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015ab0:	4a0e      	ldr	r2, [pc, #56]	; (8015aec <HAL_PCD_MspInit+0xa0>)
 8015ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015ab6:	6353      	str	r3, [r2, #52]	; 0x34
 8015ab8:	2300      	movs	r3, #0
 8015aba:	60fb      	str	r3, [r7, #12]
 8015abc:	4b0b      	ldr	r3, [pc, #44]	; (8015aec <HAL_PCD_MspInit+0xa0>)
 8015abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015ac0:	4a0a      	ldr	r2, [pc, #40]	; (8015aec <HAL_PCD_MspInit+0xa0>)
 8015ac2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015ac6:	6453      	str	r3, [r2, #68]	; 0x44
 8015ac8:	4b08      	ldr	r3, [pc, #32]	; (8015aec <HAL_PCD_MspInit+0xa0>)
 8015aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015acc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015ad0:	60fb      	str	r3, [r7, #12]
 8015ad2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8015ad4:	2200      	movs	r2, #0
 8015ad6:	2100      	movs	r1, #0
 8015ad8:	2043      	movs	r0, #67	; 0x43
 8015ada:	f7f6 fcc5 	bl	800c468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015ade:	2043      	movs	r0, #67	; 0x43
 8015ae0:	f7f6 fcde 	bl	800c4a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015ae4:	bf00      	nop
 8015ae6:	3728      	adds	r7, #40	; 0x28
 8015ae8:	46bd      	mov	sp, r7
 8015aea:	bd80      	pop	{r7, pc}
 8015aec:	40023800 	.word	0x40023800
 8015af0:	40020000 	.word	0x40020000

08015af4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015af4:	b580      	push	{r7, lr}
 8015af6:	b082      	sub	sp, #8
 8015af8:	af00      	add	r7, sp, #0
 8015afa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8015b08:	4619      	mov	r1, r3
 8015b0a:	4610      	mov	r0, r2
 8015b0c:	f7fe fb41 	bl	8014192 <USBD_LL_SetupStage>
}
 8015b10:	bf00      	nop
 8015b12:	3708      	adds	r7, #8
 8015b14:	46bd      	mov	sp, r7
 8015b16:	bd80      	pop	{r7, pc}

08015b18 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b18:	b580      	push	{r7, lr}
 8015b1a:	b082      	sub	sp, #8
 8015b1c:	af00      	add	r7, sp, #0
 8015b1e:	6078      	str	r0, [r7, #4]
 8015b20:	460b      	mov	r3, r1
 8015b22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8015b2a:	78fa      	ldrb	r2, [r7, #3]
 8015b2c:	6879      	ldr	r1, [r7, #4]
 8015b2e:	4613      	mov	r3, r2
 8015b30:	00db      	lsls	r3, r3, #3
 8015b32:	4413      	add	r3, r2
 8015b34:	009b      	lsls	r3, r3, #2
 8015b36:	440b      	add	r3, r1
 8015b38:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8015b3c:	681a      	ldr	r2, [r3, #0]
 8015b3e:	78fb      	ldrb	r3, [r7, #3]
 8015b40:	4619      	mov	r1, r3
 8015b42:	f7fe fb7b 	bl	801423c <USBD_LL_DataOutStage>
}
 8015b46:	bf00      	nop
 8015b48:	3708      	adds	r7, #8
 8015b4a:	46bd      	mov	sp, r7
 8015b4c:	bd80      	pop	{r7, pc}

08015b4e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b4e:	b580      	push	{r7, lr}
 8015b50:	b082      	sub	sp, #8
 8015b52:	af00      	add	r7, sp, #0
 8015b54:	6078      	str	r0, [r7, #4]
 8015b56:	460b      	mov	r3, r1
 8015b58:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8015b60:	78fa      	ldrb	r2, [r7, #3]
 8015b62:	6879      	ldr	r1, [r7, #4]
 8015b64:	4613      	mov	r3, r2
 8015b66:	00db      	lsls	r3, r3, #3
 8015b68:	4413      	add	r3, r2
 8015b6a:	009b      	lsls	r3, r3, #2
 8015b6c:	440b      	add	r3, r1
 8015b6e:	334c      	adds	r3, #76	; 0x4c
 8015b70:	681a      	ldr	r2, [r3, #0]
 8015b72:	78fb      	ldrb	r3, [r7, #3]
 8015b74:	4619      	mov	r1, r3
 8015b76:	f7fe fc14 	bl	80143a2 <USBD_LL_DataInStage>
}
 8015b7a:	bf00      	nop
 8015b7c:	3708      	adds	r7, #8
 8015b7e:	46bd      	mov	sp, r7
 8015b80:	bd80      	pop	{r7, pc}

08015b82 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b82:	b580      	push	{r7, lr}
 8015b84:	b082      	sub	sp, #8
 8015b86:	af00      	add	r7, sp, #0
 8015b88:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015b90:	4618      	mov	r0, r3
 8015b92:	f7fe fd48 	bl	8014626 <USBD_LL_SOF>
}
 8015b96:	bf00      	nop
 8015b98:	3708      	adds	r7, #8
 8015b9a:	46bd      	mov	sp, r7
 8015b9c:	bd80      	pop	{r7, pc}

08015b9e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b9e:	b580      	push	{r7, lr}
 8015ba0:	b084      	sub	sp, #16
 8015ba2:	af00      	add	r7, sp, #0
 8015ba4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015ba6:	2301      	movs	r3, #1
 8015ba8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	68db      	ldr	r3, [r3, #12]
 8015bae:	2b02      	cmp	r3, #2
 8015bb0:	d001      	beq.n	8015bb6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8015bb2:	f7f2 fe67 	bl	8008884 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015bbc:	7bfa      	ldrb	r2, [r7, #15]
 8015bbe:	4611      	mov	r1, r2
 8015bc0:	4618      	mov	r0, r3
 8015bc2:	f7fe fcf2 	bl	80145aa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015bcc:	4618      	mov	r0, r3
 8015bce:	f7fe fc9a 	bl	8014506 <USBD_LL_Reset>
}
 8015bd2:	bf00      	nop
 8015bd4:	3710      	adds	r7, #16
 8015bd6:	46bd      	mov	sp, r7
 8015bd8:	bd80      	pop	{r7, pc}
	...

08015bdc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015bdc:	b580      	push	{r7, lr}
 8015bde:	b082      	sub	sp, #8
 8015be0:	af00      	add	r7, sp, #0
 8015be2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015bea:	4618      	mov	r0, r3
 8015bec:	f7fe fced 	bl	80145ca <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	681b      	ldr	r3, [r3, #0]
 8015bf4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015bf8:	681b      	ldr	r3, [r3, #0]
 8015bfa:	687a      	ldr	r2, [r7, #4]
 8015bfc:	6812      	ldr	r2, [r2, #0]
 8015bfe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015c02:	f043 0301 	orr.w	r3, r3, #1
 8015c06:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	6a1b      	ldr	r3, [r3, #32]
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	d005      	beq.n	8015c1c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015c10:	4b04      	ldr	r3, [pc, #16]	; (8015c24 <HAL_PCD_SuspendCallback+0x48>)
 8015c12:	691b      	ldr	r3, [r3, #16]
 8015c14:	4a03      	ldr	r2, [pc, #12]	; (8015c24 <HAL_PCD_SuspendCallback+0x48>)
 8015c16:	f043 0306 	orr.w	r3, r3, #6
 8015c1a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015c1c:	bf00      	nop
 8015c1e:	3708      	adds	r7, #8
 8015c20:	46bd      	mov	sp, r7
 8015c22:	bd80      	pop	{r7, pc}
 8015c24:	e000ed00 	.word	0xe000ed00

08015c28 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015c28:	b580      	push	{r7, lr}
 8015c2a:	b082      	sub	sp, #8
 8015c2c:	af00      	add	r7, sp, #0
 8015c2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015c36:	4618      	mov	r0, r3
 8015c38:	f7fe fcdd 	bl	80145f6 <USBD_LL_Resume>
}
 8015c3c:	bf00      	nop
 8015c3e:	3708      	adds	r7, #8
 8015c40:	46bd      	mov	sp, r7
 8015c42:	bd80      	pop	{r7, pc}

08015c44 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015c44:	b580      	push	{r7, lr}
 8015c46:	b082      	sub	sp, #8
 8015c48:	af00      	add	r7, sp, #0
 8015c4a:	6078      	str	r0, [r7, #4]
 8015c4c:	460b      	mov	r3, r1
 8015c4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015c56:	78fa      	ldrb	r2, [r7, #3]
 8015c58:	4611      	mov	r1, r2
 8015c5a:	4618      	mov	r0, r3
 8015c5c:	f7fe fd35 	bl	80146ca <USBD_LL_IsoOUTIncomplete>
}
 8015c60:	bf00      	nop
 8015c62:	3708      	adds	r7, #8
 8015c64:	46bd      	mov	sp, r7
 8015c66:	bd80      	pop	{r7, pc}

08015c68 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015c68:	b580      	push	{r7, lr}
 8015c6a:	b082      	sub	sp, #8
 8015c6c:	af00      	add	r7, sp, #0
 8015c6e:	6078      	str	r0, [r7, #4]
 8015c70:	460b      	mov	r3, r1
 8015c72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015c7a:	78fa      	ldrb	r2, [r7, #3]
 8015c7c:	4611      	mov	r1, r2
 8015c7e:	4618      	mov	r0, r3
 8015c80:	f7fe fcf1 	bl	8014666 <USBD_LL_IsoINIncomplete>
}
 8015c84:	bf00      	nop
 8015c86:	3708      	adds	r7, #8
 8015c88:	46bd      	mov	sp, r7
 8015c8a:	bd80      	pop	{r7, pc}

08015c8c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015c8c:	b580      	push	{r7, lr}
 8015c8e:	b082      	sub	sp, #8
 8015c90:	af00      	add	r7, sp, #0
 8015c92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015c9a:	4618      	mov	r0, r3
 8015c9c:	f7fe fd47 	bl	801472e <USBD_LL_DevConnected>
}
 8015ca0:	bf00      	nop
 8015ca2:	3708      	adds	r7, #8
 8015ca4:	46bd      	mov	sp, r7
 8015ca6:	bd80      	pop	{r7, pc}

08015ca8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015ca8:	b580      	push	{r7, lr}
 8015caa:	b082      	sub	sp, #8
 8015cac:	af00      	add	r7, sp, #0
 8015cae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015cb6:	4618      	mov	r0, r3
 8015cb8:	f7fe fd44 	bl	8014744 <USBD_LL_DevDisconnected>
}
 8015cbc:	bf00      	nop
 8015cbe:	3708      	adds	r7, #8
 8015cc0:	46bd      	mov	sp, r7
 8015cc2:	bd80      	pop	{r7, pc}

08015cc4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015cc4:	b580      	push	{r7, lr}
 8015cc6:	b082      	sub	sp, #8
 8015cc8:	af00      	add	r7, sp, #0
 8015cca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	781b      	ldrb	r3, [r3, #0]
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	d13c      	bne.n	8015d4e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015cd4:	4a20      	ldr	r2, [pc, #128]	; (8015d58 <USBD_LL_Init+0x94>)
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	4a1e      	ldr	r2, [pc, #120]	; (8015d58 <USBD_LL_Init+0x94>)
 8015ce0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015ce4:	4b1c      	ldr	r3, [pc, #112]	; (8015d58 <USBD_LL_Init+0x94>)
 8015ce6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8015cea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8015cec:	4b1a      	ldr	r3, [pc, #104]	; (8015d58 <USBD_LL_Init+0x94>)
 8015cee:	2204      	movs	r2, #4
 8015cf0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8015cf2:	4b19      	ldr	r3, [pc, #100]	; (8015d58 <USBD_LL_Init+0x94>)
 8015cf4:	2202      	movs	r2, #2
 8015cf6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015cf8:	4b17      	ldr	r3, [pc, #92]	; (8015d58 <USBD_LL_Init+0x94>)
 8015cfa:	2200      	movs	r2, #0
 8015cfc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015cfe:	4b16      	ldr	r3, [pc, #88]	; (8015d58 <USBD_LL_Init+0x94>)
 8015d00:	2202      	movs	r2, #2
 8015d02:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015d04:	4b14      	ldr	r3, [pc, #80]	; (8015d58 <USBD_LL_Init+0x94>)
 8015d06:	2200      	movs	r2, #0
 8015d08:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8015d0a:	4b13      	ldr	r3, [pc, #76]	; (8015d58 <USBD_LL_Init+0x94>)
 8015d0c:	2200      	movs	r2, #0
 8015d0e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8015d10:	4b11      	ldr	r3, [pc, #68]	; (8015d58 <USBD_LL_Init+0x94>)
 8015d12:	2200      	movs	r2, #0
 8015d14:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8015d16:	4b10      	ldr	r3, [pc, #64]	; (8015d58 <USBD_LL_Init+0x94>)
 8015d18:	2200      	movs	r2, #0
 8015d1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8015d1c:	4b0e      	ldr	r3, [pc, #56]	; (8015d58 <USBD_LL_Init+0x94>)
 8015d1e:	2200      	movs	r2, #0
 8015d20:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8015d22:	480d      	ldr	r0, [pc, #52]	; (8015d58 <USBD_LL_Init+0x94>)
 8015d24:	f7f8 f8d1 	bl	800deca <HAL_PCD_Init>
 8015d28:	4603      	mov	r3, r0
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d001      	beq.n	8015d32 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8015d2e:	f7f2 fda9 	bl	8008884 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8015d32:	2180      	movs	r1, #128	; 0x80
 8015d34:	4808      	ldr	r0, [pc, #32]	; (8015d58 <USBD_LL_Init+0x94>)
 8015d36:	f7f9 fb28 	bl	800f38a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8015d3a:	2240      	movs	r2, #64	; 0x40
 8015d3c:	2100      	movs	r1, #0
 8015d3e:	4806      	ldr	r0, [pc, #24]	; (8015d58 <USBD_LL_Init+0x94>)
 8015d40:	f7f9 fadc 	bl	800f2fc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015d44:	2280      	movs	r2, #128	; 0x80
 8015d46:	2101      	movs	r1, #1
 8015d48:	4803      	ldr	r0, [pc, #12]	; (8015d58 <USBD_LL_Init+0x94>)
 8015d4a:	f7f9 fad7 	bl	800f2fc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8015d4e:	2300      	movs	r3, #0
}
 8015d50:	4618      	mov	r0, r3
 8015d52:	3708      	adds	r7, #8
 8015d54:	46bd      	mov	sp, r7
 8015d56:	bd80      	pop	{r7, pc}
 8015d58:	2000261c 	.word	0x2000261c

08015d5c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015d5c:	b580      	push	{r7, lr}
 8015d5e:	b084      	sub	sp, #16
 8015d60:	af00      	add	r7, sp, #0
 8015d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015d64:	2300      	movs	r3, #0
 8015d66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d68:	2300      	movs	r3, #0
 8015d6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015d72:	4618      	mov	r0, r3
 8015d74:	f7f8 f9c6 	bl	800e104 <HAL_PCD_Start>
 8015d78:	4603      	mov	r3, r0
 8015d7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015d7c:	7bfb      	ldrb	r3, [r7, #15]
 8015d7e:	4618      	mov	r0, r3
 8015d80:	f000 f942 	bl	8016008 <USBD_Get_USB_Status>
 8015d84:	4603      	mov	r3, r0
 8015d86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015d88:	7bbb      	ldrb	r3, [r7, #14]
}
 8015d8a:	4618      	mov	r0, r3
 8015d8c:	3710      	adds	r7, #16
 8015d8e:	46bd      	mov	sp, r7
 8015d90:	bd80      	pop	{r7, pc}

08015d92 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015d92:	b580      	push	{r7, lr}
 8015d94:	b084      	sub	sp, #16
 8015d96:	af00      	add	r7, sp, #0
 8015d98:	6078      	str	r0, [r7, #4]
 8015d9a:	4608      	mov	r0, r1
 8015d9c:	4611      	mov	r1, r2
 8015d9e:	461a      	mov	r2, r3
 8015da0:	4603      	mov	r3, r0
 8015da2:	70fb      	strb	r3, [r7, #3]
 8015da4:	460b      	mov	r3, r1
 8015da6:	70bb      	strb	r3, [r7, #2]
 8015da8:	4613      	mov	r3, r2
 8015daa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015dac:	2300      	movs	r3, #0
 8015dae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015db0:	2300      	movs	r3, #0
 8015db2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8015dba:	78bb      	ldrb	r3, [r7, #2]
 8015dbc:	883a      	ldrh	r2, [r7, #0]
 8015dbe:	78f9      	ldrb	r1, [r7, #3]
 8015dc0:	f7f8 fe97 	bl	800eaf2 <HAL_PCD_EP_Open>
 8015dc4:	4603      	mov	r3, r0
 8015dc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015dc8:	7bfb      	ldrb	r3, [r7, #15]
 8015dca:	4618      	mov	r0, r3
 8015dcc:	f000 f91c 	bl	8016008 <USBD_Get_USB_Status>
 8015dd0:	4603      	mov	r3, r0
 8015dd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015dd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8015dd6:	4618      	mov	r0, r3
 8015dd8:	3710      	adds	r7, #16
 8015dda:	46bd      	mov	sp, r7
 8015ddc:	bd80      	pop	{r7, pc}

08015dde <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015dde:	b580      	push	{r7, lr}
 8015de0:	b084      	sub	sp, #16
 8015de2:	af00      	add	r7, sp, #0
 8015de4:	6078      	str	r0, [r7, #4]
 8015de6:	460b      	mov	r3, r1
 8015de8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015dea:	2300      	movs	r3, #0
 8015dec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015dee:	2300      	movs	r3, #0
 8015df0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015df8:	78fa      	ldrb	r2, [r7, #3]
 8015dfa:	4611      	mov	r1, r2
 8015dfc:	4618      	mov	r0, r3
 8015dfe:	f7f8 fee0 	bl	800ebc2 <HAL_PCD_EP_Close>
 8015e02:	4603      	mov	r3, r0
 8015e04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015e06:	7bfb      	ldrb	r3, [r7, #15]
 8015e08:	4618      	mov	r0, r3
 8015e0a:	f000 f8fd 	bl	8016008 <USBD_Get_USB_Status>
 8015e0e:	4603      	mov	r3, r0
 8015e10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015e12:	7bbb      	ldrb	r3, [r7, #14]
}
 8015e14:	4618      	mov	r0, r3
 8015e16:	3710      	adds	r7, #16
 8015e18:	46bd      	mov	sp, r7
 8015e1a:	bd80      	pop	{r7, pc}

08015e1c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015e1c:	b580      	push	{r7, lr}
 8015e1e:	b084      	sub	sp, #16
 8015e20:	af00      	add	r7, sp, #0
 8015e22:	6078      	str	r0, [r7, #4]
 8015e24:	460b      	mov	r3, r1
 8015e26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015e28:	2300      	movs	r3, #0
 8015e2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015e2c:	2300      	movs	r3, #0
 8015e2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015e36:	78fa      	ldrb	r2, [r7, #3]
 8015e38:	4611      	mov	r1, r2
 8015e3a:	4618      	mov	r0, r3
 8015e3c:	f7f8 ffb8 	bl	800edb0 <HAL_PCD_EP_SetStall>
 8015e40:	4603      	mov	r3, r0
 8015e42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015e44:	7bfb      	ldrb	r3, [r7, #15]
 8015e46:	4618      	mov	r0, r3
 8015e48:	f000 f8de 	bl	8016008 <USBD_Get_USB_Status>
 8015e4c:	4603      	mov	r3, r0
 8015e4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015e50:	7bbb      	ldrb	r3, [r7, #14]
}
 8015e52:	4618      	mov	r0, r3
 8015e54:	3710      	adds	r7, #16
 8015e56:	46bd      	mov	sp, r7
 8015e58:	bd80      	pop	{r7, pc}

08015e5a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015e5a:	b580      	push	{r7, lr}
 8015e5c:	b084      	sub	sp, #16
 8015e5e:	af00      	add	r7, sp, #0
 8015e60:	6078      	str	r0, [r7, #4]
 8015e62:	460b      	mov	r3, r1
 8015e64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015e66:	2300      	movs	r3, #0
 8015e68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015e6a:	2300      	movs	r3, #0
 8015e6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015e74:	78fa      	ldrb	r2, [r7, #3]
 8015e76:	4611      	mov	r1, r2
 8015e78:	4618      	mov	r0, r3
 8015e7a:	f7f8 fffd 	bl	800ee78 <HAL_PCD_EP_ClrStall>
 8015e7e:	4603      	mov	r3, r0
 8015e80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015e82:	7bfb      	ldrb	r3, [r7, #15]
 8015e84:	4618      	mov	r0, r3
 8015e86:	f000 f8bf 	bl	8016008 <USBD_Get_USB_Status>
 8015e8a:	4603      	mov	r3, r0
 8015e8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015e8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8015e90:	4618      	mov	r0, r3
 8015e92:	3710      	adds	r7, #16
 8015e94:	46bd      	mov	sp, r7
 8015e96:	bd80      	pop	{r7, pc}

08015e98 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015e98:	b480      	push	{r7}
 8015e9a:	b085      	sub	sp, #20
 8015e9c:	af00      	add	r7, sp, #0
 8015e9e:	6078      	str	r0, [r7, #4]
 8015ea0:	460b      	mov	r3, r1
 8015ea2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015eaa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015eac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	da0b      	bge.n	8015ecc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015eb4:	78fb      	ldrb	r3, [r7, #3]
 8015eb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015eba:	68f9      	ldr	r1, [r7, #12]
 8015ebc:	4613      	mov	r3, r2
 8015ebe:	00db      	lsls	r3, r3, #3
 8015ec0:	4413      	add	r3, r2
 8015ec2:	009b      	lsls	r3, r3, #2
 8015ec4:	440b      	add	r3, r1
 8015ec6:	333e      	adds	r3, #62	; 0x3e
 8015ec8:	781b      	ldrb	r3, [r3, #0]
 8015eca:	e00b      	b.n	8015ee4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015ecc:	78fb      	ldrb	r3, [r7, #3]
 8015ece:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015ed2:	68f9      	ldr	r1, [r7, #12]
 8015ed4:	4613      	mov	r3, r2
 8015ed6:	00db      	lsls	r3, r3, #3
 8015ed8:	4413      	add	r3, r2
 8015eda:	009b      	lsls	r3, r3, #2
 8015edc:	440b      	add	r3, r1
 8015ede:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8015ee2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015ee4:	4618      	mov	r0, r3
 8015ee6:	3714      	adds	r7, #20
 8015ee8:	46bd      	mov	sp, r7
 8015eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eee:	4770      	bx	lr

08015ef0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015ef0:	b580      	push	{r7, lr}
 8015ef2:	b084      	sub	sp, #16
 8015ef4:	af00      	add	r7, sp, #0
 8015ef6:	6078      	str	r0, [r7, #4]
 8015ef8:	460b      	mov	r3, r1
 8015efa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015efc:	2300      	movs	r3, #0
 8015efe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015f00:	2300      	movs	r3, #0
 8015f02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015f0a:	78fa      	ldrb	r2, [r7, #3]
 8015f0c:	4611      	mov	r1, r2
 8015f0e:	4618      	mov	r0, r3
 8015f10:	f7f8 fdca 	bl	800eaa8 <HAL_PCD_SetAddress>
 8015f14:	4603      	mov	r3, r0
 8015f16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015f18:	7bfb      	ldrb	r3, [r7, #15]
 8015f1a:	4618      	mov	r0, r3
 8015f1c:	f000 f874 	bl	8016008 <USBD_Get_USB_Status>
 8015f20:	4603      	mov	r3, r0
 8015f22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015f24:	7bbb      	ldrb	r3, [r7, #14]
}
 8015f26:	4618      	mov	r0, r3
 8015f28:	3710      	adds	r7, #16
 8015f2a:	46bd      	mov	sp, r7
 8015f2c:	bd80      	pop	{r7, pc}

08015f2e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015f2e:	b580      	push	{r7, lr}
 8015f30:	b086      	sub	sp, #24
 8015f32:	af00      	add	r7, sp, #0
 8015f34:	60f8      	str	r0, [r7, #12]
 8015f36:	607a      	str	r2, [r7, #4]
 8015f38:	603b      	str	r3, [r7, #0]
 8015f3a:	460b      	mov	r3, r1
 8015f3c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015f3e:	2300      	movs	r3, #0
 8015f40:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015f42:	2300      	movs	r3, #0
 8015f44:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015f46:	68fb      	ldr	r3, [r7, #12]
 8015f48:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8015f4c:	7af9      	ldrb	r1, [r7, #11]
 8015f4e:	683b      	ldr	r3, [r7, #0]
 8015f50:	687a      	ldr	r2, [r7, #4]
 8015f52:	f7f8 fee3 	bl	800ed1c <HAL_PCD_EP_Transmit>
 8015f56:	4603      	mov	r3, r0
 8015f58:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015f5a:	7dfb      	ldrb	r3, [r7, #23]
 8015f5c:	4618      	mov	r0, r3
 8015f5e:	f000 f853 	bl	8016008 <USBD_Get_USB_Status>
 8015f62:	4603      	mov	r3, r0
 8015f64:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015f66:	7dbb      	ldrb	r3, [r7, #22]
}
 8015f68:	4618      	mov	r0, r3
 8015f6a:	3718      	adds	r7, #24
 8015f6c:	46bd      	mov	sp, r7
 8015f6e:	bd80      	pop	{r7, pc}

08015f70 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015f70:	b580      	push	{r7, lr}
 8015f72:	b086      	sub	sp, #24
 8015f74:	af00      	add	r7, sp, #0
 8015f76:	60f8      	str	r0, [r7, #12]
 8015f78:	607a      	str	r2, [r7, #4]
 8015f7a:	603b      	str	r3, [r7, #0]
 8015f7c:	460b      	mov	r3, r1
 8015f7e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015f80:	2300      	movs	r3, #0
 8015f82:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015f84:	2300      	movs	r3, #0
 8015f86:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015f88:	68fb      	ldr	r3, [r7, #12]
 8015f8a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8015f8e:	7af9      	ldrb	r1, [r7, #11]
 8015f90:	683b      	ldr	r3, [r7, #0]
 8015f92:	687a      	ldr	r2, [r7, #4]
 8015f94:	f7f8 fe5f 	bl	800ec56 <HAL_PCD_EP_Receive>
 8015f98:	4603      	mov	r3, r0
 8015f9a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015f9c:	7dfb      	ldrb	r3, [r7, #23]
 8015f9e:	4618      	mov	r0, r3
 8015fa0:	f000 f832 	bl	8016008 <USBD_Get_USB_Status>
 8015fa4:	4603      	mov	r3, r0
 8015fa6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015fa8:	7dbb      	ldrb	r3, [r7, #22]
}
 8015faa:	4618      	mov	r0, r3
 8015fac:	3718      	adds	r7, #24
 8015fae:	46bd      	mov	sp, r7
 8015fb0:	bd80      	pop	{r7, pc}

08015fb2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015fb2:	b580      	push	{r7, lr}
 8015fb4:	b082      	sub	sp, #8
 8015fb6:	af00      	add	r7, sp, #0
 8015fb8:	6078      	str	r0, [r7, #4]
 8015fba:	460b      	mov	r3, r1
 8015fbc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015fc4:	78fa      	ldrb	r2, [r7, #3]
 8015fc6:	4611      	mov	r1, r2
 8015fc8:	4618      	mov	r0, r3
 8015fca:	f7f8 fe8f 	bl	800ecec <HAL_PCD_EP_GetRxCount>
 8015fce:	4603      	mov	r3, r0
}
 8015fd0:	4618      	mov	r0, r3
 8015fd2:	3708      	adds	r7, #8
 8015fd4:	46bd      	mov	sp, r7
 8015fd6:	bd80      	pop	{r7, pc}

08015fd8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015fd8:	b480      	push	{r7}
 8015fda:	b083      	sub	sp, #12
 8015fdc:	af00      	add	r7, sp, #0
 8015fde:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015fe0:	4b03      	ldr	r3, [pc, #12]	; (8015ff0 <USBD_static_malloc+0x18>)
}
 8015fe2:	4618      	mov	r0, r3
 8015fe4:	370c      	adds	r7, #12
 8015fe6:	46bd      	mov	sp, r7
 8015fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fec:	4770      	bx	lr
 8015fee:	bf00      	nop
 8015ff0:	20002b28 	.word	0x20002b28

08015ff4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015ff4:	b480      	push	{r7}
 8015ff6:	b083      	sub	sp, #12
 8015ff8:	af00      	add	r7, sp, #0
 8015ffa:	6078      	str	r0, [r7, #4]

}
 8015ffc:	bf00      	nop
 8015ffe:	370c      	adds	r7, #12
 8016000:	46bd      	mov	sp, r7
 8016002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016006:	4770      	bx	lr

08016008 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016008:	b480      	push	{r7}
 801600a:	b085      	sub	sp, #20
 801600c:	af00      	add	r7, sp, #0
 801600e:	4603      	mov	r3, r0
 8016010:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016012:	2300      	movs	r3, #0
 8016014:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016016:	79fb      	ldrb	r3, [r7, #7]
 8016018:	2b03      	cmp	r3, #3
 801601a:	d817      	bhi.n	801604c <USBD_Get_USB_Status+0x44>
 801601c:	a201      	add	r2, pc, #4	; (adr r2, 8016024 <USBD_Get_USB_Status+0x1c>)
 801601e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016022:	bf00      	nop
 8016024:	08016035 	.word	0x08016035
 8016028:	0801603b 	.word	0x0801603b
 801602c:	08016041 	.word	0x08016041
 8016030:	08016047 	.word	0x08016047
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016034:	2300      	movs	r3, #0
 8016036:	73fb      	strb	r3, [r7, #15]
    break;
 8016038:	e00b      	b.n	8016052 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801603a:	2303      	movs	r3, #3
 801603c:	73fb      	strb	r3, [r7, #15]
    break;
 801603e:	e008      	b.n	8016052 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016040:	2301      	movs	r3, #1
 8016042:	73fb      	strb	r3, [r7, #15]
    break;
 8016044:	e005      	b.n	8016052 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016046:	2303      	movs	r3, #3
 8016048:	73fb      	strb	r3, [r7, #15]
    break;
 801604a:	e002      	b.n	8016052 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801604c:	2303      	movs	r3, #3
 801604e:	73fb      	strb	r3, [r7, #15]
    break;
 8016050:	bf00      	nop
  }
  return usb_status;
 8016052:	7bfb      	ldrb	r3, [r7, #15]
}
 8016054:	4618      	mov	r0, r3
 8016056:	3714      	adds	r7, #20
 8016058:	46bd      	mov	sp, r7
 801605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801605e:	4770      	bx	lr

08016060 <memset>:
 8016060:	4402      	add	r2, r0
 8016062:	4603      	mov	r3, r0
 8016064:	4293      	cmp	r3, r2
 8016066:	d100      	bne.n	801606a <memset+0xa>
 8016068:	4770      	bx	lr
 801606a:	f803 1b01 	strb.w	r1, [r3], #1
 801606e:	e7f9      	b.n	8016064 <memset+0x4>

08016070 <__errno>:
 8016070:	4b01      	ldr	r3, [pc, #4]	; (8016078 <__errno+0x8>)
 8016072:	6818      	ldr	r0, [r3, #0]
 8016074:	4770      	bx	lr
 8016076:	bf00      	nop
 8016078:	20000254 	.word	0x20000254

0801607c <__libc_init_array>:
 801607c:	b570      	push	{r4, r5, r6, lr}
 801607e:	4d0d      	ldr	r5, [pc, #52]	; (80160b4 <__libc_init_array+0x38>)
 8016080:	4c0d      	ldr	r4, [pc, #52]	; (80160b8 <__libc_init_array+0x3c>)
 8016082:	1b64      	subs	r4, r4, r5
 8016084:	10a4      	asrs	r4, r4, #2
 8016086:	2600      	movs	r6, #0
 8016088:	42a6      	cmp	r6, r4
 801608a:	d109      	bne.n	80160a0 <__libc_init_array+0x24>
 801608c:	4d0b      	ldr	r5, [pc, #44]	; (80160bc <__libc_init_array+0x40>)
 801608e:	4c0c      	ldr	r4, [pc, #48]	; (80160c0 <__libc_init_array+0x44>)
 8016090:	f000 fba0 	bl	80167d4 <_init>
 8016094:	1b64      	subs	r4, r4, r5
 8016096:	10a4      	asrs	r4, r4, #2
 8016098:	2600      	movs	r6, #0
 801609a:	42a6      	cmp	r6, r4
 801609c:	d105      	bne.n	80160aa <__libc_init_array+0x2e>
 801609e:	bd70      	pop	{r4, r5, r6, pc}
 80160a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80160a4:	4798      	blx	r3
 80160a6:	3601      	adds	r6, #1
 80160a8:	e7ee      	b.n	8016088 <__libc_init_array+0xc>
 80160aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80160ae:	4798      	blx	r3
 80160b0:	3601      	adds	r6, #1
 80160b2:	e7f2      	b.n	801609a <__libc_init_array+0x1e>
 80160b4:	080172c0 	.word	0x080172c0
 80160b8:	080172c0 	.word	0x080172c0
 80160bc:	080172c0 	.word	0x080172c0
 80160c0:	080172c4 	.word	0x080172c4

080160c4 <memcpy>:
 80160c4:	440a      	add	r2, r1
 80160c6:	4291      	cmp	r1, r2
 80160c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80160cc:	d100      	bne.n	80160d0 <memcpy+0xc>
 80160ce:	4770      	bx	lr
 80160d0:	b510      	push	{r4, lr}
 80160d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80160d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80160da:	4291      	cmp	r1, r2
 80160dc:	d1f9      	bne.n	80160d2 <memcpy+0xe>
 80160de:	bd10      	pop	{r4, pc}

080160e0 <atan2>:
 80160e0:	f000 b906 	b.w	80162f0 <__ieee754_atan2>

080160e4 <sqrt>:
 80160e4:	b538      	push	{r3, r4, r5, lr}
 80160e6:	ed2d 8b02 	vpush	{d8}
 80160ea:	ec55 4b10 	vmov	r4, r5, d0
 80160ee:	f000 f825 	bl	801613c <__ieee754_sqrt>
 80160f2:	4622      	mov	r2, r4
 80160f4:	462b      	mov	r3, r5
 80160f6:	4620      	mov	r0, r4
 80160f8:	4629      	mov	r1, r5
 80160fa:	eeb0 8a40 	vmov.f32	s16, s0
 80160fe:	eef0 8a60 	vmov.f32	s17, s1
 8016102:	f7ea fcc7 	bl	8000a94 <__aeabi_dcmpun>
 8016106:	b990      	cbnz	r0, 801612e <sqrt+0x4a>
 8016108:	2200      	movs	r2, #0
 801610a:	2300      	movs	r3, #0
 801610c:	4620      	mov	r0, r4
 801610e:	4629      	mov	r1, r5
 8016110:	f7ea fc98 	bl	8000a44 <__aeabi_dcmplt>
 8016114:	b158      	cbz	r0, 801612e <sqrt+0x4a>
 8016116:	f7ff ffab 	bl	8016070 <__errno>
 801611a:	2321      	movs	r3, #33	; 0x21
 801611c:	6003      	str	r3, [r0, #0]
 801611e:	2200      	movs	r2, #0
 8016120:	2300      	movs	r3, #0
 8016122:	4610      	mov	r0, r2
 8016124:	4619      	mov	r1, r3
 8016126:	f7ea fb45 	bl	80007b4 <__aeabi_ddiv>
 801612a:	ec41 0b18 	vmov	d8, r0, r1
 801612e:	eeb0 0a48 	vmov.f32	s0, s16
 8016132:	eef0 0a68 	vmov.f32	s1, s17
 8016136:	ecbd 8b02 	vpop	{d8}
 801613a:	bd38      	pop	{r3, r4, r5, pc}

0801613c <__ieee754_sqrt>:
 801613c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016140:	ec55 4b10 	vmov	r4, r5, d0
 8016144:	4e67      	ldr	r6, [pc, #412]	; (80162e4 <__ieee754_sqrt+0x1a8>)
 8016146:	43ae      	bics	r6, r5
 8016148:	ee10 0a10 	vmov	r0, s0
 801614c:	ee10 2a10 	vmov	r2, s0
 8016150:	4629      	mov	r1, r5
 8016152:	462b      	mov	r3, r5
 8016154:	d10d      	bne.n	8016172 <__ieee754_sqrt+0x36>
 8016156:	f7ea fa03 	bl	8000560 <__aeabi_dmul>
 801615a:	4602      	mov	r2, r0
 801615c:	460b      	mov	r3, r1
 801615e:	4620      	mov	r0, r4
 8016160:	4629      	mov	r1, r5
 8016162:	f7ea f847 	bl	80001f4 <__adddf3>
 8016166:	4604      	mov	r4, r0
 8016168:	460d      	mov	r5, r1
 801616a:	ec45 4b10 	vmov	d0, r4, r5
 801616e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016172:	2d00      	cmp	r5, #0
 8016174:	dc0b      	bgt.n	801618e <__ieee754_sqrt+0x52>
 8016176:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801617a:	4326      	orrs	r6, r4
 801617c:	d0f5      	beq.n	801616a <__ieee754_sqrt+0x2e>
 801617e:	b135      	cbz	r5, 801618e <__ieee754_sqrt+0x52>
 8016180:	f7ea f836 	bl	80001f0 <__aeabi_dsub>
 8016184:	4602      	mov	r2, r0
 8016186:	460b      	mov	r3, r1
 8016188:	f7ea fb14 	bl	80007b4 <__aeabi_ddiv>
 801618c:	e7eb      	b.n	8016166 <__ieee754_sqrt+0x2a>
 801618e:	1509      	asrs	r1, r1, #20
 8016190:	f000 808d 	beq.w	80162ae <__ieee754_sqrt+0x172>
 8016194:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016198:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801619c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80161a0:	07c9      	lsls	r1, r1, #31
 80161a2:	bf5c      	itt	pl
 80161a4:	005b      	lslpl	r3, r3, #1
 80161a6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80161aa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80161ae:	bf58      	it	pl
 80161b0:	0052      	lslpl	r2, r2, #1
 80161b2:	2500      	movs	r5, #0
 80161b4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80161b8:	1076      	asrs	r6, r6, #1
 80161ba:	0052      	lsls	r2, r2, #1
 80161bc:	f04f 0e16 	mov.w	lr, #22
 80161c0:	46ac      	mov	ip, r5
 80161c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80161c6:	eb0c 0001 	add.w	r0, ip, r1
 80161ca:	4298      	cmp	r0, r3
 80161cc:	bfde      	ittt	le
 80161ce:	1a1b      	suble	r3, r3, r0
 80161d0:	eb00 0c01 	addle.w	ip, r0, r1
 80161d4:	186d      	addle	r5, r5, r1
 80161d6:	005b      	lsls	r3, r3, #1
 80161d8:	f1be 0e01 	subs.w	lr, lr, #1
 80161dc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80161e0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80161e4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80161e8:	d1ed      	bne.n	80161c6 <__ieee754_sqrt+0x8a>
 80161ea:	4674      	mov	r4, lr
 80161ec:	2720      	movs	r7, #32
 80161ee:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80161f2:	4563      	cmp	r3, ip
 80161f4:	eb01 000e 	add.w	r0, r1, lr
 80161f8:	dc02      	bgt.n	8016200 <__ieee754_sqrt+0xc4>
 80161fa:	d113      	bne.n	8016224 <__ieee754_sqrt+0xe8>
 80161fc:	4290      	cmp	r0, r2
 80161fe:	d811      	bhi.n	8016224 <__ieee754_sqrt+0xe8>
 8016200:	2800      	cmp	r0, #0
 8016202:	eb00 0e01 	add.w	lr, r0, r1
 8016206:	da57      	bge.n	80162b8 <__ieee754_sqrt+0x17c>
 8016208:	f1be 0f00 	cmp.w	lr, #0
 801620c:	db54      	blt.n	80162b8 <__ieee754_sqrt+0x17c>
 801620e:	f10c 0801 	add.w	r8, ip, #1
 8016212:	eba3 030c 	sub.w	r3, r3, ip
 8016216:	4290      	cmp	r0, r2
 8016218:	bf88      	it	hi
 801621a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801621e:	1a12      	subs	r2, r2, r0
 8016220:	440c      	add	r4, r1
 8016222:	46c4      	mov	ip, r8
 8016224:	005b      	lsls	r3, r3, #1
 8016226:	3f01      	subs	r7, #1
 8016228:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801622c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8016230:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8016234:	d1dd      	bne.n	80161f2 <__ieee754_sqrt+0xb6>
 8016236:	4313      	orrs	r3, r2
 8016238:	d01b      	beq.n	8016272 <__ieee754_sqrt+0x136>
 801623a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80162e8 <__ieee754_sqrt+0x1ac>
 801623e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80162ec <__ieee754_sqrt+0x1b0>
 8016242:	e9da 0100 	ldrd	r0, r1, [sl]
 8016246:	e9db 2300 	ldrd	r2, r3, [fp]
 801624a:	f7e9 ffd1 	bl	80001f0 <__aeabi_dsub>
 801624e:	e9da 8900 	ldrd	r8, r9, [sl]
 8016252:	4602      	mov	r2, r0
 8016254:	460b      	mov	r3, r1
 8016256:	4640      	mov	r0, r8
 8016258:	4649      	mov	r1, r9
 801625a:	f7ea fbfd 	bl	8000a58 <__aeabi_dcmple>
 801625e:	b140      	cbz	r0, 8016272 <__ieee754_sqrt+0x136>
 8016260:	f1b4 3fff 	cmp.w	r4, #4294967295
 8016264:	e9da 0100 	ldrd	r0, r1, [sl]
 8016268:	e9db 2300 	ldrd	r2, r3, [fp]
 801626c:	d126      	bne.n	80162bc <__ieee754_sqrt+0x180>
 801626e:	3501      	adds	r5, #1
 8016270:	463c      	mov	r4, r7
 8016272:	106a      	asrs	r2, r5, #1
 8016274:	0863      	lsrs	r3, r4, #1
 8016276:	07e9      	lsls	r1, r5, #31
 8016278:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801627c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8016280:	bf48      	it	mi
 8016282:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8016286:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801628a:	461c      	mov	r4, r3
 801628c:	e76d      	b.n	801616a <__ieee754_sqrt+0x2e>
 801628e:	0ad3      	lsrs	r3, r2, #11
 8016290:	3815      	subs	r0, #21
 8016292:	0552      	lsls	r2, r2, #21
 8016294:	2b00      	cmp	r3, #0
 8016296:	d0fa      	beq.n	801628e <__ieee754_sqrt+0x152>
 8016298:	02dc      	lsls	r4, r3, #11
 801629a:	d50a      	bpl.n	80162b2 <__ieee754_sqrt+0x176>
 801629c:	f1c1 0420 	rsb	r4, r1, #32
 80162a0:	fa22 f404 	lsr.w	r4, r2, r4
 80162a4:	1e4d      	subs	r5, r1, #1
 80162a6:	408a      	lsls	r2, r1
 80162a8:	4323      	orrs	r3, r4
 80162aa:	1b41      	subs	r1, r0, r5
 80162ac:	e772      	b.n	8016194 <__ieee754_sqrt+0x58>
 80162ae:	4608      	mov	r0, r1
 80162b0:	e7f0      	b.n	8016294 <__ieee754_sqrt+0x158>
 80162b2:	005b      	lsls	r3, r3, #1
 80162b4:	3101      	adds	r1, #1
 80162b6:	e7ef      	b.n	8016298 <__ieee754_sqrt+0x15c>
 80162b8:	46e0      	mov	r8, ip
 80162ba:	e7aa      	b.n	8016212 <__ieee754_sqrt+0xd6>
 80162bc:	f7e9 ff9a 	bl	80001f4 <__adddf3>
 80162c0:	e9da 8900 	ldrd	r8, r9, [sl]
 80162c4:	4602      	mov	r2, r0
 80162c6:	460b      	mov	r3, r1
 80162c8:	4640      	mov	r0, r8
 80162ca:	4649      	mov	r1, r9
 80162cc:	f7ea fbba 	bl	8000a44 <__aeabi_dcmplt>
 80162d0:	b120      	cbz	r0, 80162dc <__ieee754_sqrt+0x1a0>
 80162d2:	1ca0      	adds	r0, r4, #2
 80162d4:	bf08      	it	eq
 80162d6:	3501      	addeq	r5, #1
 80162d8:	3402      	adds	r4, #2
 80162da:	e7ca      	b.n	8016272 <__ieee754_sqrt+0x136>
 80162dc:	3401      	adds	r4, #1
 80162de:	f024 0401 	bic.w	r4, r4, #1
 80162e2:	e7c6      	b.n	8016272 <__ieee754_sqrt+0x136>
 80162e4:	7ff00000 	.word	0x7ff00000
 80162e8:	20000258 	.word	0x20000258
 80162ec:	20000260 	.word	0x20000260

080162f0 <__ieee754_atan2>:
 80162f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80162f4:	ec57 6b11 	vmov	r6, r7, d1
 80162f8:	4273      	negs	r3, r6
 80162fa:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8016478 <__ieee754_atan2+0x188>
 80162fe:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8016302:	4333      	orrs	r3, r6
 8016304:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8016308:	4543      	cmp	r3, r8
 801630a:	ec51 0b10 	vmov	r0, r1, d0
 801630e:	ee11 5a10 	vmov	r5, s2
 8016312:	d80a      	bhi.n	801632a <__ieee754_atan2+0x3a>
 8016314:	4244      	negs	r4, r0
 8016316:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801631a:	4304      	orrs	r4, r0
 801631c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8016320:	4544      	cmp	r4, r8
 8016322:	ee10 9a10 	vmov	r9, s0
 8016326:	468e      	mov	lr, r1
 8016328:	d907      	bls.n	801633a <__ieee754_atan2+0x4a>
 801632a:	4632      	mov	r2, r6
 801632c:	463b      	mov	r3, r7
 801632e:	f7e9 ff61 	bl	80001f4 <__adddf3>
 8016332:	ec41 0b10 	vmov	d0, r0, r1
 8016336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801633a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801633e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8016342:	4334      	orrs	r4, r6
 8016344:	d103      	bne.n	801634e <__ieee754_atan2+0x5e>
 8016346:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801634a:	f000 b899 	b.w	8016480 <atan>
 801634e:	17bc      	asrs	r4, r7, #30
 8016350:	f004 0402 	and.w	r4, r4, #2
 8016354:	ea53 0909 	orrs.w	r9, r3, r9
 8016358:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801635c:	d107      	bne.n	801636e <__ieee754_atan2+0x7e>
 801635e:	2c02      	cmp	r4, #2
 8016360:	d05f      	beq.n	8016422 <__ieee754_atan2+0x132>
 8016362:	2c03      	cmp	r4, #3
 8016364:	d1e5      	bne.n	8016332 <__ieee754_atan2+0x42>
 8016366:	a140      	add	r1, pc, #256	; (adr r1, 8016468 <__ieee754_atan2+0x178>)
 8016368:	e9d1 0100 	ldrd	r0, r1, [r1]
 801636c:	e7e1      	b.n	8016332 <__ieee754_atan2+0x42>
 801636e:	4315      	orrs	r5, r2
 8016370:	d106      	bne.n	8016380 <__ieee754_atan2+0x90>
 8016372:	f1be 0f00 	cmp.w	lr, #0
 8016376:	da5f      	bge.n	8016438 <__ieee754_atan2+0x148>
 8016378:	a13d      	add	r1, pc, #244	; (adr r1, 8016470 <__ieee754_atan2+0x180>)
 801637a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801637e:	e7d8      	b.n	8016332 <__ieee754_atan2+0x42>
 8016380:	4542      	cmp	r2, r8
 8016382:	d10f      	bne.n	80163a4 <__ieee754_atan2+0xb4>
 8016384:	4293      	cmp	r3, r2
 8016386:	f104 34ff 	add.w	r4, r4, #4294967295
 801638a:	d107      	bne.n	801639c <__ieee754_atan2+0xac>
 801638c:	2c02      	cmp	r4, #2
 801638e:	d84c      	bhi.n	801642a <__ieee754_atan2+0x13a>
 8016390:	4b33      	ldr	r3, [pc, #204]	; (8016460 <__ieee754_atan2+0x170>)
 8016392:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016396:	e9d3 0100 	ldrd	r0, r1, [r3]
 801639a:	e7ca      	b.n	8016332 <__ieee754_atan2+0x42>
 801639c:	2c02      	cmp	r4, #2
 801639e:	d848      	bhi.n	8016432 <__ieee754_atan2+0x142>
 80163a0:	4b30      	ldr	r3, [pc, #192]	; (8016464 <__ieee754_atan2+0x174>)
 80163a2:	e7f6      	b.n	8016392 <__ieee754_atan2+0xa2>
 80163a4:	4543      	cmp	r3, r8
 80163a6:	d0e4      	beq.n	8016372 <__ieee754_atan2+0x82>
 80163a8:	1a9b      	subs	r3, r3, r2
 80163aa:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80163ae:	ea4f 5223 	mov.w	r2, r3, asr #20
 80163b2:	da1e      	bge.n	80163f2 <__ieee754_atan2+0x102>
 80163b4:	2f00      	cmp	r7, #0
 80163b6:	da01      	bge.n	80163bc <__ieee754_atan2+0xcc>
 80163b8:	323c      	adds	r2, #60	; 0x3c
 80163ba:	db1e      	blt.n	80163fa <__ieee754_atan2+0x10a>
 80163bc:	4632      	mov	r2, r6
 80163be:	463b      	mov	r3, r7
 80163c0:	f7ea f9f8 	bl	80007b4 <__aeabi_ddiv>
 80163c4:	ec41 0b10 	vmov	d0, r0, r1
 80163c8:	f000 f9fa 	bl	80167c0 <fabs>
 80163cc:	f000 f858 	bl	8016480 <atan>
 80163d0:	ec51 0b10 	vmov	r0, r1, d0
 80163d4:	2c01      	cmp	r4, #1
 80163d6:	d013      	beq.n	8016400 <__ieee754_atan2+0x110>
 80163d8:	2c02      	cmp	r4, #2
 80163da:	d015      	beq.n	8016408 <__ieee754_atan2+0x118>
 80163dc:	2c00      	cmp	r4, #0
 80163de:	d0a8      	beq.n	8016332 <__ieee754_atan2+0x42>
 80163e0:	a317      	add	r3, pc, #92	; (adr r3, 8016440 <__ieee754_atan2+0x150>)
 80163e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163e6:	f7e9 ff03 	bl	80001f0 <__aeabi_dsub>
 80163ea:	a317      	add	r3, pc, #92	; (adr r3, 8016448 <__ieee754_atan2+0x158>)
 80163ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163f0:	e014      	b.n	801641c <__ieee754_atan2+0x12c>
 80163f2:	a117      	add	r1, pc, #92	; (adr r1, 8016450 <__ieee754_atan2+0x160>)
 80163f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80163f8:	e7ec      	b.n	80163d4 <__ieee754_atan2+0xe4>
 80163fa:	2000      	movs	r0, #0
 80163fc:	2100      	movs	r1, #0
 80163fe:	e7e9      	b.n	80163d4 <__ieee754_atan2+0xe4>
 8016400:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016404:	4619      	mov	r1, r3
 8016406:	e794      	b.n	8016332 <__ieee754_atan2+0x42>
 8016408:	a30d      	add	r3, pc, #52	; (adr r3, 8016440 <__ieee754_atan2+0x150>)
 801640a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801640e:	f7e9 feef 	bl	80001f0 <__aeabi_dsub>
 8016412:	4602      	mov	r2, r0
 8016414:	460b      	mov	r3, r1
 8016416:	a10c      	add	r1, pc, #48	; (adr r1, 8016448 <__ieee754_atan2+0x158>)
 8016418:	e9d1 0100 	ldrd	r0, r1, [r1]
 801641c:	f7e9 fee8 	bl	80001f0 <__aeabi_dsub>
 8016420:	e787      	b.n	8016332 <__ieee754_atan2+0x42>
 8016422:	a109      	add	r1, pc, #36	; (adr r1, 8016448 <__ieee754_atan2+0x158>)
 8016424:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016428:	e783      	b.n	8016332 <__ieee754_atan2+0x42>
 801642a:	a10b      	add	r1, pc, #44	; (adr r1, 8016458 <__ieee754_atan2+0x168>)
 801642c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016430:	e77f      	b.n	8016332 <__ieee754_atan2+0x42>
 8016432:	2000      	movs	r0, #0
 8016434:	2100      	movs	r1, #0
 8016436:	e77c      	b.n	8016332 <__ieee754_atan2+0x42>
 8016438:	a105      	add	r1, pc, #20	; (adr r1, 8016450 <__ieee754_atan2+0x160>)
 801643a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801643e:	e778      	b.n	8016332 <__ieee754_atan2+0x42>
 8016440:	33145c07 	.word	0x33145c07
 8016444:	3ca1a626 	.word	0x3ca1a626
 8016448:	54442d18 	.word	0x54442d18
 801644c:	400921fb 	.word	0x400921fb
 8016450:	54442d18 	.word	0x54442d18
 8016454:	3ff921fb 	.word	0x3ff921fb
 8016458:	54442d18 	.word	0x54442d18
 801645c:	3fe921fb 	.word	0x3fe921fb
 8016460:	08017248 	.word	0x08017248
 8016464:	08017260 	.word	0x08017260
 8016468:	54442d18 	.word	0x54442d18
 801646c:	c00921fb 	.word	0xc00921fb
 8016470:	54442d18 	.word	0x54442d18
 8016474:	bff921fb 	.word	0xbff921fb
 8016478:	7ff00000 	.word	0x7ff00000
 801647c:	00000000 	.word	0x00000000

08016480 <atan>:
 8016480:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016484:	ec55 4b10 	vmov	r4, r5, d0
 8016488:	4bc3      	ldr	r3, [pc, #780]	; (8016798 <atan+0x318>)
 801648a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801648e:	429e      	cmp	r6, r3
 8016490:	46ab      	mov	fp, r5
 8016492:	dd18      	ble.n	80164c6 <atan+0x46>
 8016494:	4bc1      	ldr	r3, [pc, #772]	; (801679c <atan+0x31c>)
 8016496:	429e      	cmp	r6, r3
 8016498:	dc01      	bgt.n	801649e <atan+0x1e>
 801649a:	d109      	bne.n	80164b0 <atan+0x30>
 801649c:	b144      	cbz	r4, 80164b0 <atan+0x30>
 801649e:	4622      	mov	r2, r4
 80164a0:	462b      	mov	r3, r5
 80164a2:	4620      	mov	r0, r4
 80164a4:	4629      	mov	r1, r5
 80164a6:	f7e9 fea5 	bl	80001f4 <__adddf3>
 80164aa:	4604      	mov	r4, r0
 80164ac:	460d      	mov	r5, r1
 80164ae:	e006      	b.n	80164be <atan+0x3e>
 80164b0:	f1bb 0f00 	cmp.w	fp, #0
 80164b4:	f300 8131 	bgt.w	801671a <atan+0x29a>
 80164b8:	a59b      	add	r5, pc, #620	; (adr r5, 8016728 <atan+0x2a8>)
 80164ba:	e9d5 4500 	ldrd	r4, r5, [r5]
 80164be:	ec45 4b10 	vmov	d0, r4, r5
 80164c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164c6:	4bb6      	ldr	r3, [pc, #728]	; (80167a0 <atan+0x320>)
 80164c8:	429e      	cmp	r6, r3
 80164ca:	dc14      	bgt.n	80164f6 <atan+0x76>
 80164cc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80164d0:	429e      	cmp	r6, r3
 80164d2:	dc0d      	bgt.n	80164f0 <atan+0x70>
 80164d4:	a396      	add	r3, pc, #600	; (adr r3, 8016730 <atan+0x2b0>)
 80164d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164da:	ee10 0a10 	vmov	r0, s0
 80164de:	4629      	mov	r1, r5
 80164e0:	f7e9 fe88 	bl	80001f4 <__adddf3>
 80164e4:	4baf      	ldr	r3, [pc, #700]	; (80167a4 <atan+0x324>)
 80164e6:	2200      	movs	r2, #0
 80164e8:	f7ea faca 	bl	8000a80 <__aeabi_dcmpgt>
 80164ec:	2800      	cmp	r0, #0
 80164ee:	d1e6      	bne.n	80164be <atan+0x3e>
 80164f0:	f04f 3aff 	mov.w	sl, #4294967295
 80164f4:	e02b      	b.n	801654e <atan+0xce>
 80164f6:	f000 f963 	bl	80167c0 <fabs>
 80164fa:	4bab      	ldr	r3, [pc, #684]	; (80167a8 <atan+0x328>)
 80164fc:	429e      	cmp	r6, r3
 80164fe:	ec55 4b10 	vmov	r4, r5, d0
 8016502:	f300 80bf 	bgt.w	8016684 <atan+0x204>
 8016506:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801650a:	429e      	cmp	r6, r3
 801650c:	f300 80a0 	bgt.w	8016650 <atan+0x1d0>
 8016510:	ee10 2a10 	vmov	r2, s0
 8016514:	ee10 0a10 	vmov	r0, s0
 8016518:	462b      	mov	r3, r5
 801651a:	4629      	mov	r1, r5
 801651c:	f7e9 fe6a 	bl	80001f4 <__adddf3>
 8016520:	4ba0      	ldr	r3, [pc, #640]	; (80167a4 <atan+0x324>)
 8016522:	2200      	movs	r2, #0
 8016524:	f7e9 fe64 	bl	80001f0 <__aeabi_dsub>
 8016528:	2200      	movs	r2, #0
 801652a:	4606      	mov	r6, r0
 801652c:	460f      	mov	r7, r1
 801652e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016532:	4620      	mov	r0, r4
 8016534:	4629      	mov	r1, r5
 8016536:	f7e9 fe5d 	bl	80001f4 <__adddf3>
 801653a:	4602      	mov	r2, r0
 801653c:	460b      	mov	r3, r1
 801653e:	4630      	mov	r0, r6
 8016540:	4639      	mov	r1, r7
 8016542:	f7ea f937 	bl	80007b4 <__aeabi_ddiv>
 8016546:	f04f 0a00 	mov.w	sl, #0
 801654a:	4604      	mov	r4, r0
 801654c:	460d      	mov	r5, r1
 801654e:	4622      	mov	r2, r4
 8016550:	462b      	mov	r3, r5
 8016552:	4620      	mov	r0, r4
 8016554:	4629      	mov	r1, r5
 8016556:	f7ea f803 	bl	8000560 <__aeabi_dmul>
 801655a:	4602      	mov	r2, r0
 801655c:	460b      	mov	r3, r1
 801655e:	4680      	mov	r8, r0
 8016560:	4689      	mov	r9, r1
 8016562:	f7e9 fffd 	bl	8000560 <__aeabi_dmul>
 8016566:	a374      	add	r3, pc, #464	; (adr r3, 8016738 <atan+0x2b8>)
 8016568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801656c:	4606      	mov	r6, r0
 801656e:	460f      	mov	r7, r1
 8016570:	f7e9 fff6 	bl	8000560 <__aeabi_dmul>
 8016574:	a372      	add	r3, pc, #456	; (adr r3, 8016740 <atan+0x2c0>)
 8016576:	e9d3 2300 	ldrd	r2, r3, [r3]
 801657a:	f7e9 fe3b 	bl	80001f4 <__adddf3>
 801657e:	4632      	mov	r2, r6
 8016580:	463b      	mov	r3, r7
 8016582:	f7e9 ffed 	bl	8000560 <__aeabi_dmul>
 8016586:	a370      	add	r3, pc, #448	; (adr r3, 8016748 <atan+0x2c8>)
 8016588:	e9d3 2300 	ldrd	r2, r3, [r3]
 801658c:	f7e9 fe32 	bl	80001f4 <__adddf3>
 8016590:	4632      	mov	r2, r6
 8016592:	463b      	mov	r3, r7
 8016594:	f7e9 ffe4 	bl	8000560 <__aeabi_dmul>
 8016598:	a36d      	add	r3, pc, #436	; (adr r3, 8016750 <atan+0x2d0>)
 801659a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801659e:	f7e9 fe29 	bl	80001f4 <__adddf3>
 80165a2:	4632      	mov	r2, r6
 80165a4:	463b      	mov	r3, r7
 80165a6:	f7e9 ffdb 	bl	8000560 <__aeabi_dmul>
 80165aa:	a36b      	add	r3, pc, #428	; (adr r3, 8016758 <atan+0x2d8>)
 80165ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165b0:	f7e9 fe20 	bl	80001f4 <__adddf3>
 80165b4:	4632      	mov	r2, r6
 80165b6:	463b      	mov	r3, r7
 80165b8:	f7e9 ffd2 	bl	8000560 <__aeabi_dmul>
 80165bc:	a368      	add	r3, pc, #416	; (adr r3, 8016760 <atan+0x2e0>)
 80165be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165c2:	f7e9 fe17 	bl	80001f4 <__adddf3>
 80165c6:	4642      	mov	r2, r8
 80165c8:	464b      	mov	r3, r9
 80165ca:	f7e9 ffc9 	bl	8000560 <__aeabi_dmul>
 80165ce:	a366      	add	r3, pc, #408	; (adr r3, 8016768 <atan+0x2e8>)
 80165d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165d4:	4680      	mov	r8, r0
 80165d6:	4689      	mov	r9, r1
 80165d8:	4630      	mov	r0, r6
 80165da:	4639      	mov	r1, r7
 80165dc:	f7e9 ffc0 	bl	8000560 <__aeabi_dmul>
 80165e0:	a363      	add	r3, pc, #396	; (adr r3, 8016770 <atan+0x2f0>)
 80165e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165e6:	f7e9 fe03 	bl	80001f0 <__aeabi_dsub>
 80165ea:	4632      	mov	r2, r6
 80165ec:	463b      	mov	r3, r7
 80165ee:	f7e9 ffb7 	bl	8000560 <__aeabi_dmul>
 80165f2:	a361      	add	r3, pc, #388	; (adr r3, 8016778 <atan+0x2f8>)
 80165f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165f8:	f7e9 fdfa 	bl	80001f0 <__aeabi_dsub>
 80165fc:	4632      	mov	r2, r6
 80165fe:	463b      	mov	r3, r7
 8016600:	f7e9 ffae 	bl	8000560 <__aeabi_dmul>
 8016604:	a35e      	add	r3, pc, #376	; (adr r3, 8016780 <atan+0x300>)
 8016606:	e9d3 2300 	ldrd	r2, r3, [r3]
 801660a:	f7e9 fdf1 	bl	80001f0 <__aeabi_dsub>
 801660e:	4632      	mov	r2, r6
 8016610:	463b      	mov	r3, r7
 8016612:	f7e9 ffa5 	bl	8000560 <__aeabi_dmul>
 8016616:	a35c      	add	r3, pc, #368	; (adr r3, 8016788 <atan+0x308>)
 8016618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801661c:	f7e9 fde8 	bl	80001f0 <__aeabi_dsub>
 8016620:	4632      	mov	r2, r6
 8016622:	463b      	mov	r3, r7
 8016624:	f7e9 ff9c 	bl	8000560 <__aeabi_dmul>
 8016628:	4602      	mov	r2, r0
 801662a:	460b      	mov	r3, r1
 801662c:	4640      	mov	r0, r8
 801662e:	4649      	mov	r1, r9
 8016630:	f7e9 fde0 	bl	80001f4 <__adddf3>
 8016634:	4622      	mov	r2, r4
 8016636:	462b      	mov	r3, r5
 8016638:	f7e9 ff92 	bl	8000560 <__aeabi_dmul>
 801663c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8016640:	4602      	mov	r2, r0
 8016642:	460b      	mov	r3, r1
 8016644:	d14b      	bne.n	80166de <atan+0x25e>
 8016646:	4620      	mov	r0, r4
 8016648:	4629      	mov	r1, r5
 801664a:	f7e9 fdd1 	bl	80001f0 <__aeabi_dsub>
 801664e:	e72c      	b.n	80164aa <atan+0x2a>
 8016650:	ee10 0a10 	vmov	r0, s0
 8016654:	4b53      	ldr	r3, [pc, #332]	; (80167a4 <atan+0x324>)
 8016656:	2200      	movs	r2, #0
 8016658:	4629      	mov	r1, r5
 801665a:	f7e9 fdc9 	bl	80001f0 <__aeabi_dsub>
 801665e:	4b51      	ldr	r3, [pc, #324]	; (80167a4 <atan+0x324>)
 8016660:	4606      	mov	r6, r0
 8016662:	460f      	mov	r7, r1
 8016664:	2200      	movs	r2, #0
 8016666:	4620      	mov	r0, r4
 8016668:	4629      	mov	r1, r5
 801666a:	f7e9 fdc3 	bl	80001f4 <__adddf3>
 801666e:	4602      	mov	r2, r0
 8016670:	460b      	mov	r3, r1
 8016672:	4630      	mov	r0, r6
 8016674:	4639      	mov	r1, r7
 8016676:	f7ea f89d 	bl	80007b4 <__aeabi_ddiv>
 801667a:	f04f 0a01 	mov.w	sl, #1
 801667e:	4604      	mov	r4, r0
 8016680:	460d      	mov	r5, r1
 8016682:	e764      	b.n	801654e <atan+0xce>
 8016684:	4b49      	ldr	r3, [pc, #292]	; (80167ac <atan+0x32c>)
 8016686:	429e      	cmp	r6, r3
 8016688:	da1d      	bge.n	80166c6 <atan+0x246>
 801668a:	ee10 0a10 	vmov	r0, s0
 801668e:	4b48      	ldr	r3, [pc, #288]	; (80167b0 <atan+0x330>)
 8016690:	2200      	movs	r2, #0
 8016692:	4629      	mov	r1, r5
 8016694:	f7e9 fdac 	bl	80001f0 <__aeabi_dsub>
 8016698:	4b45      	ldr	r3, [pc, #276]	; (80167b0 <atan+0x330>)
 801669a:	4606      	mov	r6, r0
 801669c:	460f      	mov	r7, r1
 801669e:	2200      	movs	r2, #0
 80166a0:	4620      	mov	r0, r4
 80166a2:	4629      	mov	r1, r5
 80166a4:	f7e9 ff5c 	bl	8000560 <__aeabi_dmul>
 80166a8:	4b3e      	ldr	r3, [pc, #248]	; (80167a4 <atan+0x324>)
 80166aa:	2200      	movs	r2, #0
 80166ac:	f7e9 fda2 	bl	80001f4 <__adddf3>
 80166b0:	4602      	mov	r2, r0
 80166b2:	460b      	mov	r3, r1
 80166b4:	4630      	mov	r0, r6
 80166b6:	4639      	mov	r1, r7
 80166b8:	f7ea f87c 	bl	80007b4 <__aeabi_ddiv>
 80166bc:	f04f 0a02 	mov.w	sl, #2
 80166c0:	4604      	mov	r4, r0
 80166c2:	460d      	mov	r5, r1
 80166c4:	e743      	b.n	801654e <atan+0xce>
 80166c6:	462b      	mov	r3, r5
 80166c8:	ee10 2a10 	vmov	r2, s0
 80166cc:	4939      	ldr	r1, [pc, #228]	; (80167b4 <atan+0x334>)
 80166ce:	2000      	movs	r0, #0
 80166d0:	f7ea f870 	bl	80007b4 <__aeabi_ddiv>
 80166d4:	f04f 0a03 	mov.w	sl, #3
 80166d8:	4604      	mov	r4, r0
 80166da:	460d      	mov	r5, r1
 80166dc:	e737      	b.n	801654e <atan+0xce>
 80166de:	4b36      	ldr	r3, [pc, #216]	; (80167b8 <atan+0x338>)
 80166e0:	4e36      	ldr	r6, [pc, #216]	; (80167bc <atan+0x33c>)
 80166e2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80166e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166ea:	f7e9 fd81 	bl	80001f0 <__aeabi_dsub>
 80166ee:	4622      	mov	r2, r4
 80166f0:	462b      	mov	r3, r5
 80166f2:	f7e9 fd7d 	bl	80001f0 <__aeabi_dsub>
 80166f6:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80166fa:	4602      	mov	r2, r0
 80166fc:	460b      	mov	r3, r1
 80166fe:	e9d6 0100 	ldrd	r0, r1, [r6]
 8016702:	f7e9 fd75 	bl	80001f0 <__aeabi_dsub>
 8016706:	f1bb 0f00 	cmp.w	fp, #0
 801670a:	4604      	mov	r4, r0
 801670c:	460d      	mov	r5, r1
 801670e:	f6bf aed6 	bge.w	80164be <atan+0x3e>
 8016712:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016716:	461d      	mov	r5, r3
 8016718:	e6d1      	b.n	80164be <atan+0x3e>
 801671a:	a51d      	add	r5, pc, #116	; (adr r5, 8016790 <atan+0x310>)
 801671c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016720:	e6cd      	b.n	80164be <atan+0x3e>
 8016722:	bf00      	nop
 8016724:	f3af 8000 	nop.w
 8016728:	54442d18 	.word	0x54442d18
 801672c:	bff921fb 	.word	0xbff921fb
 8016730:	8800759c 	.word	0x8800759c
 8016734:	7e37e43c 	.word	0x7e37e43c
 8016738:	e322da11 	.word	0xe322da11
 801673c:	3f90ad3a 	.word	0x3f90ad3a
 8016740:	24760deb 	.word	0x24760deb
 8016744:	3fa97b4b 	.word	0x3fa97b4b
 8016748:	a0d03d51 	.word	0xa0d03d51
 801674c:	3fb10d66 	.word	0x3fb10d66
 8016750:	c54c206e 	.word	0xc54c206e
 8016754:	3fb745cd 	.word	0x3fb745cd
 8016758:	920083ff 	.word	0x920083ff
 801675c:	3fc24924 	.word	0x3fc24924
 8016760:	5555550d 	.word	0x5555550d
 8016764:	3fd55555 	.word	0x3fd55555
 8016768:	2c6a6c2f 	.word	0x2c6a6c2f
 801676c:	bfa2b444 	.word	0xbfa2b444
 8016770:	52defd9a 	.word	0x52defd9a
 8016774:	3fadde2d 	.word	0x3fadde2d
 8016778:	af749a6d 	.word	0xaf749a6d
 801677c:	3fb3b0f2 	.word	0x3fb3b0f2
 8016780:	fe231671 	.word	0xfe231671
 8016784:	3fbc71c6 	.word	0x3fbc71c6
 8016788:	9998ebc4 	.word	0x9998ebc4
 801678c:	3fc99999 	.word	0x3fc99999
 8016790:	54442d18 	.word	0x54442d18
 8016794:	3ff921fb 	.word	0x3ff921fb
 8016798:	440fffff 	.word	0x440fffff
 801679c:	7ff00000 	.word	0x7ff00000
 80167a0:	3fdbffff 	.word	0x3fdbffff
 80167a4:	3ff00000 	.word	0x3ff00000
 80167a8:	3ff2ffff 	.word	0x3ff2ffff
 80167ac:	40038000 	.word	0x40038000
 80167b0:	3ff80000 	.word	0x3ff80000
 80167b4:	bff00000 	.word	0xbff00000
 80167b8:	08017298 	.word	0x08017298
 80167bc:	08017278 	.word	0x08017278

080167c0 <fabs>:
 80167c0:	ec51 0b10 	vmov	r0, r1, d0
 80167c4:	ee10 2a10 	vmov	r2, s0
 80167c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80167cc:	ec43 2b10 	vmov	d0, r2, r3
 80167d0:	4770      	bx	lr
	...

080167d4 <_init>:
 80167d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167d6:	bf00      	nop
 80167d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80167da:	bc08      	pop	{r3}
 80167dc:	469e      	mov	lr, r3
 80167de:	4770      	bx	lr

080167e0 <_fini>:
 80167e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167e2:	bf00      	nop
 80167e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80167e6:	bc08      	pop	{r3}
 80167e8:	469e      	mov	lr, r3
 80167ea:	4770      	bx	lr
 80167ec:	0000      	movs	r0, r0
	...

080167f0 <__system_Reset_veneer>:
 80167f0:	f85f f000 	ldr.w	pc, [pc]	; 80167f4 <__system_Reset_veneer+0x4>
 80167f4:	20000269 	.word	0x20000269

Disassembly of section .data:

20000000 <_battery_perc_lut>:
20000000:	00010bb8 000a0ce4 00320e10 003c0e74     ..........2.t.<.
20000010:	00460ea6 004b0ece 00500ef6 00550f1e     ..F...K...P...U.
20000020:	005a0f50 005f0f82 00611004 00641068     P.Z..._...a.h.d.

20000030 <cfg_NodeList>:
20000030:	00010001 00000004 080028b9 08002929     .........(..))..
20000040:	080027e5 00010065 00000030 08002751     .'..e...0...Q'..
20000050:	08002795 080026d5 00010066 00000000     .'...&..f.......
	...
2000006c:	006627d9 0000000e 0800b329 0800b465     .'f.....)...e...
2000007c:	0800b151 006627da 00000006 08009a2d     Q....'f.....-...
2000008c:	08009ad1 08009925 006627db 0000000a     ....%....'f.....
2000009c:	0800a0ad 0800a1a9 08009f3d 006627dc     ........=....'f.
200000ac:	00000003 080024ad 08002515 080023fd     .....$...%...#..
200000bc:	006627dd 0000000d 0800aa35 0800ab2d     .'f.....5...-...
200000cc:	0800a875 00010067 00000008 08001c91     u...g...........
200000dc:	08001d41 08001b55 0067283d 00000005     A...U...=(g.....
200000ec:	08001ec9 08001f45 08001dd9 0067283e     ....E.......>(g.
200000fc:	00000005 08002091 0800210d 08001fa1     ..... ...!......

2000010c <SystemCoreClock>:
2000010c:	00f42400                                .$..

20000110 <uwTickPrio>:
20000110:	00000010                                ....

20000114 <uwTickFreq>:
20000114:	00000001                                ....

20000118 <USBD_CDC_DeviceQualifierDesc>:
20000118:	0200060a 40000000 00000001              .......@....

20000124 <USBD_CDC>:
20000124:	08013681 08013871 08013975 00000000     .6..q8..u9......
20000134:	08013c9b 08013b2d 08013c2b 00000000     .<..-;..+<......
	...
2000014c:	08013d81 08013d11 08013df1 08013e61     .=...=...=..a>..

2000015c <USBD_CDC_CfgDesc>:
2000015c:	00430209 c0000102 00040932 02020100     ..C.....2.......
2000016c:	24050001 05011000 01000124 02022404     ...$....$....$..
2000017c:	00062405 82050701 10000803 00010409     .$..............
2000018c:	00000a02 01050700 00004002 02810507     .........@......
2000019c:	                                         @..

2000019f <CDCInEpAdd>:
2000019f:	                                         .

200001a0 <CDCOutEpAdd>:
200001a0:	                                         .

200001a1 <CDCCmdEpAdd>:
200001a1:	                                         ...

200001a4 <USBD_Interface_fops_FS>:
200001a4:	08015671 08015699 080156a9 08015765     qV...V...V..eW..
200001b4:	08015809                                .X..

200001b8 <FS_Desc>:
200001b8:	0801582d 08015851 080158b1 08015875     -X..QX...X..uX..
200001c8:	080158d9 080158fd 08015939              .X...X..9Y..

200001d4 <USBD_FS_DeviceDesc>:
200001d4:	02000112 40000202 57400483 02010200     .......@..@W....
200001e4:	00000103                                ....

200001e8 <USBD_LangIDDesc>:
200001e8:	04090304                                ....

200001ec <USBD_StringSerial>:
200001ec:	0000031a 00000000 00000000 00000000     ................
	...

20000208 <_impure_data>:
20000208:	00000000 20002d48 20002db0 20002e18     ....H-. .-. ... 
	...

20000254 <_impure_ptr>:
20000254:	20000208                                ... 

20000258 <one>:
20000258:	00000000 3ff00000                       .......?

20000260 <tiny>:
20000260:	c2f8f359 01a56e1f                       Y....n..

20000268 <system_Reset>:

__ramfunc void system_Reset()
{
20000268:	b480      	push	{r7}
2000026a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
2000026c:	b672      	cpsid	i
}
2000026e:	bf00      	nop
	__disable_irq();
	SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos) | (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
20000270:	4b05      	ldr	r3, [pc, #20]	; (20000288 <system_Reset+0x20>)
20000272:	68db      	ldr	r3, [r3, #12]
20000274:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
20000278:	4903      	ldr	r1, [pc, #12]	; (20000288 <system_Reset+0x20>)
2000027a:	4b04      	ldr	r3, [pc, #16]	; (2000028c <system_Reset+0x24>)
2000027c:	4313      	orrs	r3, r2
2000027e:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
20000280:	f3bf 8f4f 	dsb	sy
}
20000284:	bf00      	nop
	SCB_AIRCR_SYSRESETREQ_Msk); 																/* Keep priority group unchanged *//* Ensure completion of memory access */
	__DSB();                                                                             		// Ensure completion of memory access
	while(1);
20000286:	e7fe      	b.n	20000286 <system_Reset+0x1e>
20000288:	e000ed00 	.word	0xe000ed00
2000028c:	05fa0004 	.word	0x05fa0004
