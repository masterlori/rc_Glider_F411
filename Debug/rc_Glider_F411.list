
rc_Glider_F411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b530  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000970  0800b6c8  0800b6c8  0001b6c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c038  0800c038  00020118  2**0
                  CONTENTS
  4 .ARM          00000008  0800c038  0800c038  0001c038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c040  0800c040  00020118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c040  0800c040  0001c040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c044  0800c044  0001c044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000118  20000000  0800c048  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00000a04  20000118  0800c160  00020118  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b1c  0800c160  00020b1c  2**0
                  ALLOC
 11 .param_section 00001000  08060000  08060000  00030000  2**2
                  ALLOC
 12 .new_firmware 00000004  08040000  08040000  00030000  2**2
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001a81d  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000041e5  00000000  00000000  0003a965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001660  00000000  00000000  0003eb50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000014e0  00000000  00000000  000401b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001b163  00000000  00000000  00041690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001dc09  00000000  00000000  0005c7f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a089d  00000000  00000000  0007a3fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0011ac99  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005eb4  00000000  00000000  0011acec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000118 	.word	0x20000118
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800b6a4 	.word	0x0800b6a4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000011c 	.word	0x2000011c
 80001d4:	0800b6a4 	.word	0x0800b6a4

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__aeabi_d2f>:
 8000984:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000988:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800098c:	bf24      	itt	cs
 800098e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000992:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000996:	d90d      	bls.n	80009b4 <__aeabi_d2f+0x30>
 8000998:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800099c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009a0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009a4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009a8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009ac:	bf08      	it	eq
 80009ae:	f020 0001 	biceq.w	r0, r0, #1
 80009b2:	4770      	bx	lr
 80009b4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009b8:	d121      	bne.n	80009fe <__aeabi_d2f+0x7a>
 80009ba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009be:	bfbc      	itt	lt
 80009c0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009c4:	4770      	bxlt	lr
 80009c6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ce:	f1c2 0218 	rsb	r2, r2, #24
 80009d2:	f1c2 0c20 	rsb	ip, r2, #32
 80009d6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009da:	fa20 f002 	lsr.w	r0, r0, r2
 80009de:	bf18      	it	ne
 80009e0:	f040 0001 	orrne.w	r0, r0, #1
 80009e4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009ec:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009f0:	ea40 000c 	orr.w	r0, r0, ip
 80009f4:	fa23 f302 	lsr.w	r3, r3, r2
 80009f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009fc:	e7cc      	b.n	8000998 <__aeabi_d2f+0x14>
 80009fe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a02:	d107      	bne.n	8000a14 <__aeabi_d2f+0x90>
 8000a04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a08:	bf1e      	ittt	ne
 8000a0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a12:	4770      	bxne	lr
 8000a14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop

08000a24 <__aeabi_uldivmod>:
 8000a24:	b953      	cbnz	r3, 8000a3c <__aeabi_uldivmod+0x18>
 8000a26:	b94a      	cbnz	r2, 8000a3c <__aeabi_uldivmod+0x18>
 8000a28:	2900      	cmp	r1, #0
 8000a2a:	bf08      	it	eq
 8000a2c:	2800      	cmpeq	r0, #0
 8000a2e:	bf1c      	itt	ne
 8000a30:	f04f 31ff 	movne.w	r1, #4294967295
 8000a34:	f04f 30ff 	movne.w	r0, #4294967295
 8000a38:	f000 b974 	b.w	8000d24 <__aeabi_idiv0>
 8000a3c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a40:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a44:	f000 f806 	bl	8000a54 <__udivmoddi4>
 8000a48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a50:	b004      	add	sp, #16
 8000a52:	4770      	bx	lr

08000a54 <__udivmoddi4>:
 8000a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a58:	9d08      	ldr	r5, [sp, #32]
 8000a5a:	4604      	mov	r4, r0
 8000a5c:	468e      	mov	lr, r1
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d14d      	bne.n	8000afe <__udivmoddi4+0xaa>
 8000a62:	428a      	cmp	r2, r1
 8000a64:	4694      	mov	ip, r2
 8000a66:	d969      	bls.n	8000b3c <__udivmoddi4+0xe8>
 8000a68:	fab2 f282 	clz	r2, r2
 8000a6c:	b152      	cbz	r2, 8000a84 <__udivmoddi4+0x30>
 8000a6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a72:	f1c2 0120 	rsb	r1, r2, #32
 8000a76:	fa20 f101 	lsr.w	r1, r0, r1
 8000a7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a82:	4094      	lsls	r4, r2
 8000a84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a88:	0c21      	lsrs	r1, r4, #16
 8000a8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a8e:	fa1f f78c 	uxth.w	r7, ip
 8000a92:	fb08 e316 	mls	r3, r8, r6, lr
 8000a96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a9a:	fb06 f107 	mul.w	r1, r6, r7
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	d90a      	bls.n	8000ab8 <__udivmoddi4+0x64>
 8000aa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000aaa:	f080 811f 	bcs.w	8000cec <__udivmoddi4+0x298>
 8000aae:	4299      	cmp	r1, r3
 8000ab0:	f240 811c 	bls.w	8000cec <__udivmoddi4+0x298>
 8000ab4:	3e02      	subs	r6, #2
 8000ab6:	4463      	add	r3, ip
 8000ab8:	1a5b      	subs	r3, r3, r1
 8000aba:	b2a4      	uxth	r4, r4
 8000abc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ac0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ac4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ac8:	fb00 f707 	mul.w	r7, r0, r7
 8000acc:	42a7      	cmp	r7, r4
 8000ace:	d90a      	bls.n	8000ae6 <__udivmoddi4+0x92>
 8000ad0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ad4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ad8:	f080 810a 	bcs.w	8000cf0 <__udivmoddi4+0x29c>
 8000adc:	42a7      	cmp	r7, r4
 8000ade:	f240 8107 	bls.w	8000cf0 <__udivmoddi4+0x29c>
 8000ae2:	4464      	add	r4, ip
 8000ae4:	3802      	subs	r0, #2
 8000ae6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aea:	1be4      	subs	r4, r4, r7
 8000aec:	2600      	movs	r6, #0
 8000aee:	b11d      	cbz	r5, 8000af8 <__udivmoddi4+0xa4>
 8000af0:	40d4      	lsrs	r4, r2
 8000af2:	2300      	movs	r3, #0
 8000af4:	e9c5 4300 	strd	r4, r3, [r5]
 8000af8:	4631      	mov	r1, r6
 8000afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000afe:	428b      	cmp	r3, r1
 8000b00:	d909      	bls.n	8000b16 <__udivmoddi4+0xc2>
 8000b02:	2d00      	cmp	r5, #0
 8000b04:	f000 80ef 	beq.w	8000ce6 <__udivmoddi4+0x292>
 8000b08:	2600      	movs	r6, #0
 8000b0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b0e:	4630      	mov	r0, r6
 8000b10:	4631      	mov	r1, r6
 8000b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b16:	fab3 f683 	clz	r6, r3
 8000b1a:	2e00      	cmp	r6, #0
 8000b1c:	d14a      	bne.n	8000bb4 <__udivmoddi4+0x160>
 8000b1e:	428b      	cmp	r3, r1
 8000b20:	d302      	bcc.n	8000b28 <__udivmoddi4+0xd4>
 8000b22:	4282      	cmp	r2, r0
 8000b24:	f200 80f9 	bhi.w	8000d1a <__udivmoddi4+0x2c6>
 8000b28:	1a84      	subs	r4, r0, r2
 8000b2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b2e:	2001      	movs	r0, #1
 8000b30:	469e      	mov	lr, r3
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	d0e0      	beq.n	8000af8 <__udivmoddi4+0xa4>
 8000b36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b3a:	e7dd      	b.n	8000af8 <__udivmoddi4+0xa4>
 8000b3c:	b902      	cbnz	r2, 8000b40 <__udivmoddi4+0xec>
 8000b3e:	deff      	udf	#255	; 0xff
 8000b40:	fab2 f282 	clz	r2, r2
 8000b44:	2a00      	cmp	r2, #0
 8000b46:	f040 8092 	bne.w	8000c6e <__udivmoddi4+0x21a>
 8000b4a:	eba1 010c 	sub.w	r1, r1, ip
 8000b4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b52:	fa1f fe8c 	uxth.w	lr, ip
 8000b56:	2601      	movs	r6, #1
 8000b58:	0c20      	lsrs	r0, r4, #16
 8000b5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b66:	fb0e f003 	mul.w	r0, lr, r3
 8000b6a:	4288      	cmp	r0, r1
 8000b6c:	d908      	bls.n	8000b80 <__udivmoddi4+0x12c>
 8000b6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b72:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0x12a>
 8000b78:	4288      	cmp	r0, r1
 8000b7a:	f200 80cb 	bhi.w	8000d14 <__udivmoddi4+0x2c0>
 8000b7e:	4643      	mov	r3, r8
 8000b80:	1a09      	subs	r1, r1, r0
 8000b82:	b2a4      	uxth	r4, r4
 8000b84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b88:	fb07 1110 	mls	r1, r7, r0, r1
 8000b8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b90:	fb0e fe00 	mul.w	lr, lr, r0
 8000b94:	45a6      	cmp	lr, r4
 8000b96:	d908      	bls.n	8000baa <__udivmoddi4+0x156>
 8000b98:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ba0:	d202      	bcs.n	8000ba8 <__udivmoddi4+0x154>
 8000ba2:	45a6      	cmp	lr, r4
 8000ba4:	f200 80bb 	bhi.w	8000d1e <__udivmoddi4+0x2ca>
 8000ba8:	4608      	mov	r0, r1
 8000baa:	eba4 040e 	sub.w	r4, r4, lr
 8000bae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bb2:	e79c      	b.n	8000aee <__udivmoddi4+0x9a>
 8000bb4:	f1c6 0720 	rsb	r7, r6, #32
 8000bb8:	40b3      	lsls	r3, r6
 8000bba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bbe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bc2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bca:	431c      	orrs	r4, r3
 8000bcc:	40f9      	lsrs	r1, r7
 8000bce:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bd2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bd6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bda:	0c20      	lsrs	r0, r4, #16
 8000bdc:	fa1f fe8c 	uxth.w	lr, ip
 8000be0:	fb09 1118 	mls	r1, r9, r8, r1
 8000be4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000be8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bec:	4288      	cmp	r0, r1
 8000bee:	fa02 f206 	lsl.w	r2, r2, r6
 8000bf2:	d90b      	bls.n	8000c0c <__udivmoddi4+0x1b8>
 8000bf4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bf8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bfc:	f080 8088 	bcs.w	8000d10 <__udivmoddi4+0x2bc>
 8000c00:	4288      	cmp	r0, r1
 8000c02:	f240 8085 	bls.w	8000d10 <__udivmoddi4+0x2bc>
 8000c06:	f1a8 0802 	sub.w	r8, r8, #2
 8000c0a:	4461      	add	r1, ip
 8000c0c:	1a09      	subs	r1, r1, r0
 8000c0e:	b2a4      	uxth	r4, r4
 8000c10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c14:	fb09 1110 	mls	r1, r9, r0, r1
 8000c18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c20:	458e      	cmp	lr, r1
 8000c22:	d908      	bls.n	8000c36 <__udivmoddi4+0x1e2>
 8000c24:	eb1c 0101 	adds.w	r1, ip, r1
 8000c28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c2c:	d26c      	bcs.n	8000d08 <__udivmoddi4+0x2b4>
 8000c2e:	458e      	cmp	lr, r1
 8000c30:	d96a      	bls.n	8000d08 <__udivmoddi4+0x2b4>
 8000c32:	3802      	subs	r0, #2
 8000c34:	4461      	add	r1, ip
 8000c36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c3e:	eba1 010e 	sub.w	r1, r1, lr
 8000c42:	42a1      	cmp	r1, r4
 8000c44:	46c8      	mov	r8, r9
 8000c46:	46a6      	mov	lr, r4
 8000c48:	d356      	bcc.n	8000cf8 <__udivmoddi4+0x2a4>
 8000c4a:	d053      	beq.n	8000cf4 <__udivmoddi4+0x2a0>
 8000c4c:	b15d      	cbz	r5, 8000c66 <__udivmoddi4+0x212>
 8000c4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c52:	eb61 010e 	sbc.w	r1, r1, lr
 8000c56:	fa01 f707 	lsl.w	r7, r1, r7
 8000c5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c5e:	40f1      	lsrs	r1, r6
 8000c60:	431f      	orrs	r7, r3
 8000c62:	e9c5 7100 	strd	r7, r1, [r5]
 8000c66:	2600      	movs	r6, #0
 8000c68:	4631      	mov	r1, r6
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	f1c2 0320 	rsb	r3, r2, #32
 8000c72:	40d8      	lsrs	r0, r3
 8000c74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c78:	fa21 f303 	lsr.w	r3, r1, r3
 8000c7c:	4091      	lsls	r1, r2
 8000c7e:	4301      	orrs	r1, r0
 8000c80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c84:	fa1f fe8c 	uxth.w	lr, ip
 8000c88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c90:	0c0b      	lsrs	r3, r1, #16
 8000c92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c96:	fb00 f60e 	mul.w	r6, r0, lr
 8000c9a:	429e      	cmp	r6, r3
 8000c9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0x260>
 8000ca2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000caa:	d22f      	bcs.n	8000d0c <__udivmoddi4+0x2b8>
 8000cac:	429e      	cmp	r6, r3
 8000cae:	d92d      	bls.n	8000d0c <__udivmoddi4+0x2b8>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	4463      	add	r3, ip
 8000cb4:	1b9b      	subs	r3, r3, r6
 8000cb6:	b289      	uxth	r1, r1
 8000cb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000cc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x28a>
 8000ccc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cd4:	d216      	bcs.n	8000d04 <__udivmoddi4+0x2b0>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d914      	bls.n	8000d04 <__udivmoddi4+0x2b0>
 8000cda:	3e02      	subs	r6, #2
 8000cdc:	4461      	add	r1, ip
 8000cde:	1ac9      	subs	r1, r1, r3
 8000ce0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ce4:	e738      	b.n	8000b58 <__udivmoddi4+0x104>
 8000ce6:	462e      	mov	r6, r5
 8000ce8:	4628      	mov	r0, r5
 8000cea:	e705      	b.n	8000af8 <__udivmoddi4+0xa4>
 8000cec:	4606      	mov	r6, r0
 8000cee:	e6e3      	b.n	8000ab8 <__udivmoddi4+0x64>
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	e6f8      	b.n	8000ae6 <__udivmoddi4+0x92>
 8000cf4:	454b      	cmp	r3, r9
 8000cf6:	d2a9      	bcs.n	8000c4c <__udivmoddi4+0x1f8>
 8000cf8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cfc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d00:	3801      	subs	r0, #1
 8000d02:	e7a3      	b.n	8000c4c <__udivmoddi4+0x1f8>
 8000d04:	4646      	mov	r6, r8
 8000d06:	e7ea      	b.n	8000cde <__udivmoddi4+0x28a>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	e794      	b.n	8000c36 <__udivmoddi4+0x1e2>
 8000d0c:	4640      	mov	r0, r8
 8000d0e:	e7d1      	b.n	8000cb4 <__udivmoddi4+0x260>
 8000d10:	46d0      	mov	r8, sl
 8000d12:	e77b      	b.n	8000c0c <__udivmoddi4+0x1b8>
 8000d14:	3b02      	subs	r3, #2
 8000d16:	4461      	add	r1, ip
 8000d18:	e732      	b.n	8000b80 <__udivmoddi4+0x12c>
 8000d1a:	4630      	mov	r0, r6
 8000d1c:	e709      	b.n	8000b32 <__udivmoddi4+0xde>
 8000d1e:	4464      	add	r4, ip
 8000d20:	3802      	subs	r0, #2
 8000d22:	e742      	b.n	8000baa <__udivmoddi4+0x156>

08000d24 <__aeabi_idiv0>:
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop

08000d28 <autopilot_Timer>:

autopilot_stateTypeDef autopilot_states[AP_SATES_NUM];
volatile uint8_t _cur_ap_state;

void autopilot_Timer(uint32_t res)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
#ifdef NO_AUTOPILOT
	return;
#endif //NO_AUTOPILOT

	for( uint8_t i = 0; i < AUTOPILOT_TMR_NUM; i++ )
 8000d30:	2300      	movs	r3, #0
 8000d32:	73fb      	strb	r3, [r7, #15]
 8000d34:	e010      	b.n	8000d58 <autopilot_Timer+0x30>
	{
		if( autopilot_info.timer[i] > 0 ){
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
 8000d38:	4a0c      	ldr	r2, [pc, #48]	; (8000d6c <autopilot_Timer+0x44>)
 8000d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d007      	beq.n	8000d52 <autopilot_Timer+0x2a>
			autopilot_info.timer[i]--;
 8000d42:	7bfb      	ldrb	r3, [r7, #15]
 8000d44:	4a09      	ldr	r2, [pc, #36]	; (8000d6c <autopilot_Timer+0x44>)
 8000d46:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d4a:	3a01      	subs	r2, #1
 8000d4c:	4907      	ldr	r1, [pc, #28]	; (8000d6c <autopilot_Timer+0x44>)
 8000d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for( uint8_t i = 0; i < AUTOPILOT_TMR_NUM; i++ )
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
 8000d54:	3301      	adds	r3, #1
 8000d56:	73fb      	strb	r3, [r7, #15]
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	2b04      	cmp	r3, #4
 8000d5c:	d9eb      	bls.n	8000d36 <autopilot_Timer+0xe>
		}
	}

	return;
 8000d5e:	bf00      	nop
}
 8000d60:	3714      	adds	r7, #20
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20000134 	.word	0x20000134

08000d70 <autopilot_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void autopilot_InitTask()
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
#ifdef NO_AUTOPILOT
	return;
#endif //NO_AUTOPILOT

	//Init
	_cur_ap_state = 0xFF;
 8000d74:	4b1f      	ldr	r3, [pc, #124]	; (8000df4 <autopilot_InitTask+0x84>)
 8000d76:	22ff      	movs	r2, #255	; 0xff
 8000d78:	701a      	strb	r2, [r3, #0]
	autopilot_info.timer[AUTOPILOT_TMR_INIT] = 500;
 8000d7a:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <autopilot_InitTask+0x88>)
 8000d7c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000d80:	601a      	str	r2, [r3, #0]
	autopilot_info.armed_flag = 0;
 8000d82:	4b1d      	ldr	r3, [pc, #116]	; (8000df8 <autopilot_InitTask+0x88>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	755a      	strb	r2, [r3, #21]
	autopilot_info.astart_elevator_en = 0;
 8000d88:	4b1b      	ldr	r3, [pc, #108]	; (8000df8 <autopilot_InitTask+0x88>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	761a      	strb	r2, [r3, #24]
	autopilot_info.astart_motor_en = 0;
 8000d8e:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <autopilot_InitTask+0x88>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	765a      	strb	r2, [r3, #25]
	autopilot_info.astart_elevator_val = -80;
 8000d94:	4b18      	ldr	r3, [pc, #96]	; (8000df8 <autopilot_InitTask+0x88>)
 8000d96:	22b0      	movs	r2, #176	; 0xb0
 8000d98:	769a      	strb	r2, [r3, #26]
	autopilot_info.astart_motor_val = 90;
 8000d9a:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <autopilot_InitTask+0x88>)
 8000d9c:	225a      	movs	r2, #90	; 0x5a
 8000d9e:	76da      	strb	r2, [r3, #27]

	autopilot_states[AP_STATE_IDLE].start_func = NULL;
 8000da0:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <autopilot_InitTask+0x8c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
	autopilot_states[AP_STATE_IDLE].main_func = autopilot_stateIdleMain;
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <autopilot_InitTask+0x8c>)
 8000da8:	4a15      	ldr	r2, [pc, #84]	; (8000e00 <autopilot_InitTask+0x90>)
 8000daa:	605a      	str	r2, [r3, #4]
	autopilot_states[AP_STATE_IDLE].end_func = NULL;
 8000dac:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <autopilot_InitTask+0x8c>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
	autopilot_states[AP_STATE_IDLE].upd_period = 0;
 8000db2:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <autopilot_InitTask+0x8c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	60da      	str	r2, [r3, #12]

	autopilot_states[AP_STATE_FULLMANUAL].start_func = autopilot_stateFullManStart;
 8000db8:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <autopilot_InitTask+0x8c>)
 8000dba:	4a12      	ldr	r2, [pc, #72]	; (8000e04 <autopilot_InitTask+0x94>)
 8000dbc:	611a      	str	r2, [r3, #16]
	autopilot_states[AP_STATE_FULLMANUAL].main_func = autopilot_stateFullManMain;
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <autopilot_InitTask+0x8c>)
 8000dc0:	4a11      	ldr	r2, [pc, #68]	; (8000e08 <autopilot_InitTask+0x98>)
 8000dc2:	615a      	str	r2, [r3, #20]
	autopilot_states[AP_STATE_FULLMANUAL].end_func = NULL;
 8000dc4:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <autopilot_InitTask+0x8c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	619a      	str	r2, [r3, #24]
	autopilot_states[AP_STATE_FULLMANUAL].upd_period = 10;
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <autopilot_InitTask+0x8c>)
 8000dcc:	220a      	movs	r2, #10
 8000dce:	61da      	str	r2, [r3, #28]

	autopilot_states[AP_STATE_FAILSAFE].start_func = autopilot_stateFailsafeStart;
 8000dd0:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <autopilot_InitTask+0x8c>)
 8000dd2:	4a0e      	ldr	r2, [pc, #56]	; (8000e0c <autopilot_InitTask+0x9c>)
 8000dd4:	621a      	str	r2, [r3, #32]
	autopilot_states[AP_STATE_FAILSAFE].main_func = autopilot_stateFailsafeMain;
 8000dd6:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <autopilot_InitTask+0x8c>)
 8000dd8:	4a0d      	ldr	r2, [pc, #52]	; (8000e10 <autopilot_InitTask+0xa0>)
 8000dda:	625a      	str	r2, [r3, #36]	; 0x24
	autopilot_states[AP_STATE_FAILSAFE].end_func = NULL;
 8000ddc:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <autopilot_InitTask+0x8c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	629a      	str	r2, [r3, #40]	; 0x28
	autopilot_states[AP_STATE_FAILSAFE].upd_period = 0;
 8000de2:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <autopilot_InitTask+0x8c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	62da      	str	r2, [r3, #44]	; 0x2c

	return;
 8000de8:	bf00      	nop
}
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20000190 	.word	0x20000190
 8000df8:	20000134 	.word	0x20000134
 8000dfc:	20000160 	.word	0x20000160
 8000e00:	08000f01 	.word	0x08000f01
 8000e04:	08000f0f 	.word	0x08000f0f
 8000e08:	08000f1d 	.word	0x08000f1d
 8000e0c:	080011ad 	.word	0x080011ad
 8000e10:	080011cd 	.word	0x080011cd

08000e14 <autopilot_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void autopilot_Task(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
#ifdef NO_AUTOPILOT
	return;
#endif //NO_AUTOPILOT

	// initialize first state ever
	if( (_cur_ap_state == 0xFF) && (autopilot_info.timer[AUTOPILOT_TMR_INIT] == 0) ){
 8000e18:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <autopilot_Task+0x54>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	2bff      	cmp	r3, #255	; 0xff
 8000e20:	d107      	bne.n	8000e32 <autopilot_Task+0x1e>
 8000e22:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <autopilot_Task+0x58>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d103      	bne.n	8000e32 <autopilot_Task+0x1e>
		autopilot_gotoState(AP_STATE_IDLE);
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f000 f822 	bl	8000e74 <autopilot_gotoState>
 8000e30:	e017      	b.n	8000e62 <autopilot_Task+0x4e>
	}
	else
	{
		if( (_cur_ap_state < AP_SATES_NUM) && (autopilot_states[_cur_ap_state].main_func != NULL) ){
 8000e32:	4b0d      	ldr	r3, [pc, #52]	; (8000e68 <autopilot_Task+0x54>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d813      	bhi.n	8000e64 <autopilot_Task+0x50>
 8000e3c:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <autopilot_Task+0x54>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	4a0b      	ldr	r2, [pc, #44]	; (8000e70 <autopilot_Task+0x5c>)
 8000e44:	011b      	lsls	r3, r3, #4
 8000e46:	4413      	add	r3, r2
 8000e48:	3304      	adds	r3, #4
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d009      	beq.n	8000e64 <autopilot_Task+0x50>
			autopilot_states[_cur_ap_state].main_func();
 8000e50:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <autopilot_Task+0x54>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	4a06      	ldr	r2, [pc, #24]	; (8000e70 <autopilot_Task+0x5c>)
 8000e58:	011b      	lsls	r3, r3, #4
 8000e5a:	4413      	add	r3, r2
 8000e5c:	3304      	adds	r3, #4
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4798      	blx	r3
		}
	}


	return;
 8000e62:	bf00      	nop
 8000e64:	bf00      	nop
}
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000190 	.word	0x20000190
 8000e6c:	20000134 	.word	0x20000134
 8000e70:	20000160 	.word	0x20000160

08000e74 <autopilot_gotoState>:
  * @brief  sets the new ui state
  * @param  None
  * @retval None
  */
void autopilot_gotoState(uint8_t new_state)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
#ifdef NO_AUTOPILOT
	return;
#endif //NO_AUTOPILOT

	if( new_state >= AP_SATES_NUM ){
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d833      	bhi.n	8000eec <autopilot_gotoState+0x78>
		return;
	}
	if( _cur_ap_state < AP_SATES_NUM )
 8000e84:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <autopilot_gotoState+0x80>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d812      	bhi.n	8000eb4 <autopilot_gotoState+0x40>
	{
		if( autopilot_states[_cur_ap_state].end_func != NULL ){
 8000e8e:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <autopilot_gotoState+0x80>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	4a18      	ldr	r2, [pc, #96]	; (8000ef8 <autopilot_gotoState+0x84>)
 8000e96:	011b      	lsls	r3, r3, #4
 8000e98:	4413      	add	r3, r2
 8000e9a:	3308      	adds	r3, #8
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d008      	beq.n	8000eb4 <autopilot_gotoState+0x40>
			autopilot_states[_cur_ap_state].end_func();
 8000ea2:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <autopilot_gotoState+0x80>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	4a13      	ldr	r2, [pc, #76]	; (8000ef8 <autopilot_gotoState+0x84>)
 8000eaa:	011b      	lsls	r3, r3, #4
 8000eac:	4413      	add	r3, r2
 8000eae:	3308      	adds	r3, #8
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4798      	blx	r3
		}
	}
	if( autopilot_states[new_state].start_func != NULL ){
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	4a10      	ldr	r2, [pc, #64]	; (8000ef8 <autopilot_gotoState+0x84>)
 8000eb8:	011b      	lsls	r3, r3, #4
 8000eba:	4413      	add	r3, r2
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d005      	beq.n	8000ece <autopilot_gotoState+0x5a>
		autopilot_states[new_state].start_func();
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	4a0c      	ldr	r2, [pc, #48]	; (8000ef8 <autopilot_gotoState+0x84>)
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	4413      	add	r3, r2
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4798      	blx	r3
	}

	autopilot_info.timer[AUTOPILOT_TMR_UPD] = autopilot_states[new_state].upd_period;
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	4a09      	ldr	r2, [pc, #36]	; (8000ef8 <autopilot_gotoState+0x84>)
 8000ed2:	011b      	lsls	r3, r3, #4
 8000ed4:	4413      	add	r3, r2
 8000ed6:	330c      	adds	r3, #12
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a08      	ldr	r2, [pc, #32]	; (8000efc <autopilot_gotoState+0x88>)
 8000edc:	6053      	str	r3, [r2, #4]
	_cur_ap_state = new_state;
 8000ede:	4a05      	ldr	r2, [pc, #20]	; (8000ef4 <autopilot_gotoState+0x80>)
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	7013      	strb	r3, [r2, #0]
	autopilot_info.state = new_state;
 8000ee4:	4a05      	ldr	r2, [pc, #20]	; (8000efc <autopilot_gotoState+0x88>)
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	7513      	strb	r3, [r2, #20]

	return;
 8000eea:	e000      	b.n	8000eee <autopilot_gotoState+0x7a>
		return;
 8000eec:	bf00      	nop
}
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000190 	.word	0x20000190
 8000ef8:	20000160 	.word	0x20000160
 8000efc:	20000134 	.word	0x20000134

08000f00 <autopilot_stateIdleMain>:

/*IDLE*/
void autopilot_stateIdleMain()
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
	autopilot_gotoState(AP_STATE_FULLMANUAL);
 8000f04:	2001      	movs	r0, #1
 8000f06:	f7ff ffb5 	bl	8000e74 <autopilot_gotoState>

	return;
 8000f0a:	bf00      	nop
}
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <autopilot_stateFullManStart>:

/*Full manual control*/
void autopilot_stateFullManStart()
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0


	return;
 8000f12:	bf00      	nop
}
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <autopilot_stateFullManMain>:

void autopilot_stateFullManMain()
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
	float t_trot;
	static uint8_t astart_mot_state = 0;
	static uint8_t astart_elev_state = 0;

	if( autopilot_info.timer[AUTOPILOT_TMR_UPD] == 0 )
 8000f22:	4b9a      	ldr	r3, [pc, #616]	; (800118c <autopilot_stateFullManMain+0x270>)
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	f040 8091 	bne.w	800104e <autopilot_stateFullManMain+0x132>
	{
		autopilot_info.timer[AUTOPILOT_TMR_UPD] = autopilot_states[_cur_ap_state].upd_period;
 8000f2c:	4b98      	ldr	r3, [pc, #608]	; (8001190 <autopilot_stateFullManMain+0x274>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	4a98      	ldr	r2, [pc, #608]	; (8001194 <autopilot_stateFullManMain+0x278>)
 8000f34:	011b      	lsls	r3, r3, #4
 8000f36:	4413      	add	r3, r2
 8000f38:	330c      	adds	r3, #12
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a93      	ldr	r2, [pc, #588]	; (800118c <autopilot_stateFullManMain+0x270>)
 8000f3e:	6053      	str	r3, [r2, #4]
		if(rc_info.connected == 1)
 8000f40:	4b95      	ldr	r3, [pc, #596]	; (8001198 <autopilot_stateFullManMain+0x27c>)
 8000f42:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d17d      	bne.n	8001048 <autopilot_stateFullManMain+0x12c>
		{
			servo_setPercnet(SERVO_ROLL, rc_info.axis_r_y);
 8000f4c:	4b92      	ldr	r3, [pc, #584]	; (8001198 <autopilot_stateFullManMain+0x27c>)
 8000f4e:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 8000f52:	b25b      	sxtb	r3, r3
 8000f54:	4619      	mov	r1, r3
 8000f56:	2000      	movs	r0, #0
 8000f58:	f004 fe72 	bl	8005c40 <servo_setPercnet>

			if( autopilot_info.astart_elevator_en == 0 ){
 8000f5c:	4b8b      	ldr	r3, [pc, #556]	; (800118c <autopilot_stateFullManMain+0x270>)
 8000f5e:	7e1b      	ldrb	r3, [r3, #24]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d108      	bne.n	8000f78 <autopilot_stateFullManMain+0x5c>
				servo_setPercnet(SERVO_PITCH, rc_info.axis_r_x);
 8000f66:	4b8c      	ldr	r3, [pc, #560]	; (8001198 <autopilot_stateFullManMain+0x27c>)
 8000f68:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 8000f6c:	b25b      	sxtb	r3, r3
 8000f6e:	4619      	mov	r1, r3
 8000f70:	2001      	movs	r0, #1
 8000f72:	f004 fe65 	bl	8005c40 <servo_setPercnet>
 8000f76:	e013      	b.n	8000fa0 <autopilot_stateFullManMain+0x84>
			}
			//Auto start
			else
			{
				servo_setPercnet(SERVO_PITCH, autopilot_info.astart_elevator_val);
 8000f78:	4b84      	ldr	r3, [pc, #528]	; (800118c <autopilot_stateFullManMain+0x270>)
 8000f7a:	7e9b      	ldrb	r3, [r3, #26]
 8000f7c:	b25b      	sxtb	r3, r3
 8000f7e:	4619      	mov	r1, r3
 8000f80:	2001      	movs	r0, #1
 8000f82:	f004 fe5d 	bl	8005c40 <servo_setPercnet>
				//Auto start switch off condition
				if( abs((int)rc_info.axis_r_x) > 50 ){
 8000f86:	4b84      	ldr	r3, [pc, #528]	; (8001198 <autopilot_stateFullManMain+0x27c>)
 8000f88:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 8000f8c:	b25b      	sxtb	r3, r3
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	bfb8      	it	lt
 8000f92:	425b      	neglt	r3, r3
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2b32      	cmp	r3, #50	; 0x32
 8000f98:	d902      	bls.n	8000fa0 <autopilot_stateFullManMain+0x84>
					autopilot_info.astart_elevator_en = 0;
 8000f9a:	4b7c      	ldr	r3, [pc, #496]	; (800118c <autopilot_stateFullManMain+0x270>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	761a      	strb	r2, [r3, #24]
				}
			}
			//Motor
			if( ((rc_info.axis_l_x > 0) || (autopilot_info.astart_motor_en == 1)) && (autopilot_info.armed_flag == 1) )
 8000fa0:	4b7d      	ldr	r3, [pc, #500]	; (8001198 <autopilot_stateFullManMain+0x27c>)
 8000fa2:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8000fa6:	b25b      	sxtb	r3, r3
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	dc04      	bgt.n	8000fb6 <autopilot_stateFullManMain+0x9a>
 8000fac:	4b77      	ldr	r3, [pc, #476]	; (800118c <autopilot_stateFullManMain+0x270>)
 8000fae:	7e5b      	ldrb	r3, [r3, #25]
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d133      	bne.n	800101e <autopilot_stateFullManMain+0x102>
 8000fb6:	4b75      	ldr	r3, [pc, #468]	; (800118c <autopilot_stateFullManMain+0x270>)
 8000fb8:	7d5b      	ldrb	r3, [r3, #21]
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d12e      	bne.n	800101e <autopilot_stateFullManMain+0x102>
			{
				if( autopilot_info.astart_motor_en == 0 ){
 8000fc0:	4b72      	ldr	r3, [pc, #456]	; (800118c <autopilot_stateFullManMain+0x270>)
 8000fc2:	7e5b      	ldrb	r3, [r3, #25]
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d10e      	bne.n	8000fe8 <autopilot_stateFullManMain+0xcc>
					t_trot = autopilot_expRunningAverage((float)rc_info.axis_l_x);
 8000fca:	4b73      	ldr	r3, [pc, #460]	; (8001198 <autopilot_stateFullManMain+0x27c>)
 8000fcc:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8000fd0:	b25b      	sxtb	r3, r3
 8000fd2:	ee07 3a90 	vmov	s15, r3
 8000fd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fda:	eeb0 0a67 	vmov.f32	s0, s15
 8000fde:	f000 f907 	bl	80011f0 <autopilot_expRunningAverage>
 8000fe2:	ed87 0a03 	vstr	s0, [r7, #12]
				if( autopilot_info.astart_motor_en == 0 ){
 8000fe6:	e021      	b.n	800102c <autopilot_stateFullManMain+0x110>
				}
				//Auto start
				else
				{
					t_trot = autopilot_expRunningAverage((float)autopilot_info.astart_motor_val);
 8000fe8:	4b68      	ldr	r3, [pc, #416]	; (800118c <autopilot_stateFullManMain+0x270>)
 8000fea:	7edb      	ldrb	r3, [r3, #27]
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	ee07 3a90 	vmov	s15, r3
 8000ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ff6:	eeb0 0a67 	vmov.f32	s0, s15
 8000ffa:	f000 f8f9 	bl	80011f0 <autopilot_expRunningAverage>
 8000ffe:	ed87 0a03 	vstr	s0, [r7, #12]
					//Auto start switch off condition
					if( abs((int)rc_info.axis_l_x) > 50 ){
 8001002:	4b65      	ldr	r3, [pc, #404]	; (8001198 <autopilot_stateFullManMain+0x27c>)
 8001004:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8001008:	b25b      	sxtb	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	bfb8      	it	lt
 800100e:	425b      	neglt	r3, r3
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2b32      	cmp	r3, #50	; 0x32
 8001014:	d90a      	bls.n	800102c <autopilot_stateFullManMain+0x110>
						autopilot_info.astart_motor_en = 0;
 8001016:	4b5d      	ldr	r3, [pc, #372]	; (800118c <autopilot_stateFullManMain+0x270>)
 8001018:	2200      	movs	r2, #0
 800101a:	765a      	strb	r2, [r3, #25]
				if( autopilot_info.astart_motor_en == 0 ){
 800101c:	e006      	b.n	800102c <autopilot_stateFullManMain+0x110>
					}
				}
			}
			else
			{
				t_trot = autopilot_expRunningAverage(0.0f);
 800101e:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 800119c <autopilot_stateFullManMain+0x280>
 8001022:	f000 f8e5 	bl	80011f0 <autopilot_expRunningAverage>
 8001026:	ed87 0a03 	vstr	s0, [r7, #12]
 800102a:	e000      	b.n	800102e <autopilot_stateFullManMain+0x112>
				if( autopilot_info.astart_motor_en == 0 ){
 800102c:	bf00      	nop
				//motor_setTorque(MOTOR_MAIN, 0);
			}
			motor_setTorque(MOTOR_MAIN, (uint8_t)t_trot);
 800102e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001032:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001036:	edc7 7a01 	vstr	s15, [r7, #4]
 800103a:	793b      	ldrb	r3, [r7, #4]
 800103c:	b2db      	uxtb	r3, r3
 800103e:	4619      	mov	r1, r3
 8001040:	2000      	movs	r0, #0
 8001042:	f003 fa9f 	bl	8004584 <motor_setTorque>
 8001046:	e002      	b.n	800104e <autopilot_stateFullManMain+0x132>

		}
		//Lost RC reception
		else{
			autopilot_gotoState(AP_STATE_FAILSAFE);
 8001048:	2002      	movs	r0, #2
 800104a:	f7ff ff13 	bl	8000e74 <autopilot_gotoState>
		}
	}

	//ARMING
	if( autopilot_info.armed_flag == 0 )
 800104e:	4b4f      	ldr	r3, [pc, #316]	; (800118c <autopilot_stateFullManMain+0x270>)
 8001050:	7d5b      	ldrb	r3, [r3, #21]
 8001052:	b2db      	uxtb	r3, r3
 8001054:	2b00      	cmp	r3, #0
 8001056:	d131      	bne.n	80010bc <autopilot_stateFullManMain+0x1a0>
	{
		if(rc_info.connected == 1)
 8001058:	4b4f      	ldr	r3, [pc, #316]	; (8001198 <autopilot_stateFullManMain+0x27c>)
 800105a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b01      	cmp	r3, #1
 8001062:	d12b      	bne.n	80010bc <autopilot_stateFullManMain+0x1a0>
		{
			//Push trot to min for 3 sec
			if( _ap_arm_st == 0 )
 8001064:	4b4e      	ldr	r3, [pc, #312]	; (80011a0 <autopilot_stateFullManMain+0x284>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d10e      	bne.n	800108a <autopilot_stateFullManMain+0x16e>
			{
				if( rc_info.axis_l_x < -70 )
 800106c:	4b4a      	ldr	r3, [pc, #296]	; (8001198 <autopilot_stateFullManMain+0x27c>)
 800106e:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8001072:	b25b      	sxtb	r3, r3
 8001074:	f113 0f46 	cmn.w	r3, #70	; 0x46
 8001078:	da20      	bge.n	80010bc <autopilot_stateFullManMain+0x1a0>
				{
					autopilot_info.timer[AUTOPILOT_TMR_ARM] = 3000;
 800107a:	4b44      	ldr	r3, [pc, #272]	; (800118c <autopilot_stateFullManMain+0x270>)
 800107c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001080:	609a      	str	r2, [r3, #8]
					_ap_arm_st = 1;
 8001082:	4b47      	ldr	r3, [pc, #284]	; (80011a0 <autopilot_stateFullManMain+0x284>)
 8001084:	2201      	movs	r2, #1
 8001086:	701a      	strb	r2, [r3, #0]
 8001088:	e018      	b.n	80010bc <autopilot_stateFullManMain+0x1a0>
				}
			}
			else if( _ap_arm_st == 1 )
 800108a:	4b45      	ldr	r3, [pc, #276]	; (80011a0 <autopilot_stateFullManMain+0x284>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d114      	bne.n	80010bc <autopilot_stateFullManMain+0x1a0>
			{
				if( rc_info.axis_l_x >= -70 ){
 8001092:	4b41      	ldr	r3, [pc, #260]	; (8001198 <autopilot_stateFullManMain+0x27c>)
 8001094:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8001098:	b25b      	sxtb	r3, r3
 800109a:	f113 0f46 	cmn.w	r3, #70	; 0x46
 800109e:	db03      	blt.n	80010a8 <autopilot_stateFullManMain+0x18c>
					_ap_arm_st = 0;
 80010a0:	4b3f      	ldr	r3, [pc, #252]	; (80011a0 <autopilot_stateFullManMain+0x284>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	701a      	strb	r2, [r3, #0]
 80010a6:	e009      	b.n	80010bc <autopilot_stateFullManMain+0x1a0>
				}
				else
				{
					if( autopilot_info.timer[AUTOPILOT_TMR_ARM] == 0 )
 80010a8:	4b38      	ldr	r3, [pc, #224]	; (800118c <autopilot_stateFullManMain+0x270>)
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d105      	bne.n	80010bc <autopilot_stateFullManMain+0x1a0>
					{
						autopilot_info.armed_flag = 1;
 80010b0:	4b36      	ldr	r3, [pc, #216]	; (800118c <autopilot_stateFullManMain+0x270>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	755a      	strb	r2, [r3, #21]
						_ap_arm_st = 0;
 80010b6:	4b3a      	ldr	r3, [pc, #232]	; (80011a0 <autopilot_stateFullManMain+0x284>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	701a      	strb	r2, [r3, #0]

		}
	}

	//Auto start elevator
	if( autopilot_info.astart_elevator_en == 0 )
 80010bc:	4b33      	ldr	r3, [pc, #204]	; (800118c <autopilot_stateFullManMain+0x270>)
 80010be:	7e1b      	ldrb	r3, [r3, #24]
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d129      	bne.n	800111a <autopilot_stateFullManMain+0x1fe>
	{
		if( astart_elev_state == 0 )
 80010c6:	4b37      	ldr	r3, [pc, #220]	; (80011a4 <autopilot_stateFullManMain+0x288>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d10d      	bne.n	80010ea <autopilot_stateFullManMain+0x1ce>
		{
			if( rc_info.button_r == 1 )
 80010ce:	4b32      	ldr	r3, [pc, #200]	; (8001198 <autopilot_stateFullManMain+0x27c>)
 80010d0:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d11f      	bne.n	800111a <autopilot_stateFullManMain+0x1fe>
			{
				autopilot_info.timer[AUTOPILOT_TMR_ASTART_ELEV] = 2000;
 80010da:	4b2c      	ldr	r3, [pc, #176]	; (800118c <autopilot_stateFullManMain+0x270>)
 80010dc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80010e0:	611a      	str	r2, [r3, #16]
				astart_elev_state = 1;
 80010e2:	4b30      	ldr	r3, [pc, #192]	; (80011a4 <autopilot_stateFullManMain+0x288>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	701a      	strb	r2, [r3, #0]
 80010e8:	e017      	b.n	800111a <autopilot_stateFullManMain+0x1fe>
			}
		}
		else if( astart_elev_state == 1 )
 80010ea:	4b2e      	ldr	r3, [pc, #184]	; (80011a4 <autopilot_stateFullManMain+0x288>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d113      	bne.n	800111a <autopilot_stateFullManMain+0x1fe>
		{
			if( rc_info.button_r != 1 ){
 80010f2:	4b29      	ldr	r3, [pc, #164]	; (8001198 <autopilot_stateFullManMain+0x27c>)
 80010f4:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d003      	beq.n	8001106 <autopilot_stateFullManMain+0x1ea>
				astart_elev_state = 0;
 80010fe:	4b29      	ldr	r3, [pc, #164]	; (80011a4 <autopilot_stateFullManMain+0x288>)
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]
 8001104:	e009      	b.n	800111a <autopilot_stateFullManMain+0x1fe>
			}
			else
			{
				if( autopilot_info.timer[AUTOPILOT_TMR_ASTART_ELEV] == 0 )
 8001106:	4b21      	ldr	r3, [pc, #132]	; (800118c <autopilot_stateFullManMain+0x270>)
 8001108:	691b      	ldr	r3, [r3, #16]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d105      	bne.n	800111a <autopilot_stateFullManMain+0x1fe>
				{
					autopilot_info.astart_elevator_en = 1;
 800110e:	4b1f      	ldr	r3, [pc, #124]	; (800118c <autopilot_stateFullManMain+0x270>)
 8001110:	2201      	movs	r2, #1
 8001112:	761a      	strb	r2, [r3, #24]
					astart_elev_state = 0;
 8001114:	4b23      	ldr	r3, [pc, #140]	; (80011a4 <autopilot_stateFullManMain+0x288>)
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	//Auto start motor
	if( (autopilot_info.astart_motor_en == 0) && (autopilot_info.armed_flag == 1) )
 800111a:	4b1c      	ldr	r3, [pc, #112]	; (800118c <autopilot_stateFullManMain+0x270>)
 800111c:	7e5b      	ldrb	r3, [r3, #25]
 800111e:	b2db      	uxtb	r3, r3
 8001120:	2b00      	cmp	r3, #0
 8001122:	d12f      	bne.n	8001184 <autopilot_stateFullManMain+0x268>
 8001124:	4b19      	ldr	r3, [pc, #100]	; (800118c <autopilot_stateFullManMain+0x270>)
 8001126:	7d5b      	ldrb	r3, [r3, #21]
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b01      	cmp	r3, #1
 800112c:	d12a      	bne.n	8001184 <autopilot_stateFullManMain+0x268>
	{
		if( astart_mot_state == 0 )
 800112e:	4b1e      	ldr	r3, [pc, #120]	; (80011a8 <autopilot_stateFullManMain+0x28c>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d10d      	bne.n	8001152 <autopilot_stateFullManMain+0x236>
		{
			if( rc_info.button_l == 1 )
 8001136:	4b18      	ldr	r3, [pc, #96]	; (8001198 <autopilot_stateFullManMain+0x27c>)
 8001138:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b01      	cmp	r3, #1
 8001140:	d120      	bne.n	8001184 <autopilot_stateFullManMain+0x268>
			{
				autopilot_info.timer[AUTOPILOT_TMR_ASTART_MOTOR] = 2000;
 8001142:	4b12      	ldr	r3, [pc, #72]	; (800118c <autopilot_stateFullManMain+0x270>)
 8001144:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001148:	60da      	str	r2, [r3, #12]
				astart_mot_state = 1;
 800114a:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <autopilot_stateFullManMain+0x28c>)
 800114c:	2201      	movs	r2, #1
 800114e:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}

	return;
 8001150:	e018      	b.n	8001184 <autopilot_stateFullManMain+0x268>
		else if( astart_mot_state == 1 )
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <autopilot_stateFullManMain+0x28c>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d114      	bne.n	8001184 <autopilot_stateFullManMain+0x268>
			if( rc_info.button_l != 1 ){
 800115a:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <autopilot_stateFullManMain+0x27c>)
 800115c:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b01      	cmp	r3, #1
 8001164:	d003      	beq.n	800116e <autopilot_stateFullManMain+0x252>
				astart_mot_state = 0;
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <autopilot_stateFullManMain+0x28c>)
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
	return;
 800116c:	e00a      	b.n	8001184 <autopilot_stateFullManMain+0x268>
				if( autopilot_info.timer[AUTOPILOT_TMR_ASTART_MOTOR] == 0 )
 800116e:	4b07      	ldr	r3, [pc, #28]	; (800118c <autopilot_stateFullManMain+0x270>)
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d106      	bne.n	8001184 <autopilot_stateFullManMain+0x268>
					autopilot_info.astart_motor_en = 1;
 8001176:	4b05      	ldr	r3, [pc, #20]	; (800118c <autopilot_stateFullManMain+0x270>)
 8001178:	2201      	movs	r2, #1
 800117a:	765a      	strb	r2, [r3, #25]
					astart_mot_state = 0;
 800117c:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <autopilot_stateFullManMain+0x28c>)
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
	return;
 8001182:	bf00      	nop
 8001184:	bf00      	nop
}
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000134 	.word	0x20000134
 8001190:	20000190 	.word	0x20000190
 8001194:	20000160 	.word	0x20000160
 8001198:	20000898 	.word	0x20000898
 800119c:	00000000 	.word	0x00000000
 80011a0:	2000015c 	.word	0x2000015c
 80011a4:	20000191 	.word	0x20000191
 80011a8:	20000192 	.word	0x20000192

080011ac <autopilot_stateFailsafeStart>:

/*Failsafe state*/
void autopilot_stateFailsafeStart()
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
	servo_setPercnet(SERVO_ROLL, 0);
 80011b0:	2100      	movs	r1, #0
 80011b2:	2000      	movs	r0, #0
 80011b4:	f004 fd44 	bl	8005c40 <servo_setPercnet>
	servo_setPercnet(SERVO_PITCH, 0);
 80011b8:	2100      	movs	r1, #0
 80011ba:	2001      	movs	r0, #1
 80011bc:	f004 fd40 	bl	8005c40 <servo_setPercnet>
	motor_setTorque(MOTOR_MAIN, 0);
 80011c0:	2100      	movs	r1, #0
 80011c2:	2000      	movs	r0, #0
 80011c4:	f003 f9de 	bl	8004584 <motor_setTorque>

	return;
 80011c8:	bf00      	nop
}
 80011ca:	bd80      	pop	{r7, pc}

080011cc <autopilot_stateFailsafeMain>:

void autopilot_stateFailsafeMain()
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
	if(rc_info.connected == 1){
 80011d0:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <autopilot_stateFailsafeMain+0x1c>)
 80011d2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d103      	bne.n	80011e4 <autopilot_stateFailsafeMain+0x18>
		autopilot_gotoState(AP_STATE_FULLMANUAL);
 80011dc:	2001      	movs	r0, #1
 80011de:	f7ff fe49 	bl	8000e74 <autopilot_gotoState>
	}
	return;
 80011e2:	bf00      	nop
 80011e4:	bf00      	nop
}
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000898 	.word	0x20000898
 80011ec:	00000000 	.word	0x00000000

080011f0 <autopilot_expRunningAverage>:

float autopilot_expRunningAverage(float newVal)
{
 80011f0:	b5b0      	push	{r4, r5, r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	ed87 0a01 	vstr	s0, [r7, #4]
	static float filVal = 0.0f;

	if( newVal == 0.0f ){
 80011fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80011fe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001206:	d104      	bne.n	8001212 <autopilot_expRunningAverage+0x22>
		filVal = 0.0f;
 8001208:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <autopilot_expRunningAverage+0x88>)
 800120a:	f04f 0200 	mov.w	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	e025      	b.n	800125e <autopilot_expRunningAverage+0x6e>
	}
	else{
		filVal += (newVal - filVal) * TROT_FILTER_KOEF;
 8001212:	4b19      	ldr	r3, [pc, #100]	; (8001278 <autopilot_expRunningAverage+0x88>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff f94a 	bl	80004b0 <__aeabi_f2d>
 800121c:	4604      	mov	r4, r0
 800121e:	460d      	mov	r5, r1
 8001220:	4b15      	ldr	r3, [pc, #84]	; (8001278 <autopilot_expRunningAverage+0x88>)
 8001222:	edd3 7a00 	vldr	s15, [r3]
 8001226:	ed97 7a01 	vldr	s14, [r7, #4]
 800122a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800122e:	ee17 0a90 	vmov	r0, s15
 8001232:	f7ff f93d 	bl	80004b0 <__aeabi_f2d>
 8001236:	a30e      	add	r3, pc, #56	; (adr r3, 8001270 <autopilot_expRunningAverage+0x80>)
 8001238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123c:	f7ff f990 	bl	8000560 <__aeabi_dmul>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4620      	mov	r0, r4
 8001246:	4629      	mov	r1, r5
 8001248:	f7fe ffd4 	bl	80001f4 <__adddf3>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	4610      	mov	r0, r2
 8001252:	4619      	mov	r1, r3
 8001254:	f7ff fb96 	bl	8000984 <__aeabi_d2f>
 8001258:	4603      	mov	r3, r0
 800125a:	4a07      	ldr	r2, [pc, #28]	; (8001278 <autopilot_expRunningAverage+0x88>)
 800125c:	6013      	str	r3, [r2, #0]
	}

	return filVal;
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <autopilot_expRunningAverage+0x88>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	ee07 3a90 	vmov	s15, r3
}
 8001266:	eeb0 0a67 	vmov.f32	s0, s15
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bdb0      	pop	{r4, r5, r7, pc}
 8001270:	9999999a 	.word	0x9999999a
 8001274:	3fb99999 	.word	0x3fb99999
 8001278:	20000194 	.word	0x20000194

0800127c <cfg_NodeApVarProp>:

*/
/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeApVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 800127c:	b480      	push	{r7}
 800127e:	b087      	sub	sp, #28
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
 8001288:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 800128a:	89fb      	ldrh	r3, [r7, #14]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d002      	beq.n	8001296 <cfg_NodeApVarProp+0x1a>
 8001290:	2b01      	cmp	r3, #1
 8001292:	d003      	beq.n	800129c <cfg_NodeApVarProp+0x20>
 8001294:	e005      	b.n	80012a2 <cfg_NodeApVarProp+0x26>
	{
		case AUTOPILOT_STATE:	str = "State"; break;
 8001296:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <cfg_NodeApVarProp+0x88>)
 8001298:	617b      	str	r3, [r7, #20]
 800129a:	e004      	b.n	80012a6 <cfg_NodeApVarProp+0x2a>
		case AUTOPILOT_ARMED:	str = "Armed"; break;
 800129c:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <cfg_NodeApVarProp+0x8c>)
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	e001      	b.n	80012a6 <cfg_NodeApVarProp+0x2a>
		default: return CFG_ERROR_VARID;
 80012a2:	2302      	movs	r3, #2
 80012a4:	e027      	b.n	80012f6 <cfg_NodeApVarProp+0x7a>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d00f      	beq.n	80012cc <cfg_NodeApVarProp+0x50>
 80012ac:	e007      	b.n	80012be <cfg_NodeApVarProp+0x42>
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	1c53      	adds	r3, r2, #1
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	1c59      	adds	r1, r3, #1
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	7812      	ldrb	r2, [r2, #0]
 80012bc:	701a      	strb	r2, [r3, #0]
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1f3      	bne.n	80012ae <cfg_NodeApVarProp+0x32>
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	2200      	movs	r2, #0
 80012ca:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d00f      	beq.n	80012f2 <cfg_NodeApVarProp+0x76>
 80012d2:	89fb      	ldrh	r3, [r7, #14]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d002      	beq.n	80012de <cfg_NodeApVarProp+0x62>
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d004      	beq.n	80012e6 <cfg_NodeApVarProp+0x6a>
 80012dc:	e007      	b.n	80012ee <cfg_NodeApVarProp+0x72>
	{
		case AUTOPILOT_STATE:		*prop = CFG_VAR_TYPE_UINT; break;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2202      	movs	r2, #2
 80012e2:	801a      	strh	r2, [r3, #0]
 80012e4:	e006      	b.n	80012f4 <cfg_NodeApVarProp+0x78>
		case AUTOPILOT_ARMED:		*prop = CFG_VAR_TYPE_BOOL; break;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2203      	movs	r2, #3
 80012ea:	801a      	strh	r2, [r3, #0]
 80012ec:	e002      	b.n	80012f4 <cfg_NodeApVarProp+0x78>
		default: return CFG_ERROR_VARID;
 80012ee:	2302      	movs	r3, #2
 80012f0:	e001      	b.n	80012f6 <cfg_NodeApVarProp+0x7a>
	}
	return CFG_ERROR_NONE;
 80012f2:	bf00      	nop
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	371c      	adds	r7, #28
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	0800b6c8 	.word	0x0800b6c8
 8001308:	0800b6d0 	.word	0x0800b6d0

0800130c <cfg_NodeApVarGet>:

uint16_t cfg_NodeApVarGet(uint16_t varid, void *value)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	6039      	str	r1, [r7, #0]
 8001316:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d015      	beq.n	800134a <cfg_NodeApVarGet+0x3e>
 800131e:	88fb      	ldrh	r3, [r7, #6]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d002      	beq.n	800132a <cfg_NodeApVarGet+0x1e>
 8001324:	2b01      	cmp	r3, #1
 8001326:	d007      	beq.n	8001338 <cfg_NodeApVarGet+0x2c>
 8001328:	e00d      	b.n	8001346 <cfg_NodeApVarGet+0x3a>
	{
		case AUTOPILOT_STATE:		*(uint32_t*)value = (uint32_t)autopilot_info.state; break;
 800132a:	4b0c      	ldr	r3, [pc, #48]	; (800135c <cfg_NodeApVarGet+0x50>)
 800132c:	7d1b      	ldrb	r3, [r3, #20]
 800132e:	b2db      	uxtb	r3, r3
 8001330:	461a      	mov	r2, r3
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	e009      	b.n	800134c <cfg_NodeApVarGet+0x40>
		case AUTOPILOT_ARMED:		*(uint32_t*)value = (uint32_t)autopilot_info.armed_flag; break;
 8001338:	4b08      	ldr	r3, [pc, #32]	; (800135c <cfg_NodeApVarGet+0x50>)
 800133a:	7d5b      	ldrb	r3, [r3, #21]
 800133c:	b2db      	uxtb	r3, r3
 800133e:	461a      	mov	r2, r3
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	e002      	b.n	800134c <cfg_NodeApVarGet+0x40>
		default: return CFG_ERROR_VARID;
 8001346:	2302      	movs	r3, #2
 8001348:	e001      	b.n	800134e <cfg_NodeApVarGet+0x42>
	}
	return CFG_ERROR_NONE;
 800134a:	bf00      	nop
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	20000134 	.word	0x20000134

08001360 <cfg_NodeApVarSet>:

uint16_t cfg_NodeApVarSet(uint16_t varid, void *value)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	6039      	str	r1, [r7, #0]
 800136a:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d013      	beq.n	800139a <cfg_NodeApVarSet+0x3a>
 8001372:	88fb      	ldrh	r3, [r7, #6]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d002      	beq.n	800137e <cfg_NodeApVarSet+0x1e>
 8001378:	2b01      	cmp	r3, #1
 800137a:	d006      	beq.n	800138a <cfg_NodeApVarSet+0x2a>
 800137c:	e00b      	b.n	8001396 <cfg_NodeApVarSet+0x36>
	{
		case AUTOPILOT_STATE:		autopilot_info.state = (uint8_t)*(uint32_t*)value; break;
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	b2da      	uxtb	r2, r3
 8001384:	4b09      	ldr	r3, [pc, #36]	; (80013ac <cfg_NodeApVarSet+0x4c>)
 8001386:	751a      	strb	r2, [r3, #20]
 8001388:	e008      	b.n	800139c <cfg_NodeApVarSet+0x3c>
		case AUTOPILOT_ARMED:		autopilot_info.armed_flag = (uint8_t)*(uint32_t*)value; break;
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	b2da      	uxtb	r2, r3
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <cfg_NodeApVarSet+0x4c>)
 8001392:	755a      	strb	r2, [r3, #21]
 8001394:	e002      	b.n	800139c <cfg_NodeApVarSet+0x3c>
		default: return CFG_ERROR_VARID;
 8001396:	2302      	movs	r3, #2
 8001398:	e001      	b.n	800139e <cfg_NodeApVarSet+0x3e>
	}
	return CFG_ERROR_NONE;
 800139a:	bf00      	nop
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	20000134 	.word	0x20000134

080013b0 <battery_Timer>:
  * @brief  called from SysTick_Handler to update local class time
  * @param  res - time pass in mSec
  * @retval None
  */
void battery_Timer(uint32_t res)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
#ifdef NO_BATTERY
	return;
#endif //NO_BATTERY

	battery_time_counter += res;
 80013b8:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <battery_Timer+0x34>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4413      	add	r3, r2
 80013c0:	4a08      	ldr	r2, [pc, #32]	; (80013e4 <battery_Timer+0x34>)
 80013c2:	6013      	str	r3, [r2, #0]

	if( battery_info.timer ){
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <battery_Timer+0x38>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d005      	beq.n	80013d8 <battery_Timer+0x28>
		battery_info.timer--;
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <battery_Timer+0x38>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	3b01      	subs	r3, #1
 80013d2:	4a05      	ldr	r2, [pc, #20]	; (80013e8 <battery_Timer+0x38>)
 80013d4:	6013      	str	r3, [r2, #0]
	}

	return;
 80013d6:	bf00      	nop
 80013d8:	bf00      	nop
}
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	200001c4 	.word	0x200001c4
 80013e8:	20000198 	.word	0x20000198

080013ec <battery_InitTask>:
  * @brief  Init the battery interface
  * @param  None
  * @retval 1 if success, 0 if failed
  */
void battery_InitTask(uint32_t battery_filtered_measure_period)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
#ifdef NO_BATTERY
	return 1;
#endif //NO_BATTERY

	// set minimum of 100mSec, just to be safe
	if ( battery_filtered_measure_period < 100 ){
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b63      	cmp	r3, #99	; 0x63
 80013f8:	d801      	bhi.n	80013fe <battery_InitTask+0x12>
		battery_filtered_measure_period = 100;
 80013fa:	2364      	movs	r3, #100	; 0x64
 80013fc:	607b      	str	r3, [r7, #4]
	}

	battery_info.battery_filtered_measure_period = battery_filtered_measure_period;
 80013fe:	4a08      	ldr	r2, [pc, #32]	; (8001420 <battery_InitTask+0x34>)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6293      	str	r3, [r2, #40]	; 0x28
	battery_info.timer = 500;
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <battery_InitTask+0x34>)
 8001406:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800140a:	601a      	str	r2, [r3, #0]
	battery_info.init_flag = 1;
 800140c:	4b04      	ldr	r3, [pc, #16]	; (8001420 <battery_InitTask+0x34>)
 800140e:	2201      	movs	r2, #1
 8001410:	711a      	strb	r2, [r3, #4]

	return;
 8001412:	bf00      	nop
}
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	20000198 	.word	0x20000198

08001424 <battery_Task>:
  * @brief  called from the main loop
  * @param  None
  * @retval None
  */
void battery_Task()
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
#ifdef NO_BATTERY
	return;
#endif //NO_BATTERY

	// enter only if there is new analog reading of the battery voltage, else there is not reason to make any thing
	if ( battery_info.battery_volatge_updated_flag == 1)
 800142a:	4b34      	ldr	r3, [pc, #208]	; (80014fc <battery_Task+0xd8>)
 800142c:	7b5b      	ldrb	r3, [r3, #13]
 800142e:	b2db      	uxtb	r3, r3
 8001430:	2b01      	cmp	r3, #1
 8001432:	d15e      	bne.n	80014f2 <battery_Task+0xce>
	{
		battery_info.battery_volatge_updated_flag = 0;
 8001434:	4b31      	ldr	r3, [pc, #196]	; (80014fc <battery_Task+0xd8>)
 8001436:	2200      	movs	r2, #0
 8001438:	735a      	strb	r2, [r3, #13]
		//Initialization - 1st fill the filters array
		//done only once at the first time there is a battery voltage reading
		if( battery_info.init_flag == 1)
 800143a:	4b30      	ldr	r3, [pc, #192]	; (80014fc <battery_Task+0xd8>)
 800143c:	791b      	ldrb	r3, [r3, #4]
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b01      	cmp	r3, #1
 8001442:	d109      	bne.n	8001458 <battery_Task+0x34>
		{
			battery_filterInit(battery_info.battery_volatge);
 8001444:	4b2d      	ldr	r3, [pc, #180]	; (80014fc <battery_Task+0xd8>)
 8001446:	89db      	ldrh	r3, [r3, #14]
 8001448:	b29b      	uxth	r3, r3
 800144a:	4618      	mov	r0, r3
 800144c:	f000 f858 	bl	8001500 <battery_filterInit>
			battery_info.init_flag = 0;
 8001450:	4b2a      	ldr	r3, [pc, #168]	; (80014fc <battery_Task+0xd8>)
 8001452:	2200      	movs	r2, #0
 8001454:	711a      	strb	r2, [r3, #4]
			battery_info.filtered_voltage = (uint16_t)(meas_sum / BATTERY_FILT_MEAS_NUM);
			battery_info.charge_percent = battery_calcPerc(battery_info.filtered_voltage);
		}
	}

	return;
 8001456:	e04c      	b.n	80014f2 <battery_Task+0xce>
		else if( battery_info.timer == 0 ) // need to sample
 8001458:	4b28      	ldr	r3, [pc, #160]	; (80014fc <battery_Task+0xd8>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d148      	bne.n	80014f2 <battery_Task+0xce>
			battery_info.timer = battery_info.battery_filtered_measure_period;
 8001460:	4b26      	ldr	r3, [pc, #152]	; (80014fc <battery_Task+0xd8>)
 8001462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001464:	4a25      	ldr	r2, [pc, #148]	; (80014fc <battery_Task+0xd8>)
 8001466:	6013      	str	r3, [r2, #0]
			battery_info.battery_filter_step = (battery_info.battery_filter_step + 1) % BATTERY_FILT_MEAS_NUM;
 8001468:	4b24      	ldr	r3, [pc, #144]	; (80014fc <battery_Task+0xd8>)
 800146a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800146e:	b2db      	uxtb	r3, r3
 8001470:	3301      	adds	r3, #1
 8001472:	425a      	negs	r2, r3
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	f002 0207 	and.w	r2, r2, #7
 800147c:	bf58      	it	pl
 800147e:	4253      	negpl	r3, r2
 8001480:	b2da      	uxtb	r2, r3
 8001482:	4b1e      	ldr	r3, [pc, #120]	; (80014fc <battery_Task+0xd8>)
 8001484:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			battery_info.battery_meas_arr[battery_info.battery_filter_step] = battery_info.battery_volatge;
 8001488:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <battery_Task+0xd8>)
 800148a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800148e:	b2db      	uxtb	r3, r3
 8001490:	4618      	mov	r0, r3
 8001492:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <battery_Task+0xd8>)
 8001494:	89db      	ldrh	r3, [r3, #14]
 8001496:	b299      	uxth	r1, r3
 8001498:	4a18      	ldr	r2, [pc, #96]	; (80014fc <battery_Task+0xd8>)
 800149a:	f100 0308 	add.w	r3, r0, #8
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	4413      	add	r3, r2
 80014a2:	460a      	mov	r2, r1
 80014a4:	809a      	strh	r2, [r3, #4]
			uint32_t meas_sum = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	607b      	str	r3, [r7, #4]
			for( uint8_t i = 0; i < BATTERY_FILT_MEAS_NUM; i++ ){
 80014aa:	2300      	movs	r3, #0
 80014ac:	70fb      	strb	r3, [r7, #3]
 80014ae:	e00d      	b.n	80014cc <battery_Task+0xa8>
				meas_sum += (uint32_t)battery_info.battery_meas_arr[i];
 80014b0:	78fb      	ldrb	r3, [r7, #3]
 80014b2:	4a12      	ldr	r2, [pc, #72]	; (80014fc <battery_Task+0xd8>)
 80014b4:	3308      	adds	r3, #8
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	4413      	add	r3, r2
 80014ba:	889b      	ldrh	r3, [r3, #4]
 80014bc:	b29b      	uxth	r3, r3
 80014be:	461a      	mov	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4413      	add	r3, r2
 80014c4:	607b      	str	r3, [r7, #4]
			for( uint8_t i = 0; i < BATTERY_FILT_MEAS_NUM; i++ ){
 80014c6:	78fb      	ldrb	r3, [r7, #3]
 80014c8:	3301      	adds	r3, #1
 80014ca:	70fb      	strb	r3, [r7, #3]
 80014cc:	78fb      	ldrb	r3, [r7, #3]
 80014ce:	2b07      	cmp	r3, #7
 80014d0:	d9ee      	bls.n	80014b0 <battery_Task+0x8c>
			battery_info.filtered_voltage = (uint16_t)(meas_sum / BATTERY_FILT_MEAS_NUM);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	08db      	lsrs	r3, r3, #3
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <battery_Task+0xd8>)
 80014da:	821a      	strh	r2, [r3, #16]
			battery_info.charge_percent = battery_calcPerc(battery_info.filtered_voltage);
 80014dc:	4b07      	ldr	r3, [pc, #28]	; (80014fc <battery_Task+0xd8>)
 80014de:	8a1b      	ldrh	r3, [r3, #16]
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 f838 	bl	8001558 <battery_calcPerc>
 80014e8:	4603      	mov	r3, r0
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	4b03      	ldr	r3, [pc, #12]	; (80014fc <battery_Task+0xd8>)
 80014ee:	749a      	strb	r2, [r3, #18]
	return;
 80014f0:	bf00      	nop
 80014f2:	bf00      	nop
}
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000198 	.word	0x20000198

08001500 <battery_filterInit>:
  * @brief  function to init the battery filter array so it will work as expected in the first power up.
  * @param  val - battery voltage to init the filter array value.
  * @retval None
  */
static void battery_filterInit(uint16_t val)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	80fb      	strh	r3, [r7, #6]
#ifdef NO_BATTERY
	return;
#endif //NO_BATTERY

	for( uint8_t i = 0; i < BATTERY_FILT_MEAS_NUM; i++ ){
 800150a:	2300      	movs	r3, #0
 800150c:	73fb      	strb	r3, [r7, #15]
 800150e:	e009      	b.n	8001524 <battery_filterInit+0x24>
		battery_info.battery_meas_arr[i] = val;
 8001510:	7bfb      	ldrb	r3, [r7, #15]
 8001512:	4a10      	ldr	r2, [pc, #64]	; (8001554 <battery_filterInit+0x54>)
 8001514:	3308      	adds	r3, #8
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	4413      	add	r3, r2
 800151a:	88fa      	ldrh	r2, [r7, #6]
 800151c:	809a      	strh	r2, [r3, #4]
	for( uint8_t i = 0; i < BATTERY_FILT_MEAS_NUM; i++ ){
 800151e:	7bfb      	ldrb	r3, [r7, #15]
 8001520:	3301      	adds	r3, #1
 8001522:	73fb      	strb	r3, [r7, #15]
 8001524:	7bfb      	ldrb	r3, [r7, #15]
 8001526:	2b07      	cmp	r3, #7
 8001528:	d9f2      	bls.n	8001510 <battery_filterInit+0x10>
	}

	battery_info.battery_filter_step = 0;
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <battery_filterInit+0x54>)
 800152c:	2200      	movs	r2, #0
 800152e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	battery_info.filtered_voltage = val;
 8001532:	4a08      	ldr	r2, [pc, #32]	; (8001554 <battery_filterInit+0x54>)
 8001534:	88fb      	ldrh	r3, [r7, #6]
 8001536:	8213      	strh	r3, [r2, #16]
	battery_info.charge_percent = battery_calcPerc(battery_info.filtered_voltage);
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <battery_filterInit+0x54>)
 800153a:	8a1b      	ldrh	r3, [r3, #16]
 800153c:	b29b      	uxth	r3, r3
 800153e:	4618      	mov	r0, r3
 8001540:	f000 f80a 	bl	8001558 <battery_calcPerc>
 8001544:	4603      	mov	r3, r0
 8001546:	b2da      	uxtb	r2, r3
 8001548:	4b02      	ldr	r3, [pc, #8]	; (8001554 <battery_filterInit+0x54>)
 800154a:	749a      	strb	r2, [r3, #18]

	return;
 800154c:	bf00      	nop
}
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000198 	.word	0x20000198

08001558 <battery_calcPerc>:
  * @brief  function to convert from battery mVolt to battery charge percentages
  * @param  m_volt - battery voltage in mVolt.
  * @retval None
  */
uint16_t battery_calcPerc(uint16_t m_volt)
{
 8001558:	b5b0      	push	{r4, r5, r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af02      	add	r7, sp, #8
 800155e:	4603      	mov	r3, r0
 8001560:	80fb      	strh	r3, [r7, #6]
#ifdef NO_BATTERY
	return 100;
#endif //NO_BATTERY

	uint8_t i = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	73fb      	strb	r3, [r7, #15]
	uint16_t o_perc = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	81bb      	strh	r3, [r7, #12]

	// minimum voltage
	if( m_volt <= _battery_perc_lut[0][0] ){
 800156a:	4b27      	ldr	r3, [pc, #156]	; (8001608 <battery_calcPerc+0xb0>)
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	88fa      	ldrh	r2, [r7, #6]
 8001570:	429a      	cmp	r2, r3
 8001572:	d802      	bhi.n	800157a <battery_calcPerc+0x22>
		return _battery_perc_lut[0][1];
 8001574:	4b24      	ldr	r3, [pc, #144]	; (8001608 <battery_calcPerc+0xb0>)
 8001576:	885b      	ldrh	r3, [r3, #2]
 8001578:	e041      	b.n	80015fe <battery_calcPerc+0xa6>
	}

	// maximum voltage
	if( m_volt >= _battery_perc_lut[BATTERY_LUT_LEN - 1][0] ){
 800157a:	4b23      	ldr	r3, [pc, #140]	; (8001608 <battery_calcPerc+0xb0>)
 800157c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800157e:	88fa      	ldrh	r2, [r7, #6]
 8001580:	429a      	cmp	r2, r3
 8001582:	d302      	bcc.n	800158a <battery_calcPerc+0x32>
		return _battery_perc_lut[BATTERY_LUT_LEN - 1][1];
 8001584:	4b20      	ldr	r3, [pc, #128]	; (8001608 <battery_calcPerc+0xb0>)
 8001586:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001588:	e039      	b.n	80015fe <battery_calcPerc+0xa6>
	}

	// scan the look up table for needed voltage
	for( i = 0; i < BATTERY_LUT_LEN - 1; i++ )
 800158a:	2300      	movs	r3, #0
 800158c:	73fb      	strb	r3, [r7, #15]
 800158e:	e011      	b.n	80015b4 <battery_calcPerc+0x5c>
	{
		if( (m_volt >= _battery_perc_lut[i][0]) && (m_volt <= _battery_perc_lut[i + 1][0]) )
 8001590:	7bfb      	ldrb	r3, [r7, #15]
 8001592:	4a1d      	ldr	r2, [pc, #116]	; (8001608 <battery_calcPerc+0xb0>)
 8001594:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8001598:	88fa      	ldrh	r2, [r7, #6]
 800159a:	429a      	cmp	r2, r3
 800159c:	d307      	bcc.n	80015ae <battery_calcPerc+0x56>
 800159e:	7bfb      	ldrb	r3, [r7, #15]
 80015a0:	3301      	adds	r3, #1
 80015a2:	4a19      	ldr	r2, [pc, #100]	; (8001608 <battery_calcPerc+0xb0>)
 80015a4:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80015a8:	88fa      	ldrh	r2, [r7, #6]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d906      	bls.n	80015bc <battery_calcPerc+0x64>
	for( i = 0; i < BATTERY_LUT_LEN - 1; i++ )
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
 80015b0:	3301      	adds	r3, #1
 80015b2:	73fb      	strb	r3, [r7, #15]
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
 80015b6:	2b0a      	cmp	r3, #10
 80015b8:	d9ea      	bls.n	8001590 <battery_calcPerc+0x38>
 80015ba:	e000      	b.n	80015be <battery_calcPerc+0x66>
		{
			break;
 80015bc:	bf00      	nop
		}
	}

	o_perc = (uint16_t)analog_map((int32_t)m_volt, (int32_t)_battery_perc_lut[i][0],
 80015be:	88f8      	ldrh	r0, [r7, #6]
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
 80015c2:	4a11      	ldr	r2, [pc, #68]	; (8001608 <battery_calcPerc+0xb0>)
 80015c4:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80015c8:	4619      	mov	r1, r3
									(int32_t)_battery_perc_lut[i + 1][0], (int32_t)_battery_perc_lut[i][1],
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
 80015cc:	3301      	adds	r3, #1
 80015ce:	4a0e      	ldr	r2, [pc, #56]	; (8001608 <battery_calcPerc+0xb0>)
 80015d0:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
	o_perc = (uint16_t)analog_map((int32_t)m_volt, (int32_t)_battery_perc_lut[i][0],
 80015d4:	461c      	mov	r4, r3
									(int32_t)_battery_perc_lut[i + 1][0], (int32_t)_battery_perc_lut[i][1],
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
 80015d8:	4a0b      	ldr	r2, [pc, #44]	; (8001608 <battery_calcPerc+0xb0>)
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	4413      	add	r3, r2
 80015de:	885b      	ldrh	r3, [r3, #2]
	o_perc = (uint16_t)analog_map((int32_t)m_volt, (int32_t)_battery_perc_lut[i][0],
 80015e0:	461d      	mov	r5, r3
									(int32_t)_battery_perc_lut[i + 1][1]);
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
 80015e4:	3301      	adds	r3, #1
 80015e6:	4a08      	ldr	r2, [pc, #32]	; (8001608 <battery_calcPerc+0xb0>)
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	885b      	ldrh	r3, [r3, #2]
	o_perc = (uint16_t)analog_map((int32_t)m_volt, (int32_t)_battery_perc_lut[i][0],
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	462b      	mov	r3, r5
 80015f2:	4622      	mov	r2, r4
 80015f4:	f000 f80a 	bl	800160c <analog_map>
 80015f8:	4603      	mov	r3, r0
 80015fa:	81bb      	strh	r3, [r7, #12]

	return o_perc;
 80015fc:	89bb      	ldrh	r3, [r7, #12]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bdb0      	pop	{r4, r5, r7, pc}
 8001606:	bf00      	nop
 8001608:	20000000 	.word	0x20000000

0800160c <analog_map>:
  * 	toLow: the lower bound of the value’s target range.
  * 	toHigh: the upper bound of the value’s target range.
  * @retval The mapped value.
  */
static int32_t analog_map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
 8001618:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	69b9      	ldr	r1, [r7, #24]
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	1a8a      	subs	r2, r1, r2
 8001626:	fb03 f202 	mul.w	r2, r3, r2
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	1acb      	subs	r3, r1, r3
 8001630:	fb92 f2f3 	sdiv	r2, r2, r3
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	4413      	add	r3, r2
}
 8001638:	4618      	mov	r0, r3
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <cfg_NodeBatVarProp>:

/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeBatVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 8001644:	b480      	push	{r7}
 8001646:	b087      	sub	sp, #28
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
 8001650:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 8001652:	89fb      	ldrh	r3, [r7, #14]
 8001654:	2b02      	cmp	r3, #2
 8001656:	d00c      	beq.n	8001672 <cfg_NodeBatVarProp+0x2e>
 8001658:	2b02      	cmp	r3, #2
 800165a:	dc0d      	bgt.n	8001678 <cfg_NodeBatVarProp+0x34>
 800165c:	2b00      	cmp	r3, #0
 800165e:	d002      	beq.n	8001666 <cfg_NodeBatVarProp+0x22>
 8001660:	2b01      	cmp	r3, #1
 8001662:	d003      	beq.n	800166c <cfg_NodeBatVarProp+0x28>
 8001664:	e008      	b.n	8001678 <cfg_NodeBatVarProp+0x34>
	{
		case BAT_VOLTAGE:			str = "Voltage"; break;
 8001666:	4b20      	ldr	r3, [pc, #128]	; (80016e8 <cfg_NodeBatVarProp+0xa4>)
 8001668:	617b      	str	r3, [r7, #20]
 800166a:	e007      	b.n	800167c <cfg_NodeBatVarProp+0x38>
		case BAT_FILTERED_VOLTAGE:	str = "Filtered voltage"; break;
 800166c:	4b1f      	ldr	r3, [pc, #124]	; (80016ec <cfg_NodeBatVarProp+0xa8>)
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	e004      	b.n	800167c <cfg_NodeBatVarProp+0x38>
		case BAT_CHG_PERC:			str = "Charge (%)"; break;
 8001672:	4b1f      	ldr	r3, [pc, #124]	; (80016f0 <cfg_NodeBatVarProp+0xac>)
 8001674:	617b      	str	r3, [r7, #20]
 8001676:	e001      	b.n	800167c <cfg_NodeBatVarProp+0x38>
		default: return CFG_ERROR_VARID;
 8001678:	2302      	movs	r3, #2
 800167a:	e02f      	b.n	80016dc <cfg_NodeBatVarProp+0x98>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d00f      	beq.n	80016a2 <cfg_NodeBatVarProp+0x5e>
 8001682:	e007      	b.n	8001694 <cfg_NodeBatVarProp+0x50>
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	1c53      	adds	r3, r2, #1
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	1c59      	adds	r1, r3, #1
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	7812      	ldrb	r2, [r2, #0]
 8001692:	701a      	strb	r2, [r3, #0]
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1f3      	bne.n	8001684 <cfg_NodeBatVarProp+0x40>
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	2200      	movs	r2, #0
 80016a0:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d017      	beq.n	80016d8 <cfg_NodeBatVarProp+0x94>
 80016a8:	89fb      	ldrh	r3, [r7, #14]
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d00e      	beq.n	80016cc <cfg_NodeBatVarProp+0x88>
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	dc10      	bgt.n	80016d4 <cfg_NodeBatVarProp+0x90>
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d002      	beq.n	80016bc <cfg_NodeBatVarProp+0x78>
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d004      	beq.n	80016c4 <cfg_NodeBatVarProp+0x80>
 80016ba:	e00b      	b.n	80016d4 <cfg_NodeBatVarProp+0x90>
	{
		case BAT_VOLTAGE:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2212      	movs	r2, #18
 80016c0:	801a      	strh	r2, [r3, #0]
 80016c2:	e00a      	b.n	80016da <cfg_NodeBatVarProp+0x96>
		case BAT_FILTERED_VOLTAGE:	*prop = CFG_VAR_TYPE_UINT| CFG_VAR_PROP_READONLY; break;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2212      	movs	r2, #18
 80016c8:	801a      	strh	r2, [r3, #0]
 80016ca:	e006      	b.n	80016da <cfg_NodeBatVarProp+0x96>
		case BAT_CHG_PERC:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2212      	movs	r2, #18
 80016d0:	801a      	strh	r2, [r3, #0]
 80016d2:	e002      	b.n	80016da <cfg_NodeBatVarProp+0x96>
		default: return CFG_ERROR_VARID;
 80016d4:	2302      	movs	r3, #2
 80016d6:	e001      	b.n	80016dc <cfg_NodeBatVarProp+0x98>
	}
	return CFG_ERROR_NONE;
 80016d8:	bf00      	nop
 80016da:	2300      	movs	r3, #0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	371c      	adds	r7, #28
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	0800b6d8 	.word	0x0800b6d8
 80016ec:	0800b6e0 	.word	0x0800b6e0
 80016f0:	0800b6f4 	.word	0x0800b6f4

080016f4 <cfg_NodeBatVarGet>:

uint16_t cfg_NodeBatVarGet(uint16_t varid, void *value)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	6039      	str	r1, [r7, #0]
 80016fe:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d020      	beq.n	8001748 <cfg_NodeBatVarGet+0x54>
 8001706:	88fb      	ldrh	r3, [r7, #6]
 8001708:	2b02      	cmp	r3, #2
 800170a:	d014      	beq.n	8001736 <cfg_NodeBatVarGet+0x42>
 800170c:	2b02      	cmp	r3, #2
 800170e:	dc19      	bgt.n	8001744 <cfg_NodeBatVarGet+0x50>
 8001710:	2b00      	cmp	r3, #0
 8001712:	d002      	beq.n	800171a <cfg_NodeBatVarGet+0x26>
 8001714:	2b01      	cmp	r3, #1
 8001716:	d007      	beq.n	8001728 <cfg_NodeBatVarGet+0x34>
 8001718:	e014      	b.n	8001744 <cfg_NodeBatVarGet+0x50>
	{
		case BAT_VOLTAGE: 			*(uint32_t*)value = (uint32_t)battery_info.battery_volatge; break;
 800171a:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <cfg_NodeBatVarGet+0x64>)
 800171c:	89db      	ldrh	r3, [r3, #14]
 800171e:	b29b      	uxth	r3, r3
 8001720:	461a      	mov	r2, r3
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	e010      	b.n	800174a <cfg_NodeBatVarGet+0x56>
		case BAT_FILTERED_VOLTAGE: 	*(uint32_t*)value = (uint32_t)battery_info.filtered_voltage; break;
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <cfg_NodeBatVarGet+0x64>)
 800172a:	8a1b      	ldrh	r3, [r3, #16]
 800172c:	b29b      	uxth	r3, r3
 800172e:	461a      	mov	r2, r3
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	e009      	b.n	800174a <cfg_NodeBatVarGet+0x56>
		case BAT_CHG_PERC: 			*(uint32_t*)value = (uint32_t)battery_info.charge_percent; break;
 8001736:	4b08      	ldr	r3, [pc, #32]	; (8001758 <cfg_NodeBatVarGet+0x64>)
 8001738:	7c9b      	ldrb	r3, [r3, #18]
 800173a:	b2db      	uxtb	r3, r3
 800173c:	461a      	mov	r2, r3
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	e002      	b.n	800174a <cfg_NodeBatVarGet+0x56>
		default: return CFG_ERROR_VARID;
 8001744:	2302      	movs	r3, #2
 8001746:	e001      	b.n	800174c <cfg_NodeBatVarGet+0x58>
	}
	return CFG_ERROR_NONE;
 8001748:	bf00      	nop
 800174a:	2300      	movs	r3, #0
}
 800174c:	4618      	mov	r0, r3
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	20000198 	.word	0x20000198

0800175c <cfg_NodeBatVarSet>:

uint16_t cfg_NodeBatVarSet(uint16_t varid, void *value)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	6039      	str	r1, [r7, #0]
 8001766:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d00a      	beq.n	8001784 <cfg_NodeBatVarSet+0x28>
 800176e:	88fb      	ldrh	r3, [r7, #6]
 8001770:	2b02      	cmp	r3, #2
 8001772:	d009      	beq.n	8001788 <cfg_NodeBatVarSet+0x2c>
 8001774:	2b02      	cmp	r3, #2
 8001776:	dc03      	bgt.n	8001780 <cfg_NodeBatVarSet+0x24>
 8001778:	2b00      	cmp	r3, #0
 800177a:	d007      	beq.n	800178c <cfg_NodeBatVarSet+0x30>
 800177c:	2b01      	cmp	r3, #1
 800177e:	d007      	beq.n	8001790 <cfg_NodeBatVarSet+0x34>
	{
		case BAT_VOLTAGE:			break;
		case BAT_FILTERED_VOLTAGE:	break;
		case BAT_CHG_PERC:			break;
		default: return CFG_ERROR_VARID;
 8001780:	2302      	movs	r3, #2
 8001782:	e007      	b.n	8001794 <cfg_NodeBatVarSet+0x38>
	}
	return CFG_ERROR_NONE;
 8001784:	bf00      	nop
 8001786:	e004      	b.n	8001792 <cfg_NodeBatVarSet+0x36>
		case BAT_CHG_PERC:			break;
 8001788:	bf00      	nop
 800178a:	e002      	b.n	8001792 <cfg_NodeBatVarSet+0x36>
		case BAT_VOLTAGE:			break;
 800178c:	bf00      	nop
 800178e:	e000      	b.n	8001792 <cfg_NodeBatVarSet+0x36>
		case BAT_FILTERED_VOLTAGE:	break;
 8001790:	bf00      	nop
	return CFG_ERROR_NONE;
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <cfg_GetNodeName>:
	{ NODE_AUTOPILOT, NODE_MAIN, AUTOPILOT_VAR_NUM, cfg_NodeApVarGet, cfg_NodeApVarSet, cfg_NodeApVarProp}
};

/* @brief get the name of the node */
uint16_t cfg_GetNodeName(uint16_t nodeid, char *name)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	6039      	str	r1, [r7, #0]
 80017aa:	80fb      	strh	r3, [r7, #6]
	char *str;

	// получаем имя переменной
	switch( nodeid )
 80017ac:	88fb      	ldrh	r3, [r7, #6]
 80017ae:	f242 72dd 	movw	r2, #10205	; 0x27dd
 80017b2:	4293      	cmp	r3, r2
 80017b4:	dc3d      	bgt.n	8001832 <cfg_GetNodeName+0x92>
 80017b6:	f242 72d9 	movw	r2, #10201	; 0x27d9
 80017ba:	4293      	cmp	r3, r2
 80017bc:	da0c      	bge.n	80017d8 <cfg_GetNodeName+0x38>
 80017be:	2b67      	cmp	r3, #103	; 0x67
 80017c0:	d034      	beq.n	800182c <cfg_GetNodeName+0x8c>
 80017c2:	2b67      	cmp	r3, #103	; 0x67
 80017c4:	dc35      	bgt.n	8001832 <cfg_GetNodeName+0x92>
 80017c6:	2b66      	cmp	r3, #102	; 0x66
 80017c8:	d01e      	beq.n	8001808 <cfg_GetNodeName+0x68>
 80017ca:	2b66      	cmp	r3, #102	; 0x66
 80017cc:	dc31      	bgt.n	8001832 <cfg_GetNodeName+0x92>
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d014      	beq.n	80017fc <cfg_GetNodeName+0x5c>
 80017d2:	2b65      	cmp	r3, #101	; 0x65
 80017d4:	d015      	beq.n	8001802 <cfg_GetNodeName+0x62>
		case NODE_MOTOR    	: str = "Motor"; break;
		case NODE_RC    	: str = "RC"; break;
		case NODE_BAT    	: str = "Battery"; break;
		case NODE_SENS    	: str = "Sensors"; break;
		case NODE_AUTOPILOT	: str = "Autopilot"; break;
		default:break;
 80017d6:	e02c      	b.n	8001832 <cfg_GetNodeName+0x92>
	switch( nodeid )
 80017d8:	f5a3 531f 	sub.w	r3, r3, #10176	; 0x27c0
 80017dc:	3b19      	subs	r3, #25
 80017de:	2b04      	cmp	r3, #4
 80017e0:	d827      	bhi.n	8001832 <cfg_GetNodeName+0x92>
 80017e2:	a201      	add	r2, pc, #4	; (adr r2, 80017e8 <cfg_GetNodeName+0x48>)
 80017e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e8:	0800180f 	.word	0x0800180f
 80017ec:	08001815 	.word	0x08001815
 80017f0:	0800181b 	.word	0x0800181b
 80017f4:	08001821 	.word	0x08001821
 80017f8:	08001827 	.word	0x08001827
		case NODE_MAIN		: str = "Nimbus_2000"; break;
 80017fc:	4b1a      	ldr	r3, [pc, #104]	; (8001868 <cfg_GetNodeName+0xc8>)
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	e018      	b.n	8001834 <cfg_GetNodeName+0x94>
		case NODE_FW		: str = "Firmware"; break;
 8001802:	4b1a      	ldr	r3, [pc, #104]	; (800186c <cfg_GetNodeName+0xcc>)
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	e015      	b.n	8001834 <cfg_GetNodeName+0x94>
		case NODE_DEV    	: str = "Aircraft devices"; break;
 8001808:	4b19      	ldr	r3, [pc, #100]	; (8001870 <cfg_GetNodeName+0xd0>)
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	e012      	b.n	8001834 <cfg_GetNodeName+0x94>
		case NODE_SERVO    	: str = "Servo"; break;
 800180e:	4b19      	ldr	r3, [pc, #100]	; (8001874 <cfg_GetNodeName+0xd4>)
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	e00f      	b.n	8001834 <cfg_GetNodeName+0x94>
		case NODE_MOTOR    	: str = "Motor"; break;
 8001814:	4b18      	ldr	r3, [pc, #96]	; (8001878 <cfg_GetNodeName+0xd8>)
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	e00c      	b.n	8001834 <cfg_GetNodeName+0x94>
		case NODE_RC    	: str = "RC"; break;
 800181a:	4b18      	ldr	r3, [pc, #96]	; (800187c <cfg_GetNodeName+0xdc>)
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	e009      	b.n	8001834 <cfg_GetNodeName+0x94>
		case NODE_BAT    	: str = "Battery"; break;
 8001820:	4b17      	ldr	r3, [pc, #92]	; (8001880 <cfg_GetNodeName+0xe0>)
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	e006      	b.n	8001834 <cfg_GetNodeName+0x94>
		case NODE_SENS    	: str = "Sensors"; break;
 8001826:	4b17      	ldr	r3, [pc, #92]	; (8001884 <cfg_GetNodeName+0xe4>)
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	e003      	b.n	8001834 <cfg_GetNodeName+0x94>
		case NODE_AUTOPILOT	: str = "Autopilot"; break;
 800182c:	4b16      	ldr	r3, [pc, #88]	; (8001888 <cfg_GetNodeName+0xe8>)
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	e000      	b.n	8001834 <cfg_GetNodeName+0x94>
		default:break;
 8001832:	bf00      	nop
	}
	if( name )
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00f      	beq.n	800185a <cfg_GetNodeName+0xba>
	{
		while( *str ){
 800183a:	e007      	b.n	800184c <cfg_GetNodeName+0xac>
			*name++ = *str++;
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	1c53      	adds	r3, r2, #1
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	1c59      	adds	r1, r3, #1
 8001846:	6039      	str	r1, [r7, #0]
 8001848:	7812      	ldrb	r2, [r2, #0]
 800184a:	701a      	strb	r2, [r3, #0]
		while( *str ){
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1f3      	bne.n	800183c <cfg_GetNodeName+0x9c>
		}
		*name = 0;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	2200      	movs	r2, #0
 8001858:	701a      	strb	r2, [r3, #0]
	}

	return CFG_ERROR_NONE;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	0800b700 	.word	0x0800b700
 800186c:	0800b70c 	.word	0x0800b70c
 8001870:	0800b718 	.word	0x0800b718
 8001874:	0800b72c 	.word	0x0800b72c
 8001878:	0800b734 	.word	0x0800b734
 800187c:	0800b73c 	.word	0x0800b73c
 8001880:	0800b740 	.word	0x0800b740
 8001884:	0800b748 	.word	0x0800b748
 8001888:	0800b750 	.word	0x0800b750

0800188c <cfg_GetNode>:

/* @brief get node*/
cgf_nodeTypeDef* cfg_GetNode(uint16_t nodeid)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	80fb      	strh	r3, [r7, #6]
	cgf_nodeTypeDef *node = cfg_NodeList;
 8001896:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <cfg_GetNode+0x58>)
 8001898:	60fb      	str	r3, [r7, #12]
	uint16_t n;

	for( n = 0; n < cfg_info.node_num && node->id != nodeid ; n++, node++ );
 800189a:	2300      	movs	r3, #0
 800189c:	817b      	strh	r3, [r7, #10]
 800189e:	e005      	b.n	80018ac <cfg_GetNode+0x20>
 80018a0:	897b      	ldrh	r3, [r7, #10]
 80018a2:	3301      	adds	r3, #1
 80018a4:	817b      	strh	r3, [r7, #10]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	3314      	adds	r3, #20
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <cfg_GetNode+0x5c>)
 80018ae:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	897a      	ldrh	r2, [r7, #10]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d204      	bcs.n	80018c4 <cfg_GetNode+0x38>
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	881b      	ldrh	r3, [r3, #0]
 80018be:	88fa      	ldrh	r2, [r7, #6]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d1ed      	bne.n	80018a0 <cfg_GetNode+0x14>

	return n == cfg_info.node_num ? 0 : node;
 80018c4:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <cfg_GetNode+0x5c>)
 80018c6:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	897a      	ldrh	r2, [r7, #10]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d001      	beq.n	80018d6 <cfg_GetNode+0x4a>
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	e000      	b.n	80018d8 <cfg_GetNode+0x4c>
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	20000030 	.word	0x20000030
 80018e8:	200001c8 	.word	0x200001c8

080018ec <cfg_NodeFwVarProp>:

/* Main node functions*/
/*************************************************************************/
uint16_t cfg_NodeFwVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b087      	sub	sp, #28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
 80018f8:	81fb      	strh	r3, [r7, #14]
	char *str;// = malloc(50);

	if( varid == 0 )
 80018fa:	89fb      	ldrh	r3, [r7, #14]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d105      	bne.n	800190c <cfg_NodeFwVarProp+0x20>
	{
		str = "Version";
 8001900:	4b16      	ldr	r3, [pc, #88]	; (800195c <cfg_NodeFwVarProp+0x70>)
 8001902:	617b      	str	r3, [r7, #20]
		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2214      	movs	r2, #20
 8001908:	801a      	strh	r2, [r3, #0]
 800190a:	e00d      	b.n	8001928 <cfg_NodeFwVarProp+0x3c>
	}
	else if( varid == 1 )
 800190c:	89fb      	ldrh	r3, [r7, #14]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d105      	bne.n	800191e <cfg_NodeFwVarProp+0x32>
	{
		str = "Prepare for flashing";
 8001912:	4b13      	ldr	r3, [pc, #76]	; (8001960 <cfg_NodeFwVarProp+0x74>)
 8001914:	617b      	str	r3, [r7, #20]
		*prop = CFG_VAR_TYPE_BOOL;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2203      	movs	r2, #3
 800191a:	801a      	strh	r2, [r3, #0]
 800191c:	e004      	b.n	8001928 <cfg_NodeFwVarProp+0x3c>
	}
	else
	{
		str = "Data";
 800191e:	4b11      	ldr	r3, [pc, #68]	; (8001964 <cfg_NodeFwVarProp+0x78>)
 8001920:	617b      	str	r3, [r7, #20]
		//str = malloc(15);
		//sprintf(str, "Data %u", varid - 2);
		*prop = CFG_VAR_TYPE_HEX | CFG_VAR_PROP_READONLY;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2215      	movs	r2, #21
 8001926:	801a      	strh	r2, [r3, #0]
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00f      	beq.n	800194e <cfg_NodeFwVarProp+0x62>
 800192e:	e007      	b.n	8001940 <cfg_NodeFwVarProp+0x54>
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	1c53      	adds	r3, r2, #1
 8001934:	617b      	str	r3, [r7, #20]
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	1c59      	adds	r1, r3, #1
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	7812      	ldrb	r2, [r2, #0]
 800193e:	701a      	strb	r2, [r3, #0]
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1f3      	bne.n	8001930 <cfg_NodeFwVarProp+0x44>
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	2200      	movs	r2, #0
 800194c:	701a      	strb	r2, [r3, #0]
	//free(str);
	return CFG_ERROR_NONE;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	371c      	adds	r7, #28
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	0800b75c 	.word	0x0800b75c
 8001960:	0800b764 	.word	0x0800b764
 8001964:	0800b77c 	.word	0x0800b77c

08001968 <cfg_NodeFwVarGet>:

uint16_t cfg_NodeFwVarGet(uint16_t varid, void *value)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	6039      	str	r1, [r7, #0]
 8001972:	80fb      	strh	r3, [r7, #6]
	if( varid == 0 ){
 8001974:	88fb      	ldrh	r3, [r7, #6]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d103      	bne.n	8001982 <cfg_NodeFwVarGet+0x1a>
		*(float*)value = 0.9;
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	4a0a      	ldr	r2, [pc, #40]	; (80019a8 <cfg_NodeFwVarGet+0x40>)
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	e00a      	b.n	8001998 <cfg_NodeFwVarGet+0x30>
	}
	else if( varid == 1){
 8001982:	88fb      	ldrh	r3, [r7, #6]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d103      	bne.n	8001990 <cfg_NodeFwVarGet+0x28>
		*(uint32_t*)value = 0;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	e003      	b.n	8001998 <cfg_NodeFwVarGet+0x30>
	}
	else {
		*(uint32_t*)value = 0xFFFFFFFF;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	f04f 32ff 	mov.w	r2, #4294967295
 8001996:	601a      	str	r2, [r3, #0]
	}
	return CFG_ERROR_NONE;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	3f666666 	.word	0x3f666666

080019ac <cfg_NodeFwVarSet>:

uint16_t cfg_NodeFwVarSet(uint16_t varid, void *value)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	6039      	str	r1, [r7, #0]
 80019b6:	80fb      	strh	r3, [r7, #6]
	//Prepare for flashing (clear new fw buffer)
	if( varid == 1 )
 80019b8:	88fb      	ldrh	r3, [r7, #6]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d106      	bne.n	80019cc <cfg_NodeFwVarSet+0x20>
	{
		if( *(uint32_t*)value != 0 ){
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d012      	beq.n	80019ec <cfg_NodeFwVarSet+0x40>
			cfg_ClearFwBuf();
 80019c6:	f001 f919 	bl	8002bfc <cfg_ClearFwBuf>
 80019ca:	e00f      	b.n	80019ec <cfg_NodeFwVarSet+0x40>
		}
	}
	//Receiving data
	else if( varid < CFG_FW_VAR_NUM ){
 80019cc:	88fb      	ldrh	r3, [r7, #6]
 80019ce:	2b2f      	cmp	r3, #47	; 0x2f
 80019d0:	d805      	bhi.n	80019de <cfg_NodeFwVarSet+0x32>
		cfg_WriteFwData(*(uint32_t*)value);
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f001 f928 	bl	8002c2c <cfg_WriteFwData>
 80019dc:	e006      	b.n	80019ec <cfg_NodeFwVarSet+0x40>
	}
	//Receiving complete
	else if( varid == (CFG_FW_VAR_NUM + 1) ){
 80019de:	88fb      	ldrh	r3, [r7, #6]
 80019e0:	2b31      	cmp	r3, #49	; 0x31
 80019e2:	d103      	bne.n	80019ec <cfg_NodeFwVarSet+0x40>
		cfg_info.new_fw_received = 1;
 80019e4:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <cfg_NodeFwVarSet+0x4c>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 232d 	strb.w	r2, [r3, #813]	; 0x32d
	}
	return CFG_ERROR_NONE;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	200001c8 	.word	0x200001c8

080019fc <cfg_NodeMainVarProp>:

/* Main node functions*/
/*************************************************************************/
uint16_t cfg_NodeMainVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b087      	sub	sp, #28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
 8001a08:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 8001a0a:	89fb      	ldrh	r3, [r7, #14]
 8001a0c:	2b03      	cmp	r3, #3
 8001a0e:	d817      	bhi.n	8001a40 <cfg_NodeMainVarProp+0x44>
 8001a10:	a201      	add	r2, pc, #4	; (adr r2, 8001a18 <cfg_NodeMainVarProp+0x1c>)
 8001a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a16:	bf00      	nop
 8001a18:	08001a29 	.word	0x08001a29
 8001a1c:	08001a2f 	.word	0x08001a2f
 8001a20:	08001a35 	.word	0x08001a35
 8001a24:	08001a3b 	.word	0x08001a3b
	{
		case MAIN_DEVICE_ID:			str = "Device ID"; break;
 8001a28:	4b25      	ldr	r3, [pc, #148]	; (8001ac0 <cfg_NodeMainVarProp+0xc4>)
 8001a2a:	617b      	str	r3, [r7, #20]
 8001a2c:	e00a      	b.n	8001a44 <cfg_NodeMainVarProp+0x48>
		case MAIN_WORKING_TIME:			str = "Working time"; break;
 8001a2e:	4b25      	ldr	r3, [pc, #148]	; (8001ac4 <cfg_NodeMainVarProp+0xc8>)
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	e007      	b.n	8001a44 <cfg_NodeMainVarProp+0x48>
		case MAIN_SAVE:					str = "Save settings"; break;
 8001a34:	4b24      	ldr	r3, [pc, #144]	; (8001ac8 <cfg_NodeMainVarProp+0xcc>)
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	e004      	b.n	8001a44 <cfg_NodeMainVarProp+0x48>
		case MAIN_RESET:				str = "Reboot device"; break;
 8001a3a:	4b24      	ldr	r3, [pc, #144]	; (8001acc <cfg_NodeMainVarProp+0xd0>)
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	e001      	b.n	8001a44 <cfg_NodeMainVarProp+0x48>
		default: return CFG_ERROR_VARID;
 8001a40:	2302      	movs	r3, #2
 8001a42:	e037      	b.n	8001ab4 <cfg_NodeMainVarProp+0xb8>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d00f      	beq.n	8001a6a <cfg_NodeMainVarProp+0x6e>
 8001a4a:	e007      	b.n	8001a5c <cfg_NodeMainVarProp+0x60>
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	1c53      	adds	r3, r2, #1
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	1c59      	adds	r1, r3, #1
 8001a56:	60b9      	str	r1, [r7, #8]
 8001a58:	7812      	ldrb	r2, [r2, #0]
 8001a5a:	701a      	strb	r2, [r3, #0]
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1f3      	bne.n	8001a4c <cfg_NodeMainVarProp+0x50>
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	2200      	movs	r2, #0
 8001a68:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d01f      	beq.n	8001ab0 <cfg_NodeMainVarProp+0xb4>
 8001a70:	89fb      	ldrh	r3, [r7, #14]
 8001a72:	2b03      	cmp	r3, #3
 8001a74:	d81a      	bhi.n	8001aac <cfg_NodeMainVarProp+0xb0>
 8001a76:	a201      	add	r2, pc, #4	; (adr r2, 8001a7c <cfg_NodeMainVarProp+0x80>)
 8001a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a7c:	08001a8d 	.word	0x08001a8d
 8001a80:	08001a95 	.word	0x08001a95
 8001a84:	08001a9d 	.word	0x08001a9d
 8001a88:	08001aa5 	.word	0x08001aa5
	{
		case MAIN_DEVICE_ID:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2222      	movs	r2, #34	; 0x22
 8001a90:	801a      	strh	r2, [r3, #0]
 8001a92:	e00e      	b.n	8001ab2 <cfg_NodeMainVarProp+0xb6>
		case MAIN_WORKING_TIME:	  		*prop = CFG_VAR_TYPE_TIME | CFG_VAR_PROP_READONLY; break;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2217      	movs	r2, #23
 8001a98:	801a      	strh	r2, [r3, #0]
 8001a9a:	e00a      	b.n	8001ab2 <cfg_NodeMainVarProp+0xb6>
		case MAIN_SAVE:					*prop = CFG_VAR_TYPE_BOOL; break;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	801a      	strh	r2, [r3, #0]
 8001aa2:	e006      	b.n	8001ab2 <cfg_NodeMainVarProp+0xb6>
		case MAIN_RESET:				*prop = CFG_VAR_TYPE_BOOL; break;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	801a      	strh	r2, [r3, #0]
 8001aaa:	e002      	b.n	8001ab2 <cfg_NodeMainVarProp+0xb6>
		default: return CFG_ERROR_VARID;
 8001aac:	2302      	movs	r3, #2
 8001aae:	e001      	b.n	8001ab4 <cfg_NodeMainVarProp+0xb8>
	}
	return CFG_ERROR_NONE;
 8001ab0:	bf00      	nop
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	371c      	adds	r7, #28
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	0800b784 	.word	0x0800b784
 8001ac4:	0800b790 	.word	0x0800b790
 8001ac8:	0800b7a0 	.word	0x0800b7a0
 8001acc:	0800b7b0 	.word	0x0800b7b0

08001ad0 <cfg_NodeMainVarGet>:

uint16_t cfg_NodeMainVarGet(uint16_t varid, void *value)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	6039      	str	r1, [r7, #0]
 8001ada:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d026      	beq.n	8001b30 <cfg_NodeMainVarGet+0x60>
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	2b03      	cmp	r3, #3
 8001ae6:	d821      	bhi.n	8001b2c <cfg_NodeMainVarGet+0x5c>
 8001ae8:	a201      	add	r2, pc, #4	; (adr r2, 8001af0 <cfg_NodeMainVarGet+0x20>)
 8001aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aee:	bf00      	nop
 8001af0:	08001b01 	.word	0x08001b01
 8001af4:	08001b11 	.word	0x08001b11
 8001af8:	08001b1d 	.word	0x08001b1d
 8001afc:	08001b25 	.word	0x08001b25
	{
		case MAIN_DEVICE_ID: 			*(uint32_t*)value = (uint32_t)cfg_info.device_id; break;
 8001b00:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <cfg_NodeMainVarGet+0x6c>)
 8001b02:	f8b3 331c 	ldrh.w	r3, [r3, #796]	; 0x31c
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	461a      	mov	r2, r3
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	e010      	b.n	8001b32 <cfg_NodeMainVarGet+0x62>
		case MAIN_WORKING_TIME: 		*(uint32_t*)value = HAL_GetTick(); break;
 8001b10:	f004 fdf8 	bl	8006704 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	e00a      	b.n	8001b32 <cfg_NodeMainVarGet+0x62>
		case MAIN_SAVE: 				*(uint32_t*)value = 0; break;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	e006      	b.n	8001b32 <cfg_NodeMainVarGet+0x62>
		case MAIN_RESET: 				*(uint32_t*)value = 0; break;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	e002      	b.n	8001b32 <cfg_NodeMainVarGet+0x62>
		default: return CFG_ERROR_VARID;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	e001      	b.n	8001b34 <cfg_NodeMainVarGet+0x64>
	}
	return CFG_ERROR_NONE;
 8001b30:	bf00      	nop
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	200001c8 	.word	0x200001c8

08001b40 <cfg_NodeMainVarSet>:

uint16_t cfg_NodeMainVarSet(uint16_t varid, void *value)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	6039      	str	r1, [r7, #0]
 8001b4a:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d025      	beq.n	8001b9e <cfg_NodeMainVarSet+0x5e>
 8001b52:	88fb      	ldrh	r3, [r7, #6]
 8001b54:	2b03      	cmp	r3, #3
 8001b56:	d820      	bhi.n	8001b9a <cfg_NodeMainVarSet+0x5a>
 8001b58:	a201      	add	r2, pc, #4	; (adr r2, 8001b60 <cfg_NodeMainVarSet+0x20>)
 8001b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b5e:	bf00      	nop
 8001b60:	08001b71 	.word	0x08001b71
 8001b64:	08001ba3 	.word	0x08001ba3
 8001b68:	08001b7d 	.word	0x08001b7d
 8001b6c:	08001b8b 	.word	0x08001b8b
	{
		case MAIN_DEVICE_ID:				cfg_info.device_id = *(uint16_t*)value; break;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	881a      	ldrh	r2, [r3, #0]
 8001b74:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <cfg_NodeMainVarSet+0x78>)
 8001b76:	f8a3 231c 	strh.w	r2, [r3, #796]	; 0x31c
 8001b7a:	e017      	b.n	8001bac <cfg_NodeMainVarSet+0x6c>
		case MAIN_WORKING_TIME:				break;
		case MAIN_SAVE:						if( *(uint32_t*)value ) {cfg_SaveSettings();} break;
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d010      	beq.n	8001ba6 <cfg_NodeMainVarSet+0x66>
 8001b84:	f000 fe64 	bl	8002850 <cfg_SaveSettings>
 8001b88:	e00d      	b.n	8001ba6 <cfg_NodeMainVarSet+0x66>
		case MAIN_RESET:					if( *(uint32_t*)value ) {system_info.reset_req = 1;} break;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d00b      	beq.n	8001baa <cfg_NodeMainVarSet+0x6a>
 8001b92:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <cfg_NodeMainVarSet+0x7c>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	705a      	strb	r2, [r3, #1]
 8001b98:	e007      	b.n	8001baa <cfg_NodeMainVarSet+0x6a>
		default: return CFG_ERROR_VARID;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	e007      	b.n	8001bae <cfg_NodeMainVarSet+0x6e>
	}
	return CFG_ERROR_NONE;
 8001b9e:	bf00      	nop
 8001ba0:	e004      	b.n	8001bac <cfg_NodeMainVarSet+0x6c>
		case MAIN_WORKING_TIME:				break;
 8001ba2:	bf00      	nop
 8001ba4:	e002      	b.n	8001bac <cfg_NodeMainVarSet+0x6c>
		case MAIN_SAVE:						if( *(uint32_t*)value ) {cfg_SaveSettings();} break;
 8001ba6:	bf00      	nop
 8001ba8:	e000      	b.n	8001bac <cfg_NodeMainVarSet+0x6c>
		case MAIN_RESET:					if( *(uint32_t*)value ) {system_info.reset_req = 1;} break;
 8001baa:	bf00      	nop
	return CFG_ERROR_NONE;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	200001c8 	.word	0x200001c8
 8001bbc:	20000ae4 	.word	0x20000ae4

08001bc0 <cfg_Timer>:
  * @brief  called from SysTick_Handler to update local class time
  * @param  res - time pass in mSec
  * @retval None
  */
void cfg_Timer(uint32_t res)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
#ifdef NO_CFG
	return;
#endif //NO_CFG

	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	e023      	b.n	8001c16 <cfg_Timer+0x56>
	{
		if( cfg_info.iface[i].timer > 0 ){
 8001bce:	4a16      	ldr	r2, [pc, #88]	; (8001c28 <cfg_Timer+0x68>)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001bd6:	fb01 f303 	mul.w	r3, r1, r3
 8001bda:	4413      	add	r3, r2
 8001bdc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d014      	beq.n	8001c10 <cfg_Timer+0x50>
			cfg_info.iface[i].timer--;
 8001be6:	4a10      	ldr	r2, [pc, #64]	; (8001c28 <cfg_Timer+0x68>)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001bee:	fb01 f303 	mul.w	r3, r1, r3
 8001bf2:	4413      	add	r3, r2
 8001bf4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	1e5a      	subs	r2, r3, #1
 8001bfc:	490a      	ldr	r1, [pc, #40]	; (8001c28 <cfg_Timer+0x68>)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8001c04:	fb00 f303 	mul.w	r3, r0, r3
 8001c08:	440b      	add	r3, r1
 8001c0a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001c0e:	601a      	str	r2, [r3, #0]
	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	3301      	adds	r3, #1
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0d8      	beq.n	8001bce <cfg_Timer+0xe>
		}
	}

	return;
 8001c1c:	bf00      	nop
}
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	200001c8 	.word	0x200001c8

08001c2c <cfg_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void cfg_InitTask()
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
#ifdef NO_CFG
	return;
#endif //NO_CFG

	cfg_info.device_id = 1;
 8001c32:	4b2c      	ldr	r3, [pc, #176]	; (8001ce4 <cfg_InitTask+0xb8>)
 8001c34:	2201      	movs	r2, #1
 8001c36:	f8a3 231c 	strh.w	r2, [r3, #796]	; 0x31c
	cfg_info.node_num = sizeof( cfg_NodeList ) / sizeof( cgf_nodeTypeDef );
 8001c3a:	4b2a      	ldr	r3, [pc, #168]	; (8001ce4 <cfg_InitTask+0xb8>)
 8001c3c:	2209      	movs	r2, #9
 8001c3e:	f8a3 2324 	strh.w	r2, [r3, #804]	; 0x324

	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 8001c42:	2300      	movs	r3, #0
 8001c44:	607b      	str	r3, [r7, #4]
 8001c46:	e040      	b.n	8001cca <cfg_InitTask+0x9e>
	{
		cfg_info.iface[i].timer = 0;
 8001c48:	4a26      	ldr	r2, [pc, #152]	; (8001ce4 <cfg_InitTask+0xb8>)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001c50:	fb01 f303 	mul.w	r3, r1, r3
 8001c54:	4413      	add	r3, r2
 8001c56:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
		cfg_info.iface[i].rx_buf.head = 0;
 8001c5e:	4a21      	ldr	r2, [pc, #132]	; (8001ce4 <cfg_InitTask+0xb8>)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001c66:	fb01 f303 	mul.w	r3, r1, r3
 8001c6a:	4413      	add	r3, r2
 8001c6c:	3302      	adds	r3, #2
 8001c6e:	2200      	movs	r2, #0
 8001c70:	801a      	strh	r2, [r3, #0]
		cfg_info.iface[i].rx_buf.tail = 0;
 8001c72:	4a1c      	ldr	r2, [pc, #112]	; (8001ce4 <cfg_InitTask+0xb8>)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001c7a:	fb01 f303 	mul.w	r3, r1, r3
 8001c7e:	4413      	add	r3, r2
 8001c80:	3304      	adds	r3, #4
 8001c82:	2200      	movs	r2, #0
 8001c84:	801a      	strh	r2, [r3, #0]
		cfg_info.iface[i].rx_buf.state = RINGBUF_WAIT_HEADER;
 8001c86:	4a17      	ldr	r2, [pc, #92]	; (8001ce4 <cfg_InitTask+0xb8>)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001c8e:	fb01 f303 	mul.w	r3, r1, r3
 8001c92:	4413      	add	r3, r2
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]
		cfg_info.iface[i].tx_buf_bytes = 0;
 8001c98:	4a12      	ldr	r2, [pc, #72]	; (8001ce4 <cfg_InitTask+0xb8>)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001ca0:	fb01 f303 	mul.w	r3, r1, r3
 8001ca4:	4413      	add	r3, r2
 8001ca6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
		cfg_info.iface[i].req_num = 0;
 8001cae:	4a0d      	ldr	r2, [pc, #52]	; (8001ce4 <cfg_InitTask+0xb8>)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001cb6:	fb01 f303 	mul.w	r3, r1, r3
 8001cba:	4413      	add	r3, r2
 8001cbc:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	607b      	str	r3, [r7, #4]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0bb      	beq.n	8001c48 <cfg_InitTask+0x1c>
	}

	cfg_info.iface[CFG_IFACE_CH0].tx_func = cfg_TxDataCh0;
 8001cd0:	4b04      	ldr	r3, [pc, #16]	; (8001ce4 <cfg_InitTask+0xb8>)
 8001cd2:	4a05      	ldr	r2, [pc, #20]	; (8001ce8 <cfg_InitTask+0xbc>)
 8001cd4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	cfg_LoadSettings();
 8001cd8:	f000 fee2 	bl	8002aa0 <cfg_LoadSettings>

	return;
 8001cdc:	bf00      	nop
}
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	200001c8 	.word	0x200001c8
 8001ce8:	08003049 	.word	0x08003049

08001cec <cfg_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void cfg_Task(void)
{
 8001cec:	b590      	push	{r4, r7, lr}
 8001cee:	b099      	sub	sp, #100	; 0x64
 8001cf0:	af00      	add	r7, sp, #0
	return;
#endif //NO_CFG

	uint16_t tmp_u16;
	uint8_t tmp_u8;
	uint16_t node_num = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	uint16_t node_id = 0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	uint16_t var_id = 0;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	uint16_t var_prop = 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint16_t var_num = 0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	uint32_t var_val = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	64bb      	str	r3, [r7, #72]	; 0x48
	uint16_t j = 0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	char name[CFG_NAMECHARS];
	uint8_t name_len;

	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d1e:	e3f3      	b.n	8002508 <cfg_Task+0x81c>
	{
		//Transmitting
		if( (cfg_info.iface[i].tx_buf_bytes > 0) && (cfg_info.iface[i].timer == 0) )
 8001d20:	4ab8      	ldr	r2, [pc, #736]	; (8002004 <cfg_Task+0x318>)
 8001d22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d24:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001d28:	fb01 f303 	mul.w	r3, r1, r3
 8001d2c:	4413      	add	r3, r2
 8001d2e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d069      	beq.n	8001e0c <cfg_Task+0x120>
 8001d38:	4ab2      	ldr	r2, [pc, #712]	; (8002004 <cfg_Task+0x318>)
 8001d3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d3c:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001d40:	fb01 f303 	mul.w	r3, r1, r3
 8001d44:	4413      	add	r3, r2
 8001d46:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d15d      	bne.n	8001e0c <cfg_Task+0x120>
		{
			cfg_info.iface[i].timer = CFG_TX_PERIOD;
 8001d50:	4aac      	ldr	r2, [pc, #688]	; (8002004 <cfg_Task+0x318>)
 8001d52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d54:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001d58:	fb01 f303 	mul.w	r3, r1, r3
 8001d5c:	4413      	add	r3, r2
 8001d5e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001d62:	220a      	movs	r2, #10
 8001d64:	601a      	str	r2, [r3, #0]
			if( cfg_info.iface[i].tx_buf_bytes > CFG_MAX_TX_LEN )
 8001d66:	4aa7      	ldr	r2, [pc, #668]	; (8002004 <cfg_Task+0x318>)
 8001d68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d6a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001d6e:	fb01 f303 	mul.w	r3, r1, r3
 8001d72:	4413      	add	r3, r2
 8001d74:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2b0a      	cmp	r3, #10
 8001d7c:	d91c      	bls.n	8001db8 <cfg_Task+0xcc>
			{
				cfg_info.iface[i].tx_func((uint8_t*)cfg_info.iface[i].tx_buf, CFG_MAX_TX_LEN);
 8001d7e:	4aa1      	ldr	r2, [pc, #644]	; (8002004 <cfg_Task+0x318>)
 8001d80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d82:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001d86:	fb01 f303 	mul.w	r3, r1, r3
 8001d8a:	4413      	add	r3, r2
 8001d8c:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001d94:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001d98:	fb01 f202 	mul.w	r2, r1, r2
 8001d9c:	f502 7284 	add.w	r2, r2, #264	; 0x108
 8001da0:	4998      	ldr	r1, [pc, #608]	; (8002004 <cfg_Task+0x318>)
 8001da2:	440a      	add	r2, r1
 8001da4:	210a      	movs	r1, #10
 8001da6:	4610      	mov	r0, r2
 8001da8:	4798      	blx	r3
				cfg_RemTxData(i, CFG_MAX_TX_LEN);
 8001daa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	210a      	movs	r1, #10
 8001db0:	4618      	mov	r0, r3
 8001db2:	f001 f89f 	bl	8002ef4 <cfg_RemTxData>
 8001db6:	e029      	b.n	8001e0c <cfg_Task+0x120>
			}
			else
			{
				cfg_info.iface[i].tx_func((uint8_t*)cfg_info.iface[i].tx_buf, cfg_info.iface[i].tx_buf_bytes);
 8001db8:	4a92      	ldr	r2, [pc, #584]	; (8002004 <cfg_Task+0x318>)
 8001dba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dbc:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001dc0:	fb01 f303 	mul.w	r3, r1, r3
 8001dc4:	4413      	add	r3, r2
 8001dc6:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001dce:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001dd2:	fb01 f202 	mul.w	r2, r1, r2
 8001dd6:	f502 7284 	add.w	r2, r2, #264	; 0x108
 8001dda:	498a      	ldr	r1, [pc, #552]	; (8002004 <cfg_Task+0x318>)
 8001ddc:	1850      	adds	r0, r2, r1
 8001dde:	4989      	ldr	r1, [pc, #548]	; (8002004 <cfg_Task+0x318>)
 8001de0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001de2:	f44f 7447 	mov.w	r4, #796	; 0x31c
 8001de6:	fb04 f202 	mul.w	r2, r4, r2
 8001dea:	440a      	add	r2, r1
 8001dec:	f502 7202 	add.w	r2, r2, #520	; 0x208
 8001df0:	6812      	ldr	r2, [r2, #0]
 8001df2:	4611      	mov	r1, r2
 8001df4:	4798      	blx	r3
				cfg_info.iface[i].tx_buf_bytes = 0;
 8001df6:	4a83      	ldr	r2, [pc, #524]	; (8002004 <cfg_Task+0x318>)
 8001df8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dfa:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001dfe:	fb01 f303 	mul.w	r3, r1, r3
 8001e02:	4413      	add	r3, r2
 8001e04:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
			}
		}
		//Handling received pkt
		if( cfg_info.iface[i].rvd_pkt_size > 0 )
 8001e0c:	4a7d      	ldr	r2, [pc, #500]	; (8002004 <cfg_Task+0x318>)
 8001e0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e10:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001e14:	fb01 f303 	mul.w	r3, r1, r3
 8001e18:	4413      	add	r3, r2
 8001e1a:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f000 836e 	beq.w	8002502 <cfg_Task+0x816>
		{
			cfg_info.iface[i].req_num += 1;
 8001e26:	4a77      	ldr	r2, [pc, #476]	; (8002004 <cfg_Task+0x318>)
 8001e28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e2a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001e2e:	fb01 f303 	mul.w	r3, r1, r3
 8001e32:	4413      	add	r3, r2
 8001e34:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	1c5a      	adds	r2, r3, #1
 8001e3c:	4971      	ldr	r1, [pc, #452]	; (8002004 <cfg_Task+0x318>)
 8001e3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e40:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8001e44:	fb00 f303 	mul.w	r3, r0, r3
 8001e48:	440b      	add	r3, r1
 8001e4a:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8001e4e:	601a      	str	r2, [r3, #0]
			//Answer
			tmp_u16 = CFG_HEADER;
 8001e50:	f64c 63fa 	movw	r3, #52986	; 0xcefa
 8001e54:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
			cfg_AddTxData(i, (uint8_t*)&tmp_u16, 2);
 8001e58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001e60:	2202      	movs	r2, #2
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 ff08 	bl	8002c78 <cfg_AddTxData>
			cfg_AddTxData(i, (uint8_t*)&cfg_info.device_id, 2);
 8001e68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	4966      	ldr	r1, [pc, #408]	; (8002008 <cfg_Task+0x31c>)
 8001e70:	4618      	mov	r0, r3
 8001e72:	f000 ff01 	bl	8002c78 <cfg_AddTxData>
			cfg_AddTxData(i, (uint8_t*)&cfg_info.iface[i].rvd_pkt[5], 1); /*cmd*/
 8001e76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e78:	b298      	uxth	r0, r3
 8001e7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e7c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8001e80:	fb02 f303 	mul.w	r3, r2, r3
 8001e84:	f203 2315 	addw	r3, r3, #533	; 0x215
 8001e88:	4a5e      	ldr	r2, [pc, #376]	; (8002004 <cfg_Task+0x318>)
 8001e8a:	4413      	add	r3, r2
 8001e8c:	3304      	adds	r3, #4
 8001e8e:	2201      	movs	r2, #1
 8001e90:	4619      	mov	r1, r3
 8001e92:	f000 fef1 	bl	8002c78 <cfg_AddTxData>
			//Handle command
			if( cfg_info.iface[i].rvd_pkt[5] == CFG_CMD_GETNODENUM )
 8001e96:	4a5b      	ldr	r2, [pc, #364]	; (8002004 <cfg_Task+0x318>)
 8001e98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e9a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001e9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ea2:	4413      	add	r3, r2
 8001ea4:	f203 2319 	addw	r3, r3, #537	; 0x219
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d107      	bne.n	8001ec0 <cfg_Task+0x1d4>
			{
				cfg_AddTxData(i, (uint8_t*)&cfg_info.node_num, 2);
 8001eb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	4955      	ldr	r1, [pc, #340]	; (800200c <cfg_Task+0x320>)
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f000 fedd 	bl	8002c78 <cfg_AddTxData>
 8001ebe:	e2db      	b.n	8002478 <cfg_Task+0x78c>
			}
			else if( cfg_info.iface[i].rvd_pkt[5] == CFG_CMD_GETNODEDESCR )
 8001ec0:	4a50      	ldr	r2, [pc, #320]	; (8002004 <cfg_Task+0x318>)
 8001ec2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ec4:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001ec8:	fb01 f303 	mul.w	r3, r1, r3
 8001ecc:	4413      	add	r3, r2
 8001ece:	f203 2319 	addw	r3, r3, #537	; 0x219
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	f040 809c 	bne.w	8002014 <cfg_Task+0x328>
			{
				memcpy(&node_num, (uint8_t*)&cfg_info.iface[i].rvd_pkt[6], sizeof(node_num));
 8001edc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ede:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8001ee2:	fb02 f303 	mul.w	r3, r2, r3
 8001ee6:	f203 2316 	addw	r3, r3, #534	; 0x216
 8001eea:	4a46      	ldr	r2, [pc, #280]	; (8002004 <cfg_Task+0x318>)
 8001eec:	4413      	add	r3, r2
 8001eee:	3304      	adds	r3, #4
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				if( node_num < cfg_info.node_num )
 8001ef8:	4b42      	ldr	r3, [pc, #264]	; (8002004 <cfg_Task+0x318>)
 8001efa:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d957      	bls.n	8001fb8 <cfg_Task+0x2cc>
				{
					cfg_AddTxData(i, (uint8_t*)&node_num, 2);
 8001f08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001f10:	2202      	movs	r2, #2
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 feb0 	bl	8002c78 <cfg_AddTxData>
					cfg_AddTxData(i, (uint8_t*)&cfg_NodeList[node_num].id, 2);
 8001f18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f1a:	b298      	uxth	r0, r3
 8001f1c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001f20:	461a      	mov	r2, r3
 8001f22:	4613      	mov	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4a39      	ldr	r2, [pc, #228]	; (8002010 <cfg_Task+0x324>)
 8001f2c:	4413      	add	r3, r2
 8001f2e:	2202      	movs	r2, #2
 8001f30:	4619      	mov	r1, r3
 8001f32:	f000 fea1 	bl	8002c78 <cfg_AddTxData>
					cfg_AddTxData(i, (uint8_t*)&cfg_NodeList[node_num].pid, 2);
 8001f36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f38:	b298      	uxth	r0, r3
 8001f3a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001f3e:	461a      	mov	r2, r3
 8001f40:	4613      	mov	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4a31      	ldr	r2, [pc, #196]	; (8002010 <cfg_Task+0x324>)
 8001f4a:	4413      	add	r3, r2
 8001f4c:	3302      	adds	r3, #2
 8001f4e:	2202      	movs	r2, #2
 8001f50:	4619      	mov	r1, r3
 8001f52:	f000 fe91 	bl	8002c78 <cfg_AddTxData>
					cfg_AddTxData(i, (uint8_t*)&cfg_NodeList[node_num].var_num, 2);
 8001f56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f58:	b298      	uxth	r0, r3
 8001f5a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001f5e:	461a      	mov	r2, r3
 8001f60:	4613      	mov	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4a29      	ldr	r2, [pc, #164]	; (8002010 <cfg_Task+0x324>)
 8001f6a:	4413      	add	r3, r2
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	2202      	movs	r2, #2
 8001f70:	4619      	mov	r1, r3
 8001f72:	f000 fe81 	bl	8002c78 <cfg_AddTxData>
					/*node name*/
					cfg_GetNodeName(cfg_NodeList[node_num].id, name);
 8001f76:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4a24      	ldr	r2, [pc, #144]	; (8002010 <cfg_Task+0x324>)
 8001f7e:	460b      	mov	r3, r1
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	440b      	add	r3, r1
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	1d3a      	adds	r2, r7, #4
 8001f8c:	4611      	mov	r1, r2
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff fc06 	bl	80017a0 <cfg_GetNodeName>
					name_len = strlen(name) + 1;
 8001f94:	1d3b      	adds	r3, r7, #4
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7fe f91e 	bl	80001d8 <strlen>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
					cfg_AddTxData(i, (uint8_t*)name, (uint32_t)name_len);
 8001fa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8001fae:	1d39      	adds	r1, r7, #4
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f000 fe61 	bl	8002c78 <cfg_AddTxData>
 8001fb6:	e25f      	b.n	8002478 <cfg_Task+0x78c>
				}
				else
				{
					cfg_info.iface[i].tx_buf[4] |= 0x80;
 8001fb8:	4a12      	ldr	r2, [pc, #72]	; (8002004 <cfg_Task+0x318>)
 8001fba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fbc:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001fc0:	fb01 f303 	mul.w	r3, r1, r3
 8001fc4:	4413      	add	r3, r2
 8001fc6:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001fd2:	b2d8      	uxtb	r0, r3
 8001fd4:	4a0b      	ldr	r2, [pc, #44]	; (8002004 <cfg_Task+0x318>)
 8001fd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fd8:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001fdc:	fb01 f303 	mul.w	r3, r1, r3
 8001fe0:	4413      	add	r3, r2
 8001fe2:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	701a      	strb	r2, [r3, #0]
					tmp_u8 = CFG_CMD_ERROR_NODENUM;
 8001fea:	2302      	movs	r3, #2
 8001fec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					cfg_AddTxData(i, (uint8_t*)&tmp_u8, 1);
 8001ff0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	f107 0157 	add.w	r1, r7, #87	; 0x57
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f000 fe3c 	bl	8002c78 <cfg_AddTxData>
 8002000:	e23a      	b.n	8002478 <cfg_Task+0x78c>
 8002002:	bf00      	nop
 8002004:	200001c8 	.word	0x200001c8
 8002008:	200004e4 	.word	0x200004e4
 800200c:	200004ec 	.word	0x200004ec
 8002010:	20000030 	.word	0x20000030
				}
			}
			else if( cfg_info.iface[i].rvd_pkt[5] == CFG_CMD_GETVARDESCR )
 8002014:	4ab0      	ldr	r2, [pc, #704]	; (80022d8 <cfg_Task+0x5ec>)
 8002016:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002018:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800201c:	fb01 f303 	mul.w	r3, r1, r3
 8002020:	4413      	add	r3, r2
 8002022:	f203 2319 	addw	r3, r3, #537	; 0x219
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b03      	cmp	r3, #3
 800202c:	f040 80a8 	bne.w	8002180 <cfg_Task+0x494>
			{
				memcpy(&node_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[6], sizeof(node_id));
 8002030:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002032:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002036:	fb02 f303 	mul.w	r3, r2, r3
 800203a:	f203 2316 	addw	r3, r3, #534	; 0x216
 800203e:	4aa6      	ldr	r2, [pc, #664]	; (80022d8 <cfg_Task+0x5ec>)
 8002040:	4413      	add	r3, r2
 8002042:	3304      	adds	r3, #4
 8002044:	881b      	ldrh	r3, [r3, #0]
 8002046:	b29b      	uxth	r3, r3
 8002048:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
				memcpy(&var_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[8], sizeof(var_id));
 800204c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800204e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002052:	fb02 f303 	mul.w	r3, r2, r3
 8002056:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800205a:	4a9f      	ldr	r2, [pc, #636]	; (80022d8 <cfg_Task+0x5ec>)
 800205c:	4413      	add	r3, r2
 800205e:	3304      	adds	r3, #4
 8002060:	881b      	ldrh	r3, [r3, #0]
 8002062:	b29b      	uxth	r3, r3
 8002064:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
				if( cfg_GetNode(node_id) != 0 )
 8002068:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff fc0d 	bl	800188c <cfg_GetNode>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d05e      	beq.n	8002136 <cfg_Task+0x44a>
				{
					if( cfg_GetNode(node_id)->var_prop_func(var_id, name, &var_prop) == CFG_ERROR_NONE )
 8002078:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff fc05 	bl	800188c <cfg_GetNode>
 8002082:	4603      	mov	r3, r0
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	f8b7 0050 	ldrh.w	r0, [r7, #80]	; 0x50
 800208a:	f107 024e 	add.w	r2, r7, #78	; 0x4e
 800208e:	1d39      	adds	r1, r7, #4
 8002090:	4798      	blx	r3
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d129      	bne.n	80020ec <cfg_Task+0x400>
					{
						cfg_AddTxData(i, (uint8_t*)&node_id, 2);
 8002098:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800209a:	b29b      	uxth	r3, r3
 800209c:	f107 0152 	add.w	r1, r7, #82	; 0x52
 80020a0:	2202      	movs	r2, #2
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 fde8 	bl	8002c78 <cfg_AddTxData>
						cfg_AddTxData(i, (uint8_t*)&var_id, 2);
 80020a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80020b0:	2202      	movs	r2, #2
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 fde0 	bl	8002c78 <cfg_AddTxData>
						cfg_AddTxData(i, (uint8_t*)&var_prop, 2);
 80020b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	f107 014e 	add.w	r1, r7, #78	; 0x4e
 80020c0:	2202      	movs	r2, #2
 80020c2:	4618      	mov	r0, r3
 80020c4:	f000 fdd8 	bl	8002c78 <cfg_AddTxData>
						name_len = strlen(name) + 1;
 80020c8:	1d3b      	adds	r3, r7, #4
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7fe f884 	bl	80001d8 <strlen>
 80020d0:	4603      	mov	r3, r0
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	3301      	adds	r3, #1
 80020d6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
						cfg_AddTxData(i, (uint8_t*)name, (uint32_t)name_len);
 80020da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020dc:	b29b      	uxth	r3, r3
 80020de:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 80020e2:	1d39      	adds	r1, r7, #4
 80020e4:	4618      	mov	r0, r3
 80020e6:	f000 fdc7 	bl	8002c78 <cfg_AddTxData>
 80020ea:	e1c5      	b.n	8002478 <cfg_Task+0x78c>
					}
					else
					{
						cfg_info.iface[i].tx_buf[4] |= 0x80;
 80020ec:	4a7a      	ldr	r2, [pc, #488]	; (80022d8 <cfg_Task+0x5ec>)
 80020ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020f0:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80020f4:	fb01 f303 	mul.w	r3, r1, r3
 80020f8:	4413      	add	r3, r2
 80020fa:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	b2db      	uxtb	r3, r3
 8002102:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002106:	b2d8      	uxtb	r0, r3
 8002108:	4a73      	ldr	r2, [pc, #460]	; (80022d8 <cfg_Task+0x5ec>)
 800210a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800210c:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002110:	fb01 f303 	mul.w	r3, r1, r3
 8002114:	4413      	add	r3, r2
 8002116:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800211a:	4602      	mov	r2, r0
 800211c:	701a      	strb	r2, [r3, #0]
						tmp_u8 = CFG_CMD_ERROR_VARNUM;
 800211e:	2304      	movs	r3, #4
 8002120:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						cfg_AddTxData(i, (uint8_t*)&tmp_u8, 1);
 8002124:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002126:	b29b      	uxth	r3, r3
 8002128:	f107 0157 	add.w	r1, r7, #87	; 0x57
 800212c:	2201      	movs	r2, #1
 800212e:	4618      	mov	r0, r3
 8002130:	f000 fda2 	bl	8002c78 <cfg_AddTxData>
 8002134:	e1a0      	b.n	8002478 <cfg_Task+0x78c>
					}
				}
				else
				{
					cfg_info.iface[i].tx_buf[4] |= 0x80;
 8002136:	4a68      	ldr	r2, [pc, #416]	; (80022d8 <cfg_Task+0x5ec>)
 8002138:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800213a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800213e:	fb01 f303 	mul.w	r3, r1, r3
 8002142:	4413      	add	r3, r2
 8002144:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	b2db      	uxtb	r3, r3
 800214c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002150:	b2d8      	uxtb	r0, r3
 8002152:	4a61      	ldr	r2, [pc, #388]	; (80022d8 <cfg_Task+0x5ec>)
 8002154:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002156:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800215a:	fb01 f303 	mul.w	r3, r1, r3
 800215e:	4413      	add	r3, r2
 8002160:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8002164:	4602      	mov	r2, r0
 8002166:	701a      	strb	r2, [r3, #0]
					tmp_u8 = CFG_CMD_ERROR_NODEID;
 8002168:	2303      	movs	r3, #3
 800216a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					cfg_AddTxData(i, (uint8_t*)&tmp_u8, 1);
 800216e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002170:	b29b      	uxth	r3, r3
 8002172:	f107 0157 	add.w	r1, r7, #87	; 0x57
 8002176:	2201      	movs	r2, #1
 8002178:	4618      	mov	r0, r3
 800217a:	f000 fd7d 	bl	8002c78 <cfg_AddTxData>
 800217e:	e17b      	b.n	8002478 <cfg_Task+0x78c>
				}
			}
			else if( cfg_info.iface[i].rvd_pkt[5] == CFG_CMD_GETVARS )
 8002180:	4a55      	ldr	r2, [pc, #340]	; (80022d8 <cfg_Task+0x5ec>)
 8002182:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002184:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002188:	fb01 f303 	mul.w	r3, r1, r3
 800218c:	4413      	add	r3, r2
 800218e:	f203 2319 	addw	r3, r3, #537	; 0x219
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b10      	cmp	r3, #16
 8002198:	f040 80a0 	bne.w	80022dc <cfg_Task+0x5f0>
			{
				memcpy(&node_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[6], sizeof(node_id));
 800219c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800219e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80021a2:	fb02 f303 	mul.w	r3, r2, r3
 80021a6:	f203 2316 	addw	r3, r3, #534	; 0x216
 80021aa:	4a4b      	ldr	r2, [pc, #300]	; (80022d8 <cfg_Task+0x5ec>)
 80021ac:	4413      	add	r3, r2
 80021ae:	3304      	adds	r3, #4
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
				memcpy(&var_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[8], sizeof(var_id));
 80021b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021ba:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80021be:	fb02 f303 	mul.w	r3, r2, r3
 80021c2:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80021c6:	4a44      	ldr	r2, [pc, #272]	; (80022d8 <cfg_Task+0x5ec>)
 80021c8:	4413      	add	r3, r2
 80021ca:	3304      	adds	r3, #4
 80021cc:	881b      	ldrh	r3, [r3, #0]
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
				memcpy(&var_num, (uint8_t*)&cfg_info.iface[i].rvd_pkt[10], sizeof(var_num));
 80021d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021d6:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80021da:	fb02 f303 	mul.w	r3, r2, r3
 80021de:	f203 231a 	addw	r3, r3, #538	; 0x21a
 80021e2:	4a3d      	ldr	r2, [pc, #244]	; (80022d8 <cfg_Task+0x5ec>)
 80021e4:	4413      	add	r3, r2
 80021e6:	3304      	adds	r3, #4
 80021e8:	881b      	ldrh	r3, [r3, #0]
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
				if( cfg_GetNode(node_id) != 0 )
 80021f0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff fb49 	bl	800188c <cfg_GetNode>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d046      	beq.n	800228e <cfg_Task+0x5a2>
				{
					cfg_AddTxData(i, (uint8_t*)&node_id, 2);
 8002200:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002202:	b29b      	uxth	r3, r3
 8002204:	f107 0152 	add.w	r1, r7, #82	; 0x52
 8002208:	2202      	movs	r2, #2
 800220a:	4618      	mov	r0, r3
 800220c:	f000 fd34 	bl	8002c78 <cfg_AddTxData>
					cfg_AddTxData(i, (uint8_t*)&var_id, 2);
 8002210:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002212:	b29b      	uxth	r3, r3
 8002214:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002218:	2202      	movs	r2, #2
 800221a:	4618      	mov	r0, r3
 800221c:	f000 fd2c 	bl	8002c78 <cfg_AddTxData>
					for( j = 0; j < var_num; j++ )
 8002220:	2300      	movs	r3, #0
 8002222:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002226:	e021      	b.n	800226c <cfg_Task+0x580>
					{
						if( cfg_GetNode(node_id)->var_get_func(var_id + j, &var_val) == CFG_ERROR_NONE ){
 8002228:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff fb2d 	bl	800188c <cfg_GetNode>
 8002232:	4603      	mov	r3, r0
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 800223a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800223e:	440a      	add	r2, r1
 8002240:	b292      	uxth	r2, r2
 8002242:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002246:	4610      	mov	r0, r2
 8002248:	4798      	blx	r3
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d114      	bne.n	800227a <cfg_Task+0x58e>
							cfg_AddTxData(i, (uint8_t*)&var_val, 4);
 8002250:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002252:	b29b      	uxth	r3, r3
 8002254:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002258:	2204      	movs	r2, #4
 800225a:	4618      	mov	r0, r3
 800225c:	f000 fd0c 	bl	8002c78 <cfg_AddTxData>
					for( j = 0; j < var_num; j++ )
 8002260:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002264:	3301      	adds	r3, #1
 8002266:	b29b      	uxth	r3, r3
 8002268:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800226c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8002270:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002274:	429a      	cmp	r2, r3
 8002276:	d3d7      	bcc.n	8002228 <cfg_Task+0x53c>
 8002278:	e000      	b.n	800227c <cfg_Task+0x590>
						}
						else{
							break;
 800227a:	bf00      	nop
						}
					}
					cfg_IntertTxData(i, 9, (uint8_t*)&j, 2); /*insert number of parameters (variables)*/
 800227c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800227e:	b298      	uxth	r0, r3
 8002280:	f107 0246 	add.w	r2, r7, #70	; 0x46
 8002284:	2302      	movs	r3, #2
 8002286:	2109      	movs	r1, #9
 8002288:	f000 fd48 	bl	8002d1c <cfg_IntertTxData>
 800228c:	e0f4      	b.n	8002478 <cfg_Task+0x78c>
				}
				else
				{
					cfg_info.iface[i].tx_buf[4] |= 0x80;
 800228e:	4a12      	ldr	r2, [pc, #72]	; (80022d8 <cfg_Task+0x5ec>)
 8002290:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002292:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002296:	fb01 f303 	mul.w	r3, r1, r3
 800229a:	4413      	add	r3, r2
 800229c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022a8:	b2d8      	uxtb	r0, r3
 80022aa:	4a0b      	ldr	r2, [pc, #44]	; (80022d8 <cfg_Task+0x5ec>)
 80022ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022ae:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80022b2:	fb01 f303 	mul.w	r3, r1, r3
 80022b6:	4413      	add	r3, r2
 80022b8:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80022bc:	4602      	mov	r2, r0
 80022be:	701a      	strb	r2, [r3, #0]
					tmp_u8 = CFG_CMD_ERROR_NODEID;
 80022c0:	2303      	movs	r3, #3
 80022c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					cfg_AddTxData(i, (uint8_t*)&tmp_u8, 1);
 80022c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	f107 0157 	add.w	r1, r7, #87	; 0x57
 80022ce:	2201      	movs	r2, #1
 80022d0:	4618      	mov	r0, r3
 80022d2:	f000 fcd1 	bl	8002c78 <cfg_AddTxData>
 80022d6:	e0cf      	b.n	8002478 <cfg_Task+0x78c>
 80022d8:	200001c8 	.word	0x200001c8
				}
			}
			else if( cfg_info.iface[i].rvd_pkt[5] == CFG_CMD_SETVARS )
 80022dc:	4a8e      	ldr	r2, [pc, #568]	; (8002518 <cfg_Task+0x82c>)
 80022de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022e0:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80022e4:	fb01 f303 	mul.w	r3, r1, r3
 80022e8:	4413      	add	r3, r2
 80022ea:	f203 2319 	addw	r3, r3, #537	; 0x219
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b11      	cmp	r3, #17
 80022f4:	f040 80c0 	bne.w	8002478 <cfg_Task+0x78c>
			{
				memcpy(&node_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[6], sizeof(node_id));
 80022f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022fa:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80022fe:	fb02 f303 	mul.w	r3, r2, r3
 8002302:	f203 2316 	addw	r3, r3, #534	; 0x216
 8002306:	4a84      	ldr	r2, [pc, #528]	; (8002518 <cfg_Task+0x82c>)
 8002308:	4413      	add	r3, r2
 800230a:	3304      	adds	r3, #4
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	b29b      	uxth	r3, r3
 8002310:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
				memcpy(&var_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[8], sizeof(var_id));
 8002314:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002316:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800231a:	fb02 f303 	mul.w	r3, r2, r3
 800231e:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8002322:	4a7d      	ldr	r2, [pc, #500]	; (8002518 <cfg_Task+0x82c>)
 8002324:	4413      	add	r3, r2
 8002326:	3304      	adds	r3, #4
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	b29b      	uxth	r3, r3
 800232c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
				memcpy(&var_num, (uint8_t*)&cfg_info.iface[i].rvd_pkt[10], sizeof(var_num));
 8002330:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002332:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002336:	fb02 f303 	mul.w	r3, r2, r3
 800233a:	f203 231a 	addw	r3, r3, #538	; 0x21a
 800233e:	4a76      	ldr	r2, [pc, #472]	; (8002518 <cfg_Task+0x82c>)
 8002340:	4413      	add	r3, r2
 8002342:	3304      	adds	r3, #4
 8002344:	881b      	ldrh	r3, [r3, #0]
 8002346:	b29b      	uxth	r3, r3
 8002348:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
				if( cfg_GetNode(node_id) != 0 )
 800234c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff fa9b 	bl	800188c <cfg_GetNode>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d069      	beq.n	8002430 <cfg_Task+0x744>
				{
					cfg_AddTxData(i, (uint8_t*)&node_id, 2);
 800235c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800235e:	b29b      	uxth	r3, r3
 8002360:	f107 0152 	add.w	r1, r7, #82	; 0x52
 8002364:	2202      	movs	r2, #2
 8002366:	4618      	mov	r0, r3
 8002368:	f000 fc86 	bl	8002c78 <cfg_AddTxData>
					cfg_AddTxData(i, (uint8_t*)&var_id, 2);
 800236c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800236e:	b29b      	uxth	r3, r3
 8002370:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002374:	2202      	movs	r2, #2
 8002376:	4618      	mov	r0, r3
 8002378:	f000 fc7e 	bl	8002c78 <cfg_AddTxData>
					for( j = 0; j < var_num; j++ )
 800237c:	2300      	movs	r3, #0
 800237e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002382:	e046      	b.n	8002412 <cfg_Task+0x726>
					{
						memcpy(&var_val, (uint8_t*)&cfg_info.iface[i].rvd_pkt[12 + (j * 4)], sizeof(var_val));
 8002384:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002388:	3303      	adds	r3, #3
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800238e:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002392:	fb01 f202 	mul.w	r2, r1, r2
 8002396:	4413      	add	r3, r2
 8002398:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800239c:	4a5e      	ldr	r2, [pc, #376]	; (8002518 <cfg_Task+0x82c>)
 800239e:	4413      	add	r3, r2
 80023a0:	3304      	adds	r3, #4
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	64bb      	str	r3, [r7, #72]	; 0x48
						if( (cfg_GetNode(node_id)->var_set_func(var_id + j, &var_val) == CFG_ERROR_NONE) &&
 80023a6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff fa6e 	bl	800188c <cfg_GetNode>
 80023b0:	4603      	mov	r3, r0
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 80023b8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80023bc:	440a      	add	r2, r1
 80023be:	b292      	uxth	r2, r2
 80023c0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80023c4:	4610      	mov	r0, r2
 80023c6:	4798      	blx	r3
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d127      	bne.n	800241e <cfg_Task+0x732>
								(cfg_GetNode(node_id)->var_get_func(var_id + j, &var_val) == CFG_ERROR_NONE) ){
 80023ce:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff fa5a 	bl	800188c <cfg_GetNode>
 80023d8:	4603      	mov	r3, r0
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 80023e0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80023e4:	440a      	add	r2, r1
 80023e6:	b292      	uxth	r2, r2
 80023e8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80023ec:	4610      	mov	r0, r2
 80023ee:	4798      	blx	r3
 80023f0:	4603      	mov	r3, r0
						if( (cfg_GetNode(node_id)->var_set_func(var_id + j, &var_val) == CFG_ERROR_NONE) &&
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d113      	bne.n	800241e <cfg_Task+0x732>
							cfg_AddTxData(i, (uint8_t*)&var_val, 4);
 80023f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80023fe:	2204      	movs	r2, #4
 8002400:	4618      	mov	r0, r3
 8002402:	f000 fc39 	bl	8002c78 <cfg_AddTxData>
					for( j = 0; j < var_num; j++ )
 8002406:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800240a:	3301      	adds	r3, #1
 800240c:	b29b      	uxth	r3, r3
 800240e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002412:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8002416:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800241a:	429a      	cmp	r2, r3
 800241c:	d3b2      	bcc.n	8002384 <cfg_Task+0x698>
						}
						else{
							break;
						}
					}
					cfg_IntertTxData(i, 9, (uint8_t*)&j, 2); /*insert number of parameters (variables)*/
 800241e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002420:	b298      	uxth	r0, r3
 8002422:	f107 0246 	add.w	r2, r7, #70	; 0x46
 8002426:	2302      	movs	r3, #2
 8002428:	2109      	movs	r1, #9
 800242a:	f000 fc77 	bl	8002d1c <cfg_IntertTxData>
 800242e:	e023      	b.n	8002478 <cfg_Task+0x78c>
				}
				else
				{
					cfg_info.iface[i].tx_buf[4] |= 0x80;
 8002430:	4a39      	ldr	r2, [pc, #228]	; (8002518 <cfg_Task+0x82c>)
 8002432:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002434:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002438:	fb01 f303 	mul.w	r3, r1, r3
 800243c:	4413      	add	r3, r2
 800243e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	b2db      	uxtb	r3, r3
 8002446:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800244a:	b2d8      	uxtb	r0, r3
 800244c:	4a32      	ldr	r2, [pc, #200]	; (8002518 <cfg_Task+0x82c>)
 800244e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002450:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002454:	fb01 f303 	mul.w	r3, r1, r3
 8002458:	4413      	add	r3, r2
 800245a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800245e:	4602      	mov	r2, r0
 8002460:	701a      	strb	r2, [r3, #0]
					tmp_u8 = CFG_CMD_ERROR_NODEID;
 8002462:	2303      	movs	r3, #3
 8002464:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					cfg_AddTxData(i, (uint8_t*)&tmp_u8, 1);
 8002468:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800246a:	b29b      	uxth	r3, r3
 800246c:	f107 0157 	add.w	r1, r7, #87	; 0x57
 8002470:	2201      	movs	r2, #1
 8002472:	4618      	mov	r0, r3
 8002474:	f000 fc00 	bl	8002c78 <cfg_AddTxData>
			else
			{

			}
			/*data length*/
			tmp_u8 = cfg_info.iface[i].tx_buf_bytes - 4;
 8002478:	4a27      	ldr	r2, [pc, #156]	; (8002518 <cfg_Task+0x82c>)
 800247a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800247c:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002480:	fb01 f303 	mul.w	r3, r1, r3
 8002484:	4413      	add	r3, r2
 8002486:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	b2db      	uxtb	r3, r3
 800248e:	3b04      	subs	r3, #4
 8002490:	b2db      	uxtb	r3, r3
 8002492:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			cfg_IntertTxData(i, 4, &tmp_u8, 1);
 8002496:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002498:	b298      	uxth	r0, r3
 800249a:	f107 0257 	add.w	r2, r7, #87	; 0x57
 800249e:	2301      	movs	r3, #1
 80024a0:	2104      	movs	r1, #4
 80024a2:	f000 fc3b 	bl	8002d1c <cfg_IntertTxData>
			//crc calc
			tmp_u16 = crc16_calc((uint8_t*)cfg_info.iface[i].tx_buf, cfg_info.iface[i].tx_buf_bytes);
 80024a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024a8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80024ac:	fb02 f303 	mul.w	r3, r2, r3
 80024b0:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80024b4:	4a18      	ldr	r2, [pc, #96]	; (8002518 <cfg_Task+0x82c>)
 80024b6:	441a      	add	r2, r3
 80024b8:	4917      	ldr	r1, [pc, #92]	; (8002518 <cfg_Task+0x82c>)
 80024ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024bc:	f44f 7047 	mov.w	r0, #796	; 0x31c
 80024c0:	fb00 f303 	mul.w	r3, r0, r3
 80024c4:	440b      	add	r3, r1
 80024c6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	4619      	mov	r1, r3
 80024d0:	4610      	mov	r0, r2
 80024d2:	f000 fdc7 	bl	8003064 <crc16_calc>
 80024d6:	4603      	mov	r3, r0
 80024d8:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
			cfg_AddTxData(i, (uint8_t*)&tmp_u16, 2);
 80024dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024de:	b29b      	uxth	r3, r3
 80024e0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80024e4:	2202      	movs	r2, #2
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 fbc6 	bl	8002c78 <cfg_AddTxData>
			cfg_info.iface[i].rvd_pkt_size = 0;
 80024ec:	4a0a      	ldr	r2, [pc, #40]	; (8002518 <cfg_Task+0x82c>)
 80024ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024f0:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80024f4:	fb01 f303 	mul.w	r3, r1, r3
 80024f8:	4413      	add	r3, r2
 80024fa:	f503 7345 	add.w	r3, r3, #788	; 0x314
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 8002502:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002504:	3301      	adds	r3, #1
 8002506:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002508:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800250a:	2b00      	cmp	r3, #0
 800250c:	f43f ac08 	beq.w	8001d20 <cfg_Task+0x34>
		}
	}

	return;
 8002510:	bf00      	nop
}
 8002512:	3764      	adds	r7, #100	; 0x64
 8002514:	46bd      	mov	sp, r7
 8002516:	bd90      	pop	{r4, r7, pc}
 8002518:	200001c8 	.word	0x200001c8

0800251c <cfg_RcvData>:

void cfg_RcvData(uint16_t iface, uint8_t data)
{
 800251c:	b5b0      	push	{r4, r5, r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	460a      	mov	r2, r1
 8002526:	80fb      	strh	r3, [r7, #6]
 8002528:	4613      	mov	r3, r2
 800252a:	717b      	strb	r3, [r7, #5]
	static uint16_t rcv_size;
	uint16_t header;
	uint16_t dev_id;
	uint16_t crc;

	if( iface >= CFG_IFACE_NUM ){
 800252c:	88fb      	ldrh	r3, [r7, #6]
 800252e:	2b00      	cmp	r3, #0
 8002530:	f040 8164 	bne.w	80027fc <cfg_RcvData+0x2e0>
		return;
	}

	cfg_info.iface[iface].rx_buf.data[cfg_info.iface[iface].rx_buf.tail =
 8002534:	88fb      	ldrh	r3, [r7, #6]
			(cfg_info.iface[iface].rx_buf.tail + 1) & CFG_BUF_MASK] = data;
 8002536:	88fa      	ldrh	r2, [r7, #6]
 8002538:	49b4      	ldr	r1, [pc, #720]	; (800280c <cfg_RcvData+0x2f0>)
 800253a:	f44f 7047 	mov.w	r0, #796	; 0x31c
 800253e:	fb00 f202 	mul.w	r2, r0, r2
 8002542:	440a      	add	r2, r1
 8002544:	3204      	adds	r2, #4
 8002546:	8812      	ldrh	r2, [r2, #0]
 8002548:	b292      	uxth	r2, r2
 800254a:	3201      	adds	r2, #1
 800254c:	b291      	uxth	r1, r2
	cfg_info.iface[iface].rx_buf.data[cfg_info.iface[iface].rx_buf.tail =
 800254e:	88fa      	ldrh	r2, [r7, #6]
			(cfg_info.iface[iface].rx_buf.tail + 1) & CFG_BUF_MASK] = data;
 8002550:	b2c9      	uxtb	r1, r1
 8002552:	b28c      	uxth	r4, r1
	cfg_info.iface[iface].rx_buf.data[cfg_info.iface[iface].rx_buf.tail =
 8002554:	49ad      	ldr	r1, [pc, #692]	; (800280c <cfg_RcvData+0x2f0>)
 8002556:	f44f 7047 	mov.w	r0, #796	; 0x31c
 800255a:	fb00 f202 	mul.w	r2, r0, r2
 800255e:	440a      	add	r2, r1
 8002560:	3204      	adds	r2, #4
 8002562:	4621      	mov	r1, r4
 8002564:	8011      	strh	r1, [r2, #0]
 8002566:	4620      	mov	r0, r4
			(cfg_info.iface[iface].rx_buf.tail + 1) & CFG_BUF_MASK] = data;
 8002568:	4aa8      	ldr	r2, [pc, #672]	; (800280c <cfg_RcvData+0x2f0>)
 800256a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800256e:	fb01 f303 	mul.w	r3, r1, r3
 8002572:	4413      	add	r3, r2
 8002574:	4403      	add	r3, r0
 8002576:	3308      	adds	r3, #8
 8002578:	797a      	ldrb	r2, [r7, #5]
 800257a:	701a      	strb	r2, [r3, #0]
	//Waiting header
	if( cfg_info.iface[iface].rx_buf.state == RINGBUF_WAIT_HEADER )
 800257c:	88fb      	ldrh	r3, [r7, #6]
 800257e:	4aa3      	ldr	r2, [pc, #652]	; (800280c <cfg_RcvData+0x2f0>)
 8002580:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002584:	fb01 f303 	mul.w	r3, r1, r3
 8002588:	4413      	add	r3, r2
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d17b      	bne.n	800268a <cfg_RcvData+0x16e>
	{
		//Catch header
		header = cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 8002592:	88fb      	ldrh	r3, [r7, #6]
 8002594:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002598:	fb02 f303 	mul.w	r3, r2, r3
 800259c:	3308      	adds	r3, #8
 800259e:	4a9b      	ldr	r2, [pc, #620]	; (800280c <cfg_RcvData+0x2f0>)
 80025a0:	441a      	add	r2, r3
				(cfg_info.iface[iface].rx_buf.tail - 4) & CFG_BUF_MASK);
 80025a2:	88fb      	ldrh	r3, [r7, #6]
 80025a4:	4999      	ldr	r1, [pc, #612]	; (800280c <cfg_RcvData+0x2f0>)
 80025a6:	f44f 7047 	mov.w	r0, #796	; 0x31c
 80025aa:	fb00 f303 	mul.w	r3, r0, r3
 80025ae:	440b      	add	r3, r1
 80025b0:	3304      	adds	r3, #4
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	3b04      	subs	r3, #4
 80025b8:	b29b      	uxth	r3, r3
		header = cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	b29b      	uxth	r3, r3
 80025be:	4619      	mov	r1, r3
 80025c0:	4610      	mov	r0, r2
 80025c2:	f000 f927 	bl	8002814 <cfg_ringBufRead16b>
 80025c6:	4603      	mov	r3, r0
 80025c8:	817b      	strh	r3, [r7, #10]
		dev_id = cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 80025ca:	88fb      	ldrh	r3, [r7, #6]
 80025cc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80025d0:	fb02 f303 	mul.w	r3, r2, r3
 80025d4:	3308      	adds	r3, #8
 80025d6:	4a8d      	ldr	r2, [pc, #564]	; (800280c <cfg_RcvData+0x2f0>)
 80025d8:	441a      	add	r2, r3
				(cfg_info.iface[iface].rx_buf.tail - 2) & CFG_BUF_MASK);
 80025da:	88fb      	ldrh	r3, [r7, #6]
 80025dc:	498b      	ldr	r1, [pc, #556]	; (800280c <cfg_RcvData+0x2f0>)
 80025de:	f44f 7047 	mov.w	r0, #796	; 0x31c
 80025e2:	fb00 f303 	mul.w	r3, r0, r3
 80025e6:	440b      	add	r3, r1
 80025e8:	3304      	adds	r3, #4
 80025ea:	881b      	ldrh	r3, [r3, #0]
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	3b02      	subs	r3, #2
 80025f0:	b29b      	uxth	r3, r3
		dev_id = cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	4619      	mov	r1, r3
 80025f8:	4610      	mov	r0, r2
 80025fa:	f000 f90b 	bl	8002814 <cfg_ringBufRead16b>
 80025fe:	4603      	mov	r3, r0
 8002600:	813b      	strh	r3, [r7, #8]
		if( (header == CFG_HEADER) && (dev_id == cfg_info.device_id) )
 8002602:	897b      	ldrh	r3, [r7, #10]
 8002604:	f64c 62fa 	movw	r2, #52986	; 0xcefa
 8002608:	4293      	cmp	r3, r2
 800260a:	f040 80f9 	bne.w	8002800 <cfg_RcvData+0x2e4>
 800260e:	4b7f      	ldr	r3, [pc, #508]	; (800280c <cfg_RcvData+0x2f0>)
 8002610:	f8b3 331c 	ldrh.w	r3, [r3, #796]	; 0x31c
 8002614:	b29b      	uxth	r3, r3
 8002616:	893a      	ldrh	r2, [r7, #8]
 8002618:	429a      	cmp	r2, r3
 800261a:	f040 80f1 	bne.w	8002800 <cfg_RcvData+0x2e4>
		{
			cfg_info.iface[iface].rx_buf.head = (cfg_info.iface[iface].rx_buf.tail - 4) & CFG_BUF_MASK;
 800261e:	88fb      	ldrh	r3, [r7, #6]
 8002620:	4a7a      	ldr	r2, [pc, #488]	; (800280c <cfg_RcvData+0x2f0>)
 8002622:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002626:	fb01 f303 	mul.w	r3, r1, r3
 800262a:	4413      	add	r3, r2
 800262c:	3304      	adds	r3, #4
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	b29b      	uxth	r3, r3
 8002632:	3b04      	subs	r3, #4
 8002634:	b29a      	uxth	r2, r3
 8002636:	88fb      	ldrh	r3, [r7, #6]
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	b290      	uxth	r0, r2
 800263c:	4a73      	ldr	r2, [pc, #460]	; (800280c <cfg_RcvData+0x2f0>)
 800263e:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002642:	fb01 f303 	mul.w	r3, r1, r3
 8002646:	4413      	add	r3, r2
 8002648:	3302      	adds	r3, #2
 800264a:	4602      	mov	r2, r0
 800264c:	801a      	strh	r2, [r3, #0]
			rcv_size = data + 1;
 800264e:	797b      	ldrb	r3, [r7, #5]
 8002650:	b29b      	uxth	r3, r3
 8002652:	3301      	adds	r3, #1
 8002654:	b29a      	uxth	r2, r3
 8002656:	4b6e      	ldr	r3, [pc, #440]	; (8002810 <cfg_RcvData+0x2f4>)
 8002658:	801a      	strh	r2, [r3, #0]
			cfg_info.iface[iface].rx_buf.data_size  = data + 5;
 800265a:	797b      	ldrb	r3, [r7, #5]
 800265c:	b29a      	uxth	r2, r3
 800265e:	88fb      	ldrh	r3, [r7, #6]
 8002660:	3205      	adds	r2, #5
 8002662:	b290      	uxth	r0, r2
 8002664:	4a69      	ldr	r2, [pc, #420]	; (800280c <cfg_RcvData+0x2f0>)
 8002666:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800266a:	fb01 f303 	mul.w	r3, r1, r3
 800266e:	4413      	add	r3, r2
 8002670:	3306      	adds	r3, #6
 8002672:	4602      	mov	r2, r0
 8002674:	801a      	strh	r2, [r3, #0]
			cfg_info.iface[iface].rx_buf.state = RINGBUF_WAIT_DATA;
 8002676:	88fb      	ldrh	r3, [r7, #6]
 8002678:	4a64      	ldr	r2, [pc, #400]	; (800280c <cfg_RcvData+0x2f0>)
 800267a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800267e:	fb01 f303 	mul.w	r3, r1, r3
 8002682:	4413      	add	r3, r2
 8002684:	2201      	movs	r2, #1
 8002686:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}

	return;
 8002688:	e0ba      	b.n	8002800 <cfg_RcvData+0x2e4>
	else if( cfg_info.iface[iface].rx_buf.state == RINGBUF_WAIT_DATA )
 800268a:	88fb      	ldrh	r3, [r7, #6]
 800268c:	4a5f      	ldr	r2, [pc, #380]	; (800280c <cfg_RcvData+0x2f0>)
 800268e:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002692:	fb01 f303 	mul.w	r3, r1, r3
 8002696:	4413      	add	r3, r2
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b01      	cmp	r3, #1
 800269e:	f040 80af 	bne.w	8002800 <cfg_RcvData+0x2e4>
		if( rcv_size-- != 0 ){
 80026a2:	4b5b      	ldr	r3, [pc, #364]	; (8002810 <cfg_RcvData+0x2f4>)
 80026a4:	881b      	ldrh	r3, [r3, #0]
 80026a6:	1e5a      	subs	r2, r3, #1
 80026a8:	b291      	uxth	r1, r2
 80026aa:	4a59      	ldr	r2, [pc, #356]	; (8002810 <cfg_RcvData+0x2f4>)
 80026ac:	8011      	strh	r1, [r2, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f040 80a8 	bne.w	8002804 <cfg_RcvData+0x2e8>
			cfg_info.iface[iface].rx_buf.state = RINGBUF_WAIT_HEADER;
 80026b4:	88fb      	ldrh	r3, [r7, #6]
 80026b6:	4a55      	ldr	r2, [pc, #340]	; (800280c <cfg_RcvData+0x2f0>)
 80026b8:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80026bc:	fb01 f303 	mul.w	r3, r1, r3
 80026c0:	4413      	add	r3, r2
 80026c2:	2200      	movs	r2, #0
 80026c4:	701a      	strb	r2, [r3, #0]
			crc = crc16_RingBuf((uint8_t*)cfg_info.iface[iface].rx_buf.data, cfg_info.iface[iface].rx_buf.head,
 80026c6:	88fb      	ldrh	r3, [r7, #6]
 80026c8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80026cc:	fb02 f303 	mul.w	r3, r2, r3
 80026d0:	3308      	adds	r3, #8
 80026d2:	4a4e      	ldr	r2, [pc, #312]	; (800280c <cfg_RcvData+0x2f0>)
 80026d4:	1898      	adds	r0, r3, r2
 80026d6:	88fb      	ldrh	r3, [r7, #6]
 80026d8:	4a4c      	ldr	r2, [pc, #304]	; (800280c <cfg_RcvData+0x2f0>)
 80026da:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80026de:	fb01 f303 	mul.w	r3, r1, r3
 80026e2:	4413      	add	r3, r2
 80026e4:	3302      	adds	r3, #2
 80026e6:	881b      	ldrh	r3, [r3, #0]
 80026e8:	b299      	uxth	r1, r3
 80026ea:	88fb      	ldrh	r3, [r7, #6]
 80026ec:	4a47      	ldr	r2, [pc, #284]	; (800280c <cfg_RcvData+0x2f0>)
 80026ee:	f44f 7447 	mov.w	r4, #796	; 0x31c
 80026f2:	fb04 f303 	mul.w	r3, r4, r3
 80026f6:	4413      	add	r3, r2
 80026f8:	3306      	adds	r3, #6
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	23ff      	movs	r3, #255	; 0xff
 8002700:	f000 fcda 	bl	80030b8 <crc16_RingBuf>
 8002704:	4603      	mov	r3, r0
 8002706:	81bb      	strh	r3, [r7, #12]
			if( crc == cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 8002708:	88fb      	ldrh	r3, [r7, #6]
 800270a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800270e:	fb02 f303 	mul.w	r3, r2, r3
 8002712:	3308      	adds	r3, #8
 8002714:	4a3d      	ldr	r2, [pc, #244]	; (800280c <cfg_RcvData+0x2f0>)
 8002716:	441a      	add	r2, r3
					(cfg_info.iface[iface].rx_buf.tail - 1) & CFG_BUF_MASK) ){
 8002718:	88fb      	ldrh	r3, [r7, #6]
 800271a:	493c      	ldr	r1, [pc, #240]	; (800280c <cfg_RcvData+0x2f0>)
 800271c:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002720:	fb00 f303 	mul.w	r3, r0, r3
 8002724:	440b      	add	r3, r1
 8002726:	3304      	adds	r3, #4
 8002728:	881b      	ldrh	r3, [r3, #0]
 800272a:	b29b      	uxth	r3, r3
 800272c:	3b01      	subs	r3, #1
 800272e:	b29b      	uxth	r3, r3
			if( crc == cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 8002730:	b2db      	uxtb	r3, r3
 8002732:	b29b      	uxth	r3, r3
 8002734:	4619      	mov	r1, r3
 8002736:	4610      	mov	r0, r2
 8002738:	f000 f86c 	bl	8002814 <cfg_ringBufRead16b>
 800273c:	4603      	mov	r3, r0
 800273e:	461a      	mov	r2, r3
 8002740:	89bb      	ldrh	r3, [r7, #12]
 8002742:	4293      	cmp	r3, r2
 8002744:	d15c      	bne.n	8002800 <cfg_RcvData+0x2e4>
				if( cfg_info.iface[iface].rvd_pkt_size == 0 )
 8002746:	88fb      	ldrh	r3, [r7, #6]
 8002748:	4a30      	ldr	r2, [pc, #192]	; (800280c <cfg_RcvData+0x2f0>)
 800274a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800274e:	fb01 f303 	mul.w	r3, r1, r3
 8002752:	4413      	add	r3, r2
 8002754:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d150      	bne.n	8002800 <cfg_RcvData+0x2e4>
					for( uint16_t i = 0; i < cfg_info.iface[iface].rx_buf.data_size; i++ ){
 800275e:	2300      	movs	r3, #0
 8002760:	81fb      	strh	r3, [r7, #14]
 8002762:	e028      	b.n	80027b6 <cfg_RcvData+0x29a>
							cfg_info.iface[iface].rx_buf.data[(cfg_info.iface[iface].rx_buf.head + i) & CFG_BUF_MASK];
 8002764:	88f8      	ldrh	r0, [r7, #6]
 8002766:	88fb      	ldrh	r3, [r7, #6]
 8002768:	4a28      	ldr	r2, [pc, #160]	; (800280c <cfg_RcvData+0x2f0>)
 800276a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800276e:	fb01 f303 	mul.w	r3, r1, r3
 8002772:	4413      	add	r3, r2
 8002774:	3302      	adds	r3, #2
 8002776:	881b      	ldrh	r3, [r3, #0]
 8002778:	b29a      	uxth	r2, r3
 800277a:	89fb      	ldrh	r3, [r7, #14]
 800277c:	4413      	add	r3, r2
 800277e:	b29b      	uxth	r3, r3
 8002780:	b2d9      	uxtb	r1, r3
						cfg_info.iface[iface].rvd_pkt[i] =
 8002782:	88fa      	ldrh	r2, [r7, #6]
 8002784:	89fb      	ldrh	r3, [r7, #14]
							cfg_info.iface[iface].rx_buf.data[(cfg_info.iface[iface].rx_buf.head + i) & CFG_BUF_MASK];
 8002786:	4c21      	ldr	r4, [pc, #132]	; (800280c <cfg_RcvData+0x2f0>)
 8002788:	f44f 7547 	mov.w	r5, #796	; 0x31c
 800278c:	fb05 f000 	mul.w	r0, r5, r0
 8002790:	4420      	add	r0, r4
 8002792:	4401      	add	r1, r0
 8002794:	3108      	adds	r1, #8
 8002796:	7809      	ldrb	r1, [r1, #0]
 8002798:	b2cc      	uxtb	r4, r1
						cfg_info.iface[iface].rvd_pkt[i] =
 800279a:	491c      	ldr	r1, [pc, #112]	; (800280c <cfg_RcvData+0x2f0>)
 800279c:	f44f 7047 	mov.w	r0, #796	; 0x31c
 80027a0:	fb00 f202 	mul.w	r2, r0, r2
 80027a4:	440a      	add	r2, r1
 80027a6:	4413      	add	r3, r2
 80027a8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80027ac:	4622      	mov	r2, r4
 80027ae:	701a      	strb	r2, [r3, #0]
					for( uint16_t i = 0; i < cfg_info.iface[iface].rx_buf.data_size; i++ ){
 80027b0:	89fb      	ldrh	r3, [r7, #14]
 80027b2:	3301      	adds	r3, #1
 80027b4:	81fb      	strh	r3, [r7, #14]
 80027b6:	88fb      	ldrh	r3, [r7, #6]
 80027b8:	4a14      	ldr	r2, [pc, #80]	; (800280c <cfg_RcvData+0x2f0>)
 80027ba:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80027be:	fb01 f303 	mul.w	r3, r1, r3
 80027c2:	4413      	add	r3, r2
 80027c4:	3306      	adds	r3, #6
 80027c6:	881b      	ldrh	r3, [r3, #0]
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	89fa      	ldrh	r2, [r7, #14]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d3c9      	bcc.n	8002764 <cfg_RcvData+0x248>
					cfg_info.iface[iface].rvd_pkt_size = cfg_info.iface[iface].rx_buf.data_size;
 80027d0:	88fb      	ldrh	r3, [r7, #6]
 80027d2:	4a0e      	ldr	r2, [pc, #56]	; (800280c <cfg_RcvData+0x2f0>)
 80027d4:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80027d8:	fb01 f303 	mul.w	r3, r1, r3
 80027dc:	4413      	add	r3, r2
 80027de:	3306      	adds	r3, #6
 80027e0:	881b      	ldrh	r3, [r3, #0]
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	88fb      	ldrh	r3, [r7, #6]
 80027e6:	4610      	mov	r0, r2
 80027e8:	4a08      	ldr	r2, [pc, #32]	; (800280c <cfg_RcvData+0x2f0>)
 80027ea:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80027ee:	fb01 f303 	mul.w	r3, r1, r3
 80027f2:	4413      	add	r3, r2
 80027f4:	f503 7345 	add.w	r3, r3, #788	; 0x314
 80027f8:	6018      	str	r0, [r3, #0]
	return;
 80027fa:	e001      	b.n	8002800 <cfg_RcvData+0x2e4>
		return;
 80027fc:	bf00      	nop
 80027fe:	e002      	b.n	8002806 <cfg_RcvData+0x2ea>
	return;
 8002800:	bf00      	nop
 8002802:	e000      	b.n	8002806 <cfg_RcvData+0x2ea>
			return;
 8002804:	bf00      	nop
}
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bdb0      	pop	{r4, r5, r7, pc}
 800280c:	200001c8 	.word	0x200001c8
 8002810:	20000500 	.word	0x20000500

08002814 <cfg_ringBufRead16b>:

uint16_t cfg_ringBufRead16b(uint8_t *buf, uint16_t pos)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	460b      	mov	r3, r1
 800281e:	807b      	strh	r3, [r7, #2]
	uint16_t tmp;
	tmp = buf[(pos + 1) & CFG_BUF_MASK] & 0xFF;
 8002820:	887b      	ldrh	r3, [r7, #2]
 8002822:	3301      	adds	r3, #1
 8002824:	b2db      	uxtb	r3, r3
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	4413      	add	r3, r2
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp << 8) + buf[pos];
 800282e:	89fb      	ldrh	r3, [r7, #14]
 8002830:	021b      	lsls	r3, r3, #8
 8002832:	b29a      	uxth	r2, r3
 8002834:	887b      	ldrh	r3, [r7, #2]
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	440b      	add	r3, r1
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	b29b      	uxth	r3, r3
 800283e:	4413      	add	r3, r2
 8002840:	81fb      	strh	r3, [r7, #14]
	return tmp;
 8002842:	89fb      	ldrh	r3, [r7, #14]
}
 8002844:	4618      	mov	r0, r3
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <cfg_SaveSettings>:
	tmp = (tmp << 8) + buf[pos];
	return tmp;
}

void cfg_SaveSettings()
{
 8002850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002854:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 8002858:	b085      	sub	sp, #20
 800285a:	af00      	add	r7, sp, #0
#endif //NO_CFG

	uint16_t i, j;
	uint32_t tmp_var_buf[CFG_MAX_SAVE_PAR_NUM];
	uint16_t var_prop;
	uint16_t var_cnt = 0;
 800285c:	2300      	movs	r3, #0
 800285e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002862:	f102 020a 	add.w	r2, r2, #10
 8002866:	8013      	strh	r3, [r2, #0]
	uint32_t var_crc;

	//Count parameters to be saved
	//Nodes
	for( i = 0; i < cfg_info.node_num; i++ )
 8002868:	2300      	movs	r3, #0
 800286a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800286e:	f102 020e 	add.w	r2, r2, #14
 8002872:	8013      	strh	r3, [r2, #0]
 8002874:	e079      	b.n	800296a <cfg_SaveSettings+0x11a>
	{
		//Parameters (Variables)
		for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 8002876:	2300      	movs	r3, #0
 8002878:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800287c:	f102 020c 	add.w	r2, r2, #12
 8002880:	8013      	strh	r3, [r2, #0]
 8002882:	e053      	b.n	800292c <cfg_SaveSettings+0xdc>
		{
			cfg_NodeList[i].var_prop_func(j, NULL, &var_prop);
 8002884:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002888:	f103 030e 	add.w	r3, r3, #14
 800288c:	881a      	ldrh	r2, [r3, #0]
 800288e:	4981      	ldr	r1, [pc, #516]	; (8002a94 <cfg_SaveSettings+0x244>)
 8002890:	4613      	mov	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	3310      	adds	r3, #16
 800289c:	681e      	ldr	r6, [r3, #0]
 800289e:	f107 0310 	add.w	r3, r7, #16
 80028a2:	3b0e      	subs	r3, #14
 80028a4:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80028a8:	f102 020c 	add.w	r2, r2, #12
 80028ac:	8810      	ldrh	r0, [r2, #0]
 80028ae:	461a      	mov	r2, r3
 80028b0:	2100      	movs	r1, #0
 80028b2:	47b0      	blx	r6
			if( (var_prop & CFG_VAR_PROP_CONST) != 0 )
 80028b4:	f107 0310 	add.w	r3, r7, #16
 80028b8:	f833 3c0e 	ldrh.w	r3, [r3, #-14]
 80028bc:	f003 0320 	and.w	r3, r3, #32
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d028      	beq.n	8002916 <cfg_SaveSettings+0xc6>
			{
				cfg_NodeList[i].var_get_func(j, &tmp_var_buf[var_cnt]);
 80028c4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80028c8:	f103 030e 	add.w	r3, r3, #14
 80028cc:	881a      	ldrh	r2, [r3, #0]
 80028ce:	4971      	ldr	r1, [pc, #452]	; (8002a94 <cfg_SaveSettings+0x244>)
 80028d0:	4613      	mov	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	440b      	add	r3, r1
 80028da:	3308      	adds	r3, #8
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80028e2:	f103 030a 	add.w	r3, r3, #10
 80028e6:	8819      	ldrh	r1, [r3, #0]
 80028e8:	f107 0310 	add.w	r3, r7, #16
 80028ec:	3b0c      	subs	r3, #12
 80028ee:	0089      	lsls	r1, r1, #2
 80028f0:	4419      	add	r1, r3
 80028f2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80028f6:	f103 030c 	add.w	r3, r3, #12
 80028fa:	881b      	ldrh	r3, [r3, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	4790      	blx	r2
				var_cnt += 1;
 8002900:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002904:	f103 030a 	add.w	r3, r3, #10
 8002908:	881b      	ldrh	r3, [r3, #0]
 800290a:	3301      	adds	r3, #1
 800290c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002910:	f102 020a 	add.w	r2, r2, #10
 8002914:	8013      	strh	r3, [r2, #0]
		for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 8002916:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800291a:	f103 030c 	add.w	r3, r3, #12
 800291e:	881b      	ldrh	r3, [r3, #0]
 8002920:	3301      	adds	r3, #1
 8002922:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002926:	f102 020c 	add.w	r2, r2, #12
 800292a:	8013      	strh	r3, [r2, #0]
 800292c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002930:	f103 030e 	add.w	r3, r3, #14
 8002934:	881a      	ldrh	r2, [r3, #0]
 8002936:	4957      	ldr	r1, [pc, #348]	; (8002a94 <cfg_SaveSettings+0x244>)
 8002938:	4613      	mov	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	3304      	adds	r3, #4
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800294a:	f102 020c 	add.w	r2, r2, #12
 800294e:	8812      	ldrh	r2, [r2, #0]
 8002950:	429a      	cmp	r2, r3
 8002952:	d397      	bcc.n	8002884 <cfg_SaveSettings+0x34>
	for( i = 0; i < cfg_info.node_num; i++ )
 8002954:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002958:	f103 030e 	add.w	r3, r3, #14
 800295c:	881b      	ldrh	r3, [r3, #0]
 800295e:	3301      	adds	r3, #1
 8002960:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002964:	f102 020e 	add.w	r2, r2, #14
 8002968:	8013      	strh	r3, [r2, #0]
 800296a:	4b4b      	ldr	r3, [pc, #300]	; (8002a98 <cfg_SaveSettings+0x248>)
 800296c:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 8002970:	b29b      	uxth	r3, r3
 8002972:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002976:	f102 020e 	add.w	r2, r2, #14
 800297a:	8812      	ldrh	r2, [r2, #0]
 800297c:	429a      	cmp	r2, r3
 800297e:	f4ff af7a 	bcc.w	8002876 <cfg_SaveSettings+0x26>
			}
		}
	}
	//Writing array to flash (parameters + parameters number + crc)
	if( (var_cnt > 0) && (var_cnt < (CFG_MAX_SAVE_PAR_NUM - 2)) )
 8002982:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002986:	f103 030a 	add.w	r3, r3, #10
 800298a:	881b      	ldrh	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d07a      	beq.n	8002a86 <cfg_SaveSettings+0x236>
 8002990:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002994:	f103 030a 	add.w	r3, r3, #10
 8002998:	881b      	ldrh	r3, [r3, #0]
 800299a:	f240 32fd 	movw	r2, #1021	; 0x3fd
 800299e:	4293      	cmp	r3, r2
 80029a0:	d871      	bhi.n	8002a86 <cfg_SaveSettings+0x236>
	{
		var_crc = crc32_calc(0, tmp_var_buf, var_cnt);
 80029a2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80029a6:	f103 030a 	add.w	r3, r3, #10
 80029aa:	881a      	ldrh	r2, [r3, #0]
 80029ac:	f107 0310 	add.w	r3, r7, #16
 80029b0:	3b0c      	subs	r3, #12
 80029b2:	4619      	mov	r1, r3
 80029b4:	2000      	movs	r0, #0
 80029b6:	f000 fbb7 	bl	8003128 <crc32_calc>
 80029ba:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80029be:	f103 0304 	add.w	r3, r3, #4
 80029c2:	6018      	str	r0, [r3, #0]
		HAL_FLASH_Unlock();
 80029c4:	f004 fd10 	bl	80073e8 <HAL_FLASH_Unlock>
		//Erase sector which stores parameters array
		FLASH_Erase_Sector(FLASH_SECTOR_7, FLASH_VOLTAGE_RANGE_3);
 80029c8:	2102      	movs	r1, #2
 80029ca:	2007      	movs	r0, #7
 80029cc:	f004 fe7e 	bl	80076cc <FLASH_Erase_Sector>
		//Write number of parameters
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)param_arr, (uint64_t)var_cnt);
 80029d0:	4932      	ldr	r1, [pc, #200]	; (8002a9c <cfg_SaveSettings+0x24c>)
 80029d2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80029d6:	f103 030a 	add.w	r3, r3, #10
 80029da:	881b      	ldrh	r3, [r3, #0]
 80029dc:	2200      	movs	r2, #0
 80029de:	469a      	mov	sl, r3
 80029e0:	4693      	mov	fp, r2
 80029e2:	4652      	mov	r2, sl
 80029e4:	465b      	mov	r3, fp
 80029e6:	2002      	movs	r0, #2
 80029e8:	f004 fcaa 	bl	8007340 <HAL_FLASH_Program>
		//Write CRC
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)param_arr + 4, (uint64_t)var_crc);
 80029ec:	4b2b      	ldr	r3, [pc, #172]	; (8002a9c <cfg_SaveSettings+0x24c>)
 80029ee:	1d19      	adds	r1, r3, #4
 80029f0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80029f4:	f103 0304 	add.w	r3, r3, #4
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2200      	movs	r2, #0
 80029fc:	4698      	mov	r8, r3
 80029fe:	4691      	mov	r9, r2
 8002a00:	4642      	mov	r2, r8
 8002a02:	464b      	mov	r3, r9
 8002a04:	2002      	movs	r0, #2
 8002a06:	f004 fc9b 	bl	8007340 <HAL_FLASH_Program>
		//Write parameters
		for(i = 0; i < var_cnt; i++ ){
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002a10:	f102 020e 	add.w	r2, r2, #14
 8002a14:	8013      	strh	r3, [r2, #0]
 8002a16:	e027      	b.n	8002a68 <cfg_SaveSettings+0x218>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)param_arr + 8 + (i * 4), (uint64_t)tmp_var_buf[i]);
 8002a18:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002a1c:	f103 030e 	add.w	r3, r3, #14
 8002a20:	881b      	ldrh	r3, [r3, #0]
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	461a      	mov	r2, r3
 8002a26:	4b1d      	ldr	r3, [pc, #116]	; (8002a9c <cfg_SaveSettings+0x24c>)
 8002a28:	3308      	adds	r3, #8
 8002a2a:	18d1      	adds	r1, r2, r3
 8002a2c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002a30:	f103 030e 	add.w	r3, r3, #14
 8002a34:	881b      	ldrh	r3, [r3, #0]
 8002a36:	f107 0210 	add.w	r2, r7, #16
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	461c      	mov	r4, r3
 8002a46:	4615      	mov	r5, r2
 8002a48:	4622      	mov	r2, r4
 8002a4a:	462b      	mov	r3, r5
 8002a4c:	2002      	movs	r0, #2
 8002a4e:	f004 fc77 	bl	8007340 <HAL_FLASH_Program>
		for(i = 0; i < var_cnt; i++ ){
 8002a52:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002a56:	f103 030e 	add.w	r3, r3, #14
 8002a5a:	881b      	ldrh	r3, [r3, #0]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002a62:	f102 020e 	add.w	r2, r2, #14
 8002a66:	8013      	strh	r3, [r2, #0]
 8002a68:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002a6c:	f103 030e 	add.w	r3, r3, #14
 8002a70:	881a      	ldrh	r2, [r3, #0]
 8002a72:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002a76:	f103 030a 	add.w	r3, r3, #10
 8002a7a:	881b      	ldrh	r3, [r3, #0]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d3cb      	bcc.n	8002a18 <cfg_SaveSettings+0x1c8>
		}
		HAL_FLASH_Lock();
 8002a80:	f004 fcd4 	bl	800742c <HAL_FLASH_Lock>

	}

	return;
 8002a84:	bf00      	nop
 8002a86:	bf00      	nop
}
 8002a88:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a94:	20000030 	.word	0x20000030
 8002a98:	200001c8 	.word	0x200001c8
 8002a9c:	08060000 	.word	0x08060000

08002aa0 <cfg_LoadSettings>:

void cfg_LoadSettings()
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
#ifdef NO_CFG
	return;
#endif //NO_CFG

	uint16_t i, j;
	uint16_t var_prop = 0;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	80fb      	strh	r3, [r7, #6]
	uint16_t var_cnt = 0;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	827b      	strh	r3, [r7, #18]
	uint16_t load_var_cnt = 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	823b      	strh	r3, [r7, #16]
	uint32_t var_num = param_arr[0]; /* Number of stored parameters */
 8002ab2:	4b4e      	ldr	r3, [pc, #312]	; (8002bec <cfg_LoadSettings+0x14c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	60fb      	str	r3, [r7, #12]
	uint32_t var_crc = param_arr[1];
 8002ab8:	4b4c      	ldr	r3, [pc, #304]	; (8002bec <cfg_LoadSettings+0x14c>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	60bb      	str	r3, [r7, #8]

	if( (var_num > 0) && (var_num < (CFG_MAX_SAVE_PAR_NUM - 2)) )
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 808e 	beq.w	8002be2 <cfg_LoadSettings+0x142>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f240 32fd 	movw	r2, #1021	; 0x3fd
 8002acc:	4293      	cmp	r3, r2
 8002ace:	f200 8088 	bhi.w	8002be2 <cfg_LoadSettings+0x142>
	{
		//Count parameters to be saved
		//Nodes
		for( i = 0; i < cfg_info.node_num; i++ )
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	82fb      	strh	r3, [r7, #22]
 8002ad6:	e029      	b.n	8002b2c <cfg_LoadSettings+0x8c>
		{
			//Parameters (Variables)
			for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 8002ad8:	2300      	movs	r3, #0
 8002ada:	82bb      	strh	r3, [r7, #20]
 8002adc:	e017      	b.n	8002b0e <cfg_LoadSettings+0x6e>
			{
				cfg_NodeList[i].var_prop_func(j, NULL, &var_prop);
 8002ade:	8afa      	ldrh	r2, [r7, #22]
 8002ae0:	4943      	ldr	r1, [pc, #268]	; (8002bf0 <cfg_LoadSettings+0x150>)
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	440b      	add	r3, r1
 8002aec:	3310      	adds	r3, #16
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	1dba      	adds	r2, r7, #6
 8002af2:	8ab8      	ldrh	r0, [r7, #20]
 8002af4:	2100      	movs	r1, #0
 8002af6:	4798      	blx	r3
				if( (var_prop & CFG_VAR_PROP_CONST) != 0 ){
 8002af8:	88fb      	ldrh	r3, [r7, #6]
 8002afa:	f003 0320 	and.w	r3, r3, #32
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d002      	beq.n	8002b08 <cfg_LoadSettings+0x68>
					var_cnt += 1;
 8002b02:	8a7b      	ldrh	r3, [r7, #18]
 8002b04:	3301      	adds	r3, #1
 8002b06:	827b      	strh	r3, [r7, #18]
			for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 8002b08:	8abb      	ldrh	r3, [r7, #20]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	82bb      	strh	r3, [r7, #20]
 8002b0e:	8afa      	ldrh	r2, [r7, #22]
 8002b10:	4937      	ldr	r1, [pc, #220]	; (8002bf0 <cfg_LoadSettings+0x150>)
 8002b12:	4613      	mov	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	440b      	add	r3, r1
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	881b      	ldrh	r3, [r3, #0]
 8002b20:	8aba      	ldrh	r2, [r7, #20]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d3db      	bcc.n	8002ade <cfg_LoadSettings+0x3e>
		for( i = 0; i < cfg_info.node_num; i++ )
 8002b26:	8afb      	ldrh	r3, [r7, #22]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	82fb      	strh	r3, [r7, #22]
 8002b2c:	4b31      	ldr	r3, [pc, #196]	; (8002bf4 <cfg_LoadSettings+0x154>)
 8002b2e:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	8afa      	ldrh	r2, [r7, #22]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d3ce      	bcc.n	8002ad8 <cfg_LoadSettings+0x38>
				}
			}
		}

		//volatile uint32_t t_crc = crc32_calc(0, &param_arr[2], var_cnt);
		if( (var_num == var_cnt) && (var_crc == crc32_calc(0, &param_arr[2], var_cnt)) )
 8002b3a:	8a7b      	ldrh	r3, [r7, #18]
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d14f      	bne.n	8002be2 <cfg_LoadSettings+0x142>
 8002b42:	8a7b      	ldrh	r3, [r7, #18]
 8002b44:	461a      	mov	r2, r3
 8002b46:	492c      	ldr	r1, [pc, #176]	; (8002bf8 <cfg_LoadSettings+0x158>)
 8002b48:	2000      	movs	r0, #0
 8002b4a:	f000 faed 	bl	8003128 <crc32_calc>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d145      	bne.n	8002be2 <cfg_LoadSettings+0x142>
		{
			for( i = 0; i < cfg_info.node_num; i++ )
 8002b56:	2300      	movs	r3, #0
 8002b58:	82fb      	strh	r3, [r7, #22]
 8002b5a:	e03a      	b.n	8002bd2 <cfg_LoadSettings+0x132>
			{
				//Parameters (Variables)
				for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	82bb      	strh	r3, [r7, #20]
 8002b60:	e028      	b.n	8002bb4 <cfg_LoadSettings+0x114>
				{
					cfg_NodeList[i].var_prop_func(j, NULL, &var_prop);
 8002b62:	8afa      	ldrh	r2, [r7, #22]
 8002b64:	4922      	ldr	r1, [pc, #136]	; (8002bf0 <cfg_LoadSettings+0x150>)
 8002b66:	4613      	mov	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	440b      	add	r3, r1
 8002b70:	3310      	adds	r3, #16
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	1dba      	adds	r2, r7, #6
 8002b76:	8ab8      	ldrh	r0, [r7, #20]
 8002b78:	2100      	movs	r1, #0
 8002b7a:	4798      	blx	r3
					if( (var_prop & CFG_VAR_PROP_CONST) != 0 )
 8002b7c:	88fb      	ldrh	r3, [r7, #6]
 8002b7e:	f003 0320 	and.w	r3, r3, #32
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d013      	beq.n	8002bae <cfg_LoadSettings+0x10e>
					{
						cfg_NodeList[i].var_set_func(j, &param_arr[2 + load_var_cnt]);
 8002b86:	8afa      	ldrh	r2, [r7, #22]
 8002b88:	4919      	ldr	r1, [pc, #100]	; (8002bf0 <cfg_LoadSettings+0x150>)
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	440b      	add	r3, r1
 8002b94:	330c      	adds	r3, #12
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	8a3a      	ldrh	r2, [r7, #16]
 8002b9a:	3202      	adds	r2, #2
 8002b9c:	0092      	lsls	r2, r2, #2
 8002b9e:	4913      	ldr	r1, [pc, #76]	; (8002bec <cfg_LoadSettings+0x14c>)
 8002ba0:	4411      	add	r1, r2
 8002ba2:	8aba      	ldrh	r2, [r7, #20]
 8002ba4:	4610      	mov	r0, r2
 8002ba6:	4798      	blx	r3
						load_var_cnt += 1;
 8002ba8:	8a3b      	ldrh	r3, [r7, #16]
 8002baa:	3301      	adds	r3, #1
 8002bac:	823b      	strh	r3, [r7, #16]
				for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 8002bae:	8abb      	ldrh	r3, [r7, #20]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	82bb      	strh	r3, [r7, #20]
 8002bb4:	8afa      	ldrh	r2, [r7, #22]
 8002bb6:	490e      	ldr	r1, [pc, #56]	; (8002bf0 <cfg_LoadSettings+0x150>)
 8002bb8:	4613      	mov	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	3304      	adds	r3, #4
 8002bc4:	881b      	ldrh	r3, [r3, #0]
 8002bc6:	8aba      	ldrh	r2, [r7, #20]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d3ca      	bcc.n	8002b62 <cfg_LoadSettings+0xc2>
			for( i = 0; i < cfg_info.node_num; i++ )
 8002bcc:	8afb      	ldrh	r3, [r7, #22]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	82fb      	strh	r3, [r7, #22]
 8002bd2:	4b08      	ldr	r3, [pc, #32]	; (8002bf4 <cfg_LoadSettings+0x154>)
 8002bd4:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	8afa      	ldrh	r2, [r7, #22]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d3bd      	bcc.n	8002b5c <cfg_LoadSettings+0xbc>
				}
			}
		}
	}

	return;
 8002be0:	bf00      	nop
 8002be2:	bf00      	nop
}
 8002be4:	3718      	adds	r7, #24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	08060000 	.word	0x08060000
 8002bf0:	20000030 	.word	0x20000030
 8002bf4:	200001c8 	.word	0x200001c8
 8002bf8:	08060008 	.word	0x08060008

08002bfc <cfg_ClearFwBuf>:

void cfg_ClearFwBuf()
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
#ifdef NO_CFG
	return;
#endif //NO_CFG

	HAL_FLASH_Unlock();
 8002c00:	f004 fbf2 	bl	80073e8 <HAL_FLASH_Unlock>
	//todo: calc sectors from addr
	FLASH_Erase_Sector(FLASH_SECTOR_6, FLASH_VOLTAGE_RANGE_3);
 8002c04:	2102      	movs	r1, #2
 8002c06:	2006      	movs	r0, #6
 8002c08:	f004 fd60 	bl	80076cc <FLASH_Erase_Sector>
	FLASH_Erase_Sector(FLASH_SECTOR_15, FLASH_VOLTAGE_RANGE_3);
	FLASH_Erase_Sector(FLASH_SECTOR_16, FLASH_VOLTAGE_RANGE_3);
	FLASH_Erase_Sector(FLASH_SECTOR_17, FLASH_VOLTAGE_RANGE_3);
	FLASH_Erase_Sector(FLASH_SECTOR_18, FLASH_VOLTAGE_RANGE_3);
	FLASH_Erase_Sector(FLASH_SECTOR_19, FLASH_VOLTAGE_RANGE_3);*/
	HAL_FLASH_Lock();
 8002c0c:	f004 fc0e 	bl	800742c <HAL_FLASH_Lock>
	cfg_new_fw_cur_addr = (uint32_t)&new_fw_start;
 8002c10:	4a03      	ldr	r2, [pc, #12]	; (8002c20 <cfg_ClearFwBuf+0x24>)
 8002c12:	4b04      	ldr	r3, [pc, #16]	; (8002c24 <cfg_ClearFwBuf+0x28>)
 8002c14:	601a      	str	r2, [r3, #0]
	cfg_new_fw_size = 0;
 8002c16:	4b04      	ldr	r3, [pc, #16]	; (8002c28 <cfg_ClearFwBuf+0x2c>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]

	return;
 8002c1c:	bf00      	nop
}
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	08040000 	.word	0x08040000
 8002c24:	200004f8 	.word	0x200004f8
 8002c28:	200004fc 	.word	0x200004fc

08002c2c <cfg_WriteFwData>:

void cfg_WriteFwData(uint32_t data)
{
 8002c2c:	b5b0      	push	{r4, r5, r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
#ifdef NO_CFG
	return;
#endif //NO_CFG

	HAL_FLASH_Unlock();
 8002c34:	f004 fbd8 	bl	80073e8 <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, cfg_new_fw_cur_addr, (uint64_t)data);
 8002c38:	4b0d      	ldr	r3, [pc, #52]	; (8002c70 <cfg_WriteFwData+0x44>)
 8002c3a:	6819      	ldr	r1, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	461c      	mov	r4, r3
 8002c42:	4615      	mov	r5, r2
 8002c44:	4622      	mov	r2, r4
 8002c46:	462b      	mov	r3, r5
 8002c48:	2002      	movs	r0, #2
 8002c4a:	f004 fb79 	bl	8007340 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 8002c4e:	f004 fbed 	bl	800742c <HAL_FLASH_Lock>
	cfg_new_fw_cur_addr += 4;
 8002c52:	4b07      	ldr	r3, [pc, #28]	; (8002c70 <cfg_WriteFwData+0x44>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	3304      	adds	r3, #4
 8002c58:	4a05      	ldr	r2, [pc, #20]	; (8002c70 <cfg_WriteFwData+0x44>)
 8002c5a:	6013      	str	r3, [r2, #0]
	cfg_new_fw_size += 4;
 8002c5c:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <cfg_WriteFwData+0x48>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	3304      	adds	r3, #4
 8002c62:	4a04      	ldr	r2, [pc, #16]	; (8002c74 <cfg_WriteFwData+0x48>)
 8002c64:	6013      	str	r3, [r2, #0]

	return;
 8002c66:	bf00      	nop
}
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bdb0      	pop	{r4, r5, r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	200004f8 	.word	0x200004f8
 8002c74:	200004fc 	.word	0x200004fc

08002c78 <cfg_AddTxData>:

void cfg_AddTxData(uint16_t iface, uint8_t *data, uint32_t len)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	4603      	mov	r3, r0
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
 8002c84:	81fb      	strh	r3, [r7, #14]
#ifdef NO_CFG
	return;
#endif //NO_CFG

	if( iface >= CFG_IFACE_NUM ){
 8002c86:	89fb      	ldrh	r3, [r7, #14]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d13e      	bne.n	8002d0a <cfg_AddTxData+0x92>
		return;
	}

	if( len > (CFG_BUF_SIZE - cfg_info.iface[iface].tx_buf_bytes) ){
 8002c8c:	89fb      	ldrh	r3, [r7, #14]
 8002c8e:	4a22      	ldr	r2, [pc, #136]	; (8002d18 <cfg_AddTxData+0xa0>)
 8002c90:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002c94:	fb01 f303 	mul.w	r3, r1, r3
 8002c98:	4413      	add	r3, r2
 8002c9a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d831      	bhi.n	8002d0e <cfg_AddTxData+0x96>
		return;
	}
	memcpy((uint8_t*)&cfg_info.iface[iface].tx_buf[cfg_info.iface[iface].tx_buf_bytes], data, len);
 8002caa:	89fa      	ldrh	r2, [r7, #14]
 8002cac:	89fb      	ldrh	r3, [r7, #14]
 8002cae:	491a      	ldr	r1, [pc, #104]	; (8002d18 <cfg_AddTxData+0xa0>)
 8002cb0:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002cb4:	fb00 f303 	mul.w	r3, r0, r3
 8002cb8:	440b      	add	r3, r1
 8002cba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002cc4:	fb01 f202 	mul.w	r2, r1, r2
 8002cc8:	4413      	add	r3, r2
 8002cca:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002cce:	4a12      	ldr	r2, [pc, #72]	; (8002d18 <cfg_AddTxData+0xa0>)
 8002cd0:	4413      	add	r3, r2
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	68b9      	ldr	r1, [r7, #8]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f008 fcce 	bl	800b678 <memcpy>
	cfg_info.iface[iface].tx_buf_bytes += len;
 8002cdc:	89fb      	ldrh	r3, [r7, #14]
 8002cde:	4a0e      	ldr	r2, [pc, #56]	; (8002d18 <cfg_AddTxData+0xa0>)
 8002ce0:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002ce4:	fb01 f303 	mul.w	r3, r1, r3
 8002ce8:	4413      	add	r3, r2
 8002cea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002cee:	6819      	ldr	r1, [r3, #0]
 8002cf0:	89fb      	ldrh	r3, [r7, #14]
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	440a      	add	r2, r1
 8002cf6:	4908      	ldr	r1, [pc, #32]	; (8002d18 <cfg_AddTxData+0xa0>)
 8002cf8:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002cfc:	fb00 f303 	mul.w	r3, r0, r3
 8002d00:	440b      	add	r3, r1
 8002d02:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d06:	601a      	str	r2, [r3, #0]

	return;
 8002d08:	e002      	b.n	8002d10 <cfg_AddTxData+0x98>
		return;
 8002d0a:	bf00      	nop
 8002d0c:	e000      	b.n	8002d10 <cfg_AddTxData+0x98>
		return;
 8002d0e:	bf00      	nop
}
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	200001c8 	.word	0x200001c8

08002d1c <cfg_IntertTxData>:

void cfg_IntertTxData(uint16_t iface, uint32_t pos, uint8_t *data, uint32_t len)
{
 8002d1c:	b590      	push	{r4, r7, lr}
 8002d1e:	b0c5      	sub	sp, #276	; 0x114
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	4604      	mov	r4, r0
 8002d24:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8002d28:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 8002d2c:	6001      	str	r1, [r0, #0]
 8002d2e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002d32:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8002d36:	600a      	str	r2, [r1, #0]
 8002d38:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002d3c:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8002d40:	6013      	str	r3, [r2, #0]
 8002d42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d46:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002d4a:	4622      	mov	r2, r4
 8002d4c:	801a      	strh	r2, [r3, #0]
	return;
#endif //NO_CFG

	uint8_t tmp_buf[CFG_BUF_SIZE];

	if( iface >= CFG_IFACE_NUM ){
 8002d4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d52:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002d56:	881b      	ldrh	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f040 80c0 	bne.w	8002ede <cfg_IntertTxData+0x1c2>
		return;
	}
	if( len > (CFG_BUF_SIZE - cfg_info.iface[iface].tx_buf_bytes) ){
 8002d5e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d62:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002d66:	881b      	ldrh	r3, [r3, #0]
 8002d68:	4a61      	ldr	r2, [pc, #388]	; (8002ef0 <cfg_IntertTxData+0x1d4>)
 8002d6a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002d6e:	fb01 f303 	mul.w	r3, r1, r3
 8002d72:	4413      	add	r3, r2
 8002d74:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002d7e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002d82:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8002d86:	6812      	ldr	r2, [r2, #0]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	f200 80aa 	bhi.w	8002ee2 <cfg_IntertTxData+0x1c6>
		return;
	}
	if( pos >= CFG_BUF_SIZE ){
 8002d8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2bff      	cmp	r3, #255	; 0xff
 8002d9a:	f200 80a4 	bhi.w	8002ee6 <cfg_IntertTxData+0x1ca>
	/*tmp_buf = malloc(cfg_info.iface[iface].tx_buf_bytes - pos);
	if( tmp_buf == 0 )
	{
		tmp_buf = 1;
	}*/
	memcpy(tmp_buf, (uint8_t*)&cfg_info.iface[iface].tx_buf[pos], cfg_info.iface[iface].tx_buf_bytes - pos);
 8002d9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002da2:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002da6:	881b      	ldrh	r3, [r3, #0]
 8002da8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002dac:	fb03 f202 	mul.w	r2, r3, r2
 8002db0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002db4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4413      	add	r3, r2
 8002dbc:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002dc0:	4a4b      	ldr	r2, [pc, #300]	; (8002ef0 <cfg_IntertTxData+0x1d4>)
 8002dc2:	1899      	adds	r1, r3, r2
 8002dc4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002dc8:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002dcc:	881b      	ldrh	r3, [r3, #0]
 8002dce:	4a48      	ldr	r2, [pc, #288]	; (8002ef0 <cfg_IntertTxData+0x1d4>)
 8002dd0:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002dd4:	fb00 f303 	mul.w	r3, r0, r3
 8002dd8:	4413      	add	r3, r2
 8002dda:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002de4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	1ad2      	subs	r2, r2, r3
 8002dec:	f107 0310 	add.w	r3, r7, #16
 8002df0:	4618      	mov	r0, r3
 8002df2:	f008 fc41 	bl	800b678 <memcpy>
	memcpy((uint8_t*)&cfg_info.iface[iface].tx_buf[pos], data, len);
 8002df6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002dfa:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002dfe:	881b      	ldrh	r3, [r3, #0]
 8002e00:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002e04:	fb03 f202 	mul.w	r2, r3, r2
 8002e08:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4413      	add	r3, r2
 8002e14:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002e18:	4a35      	ldr	r2, [pc, #212]	; (8002ef0 <cfg_IntertTxData+0x1d4>)
 8002e1a:	1898      	adds	r0, r3, r2
 8002e1c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e20:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8002e24:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e28:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002e2c:	6812      	ldr	r2, [r2, #0]
 8002e2e:	6819      	ldr	r1, [r3, #0]
 8002e30:	f008 fc22 	bl	800b678 <memcpy>
	memcpy((uint8_t*)&cfg_info.iface[iface].tx_buf[pos + len], tmp_buf, cfg_info.iface[iface].tx_buf_bytes - pos);
 8002e34:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e38:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002e3c:	881a      	ldrh	r2, [r3, #0]
 8002e3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e42:	f5a3 7184 	sub.w	r1, r3, #264	; 0x108
 8002e46:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e4a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002e4e:	6809      	ldr	r1, [r1, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	440b      	add	r3, r1
 8002e54:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002e58:	fb01 f202 	mul.w	r2, r1, r2
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002e62:	4a23      	ldr	r2, [pc, #140]	; (8002ef0 <cfg_IntertTxData+0x1d4>)
 8002e64:	1898      	adds	r0, r3, r2
 8002e66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e6a:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002e6e:	881b      	ldrh	r3, [r3, #0]
 8002e70:	4a1f      	ldr	r2, [pc, #124]	; (8002ef0 <cfg_IntertTxData+0x1d4>)
 8002e72:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002e76:	fb01 f303 	mul.w	r3, r1, r3
 8002e7a:	4413      	add	r3, r2
 8002e7c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	1ad2      	subs	r2, r2, r3
 8002e8e:	f107 0310 	add.w	r3, r7, #16
 8002e92:	4619      	mov	r1, r3
 8002e94:	f008 fbf0 	bl	800b678 <memcpy>
	//free(tmp_buf);
	cfg_info.iface[iface].tx_buf_bytes += len;
 8002e98:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e9c:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002ea0:	881b      	ldrh	r3, [r3, #0]
 8002ea2:	4a13      	ldr	r2, [pc, #76]	; (8002ef0 <cfg_IntertTxData+0x1d4>)
 8002ea4:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002ea8:	fb01 f303 	mul.w	r3, r1, r3
 8002eac:	4413      	add	r3, r2
 8002eae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002eb2:	6819      	ldr	r1, [r3, #0]
 8002eb4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002eb8:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002ebc:	881b      	ldrh	r3, [r3, #0]
 8002ebe:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002ec2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8002ec6:	6812      	ldr	r2, [r2, #0]
 8002ec8:	440a      	add	r2, r1
 8002eca:	4909      	ldr	r1, [pc, #36]	; (8002ef0 <cfg_IntertTxData+0x1d4>)
 8002ecc:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002ed0:	fb00 f303 	mul.w	r3, r0, r3
 8002ed4:	440b      	add	r3, r1
 8002ed6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002eda:	601a      	str	r2, [r3, #0]

	return;
 8002edc:	e004      	b.n	8002ee8 <cfg_IntertTxData+0x1cc>
		return;
 8002ede:	bf00      	nop
 8002ee0:	e002      	b.n	8002ee8 <cfg_IntertTxData+0x1cc>
		return;
 8002ee2:	bf00      	nop
 8002ee4:	e000      	b.n	8002ee8 <cfg_IntertTxData+0x1cc>
		return;
 8002ee6:	bf00      	nop
}
 8002ee8:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd90      	pop	{r4, r7, pc}
 8002ef0:	200001c8 	.word	0x200001c8

08002ef4 <cfg_RemTxData>:

void cfg_RemTxData(uint16_t iface, uint32_t len)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b0c2      	sub	sp, #264	; 0x108
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	4602      	mov	r2, r0
 8002efc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002f00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f04:	6019      	str	r1, [r3, #0]
 8002f06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002f0a:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002f0e:	801a      	strh	r2, [r3, #0]
	return;
#endif //NO_CFG

	uint8_t tmp_buf[CFG_BUF_SIZE];

	if( (len > cfg_info.iface[iface].tx_buf_bytes)
 8002f10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002f14:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002f18:	881b      	ldrh	r3, [r3, #0]
 8002f1a:	4a4a      	ldr	r2, [pc, #296]	; (8003044 <cfg_RemTxData+0x150>)
 8002f1c:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002f20:	fb01 f303 	mul.w	r3, r1, r3
 8002f24:	4413      	add	r3, r2
 8002f26:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8002f30:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8002f34:	6812      	ldr	r2, [r2, #0]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d87f      	bhi.n	800303a <cfg_RemTxData+0x146>
			|| (len == 0) || (cfg_info.iface[iface].tx_buf_bytes == 0) ){
 8002f3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002f3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d078      	beq.n	800303a <cfg_RemTxData+0x146>
 8002f48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002f4c:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002f50:	881b      	ldrh	r3, [r3, #0]
 8002f52:	4a3c      	ldr	r2, [pc, #240]	; (8003044 <cfg_RemTxData+0x150>)
 8002f54:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002f58:	fb01 f303 	mul.w	r3, r1, r3
 8002f5c:	4413      	add	r3, r2
 8002f5e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d068      	beq.n	800303a <cfg_RemTxData+0x146>
		return;
	}
	cfg_info.iface[iface].tx_buf_bytes -= len;
 8002f68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002f6c:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002f70:	881b      	ldrh	r3, [r3, #0]
 8002f72:	4a34      	ldr	r2, [pc, #208]	; (8003044 <cfg_RemTxData+0x150>)
 8002f74:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002f78:	fb01 f303 	mul.w	r3, r1, r3
 8002f7c:	4413      	add	r3, r2
 8002f7e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002f82:	6819      	ldr	r1, [r3, #0]
 8002f84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002f88:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002f8c:	881b      	ldrh	r3, [r3, #0]
 8002f8e:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8002f92:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8002f96:	6812      	ldr	r2, [r2, #0]
 8002f98:	1a8a      	subs	r2, r1, r2
 8002f9a:	492a      	ldr	r1, [pc, #168]	; (8003044 <cfg_RemTxData+0x150>)
 8002f9c:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002fa0:	fb00 f303 	mul.w	r3, r0, r3
 8002fa4:	440b      	add	r3, r1
 8002fa6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002faa:	601a      	str	r2, [r3, #0]
	//tmp_buf = malloc(cfg_info.iface[iface].tx_buf_bytes);
	memcpy(tmp_buf, (uint8_t*)&cfg_info.iface[iface].tx_buf[len], cfg_info.iface[iface].tx_buf_bytes);
 8002fac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002fb0:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002fb4:	881b      	ldrh	r3, [r3, #0]
 8002fb6:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002fba:	fb03 f202 	mul.w	r2, r3, r2
 8002fbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002fc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4413      	add	r3, r2
 8002fca:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002fce:	4a1d      	ldr	r2, [pc, #116]	; (8003044 <cfg_RemTxData+0x150>)
 8002fd0:	1899      	adds	r1, r3, r2
 8002fd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002fd6:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002fda:	881b      	ldrh	r3, [r3, #0]
 8002fdc:	4a19      	ldr	r2, [pc, #100]	; (8003044 <cfg_RemTxData+0x150>)
 8002fde:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002fe2:	fb00 f303 	mul.w	r3, r0, r3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	f107 0308 	add.w	r3, r7, #8
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f008 fb40 	bl	800b678 <memcpy>
	memcpy((uint8_t*)cfg_info.iface[iface].tx_buf, tmp_buf, cfg_info.iface[iface].tx_buf_bytes);
 8002ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002ffc:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003000:	881b      	ldrh	r3, [r3, #0]
 8003002:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8003006:	fb02 f303 	mul.w	r3, r2, r3
 800300a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800300e:	4a0d      	ldr	r2, [pc, #52]	; (8003044 <cfg_RemTxData+0x150>)
 8003010:	1898      	adds	r0, r3, r2
 8003012:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003016:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 800301a:	881b      	ldrh	r3, [r3, #0]
 800301c:	4a09      	ldr	r2, [pc, #36]	; (8003044 <cfg_RemTxData+0x150>)
 800301e:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003022:	fb01 f303 	mul.w	r3, r1, r3
 8003026:	4413      	add	r3, r2
 8003028:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	f107 0308 	add.w	r3, r7, #8
 8003032:	4619      	mov	r1, r3
 8003034:	f008 fb20 	bl	800b678 <memcpy>
	//free(tmp_buf);

	return;
 8003038:	e000      	b.n	800303c <cfg_RemTxData+0x148>
		return;
 800303a:	bf00      	nop
}
 800303c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	200001c8 	.word	0x200001c8

08003048 <cfg_TxDataCh0>:

void cfg_TxDataCh0(uint8_t *data, uint32_t len)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
#ifdef NO_CFG
	return;
#endif //NO_CFG

	modem_TrmData(SYSTEM_CFG_MODEM_CH, data, len);
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	2001      	movs	r0, #1
 8003058:	f001 f836 	bl	80040c8 <modem_TrmData>
	//HAL_UART_Transmit(&HAL_CFG_UART, data, len, HAL_MAX_DELAY);

	return;
 800305c:	bf00      	nop
}
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <crc16_calc>:
	    0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641,
	    0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040
};

uint16_t crc16_calc(uint8_t *buf, uint16_t len)
{
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	460b      	mov	r3, r1
 800306e:	807b      	strh	r3, [r7, #2]
	uint8_t *data = buf;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	60fb      	str	r3, [r7, #12]
	uint16_t crc = 0xFFFF;
 8003074:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003078:	817b      	strh	r3, [r7, #10]
	while( len-- )
 800307a:	e00e      	b.n	800309a <crc16_calc+0x36>
		crc = ( crc >> 8 ) ^ crc16_table[(crc & 0xFF) ^ (*data++ & 0xFF)];
 800307c:	897b      	ldrh	r3, [r7, #10]
 800307e:	0a1b      	lsrs	r3, r3, #8
 8003080:	b29a      	uxth	r2, r3
 8003082:	897b      	ldrh	r3, [r7, #10]
 8003084:	b2d9      	uxtb	r1, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	1c58      	adds	r0, r3, #1
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	404b      	eors	r3, r1
 8003090:	4908      	ldr	r1, [pc, #32]	; (80030b4 <crc16_calc+0x50>)
 8003092:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003096:	4053      	eors	r3, r2
 8003098:	817b      	strh	r3, [r7, #10]
	while( len-- )
 800309a:	887b      	ldrh	r3, [r7, #2]
 800309c:	1e5a      	subs	r2, r3, #1
 800309e:	807a      	strh	r2, [r7, #2]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1eb      	bne.n	800307c <crc16_calc+0x18>
	return crc;
 80030a4:	897b      	ldrh	r3, [r7, #10]
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3714      	adds	r7, #20
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	0800ba20 	.word	0x0800ba20

080030b8 <crc16_RingBuf>:

uint16_t crc16_RingBuf(uint8_t *buf, uint16_t tail, uint16_t len, uint16_t mask)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b087      	sub	sp, #28
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	4608      	mov	r0, r1
 80030c2:	4611      	mov	r1, r2
 80030c4:	461a      	mov	r2, r3
 80030c6:	4603      	mov	r3, r0
 80030c8:	817b      	strh	r3, [r7, #10]
 80030ca:	460b      	mov	r3, r1
 80030cc:	813b      	strh	r3, [r7, #8]
 80030ce:	4613      	mov	r3, r2
 80030d0:	80fb      	strh	r3, [r7, #6]
	uint16_t crc = 0xFFFF;
 80030d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030d6:	82fb      	strh	r3, [r7, #22]
	while( len-- )
 80030d8:	e017      	b.n	800310a <crc16_RingBuf+0x52>
	{
		crc = ( crc >> 8 ) ^ crc16_table[(crc & 0xFF) ^ (buf[tail] & 0xFF)];
 80030da:	8afb      	ldrh	r3, [r7, #22]
 80030dc:	0a1b      	lsrs	r3, r3, #8
 80030de:	b29a      	uxth	r2, r3
 80030e0:	8afb      	ldrh	r3, [r7, #22]
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	8979      	ldrh	r1, [r7, #10]
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	4401      	add	r1, r0
 80030ea:	7809      	ldrb	r1, [r1, #0]
 80030ec:	404b      	eors	r3, r1
 80030ee:	490d      	ldr	r1, [pc, #52]	; (8003124 <crc16_RingBuf+0x6c>)
 80030f0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80030f4:	4053      	eors	r3, r2
 80030f6:	82fb      	strh	r3, [r7, #22]
		tail = (tail + 1) & mask;
 80030f8:	897b      	ldrh	r3, [r7, #10]
 80030fa:	3301      	adds	r3, #1
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	b21a      	sxth	r2, r3
 8003100:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003104:	4013      	ands	r3, r2
 8003106:	b21b      	sxth	r3, r3
 8003108:	817b      	strh	r3, [r7, #10]
	while( len-- )
 800310a:	893b      	ldrh	r3, [r7, #8]
 800310c:	1e5a      	subs	r2, r3, #1
 800310e:	813a      	strh	r2, [r7, #8]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1e2      	bne.n	80030da <crc16_RingBuf+0x22>
	}
	return crc;
 8003114:	8afb      	ldrh	r3, [r7, #22]
}
 8003116:	4618      	mov	r0, r3
 8003118:	371c      	adds	r7, #28
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	0800ba20 	.word	0x0800ba20

08003128 <crc32_calc>:
  0xafb010b1, 0xab710d06, 0xa6322bdf, 0xa2f33668,
  0xbcb4666d, 0xb8757bda, 0xb5365d03, 0xb1f740b4
};

uint32_t crc32_calc (uint16_t init, uint32_t *buf, uint16_t len)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	4603      	mov	r3, r0
 8003130:	6039      	str	r1, [r7, #0]
 8003132:	80fb      	strh	r3, [r7, #6]
 8003134:	4613      	mov	r3, r2
 8003136:	80bb      	strh	r3, [r7, #4]
  uint32_t crc = init;
 8003138:	88fb      	ldrh	r3, [r7, #6]
 800313a:	60fb      	str	r3, [r7, #12]
  while (len--)
 800313c:	e00f      	b.n	800315e <crc32_calc+0x36>
    {
      crc = (crc << 8) ^ crc32_table[((crc >> 24) ^ *buf) & 255];
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	021a      	lsls	r2, r3, #8
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	0e19      	lsrs	r1, r3, #24
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	404b      	eors	r3, r1
 800314c:	b2db      	uxtb	r3, r3
 800314e:	490a      	ldr	r1, [pc, #40]	; (8003178 <crc32_calc+0x50>)
 8003150:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003154:	4053      	eors	r3, r2
 8003156:	60fb      	str	r3, [r7, #12]
      buf++;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	3304      	adds	r3, #4
 800315c:	603b      	str	r3, [r7, #0]
  while (len--)
 800315e:	88bb      	ldrh	r3, [r7, #4]
 8003160:	1e5a      	subs	r2, r3, #1
 8003162:	80ba      	strh	r2, [r7, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1ea      	bne.n	800313e <crc32_calc+0x16>
    }
  return crc;
 8003168:	68fb      	ldr	r3, [r7, #12]
}
 800316a:	4618      	mov	r0, r3
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	0800bc20 	.word	0x0800bc20

0800317c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003180:	f003 fa8a 	bl	8006698 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003184:	f000 f812 	bl	80031ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003188:	f000 f9bc 	bl	8003504 <MX_GPIO_Init>
  MX_I2C1_Init();
 800318c:	f000 f8c8 	bl	8003320 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8003190:	f000 f964 	bl	800345c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003194:	f000 f98c 	bl	80034b0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8003198:	f000 f8f0 	bl	800337c <MX_TIM3_Init>
  MX_ADC1_Init();
 800319c:	f000 f86e 	bl	800327c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  system_Init();
 80031a0:	f003 f924 	bl	80063ec <system_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  system_Task();
 80031a4:	f003 f94c 	bl	8006440 <system_Task>
 80031a8:	e7fc      	b.n	80031a4 <main+0x28>
	...

080031ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b094      	sub	sp, #80	; 0x50
 80031b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031b2:	f107 0320 	add.w	r3, r7, #32
 80031b6:	2230      	movs	r2, #48	; 0x30
 80031b8:	2100      	movs	r1, #0
 80031ba:	4618      	mov	r0, r3
 80031bc:	f008 fa6a 	bl	800b694 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031c0:	f107 030c 	add.w	r3, r7, #12
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	605a      	str	r2, [r3, #4]
 80031ca:	609a      	str	r2, [r3, #8]
 80031cc:	60da      	str	r2, [r3, #12]
 80031ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80031d0:	2300      	movs	r3, #0
 80031d2:	60bb      	str	r3, [r7, #8]
 80031d4:	4b27      	ldr	r3, [pc, #156]	; (8003274 <SystemClock_Config+0xc8>)
 80031d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d8:	4a26      	ldr	r2, [pc, #152]	; (8003274 <SystemClock_Config+0xc8>)
 80031da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031de:	6413      	str	r3, [r2, #64]	; 0x40
 80031e0:	4b24      	ldr	r3, [pc, #144]	; (8003274 <SystemClock_Config+0xc8>)
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e8:	60bb      	str	r3, [r7, #8]
 80031ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80031ec:	2300      	movs	r3, #0
 80031ee:	607b      	str	r3, [r7, #4]
 80031f0:	4b21      	ldr	r3, [pc, #132]	; (8003278 <SystemClock_Config+0xcc>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a20      	ldr	r2, [pc, #128]	; (8003278 <SystemClock_Config+0xcc>)
 80031f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031fa:	6013      	str	r3, [r2, #0]
 80031fc:	4b1e      	ldr	r3, [pc, #120]	; (8003278 <SystemClock_Config+0xcc>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003204:	607b      	str	r3, [r7, #4]
 8003206:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003208:	2301      	movs	r3, #1
 800320a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800320c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003210:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003212:	2302      	movs	r3, #2
 8003214:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003216:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800321a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800321c:	230c      	movs	r3, #12
 800321e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8003220:	2360      	movs	r3, #96	; 0x60
 8003222:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003224:	2302      	movs	r3, #2
 8003226:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003228:	2304      	movs	r3, #4
 800322a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800322c:	f107 0320 	add.w	r3, r7, #32
 8003230:	4618      	mov	r0, r3
 8003232:	f005 fced 	bl	8008c10 <HAL_RCC_OscConfig>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800323c:	f000 fa64 	bl	8003708 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003240:	230f      	movs	r3, #15
 8003242:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003244:	2302      	movs	r3, #2
 8003246:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003248:	2300      	movs	r3, #0
 800324a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800324c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003250:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003252:	2300      	movs	r3, #0
 8003254:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003256:	f107 030c 	add.w	r3, r7, #12
 800325a:	2103      	movs	r1, #3
 800325c:	4618      	mov	r0, r3
 800325e:	f005 ff4f 	bl	8009100 <HAL_RCC_ClockConfig>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003268:	f000 fa4e 	bl	8003708 <Error_Handler>
  }
}
 800326c:	bf00      	nop
 800326e:	3750      	adds	r7, #80	; 0x50
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40023800 	.word	0x40023800
 8003278:	40007000 	.word	0x40007000

0800327c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003282:	463b      	mov	r3, r7
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	605a      	str	r2, [r3, #4]
 800328a:	609a      	str	r2, [r3, #8]
 800328c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800328e:	4b21      	ldr	r3, [pc, #132]	; (8003314 <MX_ADC1_Init+0x98>)
 8003290:	4a21      	ldr	r2, [pc, #132]	; (8003318 <MX_ADC1_Init+0x9c>)
 8003292:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003294:	4b1f      	ldr	r3, [pc, #124]	; (8003314 <MX_ADC1_Init+0x98>)
 8003296:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800329a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800329c:	4b1d      	ldr	r3, [pc, #116]	; (8003314 <MX_ADC1_Init+0x98>)
 800329e:	2200      	movs	r2, #0
 80032a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80032a2:	4b1c      	ldr	r3, [pc, #112]	; (8003314 <MX_ADC1_Init+0x98>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80032a8:	4b1a      	ldr	r3, [pc, #104]	; (8003314 <MX_ADC1_Init+0x98>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80032ae:	4b19      	ldr	r3, [pc, #100]	; (8003314 <MX_ADC1_Init+0x98>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80032b6:	4b17      	ldr	r3, [pc, #92]	; (8003314 <MX_ADC1_Init+0x98>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80032bc:	4b15      	ldr	r3, [pc, #84]	; (8003314 <MX_ADC1_Init+0x98>)
 80032be:	4a17      	ldr	r2, [pc, #92]	; (800331c <MX_ADC1_Init+0xa0>)
 80032c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80032c2:	4b14      	ldr	r3, [pc, #80]	; (8003314 <MX_ADC1_Init+0x98>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80032c8:	4b12      	ldr	r3, [pc, #72]	; (8003314 <MX_ADC1_Init+0x98>)
 80032ca:	2201      	movs	r2, #1
 80032cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80032ce:	4b11      	ldr	r3, [pc, #68]	; (8003314 <MX_ADC1_Init+0x98>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80032d6:	4b0f      	ldr	r3, [pc, #60]	; (8003314 <MX_ADC1_Init+0x98>)
 80032d8:	2201      	movs	r2, #1
 80032da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80032dc:	480d      	ldr	r0, [pc, #52]	; (8003314 <MX_ADC1_Init+0x98>)
 80032de:	f003 fa1d 	bl	800671c <HAL_ADC_Init>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80032e8:	f000 fa0e 	bl	8003708 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80032ec:	2300      	movs	r3, #0
 80032ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80032f0:	2301      	movs	r3, #1
 80032f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80032f4:	2300      	movs	r3, #0
 80032f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80032f8:	463b      	mov	r3, r7
 80032fa:	4619      	mov	r1, r3
 80032fc:	4805      	ldr	r0, [pc, #20]	; (8003314 <MX_ADC1_Init+0x98>)
 80032fe:	f003 fc41 	bl	8006b84 <HAL_ADC_ConfigChannel>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003308:	f000 f9fe 	bl	8003708 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800330c:	bf00      	nop
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	20000504 	.word	0x20000504
 8003318:	40012000 	.word	0x40012000
 800331c:	0f000001 	.word	0x0f000001

08003320 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003324:	4b12      	ldr	r3, [pc, #72]	; (8003370 <MX_I2C1_Init+0x50>)
 8003326:	4a13      	ldr	r2, [pc, #76]	; (8003374 <MX_I2C1_Init+0x54>)
 8003328:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800332a:	4b11      	ldr	r3, [pc, #68]	; (8003370 <MX_I2C1_Init+0x50>)
 800332c:	4a12      	ldr	r2, [pc, #72]	; (8003378 <MX_I2C1_Init+0x58>)
 800332e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003330:	4b0f      	ldr	r3, [pc, #60]	; (8003370 <MX_I2C1_Init+0x50>)
 8003332:	2200      	movs	r2, #0
 8003334:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003336:	4b0e      	ldr	r3, [pc, #56]	; (8003370 <MX_I2C1_Init+0x50>)
 8003338:	2200      	movs	r2, #0
 800333a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800333c:	4b0c      	ldr	r3, [pc, #48]	; (8003370 <MX_I2C1_Init+0x50>)
 800333e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003342:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003344:	4b0a      	ldr	r3, [pc, #40]	; (8003370 <MX_I2C1_Init+0x50>)
 8003346:	2200      	movs	r2, #0
 8003348:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800334a:	4b09      	ldr	r3, [pc, #36]	; (8003370 <MX_I2C1_Init+0x50>)
 800334c:	2200      	movs	r2, #0
 800334e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003350:	4b07      	ldr	r3, [pc, #28]	; (8003370 <MX_I2C1_Init+0x50>)
 8003352:	2200      	movs	r2, #0
 8003354:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003356:	4b06      	ldr	r3, [pc, #24]	; (8003370 <MX_I2C1_Init+0x50>)
 8003358:	2200      	movs	r2, #0
 800335a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800335c:	4804      	ldr	r0, [pc, #16]	; (8003370 <MX_I2C1_Init+0x50>)
 800335e:	f004 fc97 	bl	8007c90 <HAL_I2C_Init>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003368:	f000 f9ce 	bl	8003708 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800336c:	bf00      	nop
 800336e:	bd80      	pop	{r7, pc}
 8003370:	2000054c 	.word	0x2000054c
 8003374:	40005400 	.word	0x40005400
 8003378:	000186a0 	.word	0x000186a0

0800337c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b08a      	sub	sp, #40	; 0x28
 8003380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003382:	f107 0320 	add.w	r3, r7, #32
 8003386:	2200      	movs	r2, #0
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800338c:	1d3b      	adds	r3, r7, #4
 800338e:	2200      	movs	r2, #0
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	605a      	str	r2, [r3, #4]
 8003394:	609a      	str	r2, [r3, #8]
 8003396:	60da      	str	r2, [r3, #12]
 8003398:	611a      	str	r2, [r3, #16]
 800339a:	615a      	str	r2, [r3, #20]
 800339c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800339e:	4b2d      	ldr	r3, [pc, #180]	; (8003454 <MX_TIM3_Init+0xd8>)
 80033a0:	4a2d      	ldr	r2, [pc, #180]	; (8003458 <MX_TIM3_Init+0xdc>)
 80033a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 199;
 80033a4:	4b2b      	ldr	r3, [pc, #172]	; (8003454 <MX_TIM3_Init+0xd8>)
 80033a6:	22c7      	movs	r2, #199	; 0xc7
 80033a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033aa:	4b2a      	ldr	r3, [pc, #168]	; (8003454 <MX_TIM3_Init+0xd8>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80033b0:	4b28      	ldr	r3, [pc, #160]	; (8003454 <MX_TIM3_Init+0xd8>)
 80033b2:	f242 720f 	movw	r2, #9999	; 0x270f
 80033b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033b8:	4b26      	ldr	r3, [pc, #152]	; (8003454 <MX_TIM3_Init+0xd8>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033be:	4b25      	ldr	r3, [pc, #148]	; (8003454 <MX_TIM3_Init+0xd8>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80033c4:	4823      	ldr	r0, [pc, #140]	; (8003454 <MX_TIM3_Init+0xd8>)
 80033c6:	f006 f969 	bl	800969c <HAL_TIM_PWM_Init>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80033d0:	f000 f99a 	bl	8003708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033d4:	2300      	movs	r3, #0
 80033d6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033d8:	2300      	movs	r3, #0
 80033da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80033dc:	f107 0320 	add.w	r3, r7, #32
 80033e0:	4619      	mov	r1, r3
 80033e2:	481c      	ldr	r0, [pc, #112]	; (8003454 <MX_TIM3_Init+0xd8>)
 80033e4:	f006 fe7e 	bl	800a0e4 <HAL_TIMEx_MasterConfigSynchronization>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80033ee:	f000 f98b 	bl	8003708 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033f2:	2360      	movs	r3, #96	; 0x60
 80033f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80033f6:	2300      	movs	r3, #0
 80033f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033fa:	2300      	movs	r3, #0
 80033fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033fe:	2300      	movs	r3, #0
 8003400:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003402:	1d3b      	adds	r3, r7, #4
 8003404:	2200      	movs	r2, #0
 8003406:	4619      	mov	r1, r3
 8003408:	4812      	ldr	r0, [pc, #72]	; (8003454 <MX_TIM3_Init+0xd8>)
 800340a:	f006 fb4f 	bl	8009aac <HAL_TIM_PWM_ConfigChannel>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8003414:	f000 f978 	bl	8003708 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003418:	1d3b      	adds	r3, r7, #4
 800341a:	2204      	movs	r2, #4
 800341c:	4619      	mov	r1, r3
 800341e:	480d      	ldr	r0, [pc, #52]	; (8003454 <MX_TIM3_Init+0xd8>)
 8003420:	f006 fb44 	bl	8009aac <HAL_TIM_PWM_ConfigChannel>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800342a:	f000 f96d 	bl	8003708 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800342e:	1d3b      	adds	r3, r7, #4
 8003430:	2208      	movs	r2, #8
 8003432:	4619      	mov	r1, r3
 8003434:	4807      	ldr	r0, [pc, #28]	; (8003454 <MX_TIM3_Init+0xd8>)
 8003436:	f006 fb39 	bl	8009aac <HAL_TIM_PWM_ConfigChannel>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8003440:	f000 f962 	bl	8003708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003444:	4803      	ldr	r0, [pc, #12]	; (8003454 <MX_TIM3_Init+0xd8>)
 8003446:	f000 fa43 	bl	80038d0 <HAL_TIM_MspPostInit>

}
 800344a:	bf00      	nop
 800344c:	3728      	adds	r7, #40	; 0x28
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	200005a0 	.word	0x200005a0
 8003458:	40000400 	.word	0x40000400

0800345c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003460:	4b11      	ldr	r3, [pc, #68]	; (80034a8 <MX_USART1_UART_Init+0x4c>)
 8003462:	4a12      	ldr	r2, [pc, #72]	; (80034ac <MX_USART1_UART_Init+0x50>)
 8003464:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003466:	4b10      	ldr	r3, [pc, #64]	; (80034a8 <MX_USART1_UART_Init+0x4c>)
 8003468:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800346c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800346e:	4b0e      	ldr	r3, [pc, #56]	; (80034a8 <MX_USART1_UART_Init+0x4c>)
 8003470:	2200      	movs	r2, #0
 8003472:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003474:	4b0c      	ldr	r3, [pc, #48]	; (80034a8 <MX_USART1_UART_Init+0x4c>)
 8003476:	2200      	movs	r2, #0
 8003478:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800347a:	4b0b      	ldr	r3, [pc, #44]	; (80034a8 <MX_USART1_UART_Init+0x4c>)
 800347c:	2200      	movs	r2, #0
 800347e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003480:	4b09      	ldr	r3, [pc, #36]	; (80034a8 <MX_USART1_UART_Init+0x4c>)
 8003482:	220c      	movs	r2, #12
 8003484:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003486:	4b08      	ldr	r3, [pc, #32]	; (80034a8 <MX_USART1_UART_Init+0x4c>)
 8003488:	2200      	movs	r2, #0
 800348a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800348c:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <MX_USART1_UART_Init+0x4c>)
 800348e:	2200      	movs	r2, #0
 8003490:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003492:	4805      	ldr	r0, [pc, #20]	; (80034a8 <MX_USART1_UART_Init+0x4c>)
 8003494:	f006 fea8 	bl	800a1e8 <HAL_UART_Init>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800349e:	f000 f933 	bl	8003708 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80034a2:	bf00      	nop
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	200005e8 	.word	0x200005e8
 80034ac:	40011000 	.word	0x40011000

080034b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80034b4:	4b11      	ldr	r3, [pc, #68]	; (80034fc <MX_USART2_UART_Init+0x4c>)
 80034b6:	4a12      	ldr	r2, [pc, #72]	; (8003500 <MX_USART2_UART_Init+0x50>)
 80034b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80034ba:	4b10      	ldr	r3, [pc, #64]	; (80034fc <MX_USART2_UART_Init+0x4c>)
 80034bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80034c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80034c2:	4b0e      	ldr	r3, [pc, #56]	; (80034fc <MX_USART2_UART_Init+0x4c>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80034c8:	4b0c      	ldr	r3, [pc, #48]	; (80034fc <MX_USART2_UART_Init+0x4c>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80034ce:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <MX_USART2_UART_Init+0x4c>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80034d4:	4b09      	ldr	r3, [pc, #36]	; (80034fc <MX_USART2_UART_Init+0x4c>)
 80034d6:	220c      	movs	r2, #12
 80034d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034da:	4b08      	ldr	r3, [pc, #32]	; (80034fc <MX_USART2_UART_Init+0x4c>)
 80034dc:	2200      	movs	r2, #0
 80034de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80034e0:	4b06      	ldr	r3, [pc, #24]	; (80034fc <MX_USART2_UART_Init+0x4c>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80034e6:	4805      	ldr	r0, [pc, #20]	; (80034fc <MX_USART2_UART_Init+0x4c>)
 80034e8:	f006 fe7e 	bl	800a1e8 <HAL_UART_Init>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80034f2:	f000 f909 	bl	8003708 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80034f6:	bf00      	nop
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	2000062c 	.word	0x2000062c
 8003500:	40004400 	.word	0x40004400

08003504 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b08a      	sub	sp, #40	; 0x28
 8003508:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800350a:	f107 0314 	add.w	r3, r7, #20
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	605a      	str	r2, [r3, #4]
 8003514:	609a      	str	r2, [r3, #8]
 8003516:	60da      	str	r2, [r3, #12]
 8003518:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800351a:	2300      	movs	r3, #0
 800351c:	613b      	str	r3, [r7, #16]
 800351e:	4b43      	ldr	r3, [pc, #268]	; (800362c <MX_GPIO_Init+0x128>)
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003522:	4a42      	ldr	r2, [pc, #264]	; (800362c <MX_GPIO_Init+0x128>)
 8003524:	f043 0304 	orr.w	r3, r3, #4
 8003528:	6313      	str	r3, [r2, #48]	; 0x30
 800352a:	4b40      	ldr	r3, [pc, #256]	; (800362c <MX_GPIO_Init+0x128>)
 800352c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352e:	f003 0304 	and.w	r3, r3, #4
 8003532:	613b      	str	r3, [r7, #16]
 8003534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003536:	2300      	movs	r3, #0
 8003538:	60fb      	str	r3, [r7, #12]
 800353a:	4b3c      	ldr	r3, [pc, #240]	; (800362c <MX_GPIO_Init+0x128>)
 800353c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353e:	4a3b      	ldr	r2, [pc, #236]	; (800362c <MX_GPIO_Init+0x128>)
 8003540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003544:	6313      	str	r3, [r2, #48]	; 0x30
 8003546:	4b39      	ldr	r3, [pc, #228]	; (800362c <MX_GPIO_Init+0x128>)
 8003548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003552:	2300      	movs	r3, #0
 8003554:	60bb      	str	r3, [r7, #8]
 8003556:	4b35      	ldr	r3, [pc, #212]	; (800362c <MX_GPIO_Init+0x128>)
 8003558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355a:	4a34      	ldr	r2, [pc, #208]	; (800362c <MX_GPIO_Init+0x128>)
 800355c:	f043 0301 	orr.w	r3, r3, #1
 8003560:	6313      	str	r3, [r2, #48]	; 0x30
 8003562:	4b32      	ldr	r3, [pc, #200]	; (800362c <MX_GPIO_Init+0x128>)
 8003564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	60bb      	str	r3, [r7, #8]
 800356c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800356e:	2300      	movs	r3, #0
 8003570:	607b      	str	r3, [r7, #4]
 8003572:	4b2e      	ldr	r3, [pc, #184]	; (800362c <MX_GPIO_Init+0x128>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	4a2d      	ldr	r2, [pc, #180]	; (800362c <MX_GPIO_Init+0x128>)
 8003578:	f043 0302 	orr.w	r3, r3, #2
 800357c:	6313      	str	r3, [r2, #48]	; 0x30
 800357e:	4b2b      	ldr	r3, [pc, #172]	; (800362c <MX_GPIO_Init+0x128>)
 8003580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	607b      	str	r3, [r7, #4]
 8003588:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 800358a:	2200      	movs	r2, #0
 800358c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003590:	4827      	ldr	r0, [pc, #156]	; (8003630 <MX_GPIO_Init+0x12c>)
 8003592:	f004 fb63 	bl	8007c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MODEM_LED_GPIO_Port, MODEM_LED_Pin, GPIO_PIN_RESET);
 8003596:	2200      	movs	r2, #0
 8003598:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800359c:	4825      	ldr	r0, [pc, #148]	; (8003634 <MX_GPIO_Init+0x130>)
 800359e:	f004 fb5d 	bl	8007c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MODEM_M0_Pin|MODEM_M1_Pin, GPIO_PIN_SET);
 80035a2:	2201      	movs	r2, #1
 80035a4:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 80035a8:	4823      	ldr	r0, [pc, #140]	; (8003638 <MX_GPIO_Init+0x134>)
 80035aa:	f004 fb57 	bl	8007c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 80035ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035b4:	2301      	movs	r3, #1
 80035b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b8:	2300      	movs	r3, #0
 80035ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035bc:	2300      	movs	r3, #0
 80035be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 80035c0:	f107 0314 	add.w	r3, r7, #20
 80035c4:	4619      	mov	r1, r3
 80035c6:	481a      	ldr	r0, [pc, #104]	; (8003630 <MX_GPIO_Init+0x12c>)
 80035c8:	f004 f8c8 	bl	800775c <HAL_GPIO_Init>

  /*Configure GPIO pin : MODEM_LED_Pin */
  GPIO_InitStruct.Pin = MODEM_LED_Pin;
 80035cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80035d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035d2:	2301      	movs	r3, #1
 80035d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d6:	2300      	movs	r3, #0
 80035d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035da:	2300      	movs	r3, #0
 80035dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MODEM_LED_GPIO_Port, &GPIO_InitStruct);
 80035de:	f107 0314 	add.w	r3, r7, #20
 80035e2:	4619      	mov	r1, r3
 80035e4:	4813      	ldr	r0, [pc, #76]	; (8003634 <MX_GPIO_Init+0x130>)
 80035e6:	f004 f8b9 	bl	800775c <HAL_GPIO_Init>

  /*Configure GPIO pin : MODEM_AUX_Pin */
  GPIO_InitStruct.Pin = MODEM_AUX_Pin;
 80035ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80035ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035f0:	2300      	movs	r3, #0
 80035f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f4:	2300      	movs	r3, #0
 80035f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MODEM_AUX_GPIO_Port, &GPIO_InitStruct);
 80035f8:	f107 0314 	add.w	r3, r7, #20
 80035fc:	4619      	mov	r1, r3
 80035fe:	480e      	ldr	r0, [pc, #56]	; (8003638 <MX_GPIO_Init+0x134>)
 8003600:	f004 f8ac 	bl	800775c <HAL_GPIO_Init>

  /*Configure GPIO pins : MODEM_M0_Pin MODEM_M1_Pin */
  GPIO_InitStruct.Pin = MODEM_M0_Pin|MODEM_M1_Pin;
 8003604:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8003608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800360a:	2301      	movs	r3, #1
 800360c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800360e:	2301      	movs	r3, #1
 8003610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003612:	2300      	movs	r3, #0
 8003614:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003616:	f107 0314 	add.w	r3, r7, #20
 800361a:	4619      	mov	r1, r3
 800361c:	4806      	ldr	r0, [pc, #24]	; (8003638 <MX_GPIO_Init+0x134>)
 800361e:	f004 f89d 	bl	800775c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003622:	bf00      	nop
 8003624:	3728      	adds	r7, #40	; 0x28
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40023800 	.word	0x40023800
 8003630:	40020800 	.word	0x40020800
 8003634:	40020400 	.word	0x40020400
 8003638:	40020000 	.word	0x40020000

0800363c <MX_USART1_UART_Init115200>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init115200(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 8003640:	4b11      	ldr	r3, [pc, #68]	; (8003688 <MX_USART1_UART_Init115200+0x4c>)
 8003642:	4a12      	ldr	r2, [pc, #72]	; (800368c <MX_USART1_UART_Init115200+0x50>)
 8003644:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8003646:	4b10      	ldr	r3, [pc, #64]	; (8003688 <MX_USART1_UART_Init115200+0x4c>)
 8003648:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800364c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800364e:	4b0e      	ldr	r3, [pc, #56]	; (8003688 <MX_USART1_UART_Init115200+0x4c>)
 8003650:	2200      	movs	r2, #0
 8003652:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8003654:	4b0c      	ldr	r3, [pc, #48]	; (8003688 <MX_USART1_UART_Init115200+0x4c>)
 8003656:	2200      	movs	r2, #0
 8003658:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800365a:	4b0b      	ldr	r3, [pc, #44]	; (8003688 <MX_USART1_UART_Init115200+0x4c>)
 800365c:	2200      	movs	r2, #0
 800365e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8003660:	4b09      	ldr	r3, [pc, #36]	; (8003688 <MX_USART1_UART_Init115200+0x4c>)
 8003662:	220c      	movs	r2, #12
 8003664:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003666:	4b08      	ldr	r3, [pc, #32]	; (8003688 <MX_USART1_UART_Init115200+0x4c>)
 8003668:	2200      	movs	r2, #0
 800366a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800366c:	4b06      	ldr	r3, [pc, #24]	; (8003688 <MX_USART1_UART_Init115200+0x4c>)
 800366e:	2200      	movs	r2, #0
 8003670:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8003672:	4805      	ldr	r0, [pc, #20]	; (8003688 <MX_USART1_UART_Init115200+0x4c>)
 8003674:	f006 fdb8 	bl	800a1e8 <HAL_UART_Init>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <MX_USART1_UART_Init115200+0x46>
	{
		Error_Handler();
 800367e:	f000 f843 	bl	8003708 <Error_Handler>
	}
}
 8003682:	bf00      	nop
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	200005e8 	.word	0x200005e8
 800368c:	40011000 	.word	0x40011000

08003690 <HAL_UART_RxCpltCallback>:
  * @brief RX interrupt from the uart
  * @param None
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
	system_UART_RxCpltCallback(huart);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f002 ffaf 	bl	80065fc <system_UART_RxCpltCallback>
}
 800369e:	bf00      	nop
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
	...

080036a8 <MX_UARTReInit>:

void MX_UARTReInit()
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1);
 80036ac:	4803      	ldr	r0, [pc, #12]	; (80036bc <MX_UARTReInit+0x14>)
 80036ae:	f006 fde8 	bl	800a282 <HAL_UART_DeInit>
	MX_USART1_UART_Init();
 80036b2:	f7ff fed3 	bl	800345c <MX_USART1_UART_Init>
	return;
 80036b6:	bf00      	nop
}
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	200005e8 	.word	0x200005e8

080036c0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
	system_ADC_ConvCpltCallback(hadc);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f002 ff61 	bl	8006590 <system_ADC_ConvCpltCallback>
}
 80036ce:	bf00      	nop
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
	...

080036d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a07      	ldr	r2, [pc, #28]	; (8003704 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d101      	bne.n	80036ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80036ea:	f002 fff7 	bl	80066dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  system_Timer(HAL_GetTick());
 80036ee:	f003 f809 	bl	8006704 <HAL_GetTick>
 80036f2:	4603      	mov	r3, r0
 80036f4:	4618      	mov	r0, r3
 80036f6:	f002 fe33 	bl	8006360 <system_Timer>
  /* USER CODE END Callback 1 */
}
 80036fa:	bf00      	nop
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40000800 	.word	0x40000800

08003708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800370c:	b672      	cpsid	i
}
 800370e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003710:	e7fe      	b.n	8003710 <Error_Handler+0x8>
	...

08003714 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800371a:	2300      	movs	r3, #0
 800371c:	607b      	str	r3, [r7, #4]
 800371e:	4b10      	ldr	r3, [pc, #64]	; (8003760 <HAL_MspInit+0x4c>)
 8003720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003722:	4a0f      	ldr	r2, [pc, #60]	; (8003760 <HAL_MspInit+0x4c>)
 8003724:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003728:	6453      	str	r3, [r2, #68]	; 0x44
 800372a:	4b0d      	ldr	r3, [pc, #52]	; (8003760 <HAL_MspInit+0x4c>)
 800372c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003732:	607b      	str	r3, [r7, #4]
 8003734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003736:	2300      	movs	r3, #0
 8003738:	603b      	str	r3, [r7, #0]
 800373a:	4b09      	ldr	r3, [pc, #36]	; (8003760 <HAL_MspInit+0x4c>)
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	4a08      	ldr	r2, [pc, #32]	; (8003760 <HAL_MspInit+0x4c>)
 8003740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003744:	6413      	str	r3, [r2, #64]	; 0x40
 8003746:	4b06      	ldr	r3, [pc, #24]	; (8003760 <HAL_MspInit+0x4c>)
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374e:	603b      	str	r3, [r7, #0]
 8003750:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003752:	bf00      	nop
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	40023800 	.word	0x40023800

08003764 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b08a      	sub	sp, #40	; 0x28
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800376c:	f107 0314 	add.w	r3, r7, #20
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	605a      	str	r2, [r3, #4]
 8003776:	609a      	str	r2, [r3, #8]
 8003778:	60da      	str	r2, [r3, #12]
 800377a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a1b      	ldr	r2, [pc, #108]	; (80037f0 <HAL_ADC_MspInit+0x8c>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d12f      	bne.n	80037e6 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003786:	2300      	movs	r3, #0
 8003788:	613b      	str	r3, [r7, #16]
 800378a:	4b1a      	ldr	r3, [pc, #104]	; (80037f4 <HAL_ADC_MspInit+0x90>)
 800378c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378e:	4a19      	ldr	r2, [pc, #100]	; (80037f4 <HAL_ADC_MspInit+0x90>)
 8003790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003794:	6453      	str	r3, [r2, #68]	; 0x44
 8003796:	4b17      	ldr	r3, [pc, #92]	; (80037f4 <HAL_ADC_MspInit+0x90>)
 8003798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379e:	613b      	str	r3, [r7, #16]
 80037a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037a2:	2300      	movs	r3, #0
 80037a4:	60fb      	str	r3, [r7, #12]
 80037a6:	4b13      	ldr	r3, [pc, #76]	; (80037f4 <HAL_ADC_MspInit+0x90>)
 80037a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037aa:	4a12      	ldr	r2, [pc, #72]	; (80037f4 <HAL_ADC_MspInit+0x90>)
 80037ac:	f043 0301 	orr.w	r3, r3, #1
 80037b0:	6313      	str	r3, [r2, #48]	; 0x30
 80037b2:	4b10      	ldr	r3, [pc, #64]	; (80037f4 <HAL_ADC_MspInit+0x90>)
 80037b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	60fb      	str	r3, [r7, #12]
 80037bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = BATV_SNS_Pin;
 80037be:	2301      	movs	r3, #1
 80037c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037c2:	2303      	movs	r3, #3
 80037c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c6:	2300      	movs	r3, #0
 80037c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATV_SNS_GPIO_Port, &GPIO_InitStruct);
 80037ca:	f107 0314 	add.w	r3, r7, #20
 80037ce:	4619      	mov	r1, r3
 80037d0:	4809      	ldr	r0, [pc, #36]	; (80037f8 <HAL_ADC_MspInit+0x94>)
 80037d2:	f003 ffc3 	bl	800775c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80037d6:	2200      	movs	r2, #0
 80037d8:	2100      	movs	r1, #0
 80037da:	2012      	movs	r0, #18
 80037dc:	f003 fce6 	bl	80071ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80037e0:	2012      	movs	r0, #18
 80037e2:	f003 fcff 	bl	80071e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80037e6:	bf00      	nop
 80037e8:	3728      	adds	r7, #40	; 0x28
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	40012000 	.word	0x40012000
 80037f4:	40023800 	.word	0x40023800
 80037f8:	40020000 	.word	0x40020000

080037fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b08a      	sub	sp, #40	; 0x28
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003804:	f107 0314 	add.w	r3, r7, #20
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	605a      	str	r2, [r3, #4]
 800380e:	609a      	str	r2, [r3, #8]
 8003810:	60da      	str	r2, [r3, #12]
 8003812:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a19      	ldr	r2, [pc, #100]	; (8003880 <HAL_I2C_MspInit+0x84>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d12b      	bne.n	8003876 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800381e:	2300      	movs	r3, #0
 8003820:	613b      	str	r3, [r7, #16]
 8003822:	4b18      	ldr	r3, [pc, #96]	; (8003884 <HAL_I2C_MspInit+0x88>)
 8003824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003826:	4a17      	ldr	r2, [pc, #92]	; (8003884 <HAL_I2C_MspInit+0x88>)
 8003828:	f043 0302 	orr.w	r3, r3, #2
 800382c:	6313      	str	r3, [r2, #48]	; 0x30
 800382e:	4b15      	ldr	r3, [pc, #84]	; (8003884 <HAL_I2C_MspInit+0x88>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	613b      	str	r3, [r7, #16]
 8003838:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MEMS_I2C_SCL_Pin|MEMS_I2C_SDA_Pin;
 800383a:	23c0      	movs	r3, #192	; 0xc0
 800383c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800383e:	2312      	movs	r3, #18
 8003840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003842:	2301      	movs	r3, #1
 8003844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003846:	2303      	movs	r3, #3
 8003848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800384a:	2304      	movs	r3, #4
 800384c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800384e:	f107 0314 	add.w	r3, r7, #20
 8003852:	4619      	mov	r1, r3
 8003854:	480c      	ldr	r0, [pc, #48]	; (8003888 <HAL_I2C_MspInit+0x8c>)
 8003856:	f003 ff81 	bl	800775c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800385a:	2300      	movs	r3, #0
 800385c:	60fb      	str	r3, [r7, #12]
 800385e:	4b09      	ldr	r3, [pc, #36]	; (8003884 <HAL_I2C_MspInit+0x88>)
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	4a08      	ldr	r2, [pc, #32]	; (8003884 <HAL_I2C_MspInit+0x88>)
 8003864:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003868:	6413      	str	r3, [r2, #64]	; 0x40
 800386a:	4b06      	ldr	r3, [pc, #24]	; (8003884 <HAL_I2C_MspInit+0x88>)
 800386c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003876:	bf00      	nop
 8003878:	3728      	adds	r7, #40	; 0x28
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	40005400 	.word	0x40005400
 8003884:	40023800 	.word	0x40023800
 8003888:	40020400 	.word	0x40020400

0800388c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a0b      	ldr	r2, [pc, #44]	; (80038c8 <HAL_TIM_PWM_MspInit+0x3c>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d10d      	bne.n	80038ba <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800389e:	2300      	movs	r3, #0
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	4b0a      	ldr	r3, [pc, #40]	; (80038cc <HAL_TIM_PWM_MspInit+0x40>)
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	4a09      	ldr	r2, [pc, #36]	; (80038cc <HAL_TIM_PWM_MspInit+0x40>)
 80038a8:	f043 0302 	orr.w	r3, r3, #2
 80038ac:	6413      	str	r3, [r2, #64]	; 0x40
 80038ae:	4b07      	ldr	r3, [pc, #28]	; (80038cc <HAL_TIM_PWM_MspInit+0x40>)
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80038ba:	bf00      	nop
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	40000400 	.word	0x40000400
 80038cc:	40023800 	.word	0x40023800

080038d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b088      	sub	sp, #32
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038d8:	f107 030c 	add.w	r3, r7, #12
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	605a      	str	r2, [r3, #4]
 80038e2:	609a      	str	r2, [r3, #8]
 80038e4:	60da      	str	r2, [r3, #12]
 80038e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a12      	ldr	r2, [pc, #72]	; (8003938 <HAL_TIM_MspPostInit+0x68>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d11d      	bne.n	800392e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038f2:	2300      	movs	r3, #0
 80038f4:	60bb      	str	r3, [r7, #8]
 80038f6:	4b11      	ldr	r3, [pc, #68]	; (800393c <HAL_TIM_MspPostInit+0x6c>)
 80038f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fa:	4a10      	ldr	r2, [pc, #64]	; (800393c <HAL_TIM_MspPostInit+0x6c>)
 80038fc:	f043 0302 	orr.w	r3, r3, #2
 8003900:	6313      	str	r3, [r2, #48]	; 0x30
 8003902:	4b0e      	ldr	r3, [pc, #56]	; (800393c <HAL_TIM_MspPostInit+0x6c>)
 8003904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	60bb      	str	r3, [r7, #8]
 800390c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWM_MOTOR_Pin|PWM_ROLL_Pin|PWM_PITCH_Pin;
 800390e:	2331      	movs	r3, #49	; 0x31
 8003910:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003912:	2302      	movs	r3, #2
 8003914:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003916:	2300      	movs	r3, #0
 8003918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800391a:	2300      	movs	r3, #0
 800391c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800391e:	2302      	movs	r3, #2
 8003920:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003922:	f107 030c 	add.w	r3, r7, #12
 8003926:	4619      	mov	r1, r3
 8003928:	4805      	ldr	r0, [pc, #20]	; (8003940 <HAL_TIM_MspPostInit+0x70>)
 800392a:	f003 ff17 	bl	800775c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800392e:	bf00      	nop
 8003930:	3720      	adds	r7, #32
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	40000400 	.word	0x40000400
 800393c:	40023800 	.word	0x40023800
 8003940:	40020400 	.word	0x40020400

08003944 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b08c      	sub	sp, #48	; 0x30
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800394c:	f107 031c 	add.w	r3, r7, #28
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	605a      	str	r2, [r3, #4]
 8003956:	609a      	str	r2, [r3, #8]
 8003958:	60da      	str	r2, [r3, #12]
 800395a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a36      	ldr	r2, [pc, #216]	; (8003a3c <HAL_UART_MspInit+0xf8>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d135      	bne.n	80039d2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003966:	2300      	movs	r3, #0
 8003968:	61bb      	str	r3, [r7, #24]
 800396a:	4b35      	ldr	r3, [pc, #212]	; (8003a40 <HAL_UART_MspInit+0xfc>)
 800396c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396e:	4a34      	ldr	r2, [pc, #208]	; (8003a40 <HAL_UART_MspInit+0xfc>)
 8003970:	f043 0310 	orr.w	r3, r3, #16
 8003974:	6453      	str	r3, [r2, #68]	; 0x44
 8003976:	4b32      	ldr	r3, [pc, #200]	; (8003a40 <HAL_UART_MspInit+0xfc>)
 8003978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397a:	f003 0310 	and.w	r3, r3, #16
 800397e:	61bb      	str	r3, [r7, #24]
 8003980:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003982:	2300      	movs	r3, #0
 8003984:	617b      	str	r3, [r7, #20]
 8003986:	4b2e      	ldr	r3, [pc, #184]	; (8003a40 <HAL_UART_MspInit+0xfc>)
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	4a2d      	ldr	r2, [pc, #180]	; (8003a40 <HAL_UART_MspInit+0xfc>)
 800398c:	f043 0301 	orr.w	r3, r3, #1
 8003990:	6313      	str	r3, [r2, #48]	; 0x30
 8003992:	4b2b      	ldr	r3, [pc, #172]	; (8003a40 <HAL_UART_MspInit+0xfc>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	617b      	str	r3, [r7, #20]
 800399c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = MODEM_TX_Pin|MODEM_RX_Pin;
 800399e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80039a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039a4:	2302      	movs	r3, #2
 80039a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a8:	2300      	movs	r3, #0
 80039aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ac:	2303      	movs	r3, #3
 80039ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80039b0:	2307      	movs	r3, #7
 80039b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039b4:	f107 031c 	add.w	r3, r7, #28
 80039b8:	4619      	mov	r1, r3
 80039ba:	4822      	ldr	r0, [pc, #136]	; (8003a44 <HAL_UART_MspInit+0x100>)
 80039bc:	f003 fece 	bl	800775c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80039c0:	2200      	movs	r2, #0
 80039c2:	2100      	movs	r1, #0
 80039c4:	2025      	movs	r0, #37	; 0x25
 80039c6:	f003 fbf1 	bl	80071ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80039ca:	2025      	movs	r0, #37	; 0x25
 80039cc:	f003 fc0a 	bl	80071e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80039d0:	e030      	b.n	8003a34 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a1c      	ldr	r2, [pc, #112]	; (8003a48 <HAL_UART_MspInit+0x104>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d12b      	bne.n	8003a34 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80039dc:	2300      	movs	r3, #0
 80039de:	613b      	str	r3, [r7, #16]
 80039e0:	4b17      	ldr	r3, [pc, #92]	; (8003a40 <HAL_UART_MspInit+0xfc>)
 80039e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e4:	4a16      	ldr	r2, [pc, #88]	; (8003a40 <HAL_UART_MspInit+0xfc>)
 80039e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039ea:	6413      	str	r3, [r2, #64]	; 0x40
 80039ec:	4b14      	ldr	r3, [pc, #80]	; (8003a40 <HAL_UART_MspInit+0xfc>)
 80039ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f4:	613b      	str	r3, [r7, #16]
 80039f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039f8:	2300      	movs	r3, #0
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	4b10      	ldr	r3, [pc, #64]	; (8003a40 <HAL_UART_MspInit+0xfc>)
 80039fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a00:	4a0f      	ldr	r2, [pc, #60]	; (8003a40 <HAL_UART_MspInit+0xfc>)
 8003a02:	f043 0301 	orr.w	r3, r3, #1
 8003a06:	6313      	str	r3, [r2, #48]	; 0x30
 8003a08:	4b0d      	ldr	r3, [pc, #52]	; (8003a40 <HAL_UART_MspInit+0xfc>)
 8003a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	60fb      	str	r3, [r7, #12]
 8003a12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 8003a14:	230c      	movs	r3, #12
 8003a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a18:	2302      	movs	r3, #2
 8003a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a20:	2303      	movs	r3, #3
 8003a22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a24:	2307      	movs	r3, #7
 8003a26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a28:	f107 031c 	add.w	r3, r7, #28
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4805      	ldr	r0, [pc, #20]	; (8003a44 <HAL_UART_MspInit+0x100>)
 8003a30:	f003 fe94 	bl	800775c <HAL_GPIO_Init>
}
 8003a34:	bf00      	nop
 8003a36:	3730      	adds	r7, #48	; 0x30
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40011000 	.word	0x40011000
 8003a40:	40023800 	.word	0x40023800
 8003a44:	40020000 	.word	0x40020000
 8003a48:	40004400 	.word	0x40004400

08003a4c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a12      	ldr	r2, [pc, #72]	; (8003aa4 <HAL_UART_MspDeInit+0x58>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d10e      	bne.n	8003a7c <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003a5e:	4b12      	ldr	r3, [pc, #72]	; (8003aa8 <HAL_UART_MspDeInit+0x5c>)
 8003a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a62:	4a11      	ldr	r2, [pc, #68]	; (8003aa8 <HAL_UART_MspDeInit+0x5c>)
 8003a64:	f023 0310 	bic.w	r3, r3, #16
 8003a68:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, MODEM_TX_Pin|MODEM_RX_Pin);
 8003a6a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003a6e:	480f      	ldr	r0, [pc, #60]	; (8003aac <HAL_UART_MspDeInit+0x60>)
 8003a70:	f003 fff8 	bl	8007a64 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003a74:	2025      	movs	r0, #37	; 0x25
 8003a76:	f003 fbc3 	bl	8007200 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8003a7a:	e00e      	b.n	8003a9a <HAL_UART_MspDeInit+0x4e>
  else if(huart->Instance==USART2)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a0b      	ldr	r2, [pc, #44]	; (8003ab0 <HAL_UART_MspDeInit+0x64>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d109      	bne.n	8003a9a <HAL_UART_MspDeInit+0x4e>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003a86:	4b08      	ldr	r3, [pc, #32]	; (8003aa8 <HAL_UART_MspDeInit+0x5c>)
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	4a07      	ldr	r2, [pc, #28]	; (8003aa8 <HAL_UART_MspDeInit+0x5c>)
 8003a8c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003a90:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GNSS_TX_Pin|GNSS_RX_Pin);
 8003a92:	210c      	movs	r1, #12
 8003a94:	4805      	ldr	r0, [pc, #20]	; (8003aac <HAL_UART_MspDeInit+0x60>)
 8003a96:	f003 ffe5 	bl	8007a64 <HAL_GPIO_DeInit>
}
 8003a9a:	bf00      	nop
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	40011000 	.word	0x40011000
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	40020000 	.word	0x40020000
 8003ab0:	40004400 	.word	0x40004400

08003ab4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b08e      	sub	sp, #56	; 0x38
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	4b33      	ldr	r3, [pc, #204]	; (8003b98 <HAL_InitTick+0xe4>)
 8003aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003acc:	4a32      	ldr	r2, [pc, #200]	; (8003b98 <HAL_InitTick+0xe4>)
 8003ace:	f043 0304 	orr.w	r3, r3, #4
 8003ad2:	6413      	str	r3, [r2, #64]	; 0x40
 8003ad4:	4b30      	ldr	r3, [pc, #192]	; (8003b98 <HAL_InitTick+0xe4>)
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	60fb      	str	r3, [r7, #12]
 8003ade:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003ae0:	f107 0210 	add.w	r2, r7, #16
 8003ae4:	f107 0314 	add.w	r3, r7, #20
 8003ae8:	4611      	mov	r1, r2
 8003aea:	4618      	mov	r0, r3
 8003aec:	f005 fce8 	bl	80094c0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d103      	bne.n	8003b02 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003afa:	f005 fcb9 	bl	8009470 <HAL_RCC_GetPCLK1Freq>
 8003afe:	6378      	str	r0, [r7, #52]	; 0x34
 8003b00:	e004      	b.n	8003b0c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003b02:	f005 fcb5 	bl	8009470 <HAL_RCC_GetPCLK1Freq>
 8003b06:	4603      	mov	r3, r0
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b0e:	4a23      	ldr	r2, [pc, #140]	; (8003b9c <HAL_InitTick+0xe8>)
 8003b10:	fba2 2303 	umull	r2, r3, r2, r3
 8003b14:	0c9b      	lsrs	r3, r3, #18
 8003b16:	3b01      	subs	r3, #1
 8003b18:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8003b1a:	4b21      	ldr	r3, [pc, #132]	; (8003ba0 <HAL_InitTick+0xec>)
 8003b1c:	4a21      	ldr	r2, [pc, #132]	; (8003ba4 <HAL_InitTick+0xf0>)
 8003b1e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8003b20:	4b1f      	ldr	r3, [pc, #124]	; (8003ba0 <HAL_InitTick+0xec>)
 8003b22:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003b26:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8003b28:	4a1d      	ldr	r2, [pc, #116]	; (8003ba0 <HAL_InitTick+0xec>)
 8003b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2c:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8003b2e:	4b1c      	ldr	r3, [pc, #112]	; (8003ba0 <HAL_InitTick+0xec>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b34:	4b1a      	ldr	r3, [pc, #104]	; (8003ba0 <HAL_InitTick+0xec>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b3a:	4b19      	ldr	r3, [pc, #100]	; (8003ba0 <HAL_InitTick+0xec>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8003b40:	4817      	ldr	r0, [pc, #92]	; (8003ba0 <HAL_InitTick+0xec>)
 8003b42:	f005 fcef 	bl	8009524 <HAL_TIM_Base_Init>
 8003b46:	4603      	mov	r3, r0
 8003b48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003b4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d11b      	bne.n	8003b8c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8003b54:	4812      	ldr	r0, [pc, #72]	; (8003ba0 <HAL_InitTick+0xec>)
 8003b56:	f005 fd3f 	bl	80095d8 <HAL_TIM_Base_Start_IT>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003b60:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d111      	bne.n	8003b8c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003b68:	201e      	movs	r0, #30
 8003b6a:	f003 fb3b 	bl	80071e4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b0f      	cmp	r3, #15
 8003b72:	d808      	bhi.n	8003b86 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8003b74:	2200      	movs	r2, #0
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	201e      	movs	r0, #30
 8003b7a:	f003 fb17 	bl	80071ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b7e:	4a0a      	ldr	r2, [pc, #40]	; (8003ba8 <HAL_InitTick+0xf4>)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6013      	str	r3, [r2, #0]
 8003b84:	e002      	b.n	8003b8c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003b8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3738      	adds	r7, #56	; 0x38
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	431bde83 	.word	0x431bde83
 8003ba0:	20000670 	.word	0x20000670
 8003ba4:	40000800 	.word	0x40000800
 8003ba8:	200000e8 	.word	0x200000e8

08003bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003bb0:	e7fe      	b.n	8003bb0 <NMI_Handler+0x4>

08003bb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bb6:	e7fe      	b.n	8003bb6 <HardFault_Handler+0x4>

08003bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bbc:	e7fe      	b.n	8003bbc <MemManage_Handler+0x4>

08003bbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bc2:	e7fe      	b.n	8003bc2 <BusFault_Handler+0x4>

08003bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bc8:	e7fe      	b.n	8003bc8 <UsageFault_Handler+0x4>

08003bca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003bce:	bf00      	nop
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bdc:	bf00      	nop
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003be6:	b480      	push	{r7}
 8003be8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003bea:	bf00      	nop
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003bf8:	bf00      	nop
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
	...

08003c04 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003c08:	4802      	ldr	r0, [pc, #8]	; (8003c14 <ADC_IRQHandler+0x10>)
 8003c0a:	f002 fe89 	bl	8006920 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003c0e:	bf00      	nop
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	20000504 	.word	0x20000504

08003c18 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003c1c:	4802      	ldr	r0, [pc, #8]	; (8003c28 <TIM4_IRQHandler+0x10>)
 8003c1e:	f005 fe3d 	bl	800989c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003c22:	bf00      	nop
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	20000670 	.word	0x20000670

08003c2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003c30:	4802      	ldr	r0, [pc, #8]	; (8003c3c <USART1_IRQHandler+0x10>)
 8003c32:	f006 fd2b 	bl	800a68c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003c36:	bf00      	nop
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	200005e8 	.word	0x200005e8

08003c40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c40:	b480      	push	{r7}
 8003c42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c44:	4b06      	ldr	r3, [pc, #24]	; (8003c60 <SystemInit+0x20>)
 8003c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4a:	4a05      	ldr	r2, [pc, #20]	; (8003c60 <SystemInit+0x20>)
 8003c4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c54:	bf00      	nop
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	e000ed00 	.word	0xe000ed00

08003c64 <modem_Timer>:
uint8_t _modem_led_start = 0;
uint8_t _modem_led_state = 0;


void modem_Timer(uint32_t res)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
#ifdef NO_MODEM
	return;
#endif //NO_MODEM

	for( uint8_t i = 0; i < MODEM_TMR_NUM; i++ )
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	73fb      	strb	r3, [r7, #15]
 8003c70:	e010      	b.n	8003c94 <modem_Timer+0x30>
	{
		if( modem_info.timer[i] > 0 ){
 8003c72:	7bfb      	ldrb	r3, [r7, #15]
 8003c74:	4a0c      	ldr	r2, [pc, #48]	; (8003ca8 <modem_Timer+0x44>)
 8003c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d007      	beq.n	8003c8e <modem_Timer+0x2a>
			modem_info.timer[i]--;
 8003c7e:	7bfb      	ldrb	r3, [r7, #15]
 8003c80:	4a09      	ldr	r2, [pc, #36]	; (8003ca8 <modem_Timer+0x44>)
 8003c82:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003c86:	3a01      	subs	r2, #1
 8003c88:	4907      	ldr	r1, [pc, #28]	; (8003ca8 <modem_Timer+0x44>)
 8003c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for( uint8_t i = 0; i < MODEM_TMR_NUM; i++ )
 8003c8e:	7bfb      	ldrb	r3, [r7, #15]
 8003c90:	3301      	adds	r3, #1
 8003c92:	73fb      	strb	r3, [r7, #15]
 8003c94:	7bfb      	ldrb	r3, [r7, #15]
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d9eb      	bls.n	8003c72 <modem_Timer+0xe>
		}
	}

	return;
 8003c9a:	bf00      	nop
}
 8003c9c:	3714      	adds	r7, #20
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	200006b8 	.word	0x200006b8

08003cac <modem_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void modem_InitTask()
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
#ifdef NO_MODEM
	return;
#endif //NO_MODEM

	HAL_GPIO_WritePin(GPIOA, MODEM_M0_Pin|MODEM_M1_Pin, GPIO_PIN_SET);
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8003cb6:	480c      	ldr	r0, [pc, #48]	; (8003ce8 <modem_InitTask+0x3c>)
 8003cb8:	f003 ffd0 	bl	8007c5c <HAL_GPIO_WritePin>
	modem_info.ready_flag = 0;
 8003cbc:	4b0b      	ldr	r3, [pc, #44]	; (8003cec <modem_InitTask+0x40>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 21a5 	strb.w	r2, [r3, #421]	; 0x1a5

	modem_info.timer[MODEM_TX_TMR] = 0;
 8003cc4:	4b09      	ldr	r3, [pc, #36]	; (8003cec <modem_InitTask+0x40>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	601a      	str	r2, [r3, #0]
	modem_info.rx_buf.head = 0;
 8003cca:	4b08      	ldr	r3, [pc, #32]	; (8003cec <modem_InitTask+0x40>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	81da      	strh	r2, [r3, #14]
	modem_info.rx_buf.tail = 0;
 8003cd0:	4b06      	ldr	r3, [pc, #24]	; (8003cec <modem_InitTask+0x40>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	821a      	strh	r2, [r3, #16]
	modem_info.rx_buf.state = MDMRINGBUF_WAIT_HEADER;
 8003cd6:	4b05      	ldr	r3, [pc, #20]	; (8003cec <modem_InitTask+0x40>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	731a      	strb	r2, [r3, #12]
	modem_info.tx_buf_bytes = 0;
 8003cdc:	4b03      	ldr	r3, [pc, #12]	; (8003cec <modem_InitTask+0x40>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198

	return;
 8003ce4:	bf00      	nop
}
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40020000 	.word	0x40020000
 8003cec:	200006b8 	.word	0x200006b8

08003cf0 <modem_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void modem_Task(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
	return;
#endif //NO_MODEM

	uint8_t set_buf[10];

	if( _modem_cur_state == modem_init_power_up )
 8003cf6:	4b81      	ldr	r3, [pc, #516]	; (8003efc <modem_Task+0x20c>)
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d110      	bne.n	8003d20 <modem_Task+0x30>
	{
		if( HAL_GPIO_ReadPin(MODEM_AUX_GPIO_Port, MODEM_AUX_Pin) == GPIO_PIN_SET )
 8003cfe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d02:	487f      	ldr	r0, [pc, #508]	; (8003f00 <modem_Task+0x210>)
 8003d04:	f003 ff92 	bl	8007c2c <HAL_GPIO_ReadPin>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	f040 80b0 	bne.w	8003e70 <modem_Task+0x180>
		{
			modem_info.timer[MODEM_STATE_TMR] = 1000;
 8003d10:	4b7c      	ldr	r3, [pc, #496]	; (8003f04 <modem_Task+0x214>)
 8003d12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d16:	605a      	str	r2, [r3, #4]
			_modem_cur_state = modem_init_set_par;
 8003d18:	4b78      	ldr	r3, [pc, #480]	; (8003efc <modem_Task+0x20c>)
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	701a      	strb	r2, [r3, #0]
 8003d1e:	e0a7      	b.n	8003e70 <modem_Task+0x180>
		}
	}
	else if( _modem_cur_state == modem_init_set_par )
 8003d20:	4b76      	ldr	r3, [pc, #472]	; (8003efc <modem_Task+0x20c>)
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d11e      	bne.n	8003d66 <modem_Task+0x76>
	{
		if( modem_info.timer[MODEM_STATE_TMR] == 0 )
 8003d28:	4b76      	ldr	r3, [pc, #472]	; (8003f04 <modem_Task+0x214>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f040 809f 	bne.w	8003e70 <modem_Task+0x180>
		{
			//Command "Set parameters without saving"
			set_buf[0] = 0xC2;
 8003d32:	23c2      	movs	r3, #194	; 0xc2
 8003d34:	713b      	strb	r3, [r7, #4]
			//Address (Broadcast)
			set_buf[1] = 0xFF;
 8003d36:	23ff      	movs	r3, #255	; 0xff
 8003d38:	717b      	strb	r3, [r7, #5]
			set_buf[2] = 0xFF;
 8003d3a:	23ff      	movs	r3, #255	; 0xff
 8003d3c:	71bb      	strb	r3, [r7, #6]
			//Speed (8N1, 115200, RF-19.2k)
			set_buf[3] = 0x3D;
 8003d3e:	233d      	movs	r3, #61	; 0x3d
 8003d40:	71fb      	strb	r3, [r7, #7]
			//Channel (868 MHz)
			set_buf[4] = 0x06;
 8003d42:	2306      	movs	r3, #6
 8003d44:	723b      	strb	r3, [r7, #8]
			//Options
			set_buf[5] = 0x44;
 8003d46:	2344      	movs	r3, #68	; 0x44
 8003d48:	727b      	strb	r3, [r7, #9]
			HAL_UART_Transmit(&HAL_MODEM_UART, set_buf, 6, HAL_MAX_DELAY);
 8003d4a:	1d39      	adds	r1, r7, #4
 8003d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d50:	2206      	movs	r2, #6
 8003d52:	486d      	ldr	r0, [pc, #436]	; (8003f08 <modem_Task+0x218>)
 8003d54:	f006 fac4 	bl	800a2e0 <HAL_UART_Transmit>
			modem_info.timer[MODEM_STATE_TMR] = 100;
 8003d58:	4b6a      	ldr	r3, [pc, #424]	; (8003f04 <modem_Task+0x214>)
 8003d5a:	2264      	movs	r2, #100	; 0x64
 8003d5c:	605a      	str	r2, [r3, #4]
			_modem_cur_state = modem_init_read_par;
 8003d5e:	4b67      	ldr	r3, [pc, #412]	; (8003efc <modem_Task+0x20c>)
 8003d60:	2202      	movs	r2, #2
 8003d62:	701a      	strb	r2, [r3, #0]
 8003d64:	e084      	b.n	8003e70 <modem_Task+0x180>
		}
	}
	else if( _modem_cur_state == modem_init_read_par )
 8003d66:	4b65      	ldr	r3, [pc, #404]	; (8003efc <modem_Task+0x20c>)
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d114      	bne.n	8003d98 <modem_Task+0xa8>
	{
		if( modem_info.timer[MODEM_STATE_TMR] == 0 )
 8003d6e:	4b65      	ldr	r3, [pc, #404]	; (8003f04 <modem_Task+0x214>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d17c      	bne.n	8003e70 <modem_Task+0x180>
		{
			//Command "Read parameters"
			set_buf[0] = 0xC1;
 8003d76:	23c1      	movs	r3, #193	; 0xc1
 8003d78:	713b      	strb	r3, [r7, #4]
			set_buf[1] = 0xC1;
 8003d7a:	23c1      	movs	r3, #193	; 0xc1
 8003d7c:	717b      	strb	r3, [r7, #5]
			set_buf[2] = 0xC1;
 8003d7e:	23c1      	movs	r3, #193	; 0xc1
 8003d80:	71bb      	strb	r3, [r7, #6]
			HAL_UART_Transmit(&HAL_MODEM_UART, set_buf, 3, HAL_MAX_DELAY);
 8003d82:	1d39      	adds	r1, r7, #4
 8003d84:	f04f 33ff 	mov.w	r3, #4294967295
 8003d88:	2203      	movs	r2, #3
 8003d8a:	485f      	ldr	r0, [pc, #380]	; (8003f08 <modem_Task+0x218>)
 8003d8c:	f006 faa8 	bl	800a2e0 <HAL_UART_Transmit>
			_modem_cur_state = modem_init_wait_par;
 8003d90:	4b5a      	ldr	r3, [pc, #360]	; (8003efc <modem_Task+0x20c>)
 8003d92:	2203      	movs	r2, #3
 8003d94:	701a      	strb	r2, [r3, #0]
 8003d96:	e06b      	b.n	8003e70 <modem_Task+0x180>
		}
	}
	else if( _modem_cur_state == modem_init_wait_par )
 8003d98:	4b58      	ldr	r3, [pc, #352]	; (8003efc <modem_Task+0x20c>)
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	2b03      	cmp	r3, #3
 8003d9e:	d115      	bne.n	8003dcc <modem_Task+0xdc>
	{
		if( _modem_par_flag == 1 )
 8003da0:	4b5a      	ldr	r3, [pc, #360]	; (8003f0c <modem_Task+0x21c>)
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d163      	bne.n	8003e70 <modem_Task+0x180>
		{
			_modem_par_flag = 0;
 8003da8:	4b58      	ldr	r3, [pc, #352]	; (8003f0c <modem_Task+0x21c>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, MODEM_M0_Pin|MODEM_M1_Pin, GPIO_PIN_RESET);
 8003dae:	2200      	movs	r2, #0
 8003db0:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8003db4:	4852      	ldr	r0, [pc, #328]	; (8003f00 <modem_Task+0x210>)
 8003db6:	f003 ff51 	bl	8007c5c <HAL_GPIO_WritePin>
			system_UARTmodemSet115200();
 8003dba:	f002 fb9d 	bl	80064f8 <system_UARTmodemSet115200>
			modem_info.timer[MODEM_STATE_TMR] = 100;
 8003dbe:	4b51      	ldr	r3, [pc, #324]	; (8003f04 <modem_Task+0x214>)
 8003dc0:	2264      	movs	r2, #100	; 0x64
 8003dc2:	605a      	str	r2, [r3, #4]
			_modem_cur_state = modem_init_wait_rdy;
 8003dc4:	4b4d      	ldr	r3, [pc, #308]	; (8003efc <modem_Task+0x20c>)
 8003dc6:	2204      	movs	r2, #4
 8003dc8:	701a      	strb	r2, [r3, #0]
 8003dca:	e051      	b.n	8003e70 <modem_Task+0x180>
		}
	}
	else if( _modem_cur_state == modem_init_wait_rdy  )
 8003dcc:	4b4b      	ldr	r3, [pc, #300]	; (8003efc <modem_Task+0x20c>)
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	2b04      	cmp	r3, #4
 8003dd2:	d107      	bne.n	8003de4 <modem_Task+0xf4>
	{
		if( modem_info.timer[MODEM_STATE_TMR] == 0 ){
 8003dd4:	4b4b      	ldr	r3, [pc, #300]	; (8003f04 <modem_Task+0x214>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d149      	bne.n	8003e70 <modem_Task+0x180>
			_modem_cur_state = modem_ready;
 8003ddc:	4b47      	ldr	r3, [pc, #284]	; (8003efc <modem_Task+0x20c>)
 8003dde:	2205      	movs	r2, #5
 8003de0:	701a      	strb	r2, [r3, #0]
 8003de2:	e045      	b.n	8003e70 <modem_Task+0x180>
		}
	}
	else if( _modem_cur_state == modem_ready )
 8003de4:	4b45      	ldr	r3, [pc, #276]	; (8003efc <modem_Task+0x20c>)
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	2b05      	cmp	r3, #5
 8003dea:	d141      	bne.n	8003e70 <modem_Task+0x180>
	{
		//Transmitting
		if( (modem_info.tx_buf_bytes > 0) && (modem_info.timer[MODEM_TX_TMR] == 0) )
 8003dec:	4b45      	ldr	r3, [pc, #276]	; (8003f04 <modem_Task+0x214>)
 8003dee:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d024      	beq.n	8003e40 <modem_Task+0x150>
 8003df6:	4b43      	ldr	r3, [pc, #268]	; (8003f04 <modem_Task+0x214>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d120      	bne.n	8003e40 <modem_Task+0x150>
		{
			modem_info.timer[MODEM_TX_TMR] = MODEM_TX_PERIOD;
 8003dfe:	4b41      	ldr	r3, [pc, #260]	; (8003f04 <modem_Task+0x214>)
 8003e00:	2201      	movs	r2, #1
 8003e02:	601a      	str	r2, [r3, #0]
			if( modem_info.tx_buf_bytes > MODEM_MAX_TX_LEN )
 8003e04:	4b3f      	ldr	r3, [pc, #252]	; (8003f04 <modem_Task+0x214>)
 8003e06:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8003e0a:	2b14      	cmp	r3, #20
 8003e0c:	d90a      	bls.n	8003e24 <modem_Task+0x134>
			{
				HAL_UART_Transmit(&HAL_MODEM_UART, (uint8_t*)modem_info.tx_buf, MODEM_MAX_TX_LEN, HAL_MAX_DELAY);
 8003e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e12:	2214      	movs	r2, #20
 8003e14:	493e      	ldr	r1, [pc, #248]	; (8003f10 <modem_Task+0x220>)
 8003e16:	483c      	ldr	r0, [pc, #240]	; (8003f08 <modem_Task+0x218>)
 8003e18:	f006 fa62 	bl	800a2e0 <HAL_UART_Transmit>
				modem_RemTxData(MODEM_MAX_TX_LEN);
 8003e1c:	2014      	movs	r0, #20
 8003e1e:	f000 f9db 	bl	80041d8 <modem_RemTxData>
 8003e22:	e00d      	b.n	8003e40 <modem_Task+0x150>
			}
			else
			{
				HAL_UART_Transmit(&HAL_MODEM_UART, (uint8_t*)modem_info.tx_buf, modem_info.tx_buf_bytes, HAL_MAX_DELAY);
 8003e24:	4b37      	ldr	r3, [pc, #220]	; (8003f04 <modem_Task+0x214>)
 8003e26:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e30:	4937      	ldr	r1, [pc, #220]	; (8003f10 <modem_Task+0x220>)
 8003e32:	4835      	ldr	r0, [pc, #212]	; (8003f08 <modem_Task+0x218>)
 8003e34:	f006 fa54 	bl	800a2e0 <HAL_UART_Transmit>
				modem_info.tx_buf_bytes = 0;
 8003e38:	4b32      	ldr	r3, [pc, #200]	; (8003f04 <modem_Task+0x214>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
			}
		}

		//Receiving
		if( modem_info.rvd_pkt_size != 0 )
 8003e40:	4b30      	ldr	r3, [pc, #192]	; (8003f04 <modem_Task+0x214>)
 8003e42:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d012      	beq.n	8003e70 <modem_Task+0x180>
		{
			_modem_led_start = 1;
 8003e4a:	4b32      	ldr	r3, [pc, #200]	; (8003f14 <modem_Task+0x224>)
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	701a      	strb	r2, [r3, #0]
			system_ModemRxCallback(modem_info.rvd_pkt[0], (uint8_t*)&modem_info.rvd_pkt[1], modem_info.rvd_pkt_size - 1);
 8003e50:	4b2c      	ldr	r3, [pc, #176]	; (8003f04 <modem_Task+0x214>)
 8003e52:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8003e56:	b2d8      	uxtb	r0, r3
 8003e58:	4b2a      	ldr	r3, [pc, #168]	; (8003f04 <modem_Task+0x214>)
 8003e5a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	461a      	mov	r2, r3
 8003e62:	492d      	ldr	r1, [pc, #180]	; (8003f18 <modem_Task+0x228>)
 8003e64:	f002 fb5e 	bl	8006524 <system_ModemRxCallback>
			modem_info.rvd_pkt_size = 0;
 8003e68:	4b26      	ldr	r3, [pc, #152]	; (8003f04 <modem_Task+0x214>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		}
	}

	//LED
	if( _modem_led_state == 0)
 8003e70:	4b2a      	ldr	r3, [pc, #168]	; (8003f1c <modem_Task+0x22c>)
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d10a      	bne.n	8003e8e <modem_Task+0x19e>
	{
		if( _modem_led_start == 1 )
 8003e78:	4b26      	ldr	r3, [pc, #152]	; (8003f14 <modem_Task+0x224>)
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d138      	bne.n	8003ef2 <modem_Task+0x202>
		{
			_modem_led_start = 0;
 8003e80:	4b24      	ldr	r3, [pc, #144]	; (8003f14 <modem_Task+0x224>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	701a      	strb	r2, [r3, #0]
			_modem_led_state = 1;
 8003e86:	4b25      	ldr	r3, [pc, #148]	; (8003f1c <modem_Task+0x22c>)
 8003e88:	2201      	movs	r2, #1
 8003e8a:	701a      	strb	r2, [r3, #0]
		if( modem_info.timer[MODEM_LED_TMR] == 0 ){
			_modem_led_state = 0;
		}
	}

	return;
 8003e8c:	e031      	b.n	8003ef2 <modem_Task+0x202>
	else if( _modem_led_state == 1 )
 8003e8e:	4b23      	ldr	r3, [pc, #140]	; (8003f1c <modem_Task+0x22c>)
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d10c      	bne.n	8003eb0 <modem_Task+0x1c0>
		HAL_GPIO_WritePin(MODEM_LED_GPIO_Port, MODEM_LED_Pin, GPIO_PIN_SET);
 8003e96:	2201      	movs	r2, #1
 8003e98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003e9c:	4820      	ldr	r0, [pc, #128]	; (8003f20 <modem_Task+0x230>)
 8003e9e:	f003 fedd 	bl	8007c5c <HAL_GPIO_WritePin>
		modem_info.timer[MODEM_LED_TMR] = 20;
 8003ea2:	4b18      	ldr	r3, [pc, #96]	; (8003f04 <modem_Task+0x214>)
 8003ea4:	2214      	movs	r2, #20
 8003ea6:	609a      	str	r2, [r3, #8]
		_modem_led_state = 2;
 8003ea8:	4b1c      	ldr	r3, [pc, #112]	; (8003f1c <modem_Task+0x22c>)
 8003eaa:	2202      	movs	r2, #2
 8003eac:	701a      	strb	r2, [r3, #0]
	return;
 8003eae:	e020      	b.n	8003ef2 <modem_Task+0x202>
	else if( _modem_led_state == 2 )
 8003eb0:	4b1a      	ldr	r3, [pc, #104]	; (8003f1c <modem_Task+0x22c>)
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d110      	bne.n	8003eda <modem_Task+0x1ea>
		if( modem_info.timer[MODEM_LED_TMR] == 0 )
 8003eb8:	4b12      	ldr	r3, [pc, #72]	; (8003f04 <modem_Task+0x214>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d118      	bne.n	8003ef2 <modem_Task+0x202>
			HAL_GPIO_WritePin(MODEM_LED_GPIO_Port, MODEM_LED_Pin, GPIO_PIN_RESET);
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003ec6:	4816      	ldr	r0, [pc, #88]	; (8003f20 <modem_Task+0x230>)
 8003ec8:	f003 fec8 	bl	8007c5c <HAL_GPIO_WritePin>
			modem_info.timer[MODEM_LED_TMR] = 50;
 8003ecc:	4b0d      	ldr	r3, [pc, #52]	; (8003f04 <modem_Task+0x214>)
 8003ece:	2232      	movs	r2, #50	; 0x32
 8003ed0:	609a      	str	r2, [r3, #8]
			_modem_led_state = 3;
 8003ed2:	4b12      	ldr	r3, [pc, #72]	; (8003f1c <modem_Task+0x22c>)
 8003ed4:	2203      	movs	r2, #3
 8003ed6:	701a      	strb	r2, [r3, #0]
	return;
 8003ed8:	e00b      	b.n	8003ef2 <modem_Task+0x202>
	else if( _modem_led_state == 3 )
 8003eda:	4b10      	ldr	r3, [pc, #64]	; (8003f1c <modem_Task+0x22c>)
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	2b03      	cmp	r3, #3
 8003ee0:	d107      	bne.n	8003ef2 <modem_Task+0x202>
		if( modem_info.timer[MODEM_LED_TMR] == 0 ){
 8003ee2:	4b08      	ldr	r3, [pc, #32]	; (8003f04 <modem_Task+0x214>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d103      	bne.n	8003ef2 <modem_Task+0x202>
			_modem_led_state = 0;
 8003eea:	4b0c      	ldr	r3, [pc, #48]	; (8003f1c <modem_Task+0x22c>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	701a      	strb	r2, [r3, #0]
	return;
 8003ef0:	bf00      	nop
 8003ef2:	bf00      	nop
}
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	20000860 	.word	0x20000860
 8003f00:	40020000 	.word	0x40020000
 8003f04:	200006b8 	.word	0x200006b8
 8003f08:	200005e8 	.word	0x200005e8
 8003f0c:	2000086f 	.word	0x2000086f
 8003f10:	200007d0 	.word	0x200007d0
 8003f14:	20000870 	.word	0x20000870
 8003f18:	2000074d 	.word	0x2000074d
 8003f1c:	20000871 	.word	0x20000871
 8003f20:	40020400 	.word	0x40020400

08003f24 <modem_RcvData>:

void modem_RcvData(uint8_t data)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	71fb      	strb	r3, [r7, #7]

	static uint16_t rcv_size;
	uint16_t header;
	uint16_t crc;

	if( _modem_cur_state != modem_ready )
 8003f2e:	4b5f      	ldr	r3, [pc, #380]	; (80040ac <modem_RcvData+0x188>)
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	2b05      	cmp	r3, #5
 8003f34:	d01a      	beq.n	8003f6c <modem_RcvData+0x48>
	{
		if( _modem_par_flag == 0 )
 8003f36:	4b5e      	ldr	r3, [pc, #376]	; (80040b0 <modem_RcvData+0x18c>)
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f040 80b1 	bne.w	80040a2 <modem_RcvData+0x17e>
		{
			_modem_par_buf[_modem_par_buf_cnt++] = data;
 8003f40:	4b5c      	ldr	r3, [pc, #368]	; (80040b4 <modem_RcvData+0x190>)
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	1c5a      	adds	r2, r3, #1
 8003f46:	b2d1      	uxtb	r1, r2
 8003f48:	4a5a      	ldr	r2, [pc, #360]	; (80040b4 <modem_RcvData+0x190>)
 8003f4a:	7011      	strb	r1, [r2, #0]
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	4a5a      	ldr	r2, [pc, #360]	; (80040b8 <modem_RcvData+0x194>)
 8003f50:	79fb      	ldrb	r3, [r7, #7]
 8003f52:	5453      	strb	r3, [r2, r1]
			if( _modem_par_buf_cnt == 6 )
 8003f54:	4b57      	ldr	r3, [pc, #348]	; (80040b4 <modem_RcvData+0x190>)
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	2b06      	cmp	r3, #6
 8003f5a:	f040 80a2 	bne.w	80040a2 <modem_RcvData+0x17e>
			{
				_modem_par_buf_cnt = 0;
 8003f5e:	4b55      	ldr	r3, [pc, #340]	; (80040b4 <modem_RcvData+0x190>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	701a      	strb	r2, [r3, #0]
				_modem_par_flag = 1;
 8003f64:	4b52      	ldr	r3, [pc, #328]	; (80040b0 <modem_RcvData+0x18c>)
 8003f66:	2201      	movs	r2, #1
 8003f68:	701a      	strb	r2, [r3, #0]

			}
		}
	}

	return;
 8003f6a:	e09a      	b.n	80040a2 <modem_RcvData+0x17e>
				(modem_info.rx_buf.tail + 1) & MODEM_BUF_MASK] = data;
 8003f6c:	4b53      	ldr	r3, [pc, #332]	; (80040bc <modem_RcvData+0x198>)
 8003f6e:	8a1b      	ldrh	r3, [r3, #16]
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	3301      	adds	r3, #1
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f7a:	b29a      	uxth	r2, r3
		modem_info.rx_buf.data[modem_info.rx_buf.tail =
 8003f7c:	4b4f      	ldr	r3, [pc, #316]	; (80040bc <modem_RcvData+0x198>)
 8003f7e:	4611      	mov	r1, r2
 8003f80:	8219      	strh	r1, [r3, #16]
				(modem_info.rx_buf.tail + 1) & MODEM_BUF_MASK] = data;
 8003f82:	4b4e      	ldr	r3, [pc, #312]	; (80040bc <modem_RcvData+0x198>)
 8003f84:	4413      	add	r3, r2
 8003f86:	79fa      	ldrb	r2, [r7, #7]
 8003f88:	751a      	strb	r2, [r3, #20]
		if( modem_info.rx_buf.state == MDMRINGBUF_WAIT_HEADER )
 8003f8a:	4b4c      	ldr	r3, [pc, #304]	; (80040bc <modem_RcvData+0x198>)
 8003f8c:	7b1b      	ldrb	r3, [r3, #12]
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d12a      	bne.n	8003fea <modem_RcvData+0xc6>
					(modem_info.rx_buf.tail - 2) & MODEM_BUF_MASK);
 8003f94:	4b49      	ldr	r3, [pc, #292]	; (80040bc <modem_RcvData+0x198>)
 8003f96:	8a1b      	ldrh	r3, [r3, #16]
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	3b02      	subs	r3, #2
 8003f9c:	b29b      	uxth	r3, r3
			header = modem_ringBufRead16b((uint8_t*)modem_info.rx_buf.data,
 8003f9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	4846      	ldr	r0, [pc, #280]	; (80040c0 <modem_RcvData+0x19c>)
 8003fa8:	f000 f8ce 	bl	8004148 <modem_ringBufRead16b>
 8003fac:	4603      	mov	r3, r0
 8003fae:	817b      	strh	r3, [r7, #10]
			if( header == MODEM_HEADER )
 8003fb0:	897b      	ldrh	r3, [r7, #10]
 8003fb2:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d173      	bne.n	80040a2 <modem_RcvData+0x17e>
				modem_info.rx_buf.head = (modem_info.rx_buf.tail - 2) & MODEM_BUF_MASK;
 8003fba:	4b40      	ldr	r3, [pc, #256]	; (80040bc <modem_RcvData+0x198>)
 8003fbc:	8a1b      	ldrh	r3, [r3, #16]
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	3b02      	subs	r3, #2
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	4b3c      	ldr	r3, [pc, #240]	; (80040bc <modem_RcvData+0x198>)
 8003fcc:	81da      	strh	r2, [r3, #14]
				rcv_size = data;
 8003fce:	79fb      	ldrb	r3, [r7, #7]
 8003fd0:	b29a      	uxth	r2, r3
 8003fd2:	4b3c      	ldr	r3, [pc, #240]	; (80040c4 <modem_RcvData+0x1a0>)
 8003fd4:	801a      	strh	r2, [r3, #0]
				modem_info.rx_buf.data_size  = data - 2;
 8003fd6:	79fb      	ldrb	r3, [r7, #7]
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	3b02      	subs	r3, #2
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	4b37      	ldr	r3, [pc, #220]	; (80040bc <modem_RcvData+0x198>)
 8003fe0:	825a      	strh	r2, [r3, #18]
				modem_info.rx_buf.state = MDMRINGBUF_WAIT_DATA;
 8003fe2:	4b36      	ldr	r3, [pc, #216]	; (80040bc <modem_RcvData+0x198>)
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	731a      	strb	r2, [r3, #12]
	return;
 8003fe8:	e05b      	b.n	80040a2 <modem_RcvData+0x17e>
		else if( modem_info.rx_buf.state == MDMRINGBUF_WAIT_DATA )
 8003fea:	4b34      	ldr	r3, [pc, #208]	; (80040bc <modem_RcvData+0x198>)
 8003fec:	7b1b      	ldrb	r3, [r3, #12]
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d156      	bne.n	80040a2 <modem_RcvData+0x17e>
			if( --rcv_size == 0 )
 8003ff4:	4b33      	ldr	r3, [pc, #204]	; (80040c4 <modem_RcvData+0x1a0>)
 8003ff6:	881b      	ldrh	r3, [r3, #0]
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	4b31      	ldr	r3, [pc, #196]	; (80040c4 <modem_RcvData+0x1a0>)
 8003ffe:	801a      	strh	r2, [r3, #0]
 8004000:	4b30      	ldr	r3, [pc, #192]	; (80040c4 <modem_RcvData+0x1a0>)
 8004002:	881b      	ldrh	r3, [r3, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d14c      	bne.n	80040a2 <modem_RcvData+0x17e>
				modem_info.rx_buf.state = MDMRINGBUF_WAIT_HEADER;
 8004008:	4b2c      	ldr	r3, [pc, #176]	; (80040bc <modem_RcvData+0x198>)
 800400a:	2200      	movs	r2, #0
 800400c:	731a      	strb	r2, [r3, #12]
				crc = crc16_RingBuf((uint8_t*)modem_info.rx_buf.data, modem_info.rx_buf.head,
 800400e:	4b2b      	ldr	r3, [pc, #172]	; (80040bc <modem_RcvData+0x198>)
 8004010:	89db      	ldrh	r3, [r3, #14]
 8004012:	b299      	uxth	r1, r3
						modem_info.rx_buf.data_size + 3, MODEM_BUF_MASK);
 8004014:	4b29      	ldr	r3, [pc, #164]	; (80040bc <modem_RcvData+0x198>)
 8004016:	8a5b      	ldrh	r3, [r3, #18]
 8004018:	b29b      	uxth	r3, r3
				crc = crc16_RingBuf((uint8_t*)modem_info.rx_buf.data, modem_info.rx_buf.head,
 800401a:	3303      	adds	r3, #3
 800401c:	b29a      	uxth	r2, r3
 800401e:	237f      	movs	r3, #127	; 0x7f
 8004020:	4827      	ldr	r0, [pc, #156]	; (80040c0 <modem_RcvData+0x19c>)
 8004022:	f7ff f849 	bl	80030b8 <crc16_RingBuf>
 8004026:	4603      	mov	r3, r0
 8004028:	81bb      	strh	r3, [r7, #12]
						(modem_info.rx_buf.tail - 1) & MODEM_BUF_MASK) ){
 800402a:	4b24      	ldr	r3, [pc, #144]	; (80040bc <modem_RcvData+0x198>)
 800402c:	8a1b      	ldrh	r3, [r3, #16]
 800402e:	b29b      	uxth	r3, r3
 8004030:	3b01      	subs	r3, #1
 8004032:	b29b      	uxth	r3, r3
				if( crc == modem_ringBufRead16b((uint8_t*)modem_info.rx_buf.data,
 8004034:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004038:	b29b      	uxth	r3, r3
 800403a:	4619      	mov	r1, r3
 800403c:	4820      	ldr	r0, [pc, #128]	; (80040c0 <modem_RcvData+0x19c>)
 800403e:	f000 f883 	bl	8004148 <modem_ringBufRead16b>
 8004042:	4603      	mov	r3, r0
 8004044:	461a      	mov	r2, r3
 8004046:	89bb      	ldrh	r3, [r7, #12]
 8004048:	4293      	cmp	r3, r2
 800404a:	d12a      	bne.n	80040a2 <modem_RcvData+0x17e>
					if( modem_info.rvd_pkt_size == 0 )
 800404c:	4b1b      	ldr	r3, [pc, #108]	; (80040bc <modem_RcvData+0x198>)
 800404e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004052:	2b00      	cmp	r3, #0
 8004054:	d125      	bne.n	80040a2 <modem_RcvData+0x17e>
						for( uint16_t i = 0; i < modem_info.rx_buf.data_size; i++ ){
 8004056:	2300      	movs	r3, #0
 8004058:	81fb      	strh	r3, [r7, #14]
 800405a:	e014      	b.n	8004086 <modem_RcvData+0x162>
									modem_info.rx_buf.data[(modem_info.rx_buf.head + 3 + i) & MODEM_BUF_MASK];
 800405c:	4b17      	ldr	r3, [pc, #92]	; (80040bc <modem_RcvData+0x198>)
 800405e:	89db      	ldrh	r3, [r3, #14]
 8004060:	b29b      	uxth	r3, r3
 8004062:	1cda      	adds	r2, r3, #3
 8004064:	89fb      	ldrh	r3, [r7, #14]
 8004066:	4413      	add	r3, r2
 8004068:	f003 027f 	and.w	r2, r3, #127	; 0x7f
							modem_info.rvd_pkt[i] =
 800406c:	89fb      	ldrh	r3, [r7, #14]
									modem_info.rx_buf.data[(modem_info.rx_buf.head + 3 + i) & MODEM_BUF_MASK];
 800406e:	4913      	ldr	r1, [pc, #76]	; (80040bc <modem_RcvData+0x198>)
 8004070:	440a      	add	r2, r1
 8004072:	7d12      	ldrb	r2, [r2, #20]
 8004074:	b2d1      	uxtb	r1, r2
							modem_info.rvd_pkt[i] =
 8004076:	4a11      	ldr	r2, [pc, #68]	; (80040bc <modem_RcvData+0x198>)
 8004078:	4413      	add	r3, r2
 800407a:	460a      	mov	r2, r1
 800407c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
						for( uint16_t i = 0; i < modem_info.rx_buf.data_size; i++ ){
 8004080:	89fb      	ldrh	r3, [r7, #14]
 8004082:	3301      	adds	r3, #1
 8004084:	81fb      	strh	r3, [r7, #14]
 8004086:	4b0d      	ldr	r3, [pc, #52]	; (80040bc <modem_RcvData+0x198>)
 8004088:	8a5b      	ldrh	r3, [r3, #18]
 800408a:	b29b      	uxth	r3, r3
 800408c:	89fa      	ldrh	r2, [r7, #14]
 800408e:	429a      	cmp	r2, r3
 8004090:	d3e4      	bcc.n	800405c <modem_RcvData+0x138>
						modem_info.rvd_pkt_size = modem_info.rx_buf.data_size;
 8004092:	4b0a      	ldr	r3, [pc, #40]	; (80040bc <modem_RcvData+0x198>)
 8004094:	8a5b      	ldrh	r3, [r3, #18]
 8004096:	b29b      	uxth	r3, r3
 8004098:	461a      	mov	r2, r3
 800409a:	4b08      	ldr	r3, [pc, #32]	; (80040bc <modem_RcvData+0x198>)
 800409c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	return;
 80040a0:	bf00      	nop
 80040a2:	bf00      	nop
}
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	20000860 	.word	0x20000860
 80040b0:	2000086f 	.word	0x2000086f
 80040b4:	2000086e 	.word	0x2000086e
 80040b8:	20000864 	.word	0x20000864
 80040bc:	200006b8 	.word	0x200006b8
 80040c0:	200006cc 	.word	0x200006cc
 80040c4:	20000872 	.word	0x20000872

080040c8 <modem_TrmData>:

void modem_TrmData(uint8_t channel, uint8_t *data, uint32_t len)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	4603      	mov	r3, r0
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
 80040d4:	73fb      	strb	r3, [r7, #15]
	uint16_t u16_tmp;
	uint8_t u8_tmp;
	uint32_t i;

	//Header
	u16_tmp = MODEM_HEADER;
 80040d6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80040da:	82fb      	strh	r3, [r7, #22]
	modem_AddTxData((uint8_t*)&u16_tmp, 2);
 80040dc:	f107 0316 	add.w	r3, r7, #22
 80040e0:	2102      	movs	r1, #2
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 f850 	bl	8004188 <modem_AddTxData>
	//Length (data + channel + crc)
	u8_tmp = (uint8_t)len + 3;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	3303      	adds	r3, #3
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	757b      	strb	r3, [r7, #21]
	modem_AddTxData(&u8_tmp, 1);
 80040f2:	f107 0315 	add.w	r3, r7, #21
 80040f6:	2101      	movs	r1, #1
 80040f8:	4618      	mov	r0, r3
 80040fa:	f000 f845 	bl	8004188 <modem_AddTxData>
	//Channel (starts from 1)
	u8_tmp = channel;
 80040fe:	7bfb      	ldrb	r3, [r7, #15]
 8004100:	757b      	strb	r3, [r7, #21]
	modem_AddTxData(&u8_tmp, 1);
 8004102:	f107 0315 	add.w	r3, r7, #21
 8004106:	2101      	movs	r1, #1
 8004108:	4618      	mov	r0, r3
 800410a:	f000 f83d 	bl	8004188 <modem_AddTxData>
	//Data
	modem_AddTxData(data, len);
 800410e:	6879      	ldr	r1, [r7, #4]
 8004110:	68b8      	ldr	r0, [r7, #8]
 8004112:	f000 f839 	bl	8004188 <modem_AddTxData>
	//CRC
	u16_tmp = crc16_calc(modem_info.tx_buf, modem_info.tx_buf_bytes);
 8004116:	4b0a      	ldr	r3, [pc, #40]	; (8004140 <modem_TrmData+0x78>)
 8004118:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800411c:	b29b      	uxth	r3, r3
 800411e:	4619      	mov	r1, r3
 8004120:	4808      	ldr	r0, [pc, #32]	; (8004144 <modem_TrmData+0x7c>)
 8004122:	f7fe ff9f 	bl	8003064 <crc16_calc>
 8004126:	4603      	mov	r3, r0
 8004128:	82fb      	strh	r3, [r7, #22]
	modem_AddTxData((uint8_t*)&u16_tmp, 2);
 800412a:	f107 0316 	add.w	r3, r7, #22
 800412e:	2102      	movs	r1, #2
 8004130:	4618      	mov	r0, r3
 8004132:	f000 f829 	bl	8004188 <modem_AddTxData>

	return;
 8004136:	bf00      	nop
}
 8004138:	3718      	adds	r7, #24
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	200006b8 	.word	0x200006b8
 8004144:	200007d0 	.word	0x200007d0

08004148 <modem_ringBufRead16b>:

uint16_t modem_ringBufRead16b(uint8_t *buf, uint16_t pos)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	460b      	mov	r3, r1
 8004152:	807b      	strh	r3, [r7, #2]
	uint16_t tmp;
	tmp = buf[(pos + 1) & MODEM_BUF_MASK] & 0xFF;
 8004154:	887b      	ldrh	r3, [r7, #2]
 8004156:	3301      	adds	r3, #1
 8004158:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	4413      	add	r3, r2
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp << 8) + buf[pos];
 8004164:	89fb      	ldrh	r3, [r7, #14]
 8004166:	021b      	lsls	r3, r3, #8
 8004168:	b29a      	uxth	r2, r3
 800416a:	887b      	ldrh	r3, [r7, #2]
 800416c:	6879      	ldr	r1, [r7, #4]
 800416e:	440b      	add	r3, r1
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	b29b      	uxth	r3, r3
 8004174:	4413      	add	r3, r2
 8004176:	81fb      	strh	r3, [r7, #14]
	return tmp;
 8004178:	89fb      	ldrh	r3, [r7, #14]
}
 800417a:	4618      	mov	r0, r3
 800417c:	3714      	adds	r7, #20
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
	...

08004188 <modem_AddTxData>:
	tmp = (tmp << 8) + buf[pos];
	return tmp;
}

void modem_AddTxData(uint8_t *data, uint32_t len)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
#ifdef NO_MODEM
	return;
#endif //NO_MODEM

	if( len > (MODEM_BUF_SIZE - modem_info.tx_buf_bytes) ){
 8004192:	4b10      	ldr	r3, [pc, #64]	; (80041d4 <modem_AddTxData+0x4c>)
 8004194:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8004198:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d814      	bhi.n	80041cc <modem_AddTxData+0x44>
		return;
	}
	memcpy((uint8_t*)&modem_info.tx_buf[modem_info.tx_buf_bytes], data, len);
 80041a2:	4b0c      	ldr	r3, [pc, #48]	; (80041d4 <modem_AddTxData+0x4c>)
 80041a4:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80041a8:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80041ac:	4a09      	ldr	r2, [pc, #36]	; (80041d4 <modem_AddTxData+0x4c>)
 80041ae:	4413      	add	r3, r2
 80041b0:	683a      	ldr	r2, [r7, #0]
 80041b2:	6879      	ldr	r1, [r7, #4]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f007 fa5f 	bl	800b678 <memcpy>
	modem_info.tx_buf_bytes += len;
 80041ba:	4b06      	ldr	r3, [pc, #24]	; (80041d4 <modem_AddTxData+0x4c>)
 80041bc:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	4413      	add	r3, r2
 80041c4:	4a03      	ldr	r2, [pc, #12]	; (80041d4 <modem_AddTxData+0x4c>)
 80041c6:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	return;
 80041ca:	e000      	b.n	80041ce <modem_AddTxData+0x46>
		return;
 80041cc:	bf00      	nop
}
 80041ce:	3708      	adds	r7, #8
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	200006b8 	.word	0x200006b8

080041d8 <modem_RemTxData>:

void modem_RemTxData(uint32_t len)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b0a2      	sub	sp, #136	; 0x88
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
	return;
#endif //NO_MODEM

	uint8_t tmp_buf[MODEM_BUF_SIZE];

	if( (len > modem_info.tx_buf_bytes)
 80041e0:	4b18      	ldr	r3, [pc, #96]	; (8004244 <modem_RemTxData+0x6c>)
 80041e2:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d826      	bhi.n	800423a <modem_RemTxData+0x62>
			|| (len == 0) || (modem_info.tx_buf_bytes == 0) ){
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d023      	beq.n	800423a <modem_RemTxData+0x62>
 80041f2:	4b14      	ldr	r3, [pc, #80]	; (8004244 <modem_RemTxData+0x6c>)
 80041f4:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d01e      	beq.n	800423a <modem_RemTxData+0x62>
		return;
	}
	modem_info.tx_buf_bytes -= len;
 80041fc:	4b11      	ldr	r3, [pc, #68]	; (8004244 <modem_RemTxData+0x6c>)
 80041fe:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	4a0f      	ldr	r2, [pc, #60]	; (8004244 <modem_RemTxData+0x6c>)
 8004208:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
	memcpy(tmp_buf, (uint8_t*)&modem_info.tx_buf[len], modem_info.tx_buf_bytes);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8004212:	4a0c      	ldr	r2, [pc, #48]	; (8004244 <modem_RemTxData+0x6c>)
 8004214:	1899      	adds	r1, r3, r2
 8004216:	4b0b      	ldr	r3, [pc, #44]	; (8004244 <modem_RemTxData+0x6c>)
 8004218:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 800421c:	f107 0308 	add.w	r3, r7, #8
 8004220:	4618      	mov	r0, r3
 8004222:	f007 fa29 	bl	800b678 <memcpy>
	memcpy((uint8_t*)modem_info.tx_buf, tmp_buf, modem_info.tx_buf_bytes);
 8004226:	4b07      	ldr	r3, [pc, #28]	; (8004244 <modem_RemTxData+0x6c>)
 8004228:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 800422c:	f107 0308 	add.w	r3, r7, #8
 8004230:	4619      	mov	r1, r3
 8004232:	4805      	ldr	r0, [pc, #20]	; (8004248 <modem_RemTxData+0x70>)
 8004234:	f007 fa20 	bl	800b678 <memcpy>

	return;
 8004238:	e000      	b.n	800423c <modem_RemTxData+0x64>
		return;
 800423a:	bf00      	nop
}
 800423c:	3788      	adds	r7, #136	; 0x88
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	200006b8 	.word	0x200006b8
 8004248:	200007d0 	.word	0x200007d0

0800424c <motor_Timer>:
volatile motor_infoTypeDef motor_info;

int32_t motor_map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max);

void motor_Timer(uint32_t res)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
#ifdef NO_MOTOR
	return;
#endif //NO_MOTOR

	for( uint8_t i = 0; i < MOTOR_TMR_NUM; i++ )
 8004254:	2300      	movs	r3, #0
 8004256:	73fb      	strb	r3, [r7, #15]
 8004258:	e016      	b.n	8004288 <motor_Timer+0x3c>
	{
		if( motor_info.timer[i] > 0 ){
 800425a:	7bfb      	ldrb	r3, [r7, #15]
 800425c:	4a0f      	ldr	r2, [pc, #60]	; (800429c <motor_Timer+0x50>)
 800425e:	3304      	adds	r3, #4
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4413      	add	r3, r2
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00b      	beq.n	8004282 <motor_Timer+0x36>
			motor_info.timer[i]--;
 800426a:	7bfa      	ldrb	r2, [r7, #15]
 800426c:	490b      	ldr	r1, [pc, #44]	; (800429c <motor_Timer+0x50>)
 800426e:	1d13      	adds	r3, r2, #4
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	440b      	add	r3, r1
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	1e59      	subs	r1, r3, #1
 8004278:	4808      	ldr	r0, [pc, #32]	; (800429c <motor_Timer+0x50>)
 800427a:	1d13      	adds	r3, r2, #4
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	4403      	add	r3, r0
 8004280:	6059      	str	r1, [r3, #4]
	for( uint8_t i = 0; i < MOTOR_TMR_NUM; i++ )
 8004282:	7bfb      	ldrb	r3, [r7, #15]
 8004284:	3301      	adds	r3, #1
 8004286:	73fb      	strb	r3, [r7, #15]
 8004288:	7bfb      	ldrb	r3, [r7, #15]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0e5      	beq.n	800425a <motor_Timer+0xe>
		}
	}

	return;
 800428e:	bf00      	nop
}
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	20000874 	.word	0x20000874

080042a0 <motor_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void motor_InitTask()
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
#ifdef NO_MOTOR
	return;
#endif //NO_MOTOR

	motor_info.motors[MOTOR_MAIN].tim = &htim3;
 80042a6:	4b22      	ldr	r3, [pc, #136]	; (8004330 <motor_InitTask+0x90>)
 80042a8:	4a22      	ldr	r2, [pc, #136]	; (8004334 <motor_InitTask+0x94>)
 80042aa:	601a      	str	r2, [r3, #0]
	motor_info.motors[MOTOR_MAIN].timch = TIM_CHANNEL_3;
 80042ac:	4b20      	ldr	r3, [pc, #128]	; (8004330 <motor_InitTask+0x90>)
 80042ae:	2208      	movs	r2, #8
 80042b0:	605a      	str	r2, [r3, #4]
	motor_info.motors[MOTOR_MAIN].cur_torq = 0;
 80042b2:	4b1f      	ldr	r3, [pc, #124]	; (8004330 <motor_InitTask+0x90>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	731a      	strb	r2, [r3, #12]
	motor_info.motors[MOTOR_MAIN].min_pwm = 535;
 80042b8:	4b1d      	ldr	r3, [pc, #116]	; (8004330 <motor_InitTask+0x90>)
 80042ba:	f240 2217 	movw	r2, #535	; 0x217
 80042be:	821a      	strh	r2, [r3, #16]
	motor_info.motors[MOTOR_MAIN].idle_pwm = 426;
 80042c0:	4b1b      	ldr	r3, [pc, #108]	; (8004330 <motor_InitTask+0x90>)
 80042c2:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80042c6:	81da      	strh	r2, [r3, #14]
	motor_info.motors[MOTOR_MAIN].cur_pwm = motor_info.motors[MOTOR_MAIN].idle_pwm;
 80042c8:	4b19      	ldr	r3, [pc, #100]	; (8004330 <motor_InitTask+0x90>)
 80042ca:	89db      	ldrh	r3, [r3, #14]
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	4b18      	ldr	r3, [pc, #96]	; (8004330 <motor_InitTask+0x90>)
 80042d0:	815a      	strh	r2, [r3, #10]
	motor_info.motors[MOTOR_MAIN].max_pwm = 950;
 80042d2:	4b17      	ldr	r3, [pc, #92]	; (8004330 <motor_InitTask+0x90>)
 80042d4:	f240 32b6 	movw	r2, #950	; 0x3b6
 80042d8:	825a      	strh	r2, [r3, #18]
	motor_info.motors[MOTOR_MAIN].enable = 1;
 80042da:	4b15      	ldr	r3, [pc, #84]	; (8004330 <motor_InitTask+0x90>)
 80042dc:	2201      	movs	r2, #1
 80042de:	721a      	strb	r2, [r3, #8]

	//Initialize beginning state
	for( uint8_t i = 0; i < MOTORS_NUM; i++ )
 80042e0:	2300      	movs	r3, #0
 80042e2:	71fb      	strb	r3, [r7, #7]
 80042e4:	e016      	b.n	8004314 <motor_InitTask+0x74>
	{
		HAL_TIM_PWM_Start(motor_info.motors[i].tim, motor_info.motors[i].timch);
 80042e6:	79fa      	ldrb	r2, [r7, #7]
 80042e8:	4911      	ldr	r1, [pc, #68]	; (8004330 <motor_InitTask+0x90>)
 80042ea:	4613      	mov	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4413      	add	r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	440b      	add	r3, r1
 80042f4:	6818      	ldr	r0, [r3, #0]
 80042f6:	79fa      	ldrb	r2, [r7, #7]
 80042f8:	490d      	ldr	r1, [pc, #52]	; (8004330 <motor_InitTask+0x90>)
 80042fa:	4613      	mov	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4413      	add	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	440b      	add	r3, r1
 8004304:	3304      	adds	r3, #4
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4619      	mov	r1, r3
 800430a:	f005 fa17 	bl	800973c <HAL_TIM_PWM_Start>
	for( uint8_t i = 0; i < MOTORS_NUM; i++ )
 800430e:	79fb      	ldrb	r3, [r7, #7]
 8004310:	3301      	adds	r3, #1
 8004312:	71fb      	strb	r3, [r7, #7]
 8004314:	79fb      	ldrb	r3, [r7, #7]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d0e5      	beq.n	80042e6 <motor_InitTask+0x46>
	}

	motor_setTorque(MOTOR_MAIN, motor_info.motors[MOTOR_MAIN].cur_torq);
 800431a:	4b05      	ldr	r3, [pc, #20]	; (8004330 <motor_InitTask+0x90>)
 800431c:	7b1b      	ldrb	r3, [r3, #12]
 800431e:	b2db      	uxtb	r3, r3
 8004320:	4619      	mov	r1, r3
 8004322:	2000      	movs	r0, #0
 8004324:	f000 f92e 	bl	8004584 <motor_setTorque>

	return;
 8004328:	bf00      	nop
}
 800432a:	3708      	adds	r7, #8
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	20000874 	.word	0x20000874
 8004334:	200005a0 	.word	0x200005a0

08004338 <motor_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void motor_Task(void)
{
 8004338:	b480      	push	{r7}
 800433a:	af00      	add	r7, sp, #0
#ifdef NO_MOTOR
	return;
#endif //NO_MOTOR

	return;
 800433c:	bf00      	nop
}
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
	...

08004348 <motor_setEnable>:

void motor_setEnable(uint8_t motor, uint8_t ena)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	4603      	mov	r3, r0
 8004350:	460a      	mov	r2, r1
 8004352:	71fb      	strb	r3, [r7, #7]
 8004354:	4613      	mov	r3, r2
 8004356:	71bb      	strb	r3, [r7, #6]
#ifdef NO_MOTOR
	return;
#endif //NO_MOTOR

	if( motor >= MOTORS_NUM ){
 8004358:	79fb      	ldrb	r3, [r7, #7]
 800435a:	2b00      	cmp	r3, #0
 800435c:	f040 8109 	bne.w	8004572 <motor_setEnable+0x22a>
		return;
	}

	motor_info.motors[motor].enable = ena;
 8004360:	79fa      	ldrb	r2, [r7, #7]
 8004362:	4987      	ldr	r1, [pc, #540]	; (8004580 <motor_setEnable+0x238>)
 8004364:	4613      	mov	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4413      	add	r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	440b      	add	r3, r1
 800436e:	3308      	adds	r3, #8
 8004370:	79ba      	ldrb	r2, [r7, #6]
 8004372:	701a      	strb	r2, [r3, #0]

	if( motor_info.motors[motor].enable == 1 ){
 8004374:	79fa      	ldrb	r2, [r7, #7]
 8004376:	4982      	ldr	r1, [pc, #520]	; (8004580 <motor_setEnable+0x238>)
 8004378:	4613      	mov	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	440b      	add	r3, r1
 8004382:	3308      	adds	r3, #8
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2b01      	cmp	r3, #1
 800438a:	d178      	bne.n	800447e <motor_setEnable+0x136>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 800438c:	79fa      	ldrb	r2, [r7, #7]
 800438e:	497c      	ldr	r1, [pc, #496]	; (8004580 <motor_setEnable+0x238>)
 8004390:	4613      	mov	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4413      	add	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	440b      	add	r3, r1
 800439a:	3304      	adds	r3, #4
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d115      	bne.n	80043ce <motor_setEnable+0x86>
 80043a2:	79fa      	ldrb	r2, [r7, #7]
 80043a4:	4976      	ldr	r1, [pc, #472]	; (8004580 <motor_setEnable+0x238>)
 80043a6:	4613      	mov	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	440b      	add	r3, r1
 80043b0:	330a      	adds	r3, #10
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	b298      	uxth	r0, r3
 80043b6:	79fa      	ldrb	r2, [r7, #7]
 80043b8:	4971      	ldr	r1, [pc, #452]	; (8004580 <motor_setEnable+0x238>)
 80043ba:	4613      	mov	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	440b      	add	r3, r1
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4602      	mov	r2, r0
 80043ca:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else{
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].idle_pwm);
	}

	return;
 80043cc:	e0d2      	b.n	8004574 <motor_setEnable+0x22c>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 80043ce:	79fa      	ldrb	r2, [r7, #7]
 80043d0:	496b      	ldr	r1, [pc, #428]	; (8004580 <motor_setEnable+0x238>)
 80043d2:	4613      	mov	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	4413      	add	r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	440b      	add	r3, r1
 80043dc:	3304      	adds	r3, #4
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2b04      	cmp	r3, #4
 80043e2:	d115      	bne.n	8004410 <motor_setEnable+0xc8>
 80043e4:	79fa      	ldrb	r2, [r7, #7]
 80043e6:	4966      	ldr	r1, [pc, #408]	; (8004580 <motor_setEnable+0x238>)
 80043e8:	4613      	mov	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4413      	add	r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	440b      	add	r3, r1
 80043f2:	330a      	adds	r3, #10
 80043f4:	881b      	ldrh	r3, [r3, #0]
 80043f6:	b298      	uxth	r0, r3
 80043f8:	79fa      	ldrb	r2, [r7, #7]
 80043fa:	4961      	ldr	r1, [pc, #388]	; (8004580 <motor_setEnable+0x238>)
 80043fc:	4613      	mov	r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4413      	add	r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	440b      	add	r3, r1
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	4603      	mov	r3, r0
 800440c:	6393      	str	r3, [r2, #56]	; 0x38
 800440e:	e0af      	b.n	8004570 <motor_setEnable+0x228>
 8004410:	79fa      	ldrb	r2, [r7, #7]
 8004412:	495b      	ldr	r1, [pc, #364]	; (8004580 <motor_setEnable+0x238>)
 8004414:	4613      	mov	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4413      	add	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	440b      	add	r3, r1
 800441e:	3304      	adds	r3, #4
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2b08      	cmp	r3, #8
 8004424:	d115      	bne.n	8004452 <motor_setEnable+0x10a>
 8004426:	79fa      	ldrb	r2, [r7, #7]
 8004428:	4955      	ldr	r1, [pc, #340]	; (8004580 <motor_setEnable+0x238>)
 800442a:	4613      	mov	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4413      	add	r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	440b      	add	r3, r1
 8004434:	330a      	adds	r3, #10
 8004436:	881b      	ldrh	r3, [r3, #0]
 8004438:	b298      	uxth	r0, r3
 800443a:	79fa      	ldrb	r2, [r7, #7]
 800443c:	4950      	ldr	r1, [pc, #320]	; (8004580 <motor_setEnable+0x238>)
 800443e:	4613      	mov	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4413      	add	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	440b      	add	r3, r1
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	4603      	mov	r3, r0
 800444e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8004450:	e08e      	b.n	8004570 <motor_setEnable+0x228>
 8004452:	79fa      	ldrb	r2, [r7, #7]
 8004454:	494a      	ldr	r1, [pc, #296]	; (8004580 <motor_setEnable+0x238>)
 8004456:	4613      	mov	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4413      	add	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	440b      	add	r3, r1
 8004460:	330a      	adds	r3, #10
 8004462:	881b      	ldrh	r3, [r3, #0]
 8004464:	b298      	uxth	r0, r3
 8004466:	79fa      	ldrb	r2, [r7, #7]
 8004468:	4945      	ldr	r1, [pc, #276]	; (8004580 <motor_setEnable+0x238>)
 800446a:	4613      	mov	r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	4413      	add	r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	440b      	add	r3, r1
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	4603      	mov	r3, r0
 800447a:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 800447c:	e07a      	b.n	8004574 <motor_setEnable+0x22c>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].idle_pwm);
 800447e:	79fa      	ldrb	r2, [r7, #7]
 8004480:	493f      	ldr	r1, [pc, #252]	; (8004580 <motor_setEnable+0x238>)
 8004482:	4613      	mov	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4413      	add	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	440b      	add	r3, r1
 800448c:	3304      	adds	r3, #4
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d115      	bne.n	80044c0 <motor_setEnable+0x178>
 8004494:	79fa      	ldrb	r2, [r7, #7]
 8004496:	493a      	ldr	r1, [pc, #232]	; (8004580 <motor_setEnable+0x238>)
 8004498:	4613      	mov	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4413      	add	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	440b      	add	r3, r1
 80044a2:	330e      	adds	r3, #14
 80044a4:	881b      	ldrh	r3, [r3, #0]
 80044a6:	b298      	uxth	r0, r3
 80044a8:	79fa      	ldrb	r2, [r7, #7]
 80044aa:	4935      	ldr	r1, [pc, #212]	; (8004580 <motor_setEnable+0x238>)
 80044ac:	4613      	mov	r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	440b      	add	r3, r1
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4602      	mov	r2, r0
 80044bc:	635a      	str	r2, [r3, #52]	; 0x34
	return;
 80044be:	e059      	b.n	8004574 <motor_setEnable+0x22c>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].idle_pwm);
 80044c0:	79fa      	ldrb	r2, [r7, #7]
 80044c2:	492f      	ldr	r1, [pc, #188]	; (8004580 <motor_setEnable+0x238>)
 80044c4:	4613      	mov	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4413      	add	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	440b      	add	r3, r1
 80044ce:	3304      	adds	r3, #4
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2b04      	cmp	r3, #4
 80044d4:	d115      	bne.n	8004502 <motor_setEnable+0x1ba>
 80044d6:	79fa      	ldrb	r2, [r7, #7]
 80044d8:	4929      	ldr	r1, [pc, #164]	; (8004580 <motor_setEnable+0x238>)
 80044da:	4613      	mov	r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4413      	add	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	440b      	add	r3, r1
 80044e4:	330e      	adds	r3, #14
 80044e6:	881b      	ldrh	r3, [r3, #0]
 80044e8:	b298      	uxth	r0, r3
 80044ea:	79fa      	ldrb	r2, [r7, #7]
 80044ec:	4924      	ldr	r1, [pc, #144]	; (8004580 <motor_setEnable+0x238>)
 80044ee:	4613      	mov	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	4413      	add	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	440b      	add	r3, r1
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	4603      	mov	r3, r0
 80044fe:	6393      	str	r3, [r2, #56]	; 0x38
	return;
 8004500:	e038      	b.n	8004574 <motor_setEnable+0x22c>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].idle_pwm);
 8004502:	79fa      	ldrb	r2, [r7, #7]
 8004504:	491e      	ldr	r1, [pc, #120]	; (8004580 <motor_setEnable+0x238>)
 8004506:	4613      	mov	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	4413      	add	r3, r2
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	440b      	add	r3, r1
 8004510:	3304      	adds	r3, #4
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2b08      	cmp	r3, #8
 8004516:	d115      	bne.n	8004544 <motor_setEnable+0x1fc>
 8004518:	79fa      	ldrb	r2, [r7, #7]
 800451a:	4919      	ldr	r1, [pc, #100]	; (8004580 <motor_setEnable+0x238>)
 800451c:	4613      	mov	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4413      	add	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	440b      	add	r3, r1
 8004526:	330e      	adds	r3, #14
 8004528:	881b      	ldrh	r3, [r3, #0]
 800452a:	b298      	uxth	r0, r3
 800452c:	79fa      	ldrb	r2, [r7, #7]
 800452e:	4914      	ldr	r1, [pc, #80]	; (8004580 <motor_setEnable+0x238>)
 8004530:	4613      	mov	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	440b      	add	r3, r1
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	4603      	mov	r3, r0
 8004540:	63d3      	str	r3, [r2, #60]	; 0x3c
	return;
 8004542:	e017      	b.n	8004574 <motor_setEnable+0x22c>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].idle_pwm);
 8004544:	79fa      	ldrb	r2, [r7, #7]
 8004546:	490e      	ldr	r1, [pc, #56]	; (8004580 <motor_setEnable+0x238>)
 8004548:	4613      	mov	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	4413      	add	r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	440b      	add	r3, r1
 8004552:	330e      	adds	r3, #14
 8004554:	881b      	ldrh	r3, [r3, #0]
 8004556:	b298      	uxth	r0, r3
 8004558:	79fa      	ldrb	r2, [r7, #7]
 800455a:	4909      	ldr	r1, [pc, #36]	; (8004580 <motor_setEnable+0x238>)
 800455c:	4613      	mov	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4413      	add	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	440b      	add	r3, r1
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	4603      	mov	r3, r0
 800456c:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 800456e:	e001      	b.n	8004574 <motor_setEnable+0x22c>
 8004570:	e000      	b.n	8004574 <motor_setEnable+0x22c>
		return;
 8004572:	bf00      	nop
}
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	20000874 	.word	0x20000874

08004584 <motor_setTorque>:

void motor_setTorque(uint8_t motor, uint8_t torq)
{
 8004584:	b590      	push	{r4, r7, lr}
 8004586:	b085      	sub	sp, #20
 8004588:	af02      	add	r7, sp, #8
 800458a:	4603      	mov	r3, r0
 800458c:	460a      	mov	r2, r1
 800458e:	71fb      	strb	r3, [r7, #7]
 8004590:	4613      	mov	r3, r2
 8004592:	71bb      	strb	r3, [r7, #6]
#ifdef NO_MOTOR
	return;
#endif //NO_MOTOR

	if( motor >= MOTORS_NUM ){
 8004594:	79fb      	ldrb	r3, [r7, #7]
 8004596:	2b00      	cmp	r3, #0
 8004598:	f040 80d9 	bne.w	800474e <motor_setTorque+0x1ca>
		return;
	}

	motor_info.motors[motor].cur_torq = torq;
 800459c:	79fa      	ldrb	r2, [r7, #7]
 800459e:	496f      	ldr	r1, [pc, #444]	; (800475c <motor_setTorque+0x1d8>)
 80045a0:	4613      	mov	r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	4413      	add	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	440b      	add	r3, r1
 80045aa:	330c      	adds	r3, #12
 80045ac:	79ba      	ldrb	r2, [r7, #6]
 80045ae:	701a      	strb	r2, [r3, #0]
	if( torq == 0 ){
 80045b0:	79bb      	ldrb	r3, [r7, #6]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d114      	bne.n	80045e0 <motor_setTorque+0x5c>
		motor_info.motors[motor].cur_pwm = motor_info.motors[motor].idle_pwm;
 80045b6:	79f9      	ldrb	r1, [r7, #7]
 80045b8:	79fa      	ldrb	r2, [r7, #7]
 80045ba:	4868      	ldr	r0, [pc, #416]	; (800475c <motor_setTorque+0x1d8>)
 80045bc:	460b      	mov	r3, r1
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	440b      	add	r3, r1
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4403      	add	r3, r0
 80045c6:	330e      	adds	r3, #14
 80045c8:	881b      	ldrh	r3, [r3, #0]
 80045ca:	b298      	uxth	r0, r3
 80045cc:	4963      	ldr	r1, [pc, #396]	; (800475c <motor_setTorque+0x1d8>)
 80045ce:	4613      	mov	r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4413      	add	r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	440b      	add	r3, r1
 80045d8:	330a      	adds	r3, #10
 80045da:	4602      	mov	r2, r0
 80045dc:	801a      	strh	r2, [r3, #0]
 80045de:	e031      	b.n	8004644 <motor_setTorque+0xc0>
	}
	else
	{
		motor_info.motors[motor].cur_pwm =
				motor_map((int32_t)motor_info.motors[motor].cur_torq,
 80045e0:	79fa      	ldrb	r2, [r7, #7]
 80045e2:	495e      	ldr	r1, [pc, #376]	; (800475c <motor_setTorque+0x1d8>)
 80045e4:	4613      	mov	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4413      	add	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	440b      	add	r3, r1
 80045ee:	330c      	adds	r3, #12
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	4618      	mov	r0, r3
							1, 100,
							(int32_t)motor_info.motors[motor].min_pwm,
 80045f6:	79fa      	ldrb	r2, [r7, #7]
 80045f8:	4958      	ldr	r1, [pc, #352]	; (800475c <motor_setTorque+0x1d8>)
 80045fa:	4613      	mov	r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	4413      	add	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	440b      	add	r3, r1
 8004604:	3310      	adds	r3, #16
 8004606:	881b      	ldrh	r3, [r3, #0]
 8004608:	b29b      	uxth	r3, r3
				motor_map((int32_t)motor_info.motors[motor].cur_torq,
 800460a:	461c      	mov	r4, r3
							(int32_t)motor_info.motors[motor].max_pwm);
 800460c:	79fa      	ldrb	r2, [r7, #7]
 800460e:	4953      	ldr	r1, [pc, #332]	; (800475c <motor_setTorque+0x1d8>)
 8004610:	4613      	mov	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	440b      	add	r3, r1
 800461a:	3312      	adds	r3, #18
 800461c:	881b      	ldrh	r3, [r3, #0]
 800461e:	b29b      	uxth	r3, r3
				motor_map((int32_t)motor_info.motors[motor].cur_torq,
 8004620:	9300      	str	r3, [sp, #0]
 8004622:	4623      	mov	r3, r4
 8004624:	2264      	movs	r2, #100	; 0x64
 8004626:	2101      	movs	r1, #1
 8004628:	f000 f89a 	bl	8004760 <motor_map>
 800462c:	4603      	mov	r3, r0
		motor_info.motors[motor].cur_pwm =
 800462e:	79fa      	ldrb	r2, [r7, #7]
 8004630:	b298      	uxth	r0, r3
 8004632:	494a      	ldr	r1, [pc, #296]	; (800475c <motor_setTorque+0x1d8>)
 8004634:	4613      	mov	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4413      	add	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	440b      	add	r3, r1
 800463e:	330a      	adds	r3, #10
 8004640:	4602      	mov	r2, r0
 8004642:	801a      	strh	r2, [r3, #0]
	}
	if( motor_info.motors[motor].enable == 1 ){
 8004644:	79fa      	ldrb	r2, [r7, #7]
 8004646:	4945      	ldr	r1, [pc, #276]	; (800475c <motor_setTorque+0x1d8>)
 8004648:	4613      	mov	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4413      	add	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	440b      	add	r3, r1
 8004652:	3308      	adds	r3, #8
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b01      	cmp	r3, #1
 800465a:	d17a      	bne.n	8004752 <motor_setTorque+0x1ce>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 800465c:	79fa      	ldrb	r2, [r7, #7]
 800465e:	493f      	ldr	r1, [pc, #252]	; (800475c <motor_setTorque+0x1d8>)
 8004660:	4613      	mov	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	440b      	add	r3, r1
 800466a:	3304      	adds	r3, #4
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d115      	bne.n	800469e <motor_setTorque+0x11a>
 8004672:	79fa      	ldrb	r2, [r7, #7]
 8004674:	4939      	ldr	r1, [pc, #228]	; (800475c <motor_setTorque+0x1d8>)
 8004676:	4613      	mov	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4413      	add	r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	440b      	add	r3, r1
 8004680:	330a      	adds	r3, #10
 8004682:	881b      	ldrh	r3, [r3, #0]
 8004684:	b298      	uxth	r0, r3
 8004686:	79fa      	ldrb	r2, [r7, #7]
 8004688:	4934      	ldr	r1, [pc, #208]	; (800475c <motor_setTorque+0x1d8>)
 800468a:	4613      	mov	r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	4413      	add	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	440b      	add	r3, r1
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4602      	mov	r2, r0
 800469a:	635a      	str	r2, [r3, #52]	; 0x34
	}

	return;
 800469c:	e059      	b.n	8004752 <motor_setTorque+0x1ce>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 800469e:	79fa      	ldrb	r2, [r7, #7]
 80046a0:	492e      	ldr	r1, [pc, #184]	; (800475c <motor_setTorque+0x1d8>)
 80046a2:	4613      	mov	r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4413      	add	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	440b      	add	r3, r1
 80046ac:	3304      	adds	r3, #4
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2b04      	cmp	r3, #4
 80046b2:	d115      	bne.n	80046e0 <motor_setTorque+0x15c>
 80046b4:	79fa      	ldrb	r2, [r7, #7]
 80046b6:	4929      	ldr	r1, [pc, #164]	; (800475c <motor_setTorque+0x1d8>)
 80046b8:	4613      	mov	r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	4413      	add	r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	440b      	add	r3, r1
 80046c2:	330a      	adds	r3, #10
 80046c4:	881b      	ldrh	r3, [r3, #0]
 80046c6:	b298      	uxth	r0, r3
 80046c8:	79fa      	ldrb	r2, [r7, #7]
 80046ca:	4924      	ldr	r1, [pc, #144]	; (800475c <motor_setTorque+0x1d8>)
 80046cc:	4613      	mov	r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4413      	add	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	440b      	add	r3, r1
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	4603      	mov	r3, r0
 80046dc:	6393      	str	r3, [r2, #56]	; 0x38
	return;
 80046de:	e038      	b.n	8004752 <motor_setTorque+0x1ce>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 80046e0:	79fa      	ldrb	r2, [r7, #7]
 80046e2:	491e      	ldr	r1, [pc, #120]	; (800475c <motor_setTorque+0x1d8>)
 80046e4:	4613      	mov	r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4413      	add	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	440b      	add	r3, r1
 80046ee:	3304      	adds	r3, #4
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2b08      	cmp	r3, #8
 80046f4:	d115      	bne.n	8004722 <motor_setTorque+0x19e>
 80046f6:	79fa      	ldrb	r2, [r7, #7]
 80046f8:	4918      	ldr	r1, [pc, #96]	; (800475c <motor_setTorque+0x1d8>)
 80046fa:	4613      	mov	r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	4413      	add	r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	440b      	add	r3, r1
 8004704:	330a      	adds	r3, #10
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	b298      	uxth	r0, r3
 800470a:	79fa      	ldrb	r2, [r7, #7]
 800470c:	4913      	ldr	r1, [pc, #76]	; (800475c <motor_setTorque+0x1d8>)
 800470e:	4613      	mov	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	4413      	add	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	440b      	add	r3, r1
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	4603      	mov	r3, r0
 800471e:	63d3      	str	r3, [r2, #60]	; 0x3c
	return;
 8004720:	e017      	b.n	8004752 <motor_setTorque+0x1ce>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 8004722:	79fa      	ldrb	r2, [r7, #7]
 8004724:	490d      	ldr	r1, [pc, #52]	; (800475c <motor_setTorque+0x1d8>)
 8004726:	4613      	mov	r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	4413      	add	r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	440b      	add	r3, r1
 8004730:	330a      	adds	r3, #10
 8004732:	881b      	ldrh	r3, [r3, #0]
 8004734:	b298      	uxth	r0, r3
 8004736:	79fa      	ldrb	r2, [r7, #7]
 8004738:	4908      	ldr	r1, [pc, #32]	; (800475c <motor_setTorque+0x1d8>)
 800473a:	4613      	mov	r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4413      	add	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	440b      	add	r3, r1
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	4603      	mov	r3, r0
 800474a:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 800474c:	e001      	b.n	8004752 <motor_setTorque+0x1ce>
		return;
 800474e:	bf00      	nop
 8004750:	e000      	b.n	8004754 <motor_setTorque+0x1d0>
	return;
 8004752:	bf00      	nop
}
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	bd90      	pop	{r4, r7, pc}
 800475a:	bf00      	nop
 800475c:	20000874 	.word	0x20000874

08004760 <motor_map>:
  * 	toLow: the lower bound of the value’s target range.
  * 	toHigh: the upper bound of the value’s target range.
  * @retval The mapped value.
  */
int32_t motor_map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
 800476c:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	69b9      	ldr	r1, [r7, #24]
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	1a8a      	subs	r2, r1, r2
 800477a:	fb03 f202 	mul.w	r2, r3, r2
 800477e:	6879      	ldr	r1, [r7, #4]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	1acb      	subs	r3, r1, r3
 8004784:	fb92 f2f3 	sdiv	r2, r2, r3
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	4413      	add	r3, r2
}
 800478c:	4618      	mov	r0, r3
 800478e:	3714      	adds	r7, #20
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <cfg_NodeMotorVarProp>:

/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeMotorVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 8004798:	b480      	push	{r7}
 800479a:	b087      	sub	sp, #28
 800479c:	af00      	add	r7, sp, #0
 800479e:	4603      	mov	r3, r0
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
 80047a4:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 80047a6:	89fb      	ldrh	r3, [r7, #14]
 80047a8:	2b05      	cmp	r3, #5
 80047aa:	d821      	bhi.n	80047f0 <cfg_NodeMotorVarProp+0x58>
 80047ac:	a201      	add	r2, pc, #4	; (adr r2, 80047b4 <cfg_NodeMotorVarProp+0x1c>)
 80047ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b2:	bf00      	nop
 80047b4:	080047cd 	.word	0x080047cd
 80047b8:	080047d3 	.word	0x080047d3
 80047bc:	080047d9 	.word	0x080047d9
 80047c0:	080047df 	.word	0x080047df
 80047c4:	080047e5 	.word	0x080047e5
 80047c8:	080047eb 	.word	0x080047eb
	{
		case MOTOR_ENA:				str = "Enable"; break;
 80047cc:	4b2e      	ldr	r3, [pc, #184]	; (8004888 <cfg_NodeMotorVarProp+0xf0>)
 80047ce:	617b      	str	r3, [r7, #20]
 80047d0:	e010      	b.n	80047f4 <cfg_NodeMotorVarProp+0x5c>
		case MOTOR_CUR_TORQ:		str = "Current torque"; break;
 80047d2:	4b2e      	ldr	r3, [pc, #184]	; (800488c <cfg_NodeMotorVarProp+0xf4>)
 80047d4:	617b      	str	r3, [r7, #20]
 80047d6:	e00d      	b.n	80047f4 <cfg_NodeMotorVarProp+0x5c>
		case MOTOR_CUR_PWM:			str = "Current PWM"; break;
 80047d8:	4b2d      	ldr	r3, [pc, #180]	; (8004890 <cfg_NodeMotorVarProp+0xf8>)
 80047da:	617b      	str	r3, [r7, #20]
 80047dc:	e00a      	b.n	80047f4 <cfg_NodeMotorVarProp+0x5c>
		case MOTOR_IDLE_PWM:		str = "Idle PWM"; break;
 80047de:	4b2d      	ldr	r3, [pc, #180]	; (8004894 <cfg_NodeMotorVarProp+0xfc>)
 80047e0:	617b      	str	r3, [r7, #20]
 80047e2:	e007      	b.n	80047f4 <cfg_NodeMotorVarProp+0x5c>
		case MOTOR_MIN_PWM:			str = "Min PWM"; break;
 80047e4:	4b2c      	ldr	r3, [pc, #176]	; (8004898 <cfg_NodeMotorVarProp+0x100>)
 80047e6:	617b      	str	r3, [r7, #20]
 80047e8:	e004      	b.n	80047f4 <cfg_NodeMotorVarProp+0x5c>
		case MOTOR_MAX_PWM:			str = "Max PWM"; break;
 80047ea:	4b2c      	ldr	r3, [pc, #176]	; (800489c <cfg_NodeMotorVarProp+0x104>)
 80047ec:	617b      	str	r3, [r7, #20]
 80047ee:	e001      	b.n	80047f4 <cfg_NodeMotorVarProp+0x5c>
		default: return CFG_ERROR_VARID;
 80047f0:	2302      	movs	r3, #2
 80047f2:	e043      	b.n	800487c <cfg_NodeMotorVarProp+0xe4>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00f      	beq.n	800481a <cfg_NodeMotorVarProp+0x82>
 80047fa:	e007      	b.n	800480c <cfg_NodeMotorVarProp+0x74>
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	1c53      	adds	r3, r2, #1
 8004800:	617b      	str	r3, [r7, #20]
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	1c59      	adds	r1, r3, #1
 8004806:	60b9      	str	r1, [r7, #8]
 8004808:	7812      	ldrb	r2, [r2, #0]
 800480a:	701a      	strb	r2, [r3, #0]
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1f3      	bne.n	80047fc <cfg_NodeMotorVarProp+0x64>
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	2200      	movs	r2, #0
 8004818:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d02b      	beq.n	8004878 <cfg_NodeMotorVarProp+0xe0>
 8004820:	89fb      	ldrh	r3, [r7, #14]
 8004822:	2b05      	cmp	r3, #5
 8004824:	d826      	bhi.n	8004874 <cfg_NodeMotorVarProp+0xdc>
 8004826:	a201      	add	r2, pc, #4	; (adr r2, 800482c <cfg_NodeMotorVarProp+0x94>)
 8004828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800482c:	08004845 	.word	0x08004845
 8004830:	0800484d 	.word	0x0800484d
 8004834:	08004855 	.word	0x08004855
 8004838:	0800485d 	.word	0x0800485d
 800483c:	08004865 	.word	0x08004865
 8004840:	0800486d 	.word	0x0800486d
	{
		case MOTOR_ENA:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_CONST; break;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2223      	movs	r2, #35	; 0x23
 8004848:	801a      	strh	r2, [r3, #0]
 800484a:	e016      	b.n	800487a <cfg_NodeMotorVarProp+0xe2>
		case MOTOR_CUR_TORQ:		*prop = CFG_VAR_TYPE_UINT; break;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2202      	movs	r2, #2
 8004850:	801a      	strh	r2, [r3, #0]
 8004852:	e012      	b.n	800487a <cfg_NodeMotorVarProp+0xe2>
		case MOTOR_CUR_PWM:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2212      	movs	r2, #18
 8004858:	801a      	strh	r2, [r3, #0]
 800485a:	e00e      	b.n	800487a <cfg_NodeMotorVarProp+0xe2>
		case MOTOR_IDLE_PWM:		*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2222      	movs	r2, #34	; 0x22
 8004860:	801a      	strh	r2, [r3, #0]
 8004862:	e00a      	b.n	800487a <cfg_NodeMotorVarProp+0xe2>
		case MOTOR_MIN_PWM:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2222      	movs	r2, #34	; 0x22
 8004868:	801a      	strh	r2, [r3, #0]
 800486a:	e006      	b.n	800487a <cfg_NodeMotorVarProp+0xe2>
		case MOTOR_MAX_PWM:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2222      	movs	r2, #34	; 0x22
 8004870:	801a      	strh	r2, [r3, #0]
 8004872:	e002      	b.n	800487a <cfg_NodeMotorVarProp+0xe2>
		default: return CFG_ERROR_VARID;
 8004874:	2302      	movs	r3, #2
 8004876:	e001      	b.n	800487c <cfg_NodeMotorVarProp+0xe4>
	}
	return CFG_ERROR_NONE;
 8004878:	bf00      	nop
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	371c      	adds	r7, #28
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr
 8004888:	0800b7c0 	.word	0x0800b7c0
 800488c:	0800b7c8 	.word	0x0800b7c8
 8004890:	0800b7d8 	.word	0x0800b7d8
 8004894:	0800b7e4 	.word	0x0800b7e4
 8004898:	0800b7f0 	.word	0x0800b7f0
 800489c:	0800b7f8 	.word	0x0800b7f8

080048a0 <cfg_NodeMotorVarGet>:

uint16_t cfg_NodeMotorVarGet(uint16_t varid, void *value)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	4603      	mov	r3, r0
 80048a8:	6039      	str	r1, [r7, #0]
 80048aa:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d03e      	beq.n	8004930 <cfg_NodeMotorVarGet+0x90>
 80048b2:	88fb      	ldrh	r3, [r7, #6]
 80048b4:	2b05      	cmp	r3, #5
 80048b6:	d839      	bhi.n	800492c <cfg_NodeMotorVarGet+0x8c>
 80048b8:	a201      	add	r2, pc, #4	; (adr r2, 80048c0 <cfg_NodeMotorVarGet+0x20>)
 80048ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048be:	bf00      	nop
 80048c0:	080048d9 	.word	0x080048d9
 80048c4:	080048e7 	.word	0x080048e7
 80048c8:	080048f5 	.word	0x080048f5
 80048cc:	08004903 	.word	0x08004903
 80048d0:	08004911 	.word	0x08004911
 80048d4:	0800491f 	.word	0x0800491f
	{
		case MOTOR_ENA: 				*(uint32_t*)value = (uint32_t)motor_info.motors[MOTOR_MAIN].enable; break;
 80048d8:	4b19      	ldr	r3, [pc, #100]	; (8004940 <cfg_NodeMotorVarGet+0xa0>)
 80048da:	7a1b      	ldrb	r3, [r3, #8]
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	461a      	mov	r2, r3
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	e025      	b.n	8004932 <cfg_NodeMotorVarGet+0x92>
		case MOTOR_CUR_TORQ: 			*(uint32_t*)value = (uint32_t)motor_info.motors[MOTOR_MAIN].cur_torq; break;
 80048e6:	4b16      	ldr	r3, [pc, #88]	; (8004940 <cfg_NodeMotorVarGet+0xa0>)
 80048e8:	7b1b      	ldrb	r3, [r3, #12]
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	461a      	mov	r2, r3
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	e01e      	b.n	8004932 <cfg_NodeMotorVarGet+0x92>
		case MOTOR_CUR_PWM: 			*(uint32_t*)value = (uint32_t)motor_info.motors[MOTOR_MAIN].cur_pwm; break;
 80048f4:	4b12      	ldr	r3, [pc, #72]	; (8004940 <cfg_NodeMotorVarGet+0xa0>)
 80048f6:	895b      	ldrh	r3, [r3, #10]
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	461a      	mov	r2, r3
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	e017      	b.n	8004932 <cfg_NodeMotorVarGet+0x92>
		case MOTOR_IDLE_PWM: 			*(uint32_t*)value = (int32_t)motor_info.motors[MOTOR_MAIN].idle_pwm; break;
 8004902:	4b0f      	ldr	r3, [pc, #60]	; (8004940 <cfg_NodeMotorVarGet+0xa0>)
 8004904:	89db      	ldrh	r3, [r3, #14]
 8004906:	b29b      	uxth	r3, r3
 8004908:	461a      	mov	r2, r3
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	601a      	str	r2, [r3, #0]
 800490e:	e010      	b.n	8004932 <cfg_NodeMotorVarGet+0x92>
		case MOTOR_MIN_PWM: 			*(uint32_t*)value = (int32_t)motor_info.motors[MOTOR_MAIN].min_pwm; break;
 8004910:	4b0b      	ldr	r3, [pc, #44]	; (8004940 <cfg_NodeMotorVarGet+0xa0>)
 8004912:	8a1b      	ldrh	r3, [r3, #16]
 8004914:	b29b      	uxth	r3, r3
 8004916:	461a      	mov	r2, r3
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	601a      	str	r2, [r3, #0]
 800491c:	e009      	b.n	8004932 <cfg_NodeMotorVarGet+0x92>
		case MOTOR_MAX_PWM: 			*(uint32_t*)value = (uint32_t)motor_info.motors[MOTOR_MAIN].max_pwm; break;
 800491e:	4b08      	ldr	r3, [pc, #32]	; (8004940 <cfg_NodeMotorVarGet+0xa0>)
 8004920:	8a5b      	ldrh	r3, [r3, #18]
 8004922:	b29b      	uxth	r3, r3
 8004924:	461a      	mov	r2, r3
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	601a      	str	r2, [r3, #0]
 800492a:	e002      	b.n	8004932 <cfg_NodeMotorVarGet+0x92>
		default: return CFG_ERROR_VARID;
 800492c:	2302      	movs	r3, #2
 800492e:	e001      	b.n	8004934 <cfg_NodeMotorVarGet+0x94>
	}
	return CFG_ERROR_NONE;
 8004930:	bf00      	nop
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr
 8004940:	20000874 	.word	0x20000874

08004944 <cfg_NodeMotorVarSet>:

uint16_t cfg_NodeMotorVarSet(uint16_t varid, void *value)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	4603      	mov	r3, r0
 800494c:	6039      	str	r1, [r7, #0]
 800494e:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d036      	beq.n	80049c4 <cfg_NodeMotorVarSet+0x80>
 8004956:	88fb      	ldrh	r3, [r7, #6]
 8004958:	2b05      	cmp	r3, #5
 800495a:	d831      	bhi.n	80049c0 <cfg_NodeMotorVarSet+0x7c>
 800495c:	a201      	add	r2, pc, #4	; (adr r2, 8004964 <cfg_NodeMotorVarSet+0x20>)
 800495e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004962:	bf00      	nop
 8004964:	0800497d 	.word	0x0800497d
 8004968:	0800498d 	.word	0x0800498d
 800496c:	080049c9 	.word	0x080049c9
 8004970:	0800499d 	.word	0x0800499d
 8004974:	080049a9 	.word	0x080049a9
 8004978:	080049b5 	.word	0x080049b5
	{
		case MOTOR_ENA:				motor_setEnable(MOTOR_MAIN, (uint8_t)*(uint32_t*)value); break;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	b2db      	uxtb	r3, r3
 8004982:	4619      	mov	r1, r3
 8004984:	2000      	movs	r0, #0
 8004986:	f7ff fcdf 	bl	8004348 <motor_setEnable>
 800498a:	e01e      	b.n	80049ca <cfg_NodeMotorVarSet+0x86>
		case MOTOR_CUR_TORQ:		motor_setTorque(MOTOR_MAIN, (uint8_t)*(uint32_t*)value); break;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	b2db      	uxtb	r3, r3
 8004992:	4619      	mov	r1, r3
 8004994:	2000      	movs	r0, #0
 8004996:	f7ff fdf5 	bl	8004584 <motor_setTorque>
 800499a:	e016      	b.n	80049ca <cfg_NodeMotorVarSet+0x86>
		case MOTOR_CUR_PWM:			break;
		case MOTOR_IDLE_PWM:		motor_info.motors[MOTOR_MAIN].idle_pwm = (uint16_t)*(uint32_t*)value; break;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	4b0c      	ldr	r3, [pc, #48]	; (80049d4 <cfg_NodeMotorVarSet+0x90>)
 80049a4:	81da      	strh	r2, [r3, #14]
 80049a6:	e010      	b.n	80049ca <cfg_NodeMotorVarSet+0x86>
		case MOTOR_MIN_PWM:			motor_info.motors[MOTOR_MAIN].min_pwm = (uint16_t)*(uint32_t*)value; break;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	4b09      	ldr	r3, [pc, #36]	; (80049d4 <cfg_NodeMotorVarSet+0x90>)
 80049b0:	821a      	strh	r2, [r3, #16]
 80049b2:	e00a      	b.n	80049ca <cfg_NodeMotorVarSet+0x86>
		case MOTOR_MAX_PWM:			motor_info.motors[MOTOR_MAIN].max_pwm = (uint16_t)*(uint32_t*)value; break;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	4b06      	ldr	r3, [pc, #24]	; (80049d4 <cfg_NodeMotorVarSet+0x90>)
 80049bc:	825a      	strh	r2, [r3, #18]
 80049be:	e004      	b.n	80049ca <cfg_NodeMotorVarSet+0x86>
		default: return CFG_ERROR_VARID;
 80049c0:	2302      	movs	r3, #2
 80049c2:	e003      	b.n	80049cc <cfg_NodeMotorVarSet+0x88>
	}
	return CFG_ERROR_NONE;
 80049c4:	bf00      	nop
 80049c6:	e000      	b.n	80049ca <cfg_NodeMotorVarSet+0x86>
		case MOTOR_CUR_PWM:			break;
 80049c8:	bf00      	nop
	return CFG_ERROR_NONE;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	20000874 	.word	0x20000874

080049d8 <rc_Timer>:

uint16_t rc_ringBufRead16b(uint8_t *buf, uint16_t pos);
void rc_AddTxData(uint8_t *data, uint32_t len);

void rc_Timer(uint32_t res)
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
#ifdef NO_RC
	return;
#endif //NO_RC

	for( uint8_t i = 0; i < RC_TMR_NUM; i++ )
 80049e0:	2300      	movs	r3, #0
 80049e2:	73fb      	strb	r3, [r7, #15]
 80049e4:	e010      	b.n	8004a08 <rc_Timer+0x30>
	{
		if( rc_info.timer[i] > 0 ){
 80049e6:	7bfb      	ldrb	r3, [r7, #15]
 80049e8:	4a0c      	ldr	r2, [pc, #48]	; (8004a1c <rc_Timer+0x44>)
 80049ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d007      	beq.n	8004a02 <rc_Timer+0x2a>
			rc_info.timer[i]--;
 80049f2:	7bfb      	ldrb	r3, [r7, #15]
 80049f4:	4a09      	ldr	r2, [pc, #36]	; (8004a1c <rc_Timer+0x44>)
 80049f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80049fa:	3a01      	subs	r2, #1
 80049fc:	4907      	ldr	r1, [pc, #28]	; (8004a1c <rc_Timer+0x44>)
 80049fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for( uint8_t i = 0; i < RC_TMR_NUM; i++ )
 8004a02:	7bfb      	ldrb	r3, [r7, #15]
 8004a04:	3301      	adds	r3, #1
 8004a06:	73fb      	strb	r3, [r7, #15]
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d9eb      	bls.n	80049e6 <rc_Timer+0xe>
		}
	}

	return;
 8004a0e:	bf00      	nop
}
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	20000898 	.word	0x20000898

08004a20 <rc_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void rc_InitTask()
{
 8004a20:	b480      	push	{r7}
 8004a22:	af00      	add	r7, sp, #0
#ifdef NO_RC
	return;
#endif //NO_RC

	rc_info.enable = 1;
 8004a24:	4b11      	ldr	r3, [pc, #68]	; (8004a6c <rc_InitTask+0x4c>)
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
	rc_info.mode = 0;
 8004a2c:	4b0f      	ldr	r3, [pc, #60]	; (8004a6c <rc_InitTask+0x4c>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
	rc_info.rx_pkt_cnt = 0;
 8004a34:	4b0d      	ldr	r3, [pc, #52]	; (8004a6c <rc_InitTask+0x4c>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	rc_info.conn_tout = RC_DEF_CONN_TOUT;
 8004a3c:	4b0b      	ldr	r3, [pc, #44]	; (8004a6c <rc_InitTask+0x4c>)
 8004a3e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004a42:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	rc_info.send_tlm = 1;
 8004a46:	4b09      	ldr	r3, [pc, #36]	; (8004a6c <rc_InitTask+0x4c>)
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b

	rc_info.rx_buf.head = 0;
 8004a4e:	4b07      	ldr	r3, [pc, #28]	; (8004a6c <rc_InitTask+0x4c>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	815a      	strh	r2, [r3, #10]
	rc_info.rx_buf.tail = 0;
 8004a54:	4b05      	ldr	r3, [pc, #20]	; (8004a6c <rc_InitTask+0x4c>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	819a      	strh	r2, [r3, #12]
	rc_info.rx_buf.state = RCRINGBUF_WAIT_HEADER;
 8004a5a:	4b04      	ldr	r3, [pc, #16]	; (8004a6c <rc_InitTask+0x4c>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	721a      	strb	r2, [r3, #8]

	return;
 8004a60:	bf00      	nop
}
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	20000898 	.word	0x20000898

08004a70 <rc_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void rc_Task(void)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0

	uint8_t tmp_u8;
	uint16_t tmp_u16;

	//Receiving
	if( rc_info.rvd_pkt_size != 0 ){
 8004a76:	4b53      	ldr	r3, [pc, #332]	; (8004bc4 <rc_Task+0x154>)
 8004a78:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d047      	beq.n	8004b10 <rc_Task+0xa0>
		rc_info.timer[RC_TMR_CONN] = rc_info.conn_tout;
 8004a80:	4b50      	ldr	r3, [pc, #320]	; (8004bc4 <rc_Task+0x154>)
 8004a82:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004a86:	4a4f      	ldr	r2, [pc, #316]	; (8004bc4 <rc_Task+0x154>)
 8004a88:	6013      	str	r3, [r2, #0]
		if( rc_info.connected == 0 ){
 8004a8a:	4b4e      	ldr	r3, [pc, #312]	; (8004bc4 <rc_Task+0x154>)
 8004a8c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d103      	bne.n	8004a9e <rc_Task+0x2e>
			rc_info.connected = 1;
 8004a96:	4b4b      	ldr	r3, [pc, #300]	; (8004bc4 <rc_Task+0x154>)
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
		}

		rc_info.axis_l_x = (int8_t)rc_info.rvd_pkt[0];
 8004a9e:	4b49      	ldr	r3, [pc, #292]	; (8004bc4 <rc_Task+0x154>)
 8004aa0:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	b25a      	sxtb	r2, r3
 8004aa8:	4b46      	ldr	r3, [pc, #280]	; (8004bc4 <rc_Task+0x154>)
 8004aaa:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
		rc_info.axis_l_y = (int8_t)rc_info.rvd_pkt[1];
 8004aae:	4b45      	ldr	r3, [pc, #276]	; (8004bc4 <rc_Task+0x154>)
 8004ab0:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	b25a      	sxtb	r2, r3
 8004ab8:	4b42      	ldr	r3, [pc, #264]	; (8004bc4 <rc_Task+0x154>)
 8004aba:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
		rc_info.axis_r_x = (int8_t)rc_info.rvd_pkt[2];
 8004abe:	4b41      	ldr	r3, [pc, #260]	; (8004bc4 <rc_Task+0x154>)
 8004ac0:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	b25a      	sxtb	r2, r3
 8004ac8:	4b3e      	ldr	r3, [pc, #248]	; (8004bc4 <rc_Task+0x154>)
 8004aca:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
		rc_info.axis_r_y = (int8_t)rc_info.rvd_pkt[3];
 8004ace:	4b3d      	ldr	r3, [pc, #244]	; (8004bc4 <rc_Task+0x154>)
 8004ad0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	b25a      	sxtb	r2, r3
 8004ad8:	4b3a      	ldr	r3, [pc, #232]	; (8004bc4 <rc_Task+0x154>)
 8004ada:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
		rc_info.button_l = rc_info.rvd_pkt[4];
 8004ade:	4b39      	ldr	r3, [pc, #228]	; (8004bc4 <rc_Task+0x154>)
 8004ae0:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8004ae4:	b2da      	uxtb	r2, r3
 8004ae6:	4b37      	ldr	r3, [pc, #220]	; (8004bc4 <rc_Task+0x154>)
 8004ae8:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
		rc_info.button_r = rc_info.rvd_pkt[5];
 8004aec:	4b35      	ldr	r3, [pc, #212]	; (8004bc4 <rc_Task+0x154>)
 8004aee:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8004af2:	b2da      	uxtb	r2, r3
 8004af4:	4b33      	ldr	r3, [pc, #204]	; (8004bc4 <rc_Task+0x154>)
 8004af6:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125

		rc_info.rx_pkt_cnt += 1;
 8004afa:	4b32      	ldr	r3, [pc, #200]	; (8004bc4 <rc_Task+0x154>)
 8004afc:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8004b00:	3301      	adds	r3, #1
 8004b02:	4a30      	ldr	r2, [pc, #192]	; (8004bc4 <rc_Task+0x154>)
 8004b04:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
		rc_info.rvd_pkt_size = 0;
 8004b08:	4b2e      	ldr	r3, [pc, #184]	; (8004bc4 <rc_Task+0x154>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

	}

	//Connection tout condition
	if( (rc_info.timer[RC_TMR_CONN] == 0) && (rc_info.connected == 1) ){
 8004b10:	4b2c      	ldr	r3, [pc, #176]	; (8004bc4 <rc_Task+0x154>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d109      	bne.n	8004b2c <rc_Task+0xbc>
 8004b18:	4b2a      	ldr	r3, [pc, #168]	; (8004bc4 <rc_Task+0x154>)
 8004b1a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d103      	bne.n	8004b2c <rc_Task+0xbc>
		rc_info.connected = 0;
 8004b24:	4b27      	ldr	r3, [pc, #156]	; (8004bc4 <rc_Task+0x154>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
	}

	//Transmitting
	if( (rc_info.timer[RC_TMR_TRM_TLM] == 0)
 8004b2c:	4b25      	ldr	r3, [pc, #148]	; (8004bc4 <rc_Task+0x154>)
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d142      	bne.n	8004bba <rc_Task+0x14a>
			&& (rc_info.send_tlm == 1) && (rc_info.connected == 1) )
 8004b34:	4b23      	ldr	r3, [pc, #140]	; (8004bc4 <rc_Task+0x154>)
 8004b36:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d13c      	bne.n	8004bba <rc_Task+0x14a>
 8004b40:	4b20      	ldr	r3, [pc, #128]	; (8004bc4 <rc_Task+0x154>)
 8004b42:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d136      	bne.n	8004bba <rc_Task+0x14a>
	{
		rc_info.timer[RC_TMR_TRM_TLM] = RC_TLM_SND_PERIOD;
 8004b4c:	4b1d      	ldr	r3, [pc, #116]	; (8004bc4 <rc_Task+0x154>)
 8004b4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b52:	605a      	str	r2, [r3, #4]
		tmp_u16 = RC_HEADER;
 8004b54:	f648 43c8 	movw	r3, #36040	; 0x8cc8
 8004b58:	80bb      	strh	r3, [r7, #4]
		rc_AddTxData((uint8_t*)&tmp_u16, 2);
 8004b5a:	1d3b      	adds	r3, r7, #4
 8004b5c:	2102      	movs	r1, #2
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 f904 	bl	8004d6c <rc_AddTxData>
		tmp_u8 = 5;
 8004b64:	2305      	movs	r3, #5
 8004b66:	71fb      	strb	r3, [r7, #7]
		rc_AddTxData(&tmp_u8, 1);
 8004b68:	1dfb      	adds	r3, r7, #7
 8004b6a:	2101      	movs	r1, #1
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f000 f8fd 	bl	8004d6c <rc_AddTxData>
		tmp_u8 = autopilot_info.armed_flag;
 8004b72:	4b15      	ldr	r3, [pc, #84]	; (8004bc8 <rc_Task+0x158>)
 8004b74:	7d5b      	ldrb	r3, [r3, #21]
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	71fb      	strb	r3, [r7, #7]
		rc_AddTxData(&tmp_u8, 1);
 8004b7a:	1dfb      	adds	r3, r7, #7
 8004b7c:	2101      	movs	r1, #1
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f000 f8f4 	bl	8004d6c <rc_AddTxData>
		tmp_u16 = battery_info.battery_volatge;
 8004b84:	4b11      	ldr	r3, [pc, #68]	; (8004bcc <rc_Task+0x15c>)
 8004b86:	89db      	ldrh	r3, [r3, #14]
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	80bb      	strh	r3, [r7, #4]
		rc_AddTxData((uint8_t*)&tmp_u16, 2);
 8004b8c:	1d3b      	adds	r3, r7, #4
 8004b8e:	2102      	movs	r1, #2
 8004b90:	4618      	mov	r0, r3
 8004b92:	f000 f8eb 	bl	8004d6c <rc_AddTxData>
		tmp_u16 = crc16_calc(_rc_tx_buf, _rc_tx_buf_len);
 8004b96:	4b0e      	ldr	r3, [pc, #56]	; (8004bd0 <rc_Task+0x160>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	480d      	ldr	r0, [pc, #52]	; (8004bd4 <rc_Task+0x164>)
 8004ba0:	f7fe fa60 	bl	8003064 <crc16_calc>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	80bb      	strh	r3, [r7, #4]
		rc_AddTxData((uint8_t*)&tmp_u16, 2);
 8004ba8:	1d3b      	adds	r3, r7, #4
 8004baa:	2102      	movs	r1, #2
 8004bac:	4618      	mov	r0, r3
 8004bae:	f000 f8dd 	bl	8004d6c <rc_AddTxData>
		//modem_TrmData(SYSTEM_RC_MODEM_CH, _rc_tx_buf, _rc_tx_buf_len);
		_rc_tx_buf_len = 0;
 8004bb2:	4b07      	ldr	r3, [pc, #28]	; (8004bd0 <rc_Task+0x160>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	601a      	str	r2, [r3, #0]
	}

	return;
 8004bb8:	bf00      	nop
 8004bba:	bf00      	nop
}
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	20000898 	.word	0x20000898
 8004bc8:	20000134 	.word	0x20000134
 8004bcc:	20000198 	.word	0x20000198
 8004bd0:	20000a48 	.word	0x20000a48
 8004bd4:	200009c8 	.word	0x200009c8

08004bd8 <rc_RcvData>:

void rc_RcvData(uint8_t data)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	4603      	mov	r3, r0
 8004be0:	71fb      	strb	r3, [r7, #7]
	static uint16_t rcv_size;
	uint16_t header;
	uint16_t crc;

	rc_info.rx_buf.data[rc_info.rx_buf.tail =
			(rc_info.rx_buf.tail + 1) & RC_BUF_MASK] = data;
 8004be2:	4b4f      	ldr	r3, [pc, #316]	; (8004d20 <rc_RcvData+0x148>)
 8004be4:	899b      	ldrh	r3, [r3, #12]
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	3301      	adds	r3, #1
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bf0:	b29a      	uxth	r2, r3
	rc_info.rx_buf.data[rc_info.rx_buf.tail =
 8004bf2:	4b4b      	ldr	r3, [pc, #300]	; (8004d20 <rc_RcvData+0x148>)
 8004bf4:	4611      	mov	r1, r2
 8004bf6:	8199      	strh	r1, [r3, #12]
			(rc_info.rx_buf.tail + 1) & RC_BUF_MASK] = data;
 8004bf8:	4b49      	ldr	r3, [pc, #292]	; (8004d20 <rc_RcvData+0x148>)
 8004bfa:	4413      	add	r3, r2
 8004bfc:	79fa      	ldrb	r2, [r7, #7]
 8004bfe:	741a      	strb	r2, [r3, #16]
	//Waiting header
	if( rc_info.rx_buf.state == RCRINGBUF_WAIT_HEADER )
 8004c00:	4b47      	ldr	r3, [pc, #284]	; (8004d20 <rc_RcvData+0x148>)
 8004c02:	7a1b      	ldrb	r3, [r3, #8]
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d12a      	bne.n	8004c60 <rc_RcvData+0x88>
	{
		//Catch header
		header = rc_ringBufRead16b((uint8_t*)rc_info.rx_buf.data,
				(rc_info.rx_buf.tail - 2) & RC_BUF_MASK);
 8004c0a:	4b45      	ldr	r3, [pc, #276]	; (8004d20 <rc_RcvData+0x148>)
 8004c0c:	899b      	ldrh	r3, [r3, #12]
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	3b02      	subs	r3, #2
 8004c12:	b29b      	uxth	r3, r3
		header = rc_ringBufRead16b((uint8_t*)rc_info.rx_buf.data,
 8004c14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	4841      	ldr	r0, [pc, #260]	; (8004d24 <rc_RcvData+0x14c>)
 8004c1e:	f000 f885 	bl	8004d2c <rc_ringBufRead16b>
 8004c22:	4603      	mov	r3, r0
 8004c24:	817b      	strh	r3, [r7, #10]
		if( header == RC_HEADER )
 8004c26:	897b      	ldrh	r3, [r7, #10]
 8004c28:	f648 42c8 	movw	r2, #36040	; 0x8cc8
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d173      	bne.n	8004d18 <rc_RcvData+0x140>
		{
			rc_info.rx_buf.head = (rc_info.rx_buf.tail - 2) & RC_BUF_MASK;
 8004c30:	4b3b      	ldr	r3, [pc, #236]	; (8004d20 <rc_RcvData+0x148>)
 8004c32:	899b      	ldrh	r3, [r3, #12]
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	3b02      	subs	r3, #2
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c3e:	b29a      	uxth	r2, r3
 8004c40:	4b37      	ldr	r3, [pc, #220]	; (8004d20 <rc_RcvData+0x148>)
 8004c42:	815a      	strh	r2, [r3, #10]
			rcv_size = data;
 8004c44:	79fb      	ldrb	r3, [r7, #7]
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	4b37      	ldr	r3, [pc, #220]	; (8004d28 <rc_RcvData+0x150>)
 8004c4a:	801a      	strh	r2, [r3, #0]
			rc_info.rx_buf.data_size  = data - 2;
 8004c4c:	79fb      	ldrb	r3, [r7, #7]
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	3b02      	subs	r3, #2
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	4b32      	ldr	r3, [pc, #200]	; (8004d20 <rc_RcvData+0x148>)
 8004c56:	81da      	strh	r2, [r3, #14]
			rc_info.rx_buf.state = RCRINGBUF_WAIT_DATA;
 8004c58:	4b31      	ldr	r3, [pc, #196]	; (8004d20 <rc_RcvData+0x148>)
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	721a      	strb	r2, [r3, #8]
		{

		}
	}

	return;
 8004c5e:	e05b      	b.n	8004d18 <rc_RcvData+0x140>
	else if( rc_info.rx_buf.state == RCRINGBUF_WAIT_DATA )
 8004c60:	4b2f      	ldr	r3, [pc, #188]	; (8004d20 <rc_RcvData+0x148>)
 8004c62:	7a1b      	ldrb	r3, [r3, #8]
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d156      	bne.n	8004d18 <rc_RcvData+0x140>
		if( --rcv_size == 0 )
 8004c6a:	4b2f      	ldr	r3, [pc, #188]	; (8004d28 <rc_RcvData+0x150>)
 8004c6c:	881b      	ldrh	r3, [r3, #0]
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	4b2d      	ldr	r3, [pc, #180]	; (8004d28 <rc_RcvData+0x150>)
 8004c74:	801a      	strh	r2, [r3, #0]
 8004c76:	4b2c      	ldr	r3, [pc, #176]	; (8004d28 <rc_RcvData+0x150>)
 8004c78:	881b      	ldrh	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d14c      	bne.n	8004d18 <rc_RcvData+0x140>
			rc_info.rx_buf.state = RCRINGBUF_WAIT_HEADER;
 8004c7e:	4b28      	ldr	r3, [pc, #160]	; (8004d20 <rc_RcvData+0x148>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	721a      	strb	r2, [r3, #8]
			crc = crc16_RingBuf((uint8_t*)rc_info.rx_buf.data, rc_info.rx_buf.head,
 8004c84:	4b26      	ldr	r3, [pc, #152]	; (8004d20 <rc_RcvData+0x148>)
 8004c86:	895b      	ldrh	r3, [r3, #10]
 8004c88:	b299      	uxth	r1, r3
					rc_info.rx_buf.data_size + 3, RC_BUF_MASK);
 8004c8a:	4b25      	ldr	r3, [pc, #148]	; (8004d20 <rc_RcvData+0x148>)
 8004c8c:	89db      	ldrh	r3, [r3, #14]
 8004c8e:	b29b      	uxth	r3, r3
			crc = crc16_RingBuf((uint8_t*)rc_info.rx_buf.data, rc_info.rx_buf.head,
 8004c90:	3303      	adds	r3, #3
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	237f      	movs	r3, #127	; 0x7f
 8004c96:	4823      	ldr	r0, [pc, #140]	; (8004d24 <rc_RcvData+0x14c>)
 8004c98:	f7fe fa0e 	bl	80030b8 <crc16_RingBuf>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	81bb      	strh	r3, [r7, #12]
					(rc_info.rx_buf.tail - 1) & RC_BUF_MASK) ){
 8004ca0:	4b1f      	ldr	r3, [pc, #124]	; (8004d20 <rc_RcvData+0x148>)
 8004ca2:	899b      	ldrh	r3, [r3, #12]
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	b29b      	uxth	r3, r3
			if( crc == rc_ringBufRead16b((uint8_t*)rc_info.rx_buf.data,
 8004caa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	481c      	ldr	r0, [pc, #112]	; (8004d24 <rc_RcvData+0x14c>)
 8004cb4:	f000 f83a 	bl	8004d2c <rc_ringBufRead16b>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	461a      	mov	r2, r3
 8004cbc:	89bb      	ldrh	r3, [r7, #12]
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d12a      	bne.n	8004d18 <rc_RcvData+0x140>
				if( rc_info.rvd_pkt_size == 0 )
 8004cc2:	4b17      	ldr	r3, [pc, #92]	; (8004d20 <rc_RcvData+0x148>)
 8004cc4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d125      	bne.n	8004d18 <rc_RcvData+0x140>
					for( uint16_t i = 0; i < rc_info.rx_buf.data_size; i++ ){
 8004ccc:	2300      	movs	r3, #0
 8004cce:	81fb      	strh	r3, [r7, #14]
 8004cd0:	e014      	b.n	8004cfc <rc_RcvData+0x124>
								rc_info.rx_buf.data[(rc_info.rx_buf.head + 3 + i) & RC_BUF_MASK];
 8004cd2:	4b13      	ldr	r3, [pc, #76]	; (8004d20 <rc_RcvData+0x148>)
 8004cd4:	895b      	ldrh	r3, [r3, #10]
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	1cda      	adds	r2, r3, #3
 8004cda:	89fb      	ldrh	r3, [r7, #14]
 8004cdc:	4413      	add	r3, r2
 8004cde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
						rc_info.rvd_pkt[i] =
 8004ce2:	89fb      	ldrh	r3, [r7, #14]
								rc_info.rx_buf.data[(rc_info.rx_buf.head + 3 + i) & RC_BUF_MASK];
 8004ce4:	490e      	ldr	r1, [pc, #56]	; (8004d20 <rc_RcvData+0x148>)
 8004ce6:	440a      	add	r2, r1
 8004ce8:	7c12      	ldrb	r2, [r2, #16]
 8004cea:	b2d1      	uxtb	r1, r2
						rc_info.rvd_pkt[i] =
 8004cec:	4a0c      	ldr	r2, [pc, #48]	; (8004d20 <rc_RcvData+0x148>)
 8004cee:	4413      	add	r3, r2
 8004cf0:	460a      	mov	r2, r1
 8004cf2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
					for( uint16_t i = 0; i < rc_info.rx_buf.data_size; i++ ){
 8004cf6:	89fb      	ldrh	r3, [r7, #14]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	81fb      	strh	r3, [r7, #14]
 8004cfc:	4b08      	ldr	r3, [pc, #32]	; (8004d20 <rc_RcvData+0x148>)
 8004cfe:	89db      	ldrh	r3, [r3, #14]
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	89fa      	ldrh	r2, [r7, #14]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d3e4      	bcc.n	8004cd2 <rc_RcvData+0xfa>
					rc_info.rvd_pkt_size = rc_info.rx_buf.data_size;
 8004d08:	4b05      	ldr	r3, [pc, #20]	; (8004d20 <rc_RcvData+0x148>)
 8004d0a:	89db      	ldrh	r3, [r3, #14]
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	461a      	mov	r2, r3
 8004d10:	4b03      	ldr	r3, [pc, #12]	; (8004d20 <rc_RcvData+0x148>)
 8004d12:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	return;
 8004d16:	bf00      	nop
 8004d18:	bf00      	nop
}
 8004d1a:	3710      	adds	r7, #16
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	20000898 	.word	0x20000898
 8004d24:	200008a8 	.word	0x200008a8
 8004d28:	20000a4c 	.word	0x20000a4c

08004d2c <rc_ringBufRead16b>:

uint16_t rc_ringBufRead16b(uint8_t *buf, uint16_t pos)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	460b      	mov	r3, r1
 8004d36:	807b      	strh	r3, [r7, #2]
	uint16_t tmp;
	tmp = buf[(pos + 1) & RC_BUF_MASK] & 0xFF;
 8004d38:	887b      	ldrh	r3, [r7, #2]
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	4413      	add	r3, r2
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp << 8) + buf[pos];
 8004d48:	89fb      	ldrh	r3, [r7, #14]
 8004d4a:	021b      	lsls	r3, r3, #8
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	887b      	ldrh	r3, [r7, #2]
 8004d50:	6879      	ldr	r1, [r7, #4]
 8004d52:	440b      	add	r3, r1
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	4413      	add	r3, r2
 8004d5a:	81fb      	strh	r3, [r7, #14]

	return tmp;
 8004d5c:	89fb      	ldrh	r3, [r7, #14]
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3714      	adds	r7, #20
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
	...

08004d6c <rc_AddTxData>:

void rc_AddTxData(uint8_t *data, uint32_t len)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]

	if( len > (RC_TX_BUF_SIZE - _rc_tx_buf_len) ){
 8004d76:	4b0d      	ldr	r3, [pc, #52]	; (8004dac <rc_AddTxData+0x40>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d80f      	bhi.n	8004da4 <rc_AddTxData+0x38>
		return;
	}
	memcpy((uint8_t*)&_rc_tx_buf[_rc_tx_buf_len], data, len);
 8004d84:	4b09      	ldr	r3, [pc, #36]	; (8004dac <rc_AddTxData+0x40>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a09      	ldr	r2, [pc, #36]	; (8004db0 <rc_AddTxData+0x44>)
 8004d8a:	4413      	add	r3, r2
 8004d8c:	683a      	ldr	r2, [r7, #0]
 8004d8e:	6879      	ldr	r1, [r7, #4]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f006 fc71 	bl	800b678 <memcpy>
	_rc_tx_buf_len += len;
 8004d96:	4b05      	ldr	r3, [pc, #20]	; (8004dac <rc_AddTxData+0x40>)
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	4a03      	ldr	r2, [pc, #12]	; (8004dac <rc_AddTxData+0x40>)
 8004da0:	6013      	str	r3, [r2, #0]

	return;
 8004da2:	e000      	b.n	8004da6 <rc_AddTxData+0x3a>
		return;
 8004da4:	bf00      	nop
}
 8004da6:	3708      	adds	r7, #8
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	20000a48 	.word	0x20000a48
 8004db0:	200009c8 	.word	0x200009c8

08004db4 <cfg_NodeRcVarProp>:


/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeRcVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b087      	sub	sp, #28
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	4603      	mov	r3, r0
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
 8004dc0:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 8004dc2:	89fb      	ldrh	r3, [r7, #14]
 8004dc4:	2b09      	cmp	r3, #9
 8004dc6:	d835      	bhi.n	8004e34 <cfg_NodeRcVarProp+0x80>
 8004dc8:	a201      	add	r2, pc, #4	; (adr r2, 8004dd0 <cfg_NodeRcVarProp+0x1c>)
 8004dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dce:	bf00      	nop
 8004dd0:	08004df9 	.word	0x08004df9
 8004dd4:	08004dff 	.word	0x08004dff
 8004dd8:	08004e05 	.word	0x08004e05
 8004ddc:	08004e0b 	.word	0x08004e0b
 8004de0:	08004e11 	.word	0x08004e11
 8004de4:	08004e17 	.word	0x08004e17
 8004de8:	08004e1d 	.word	0x08004e1d
 8004dec:	08004e23 	.word	0x08004e23
 8004df0:	08004e29 	.word	0x08004e29
 8004df4:	08004e2f 	.word	0x08004e2f
	{
		case RC_ENA:				str = "Enable"; break;
 8004df8:	4b40      	ldr	r3, [pc, #256]	; (8004efc <cfg_NodeRcVarProp+0x148>)
 8004dfa:	617b      	str	r3, [r7, #20]
 8004dfc:	e01c      	b.n	8004e38 <cfg_NodeRcVarProp+0x84>
		case RC_MODE:				str = "Mode (0:modem 1:futaba)"; break;
 8004dfe:	4b40      	ldr	r3, [pc, #256]	; (8004f00 <cfg_NodeRcVarProp+0x14c>)
 8004e00:	617b      	str	r3, [r7, #20]
 8004e02:	e019      	b.n	8004e38 <cfg_NodeRcVarProp+0x84>
		case RC_SEND_TLM:			str = "Send telemetry"; break;
 8004e04:	4b3f      	ldr	r3, [pc, #252]	; (8004f04 <cfg_NodeRcVarProp+0x150>)
 8004e06:	617b      	str	r3, [r7, #20]
 8004e08:	e016      	b.n	8004e38 <cfg_NodeRcVarProp+0x84>
		case RC_RX_PKT_CNT:			str = "Received pkt"; break;
 8004e0a:	4b3f      	ldr	r3, [pc, #252]	; (8004f08 <cfg_NodeRcVarProp+0x154>)
 8004e0c:	617b      	str	r3, [r7, #20]
 8004e0e:	e013      	b.n	8004e38 <cfg_NodeRcVarProp+0x84>
		case RC_AXIS_L_X:			str = "Axis left X"; break;
 8004e10:	4b3e      	ldr	r3, [pc, #248]	; (8004f0c <cfg_NodeRcVarProp+0x158>)
 8004e12:	617b      	str	r3, [r7, #20]
 8004e14:	e010      	b.n	8004e38 <cfg_NodeRcVarProp+0x84>
		case RC_AXIS_L_Y:			str = "Axis left Y"; break;
 8004e16:	4b3e      	ldr	r3, [pc, #248]	; (8004f10 <cfg_NodeRcVarProp+0x15c>)
 8004e18:	617b      	str	r3, [r7, #20]
 8004e1a:	e00d      	b.n	8004e38 <cfg_NodeRcVarProp+0x84>
		case RC_AXIS_R_X:			str = "Axis right X"; break;
 8004e1c:	4b3d      	ldr	r3, [pc, #244]	; (8004f14 <cfg_NodeRcVarProp+0x160>)
 8004e1e:	617b      	str	r3, [r7, #20]
 8004e20:	e00a      	b.n	8004e38 <cfg_NodeRcVarProp+0x84>
		case RC_AXIS_R_Y:			str = "Axis right Y"; break;
 8004e22:	4b3d      	ldr	r3, [pc, #244]	; (8004f18 <cfg_NodeRcVarProp+0x164>)
 8004e24:	617b      	str	r3, [r7, #20]
 8004e26:	e007      	b.n	8004e38 <cfg_NodeRcVarProp+0x84>
		case RC_BUT_L:				str = "Button left"; break;
 8004e28:	4b3c      	ldr	r3, [pc, #240]	; (8004f1c <cfg_NodeRcVarProp+0x168>)
 8004e2a:	617b      	str	r3, [r7, #20]
 8004e2c:	e004      	b.n	8004e38 <cfg_NodeRcVarProp+0x84>
		case RC_BUT_R:				str = "Button right"; break;
 8004e2e:	4b3c      	ldr	r3, [pc, #240]	; (8004f20 <cfg_NodeRcVarProp+0x16c>)
 8004e30:	617b      	str	r3, [r7, #20]
 8004e32:	e001      	b.n	8004e38 <cfg_NodeRcVarProp+0x84>
		default: return CFG_ERROR_VARID;
 8004e34:	2302      	movs	r3, #2
 8004e36:	e05b      	b.n	8004ef0 <cfg_NodeRcVarProp+0x13c>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00f      	beq.n	8004e5e <cfg_NodeRcVarProp+0xaa>
 8004e3e:	e007      	b.n	8004e50 <cfg_NodeRcVarProp+0x9c>
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	1c53      	adds	r3, r2, #1
 8004e44:	617b      	str	r3, [r7, #20]
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	1c59      	adds	r1, r3, #1
 8004e4a:	60b9      	str	r1, [r7, #8]
 8004e4c:	7812      	ldrb	r2, [r2, #0]
 8004e4e:	701a      	strb	r2, [r3, #0]
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1f3      	bne.n	8004e40 <cfg_NodeRcVarProp+0x8c>
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d043      	beq.n	8004eec <cfg_NodeRcVarProp+0x138>
 8004e64:	89fb      	ldrh	r3, [r7, #14]
 8004e66:	2b09      	cmp	r3, #9
 8004e68:	d83e      	bhi.n	8004ee8 <cfg_NodeRcVarProp+0x134>
 8004e6a:	a201      	add	r2, pc, #4	; (adr r2, 8004e70 <cfg_NodeRcVarProp+0xbc>)
 8004e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e70:	08004e99 	.word	0x08004e99
 8004e74:	08004ea1 	.word	0x08004ea1
 8004e78:	08004ea9 	.word	0x08004ea9
 8004e7c:	08004eb1 	.word	0x08004eb1
 8004e80:	08004eb9 	.word	0x08004eb9
 8004e84:	08004ec1 	.word	0x08004ec1
 8004e88:	08004ec9 	.word	0x08004ec9
 8004e8c:	08004ed1 	.word	0x08004ed1
 8004e90:	08004ed9 	.word	0x08004ed9
 8004e94:	08004ee1 	.word	0x08004ee1
	{
		case RC_ENA:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_CONST; break;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2223      	movs	r2, #35	; 0x23
 8004e9c:	801a      	strh	r2, [r3, #0]
 8004e9e:	e026      	b.n	8004eee <cfg_NodeRcVarProp+0x13a>
		case RC_MODE:				*prop = CFG_VAR_TYPE_UINT| CFG_VAR_PROP_CONST; break;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2222      	movs	r2, #34	; 0x22
 8004ea4:	801a      	strh	r2, [r3, #0]
 8004ea6:	e022      	b.n	8004eee <cfg_NodeRcVarProp+0x13a>
		case RC_SEND_TLM:			*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_CONST; break;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2223      	movs	r2, #35	; 0x23
 8004eac:	801a      	strh	r2, [r3, #0]
 8004eae:	e01e      	b.n	8004eee <cfg_NodeRcVarProp+0x13a>
		case RC_RX_PKT_CNT:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2212      	movs	r2, #18
 8004eb4:	801a      	strh	r2, [r3, #0]
 8004eb6:	e01a      	b.n	8004eee <cfg_NodeRcVarProp+0x13a>
		case RC_AXIS_L_X:			*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2211      	movs	r2, #17
 8004ebc:	801a      	strh	r2, [r3, #0]
 8004ebe:	e016      	b.n	8004eee <cfg_NodeRcVarProp+0x13a>
		case RC_AXIS_L_Y:			*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2211      	movs	r2, #17
 8004ec4:	801a      	strh	r2, [r3, #0]
 8004ec6:	e012      	b.n	8004eee <cfg_NodeRcVarProp+0x13a>
		case RC_AXIS_R_X:			*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2211      	movs	r2, #17
 8004ecc:	801a      	strh	r2, [r3, #0]
 8004ece:	e00e      	b.n	8004eee <cfg_NodeRcVarProp+0x13a>
		case RC_AXIS_R_Y:			*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2211      	movs	r2, #17
 8004ed4:	801a      	strh	r2, [r3, #0]
 8004ed6:	e00a      	b.n	8004eee <cfg_NodeRcVarProp+0x13a>
		case RC_BUT_L:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_READONLY; break;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2213      	movs	r2, #19
 8004edc:	801a      	strh	r2, [r3, #0]
 8004ede:	e006      	b.n	8004eee <cfg_NodeRcVarProp+0x13a>
		case RC_BUT_R:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_READONLY; break;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2213      	movs	r2, #19
 8004ee4:	801a      	strh	r2, [r3, #0]
 8004ee6:	e002      	b.n	8004eee <cfg_NodeRcVarProp+0x13a>
		default: return CFG_ERROR_VARID;
 8004ee8:	2302      	movs	r3, #2
 8004eea:	e001      	b.n	8004ef0 <cfg_NodeRcVarProp+0x13c>
	}
	return CFG_ERROR_NONE;
 8004eec:	bf00      	nop
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	371c      	adds	r7, #28
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr
 8004efc:	0800b800 	.word	0x0800b800
 8004f00:	0800b808 	.word	0x0800b808
 8004f04:	0800b820 	.word	0x0800b820
 8004f08:	0800b830 	.word	0x0800b830
 8004f0c:	0800b840 	.word	0x0800b840
 8004f10:	0800b84c 	.word	0x0800b84c
 8004f14:	0800b858 	.word	0x0800b858
 8004f18:	0800b868 	.word	0x0800b868
 8004f1c:	0800b878 	.word	0x0800b878
 8004f20:	0800b884 	.word	0x0800b884

08004f24 <cfg_NodeRcVarGet>:

uint16_t cfg_NodeRcVarGet(uint16_t varid, void *value)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	6039      	str	r1, [r7, #0]
 8004f2e:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d06a      	beq.n	800500c <cfg_NodeRcVarGet+0xe8>
 8004f36:	88fb      	ldrh	r3, [r7, #6]
 8004f38:	2b09      	cmp	r3, #9
 8004f3a:	d865      	bhi.n	8005008 <cfg_NodeRcVarGet+0xe4>
 8004f3c:	a201      	add	r2, pc, #4	; (adr r2, 8004f44 <cfg_NodeRcVarGet+0x20>)
 8004f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f42:	bf00      	nop
 8004f44:	08004f6d 	.word	0x08004f6d
 8004f48:	08004f7d 	.word	0x08004f7d
 8004f4c:	08004f8d 	.word	0x08004f8d
 8004f50:	08004f9d 	.word	0x08004f9d
 8004f54:	08004fa9 	.word	0x08004fa9
 8004f58:	08004fb9 	.word	0x08004fb9
 8004f5c:	08004fc9 	.word	0x08004fc9
 8004f60:	08004fd9 	.word	0x08004fd9
 8004f64:	08004fe9 	.word	0x08004fe9
 8004f68:	08004ff9 	.word	0x08004ff9
	{
		case RC_ENA: 				*(uint32_t*)value = (uint32_t)rc_info.enable; break;
 8004f6c:	4b2b      	ldr	r3, [pc, #172]	; (800501c <cfg_NodeRcVarGet+0xf8>)
 8004f6e:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	461a      	mov	r2, r3
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	601a      	str	r2, [r3, #0]
 8004f7a:	e048      	b.n	800500e <cfg_NodeRcVarGet+0xea>
		case RC_MODE: 				*(uint32_t*)value = (uint32_t)rc_info.mode; break;
 8004f7c:	4b27      	ldr	r3, [pc, #156]	; (800501c <cfg_NodeRcVarGet+0xf8>)
 8004f7e:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	461a      	mov	r2, r3
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	601a      	str	r2, [r3, #0]
 8004f8a:	e040      	b.n	800500e <cfg_NodeRcVarGet+0xea>
		case RC_SEND_TLM: 			*(uint32_t*)value = (uint32_t)rc_info.send_tlm; break;
 8004f8c:	4b23      	ldr	r3, [pc, #140]	; (800501c <cfg_NodeRcVarGet+0xf8>)
 8004f8e:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	461a      	mov	r2, r3
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	601a      	str	r2, [r3, #0]
 8004f9a:	e038      	b.n	800500e <cfg_NodeRcVarGet+0xea>
		case RC_RX_PKT_CNT: 		*(uint32_t*)value = (uint32_t)rc_info.rx_pkt_cnt; break;
 8004f9c:	4b1f      	ldr	r3, [pc, #124]	; (800501c <cfg_NodeRcVarGet+0xf8>)
 8004f9e:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	601a      	str	r2, [r3, #0]
 8004fa6:	e032      	b.n	800500e <cfg_NodeRcVarGet+0xea>
		case RC_AXIS_L_X: 			*(uint32_t*)value = (int32_t)rc_info.axis_l_x; break;
 8004fa8:	4b1c      	ldr	r3, [pc, #112]	; (800501c <cfg_NodeRcVarGet+0xf8>)
 8004faa:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8004fae:	b25b      	sxtb	r3, r3
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	601a      	str	r2, [r3, #0]
 8004fb6:	e02a      	b.n	800500e <cfg_NodeRcVarGet+0xea>
		case RC_AXIS_L_Y: 			*(uint32_t*)value = (int32_t)rc_info.axis_l_y; break;
 8004fb8:	4b18      	ldr	r3, [pc, #96]	; (800501c <cfg_NodeRcVarGet+0xf8>)
 8004fba:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 8004fbe:	b25b      	sxtb	r3, r3
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	601a      	str	r2, [r3, #0]
 8004fc6:	e022      	b.n	800500e <cfg_NodeRcVarGet+0xea>
		case RC_AXIS_R_X: 			*(uint32_t*)value = (int32_t)rc_info.axis_r_x; break;
 8004fc8:	4b14      	ldr	r3, [pc, #80]	; (800501c <cfg_NodeRcVarGet+0xf8>)
 8004fca:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 8004fce:	b25b      	sxtb	r3, r3
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	601a      	str	r2, [r3, #0]
 8004fd6:	e01a      	b.n	800500e <cfg_NodeRcVarGet+0xea>
		case RC_AXIS_R_Y: 			*(uint32_t*)value = (int32_t)rc_info.axis_r_y; break;
 8004fd8:	4b10      	ldr	r3, [pc, #64]	; (800501c <cfg_NodeRcVarGet+0xf8>)
 8004fda:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 8004fde:	b25b      	sxtb	r3, r3
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	601a      	str	r2, [r3, #0]
 8004fe6:	e012      	b.n	800500e <cfg_NodeRcVarGet+0xea>
		case RC_BUT_L: 				*(uint32_t*)value = (uint32_t)rc_info.button_l; break;
 8004fe8:	4b0c      	ldr	r3, [pc, #48]	; (800501c <cfg_NodeRcVarGet+0xf8>)
 8004fea:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	e00a      	b.n	800500e <cfg_NodeRcVarGet+0xea>
		case RC_BUT_R: 				*(uint32_t*)value = (uint32_t)rc_info.button_r; break;
 8004ff8:	4b08      	ldr	r3, [pc, #32]	; (800501c <cfg_NodeRcVarGet+0xf8>)
 8004ffa:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	461a      	mov	r2, r3
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	601a      	str	r2, [r3, #0]
 8005006:	e002      	b.n	800500e <cfg_NodeRcVarGet+0xea>
		default: return CFG_ERROR_VARID;
 8005008:	2302      	movs	r3, #2
 800500a:	e001      	b.n	8005010 <cfg_NodeRcVarGet+0xec>
	}
	return CFG_ERROR_NONE;
 800500c:	bf00      	nop
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr
 800501c:	20000898 	.word	0x20000898

08005020 <cfg_NodeRcVarSet>:

uint16_t cfg_NodeRcVarSet(uint16_t varid, void *value)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	4603      	mov	r3, r0
 8005028:	6039      	str	r1, [r7, #0]
 800502a:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d031      	beq.n	8005096 <cfg_NodeRcVarSet+0x76>
 8005032:	88fb      	ldrh	r3, [r7, #6]
 8005034:	2b09      	cmp	r3, #9
 8005036:	d82c      	bhi.n	8005092 <cfg_NodeRcVarSet+0x72>
 8005038:	a201      	add	r2, pc, #4	; (adr r2, 8005040 <cfg_NodeRcVarSet+0x20>)
 800503a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503e:	bf00      	nop
 8005040:	08005069 	.word	0x08005069
 8005044:	08005077 	.word	0x08005077
 8005048:	08005085 	.word	0x08005085
 800504c:	0800509b 	.word	0x0800509b
 8005050:	0800509b 	.word	0x0800509b
 8005054:	0800509b 	.word	0x0800509b
 8005058:	0800509b 	.word	0x0800509b
 800505c:	0800509b 	.word	0x0800509b
 8005060:	0800509b 	.word	0x0800509b
 8005064:	0800509b 	.word	0x0800509b
	{
		case RC_ENA:				rc_info.enable = (uint8_t)*(uint32_t*)value; break;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	b2da      	uxtb	r2, r3
 800506e:	4b0f      	ldr	r3, [pc, #60]	; (80050ac <cfg_NodeRcVarSet+0x8c>)
 8005070:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 8005074:	e012      	b.n	800509c <cfg_NodeRcVarSet+0x7c>
		case RC_MODE:				rc_info.mode = (uint8_t)*(uint32_t*)value; break;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	b2da      	uxtb	r2, r3
 800507c:	4b0b      	ldr	r3, [pc, #44]	; (80050ac <cfg_NodeRcVarSet+0x8c>)
 800507e:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
 8005082:	e00b      	b.n	800509c <cfg_NodeRcVarSet+0x7c>
		case RC_SEND_TLM:			rc_info.send_tlm = (uint8_t)*(uint32_t*)value; break;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	b2da      	uxtb	r2, r3
 800508a:	4b08      	ldr	r3, [pc, #32]	; (80050ac <cfg_NodeRcVarSet+0x8c>)
 800508c:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
 8005090:	e004      	b.n	800509c <cfg_NodeRcVarSet+0x7c>
		case RC_AXIS_L_Y:			break;
		case RC_AXIS_R_X:			break;
		case RC_AXIS_R_Y:			break;
		case RC_BUT_L:				break;
		case RC_BUT_R:				break;
		default: return CFG_ERROR_VARID;
 8005092:	2302      	movs	r3, #2
 8005094:	e003      	b.n	800509e <cfg_NodeRcVarSet+0x7e>
	}
	return CFG_ERROR_NONE;
 8005096:	bf00      	nop
 8005098:	e000      	b.n	800509c <cfg_NodeRcVarSet+0x7c>
		case RC_RX_PKT_CNT:			break;
 800509a:	bf00      	nop
	return CFG_ERROR_NONE;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	20000898 	.word	0x20000898

080050b0 <sens_Timer>:
void sens_SetAccelRange(uint8_t range);

volatile sens_infoTypeDef sens_info;

void sens_Timer(uint32_t res)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
#ifdef NO_SENS
	return;
#endif //NO_SENS

	for( uint8_t i = 0; i < SENS_TMR_NUM; i++ )
 80050b8:	2300      	movs	r3, #0
 80050ba:	73fb      	strb	r3, [r7, #15]
 80050bc:	e010      	b.n	80050e0 <sens_Timer+0x30>
	{
		if( sens_info.timer[i] > 0 ){
 80050be:	7bfb      	ldrb	r3, [r7, #15]
 80050c0:	4a0c      	ldr	r2, [pc, #48]	; (80050f4 <sens_Timer+0x44>)
 80050c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d007      	beq.n	80050da <sens_Timer+0x2a>
			sens_info.timer[i]--;
 80050ca:	7bfb      	ldrb	r3, [r7, #15]
 80050cc:	4a09      	ldr	r2, [pc, #36]	; (80050f4 <sens_Timer+0x44>)
 80050ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80050d2:	3a01      	subs	r2, #1
 80050d4:	4907      	ldr	r1, [pc, #28]	; (80050f4 <sens_Timer+0x44>)
 80050d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for( uint8_t i = 0; i < SENS_TMR_NUM; i++ )
 80050da:	7bfb      	ldrb	r3, [r7, #15]
 80050dc:	3301      	adds	r3, #1
 80050de:	73fb      	strb	r3, [r7, #15]
 80050e0:	7bfb      	ldrb	r3, [r7, #15]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d0eb      	beq.n	80050be <sens_Timer+0xe>
		}
	}

	return;
 80050e6:	bf00      	nop
}
 80050e8:	3714      	adds	r7, #20
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	20000a50 	.word	0x20000a50

080050f8 <sens_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void sens_InitTask()
{
 80050f8:	b480      	push	{r7}
 80050fa:	af00      	add	r7, sp, #0
#ifdef NO_SENS
	return;
#endif //NO_SENS

	//Init state
	sens_info.state = 0;
 80050fc:	4b03      	ldr	r3, [pc, #12]	; (800510c <sens_InitTask+0x14>)
 80050fe:	2200      	movs	r2, #0
 8005100:	711a      	strb	r2, [r3, #4]

	return;
 8005102:	bf00      	nop
}
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr
 800510c:	20000a50 	.word	0x20000a50

08005110 <sens_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void sens_Task(void)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
#ifdef NO_SENS
	return;
#endif //NO_SENS

	uint16_t t_cal_step = 0;
 8005116:	2300      	movs	r3, #0
 8005118:	80fb      	strh	r3, [r7, #6]

	//Reset
	if( sens_info.state == 0 )
 800511a:	4b43      	ldr	r3, [pc, #268]	; (8005228 <sens_Task+0x118>)
 800511c:	791b      	ldrb	r3, [r3, #4]
 800511e:	b2db      	uxtb	r3, r3
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10a      	bne.n	800513a <sens_Task+0x2a>
	{
		sens_WriteByte(SENS_REG_PWR_MGMT_1, 0x80);
 8005124:	2180      	movs	r1, #128	; 0x80
 8005126:	206b      	movs	r0, #107	; 0x6b
 8005128:	f000 fa56 	bl	80055d8 <sens_WriteByte>
		sens_info.timer[SENS_TMR_PROC] = 100;
 800512c:	4b3e      	ldr	r3, [pc, #248]	; (8005228 <sens_Task+0x118>)
 800512e:	2264      	movs	r2, #100	; 0x64
 8005130:	601a      	str	r2, [r3, #0]
		sens_info.state = 1;
 8005132:	4b3d      	ldr	r3, [pc, #244]	; (8005228 <sens_Task+0x118>)
 8005134:	2201      	movs	r2, #1
 8005136:	711a      	strb	r2, [r3, #4]
			sens_info.timer[SENS_TMR_PROC] = 1;
			sens_UpdData();
		}
	}

	return;
 8005138:	e072      	b.n	8005220 <sens_Task+0x110>
	else if( sens_info.state == 1 )
 800513a:	4b3b      	ldr	r3, [pc, #236]	; (8005228 <sens_Task+0x118>)
 800513c:	791b      	ldrb	r3, [r3, #4]
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b01      	cmp	r3, #1
 8005142:	d124      	bne.n	800518e <sens_Task+0x7e>
		if( sens_info.timer[SENS_TMR_PROC] == 0 )
 8005144:	4b38      	ldr	r3, [pc, #224]	; (8005228 <sens_Task+0x118>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d169      	bne.n	8005220 <sens_Task+0x110>
			sens_WriteByte(SENS_REG_PWR_MGMT_1, 0x00);
 800514c:	2100      	movs	r1, #0
 800514e:	206b      	movs	r0, #107	; 0x6b
 8005150:	f000 fa42 	bl	80055d8 <sens_WriteByte>
			sens_SetGyroRange(GYRO_RANGE_250DPS);
 8005154:	2000      	movs	r0, #0
 8005156:	f000 f8c3 	bl	80052e0 <sens_SetGyroRange>
			sens_SetAccelRange(ACCEL_RANGE_2G);
 800515a:	2000      	movs	r0, #0
 800515c:	f000 f8d4 	bl	8005308 <sens_SetAccelRange>
			sens_WriteByte(SENS_REG_CONFIG, 0x00);
 8005160:	2100      	movs	r1, #0
 8005162:	201a      	movs	r0, #26
 8005164:	f000 fa38 	bl	80055d8 <sens_WriteByte>
			t_cal_step = SENS_CAL_STEP_NUM;
 8005168:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800516c:	80fb      	strh	r3, [r7, #6]
			sens_info.gyro_x_bias = 0.0;
 800516e:	4b2e      	ldr	r3, [pc, #184]	; (8005228 <sens_Task+0x118>)
 8005170:	f04f 0200 	mov.w	r2, #0
 8005174:	615a      	str	r2, [r3, #20]
			sens_info.gyro_y_bias = 0.0;
 8005176:	4b2c      	ldr	r3, [pc, #176]	; (8005228 <sens_Task+0x118>)
 8005178:	f04f 0200 	mov.w	r2, #0
 800517c:	619a      	str	r2, [r3, #24]
			sens_info.gyro_z_bias = 0.0;
 800517e:	4b2a      	ldr	r3, [pc, #168]	; (8005228 <sens_Task+0x118>)
 8005180:	f04f 0200 	mov.w	r2, #0
 8005184:	61da      	str	r2, [r3, #28]
			sens_info.state = 2;
 8005186:	4b28      	ldr	r3, [pc, #160]	; (8005228 <sens_Task+0x118>)
 8005188:	2202      	movs	r2, #2
 800518a:	711a      	strb	r2, [r3, #4]
	return;
 800518c:	e048      	b.n	8005220 <sens_Task+0x110>
	else if( sens_info.state == 2 )
 800518e:	4b26      	ldr	r3, [pc, #152]	; (8005228 <sens_Task+0x118>)
 8005190:	791b      	ldrb	r3, [r3, #4]
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2b02      	cmp	r3, #2
 8005196:	d134      	bne.n	8005202 <sens_Task+0xf2>
		if( t_cal_step > 0 )
 8005198:	88fb      	ldrh	r3, [r7, #6]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00c      	beq.n	80051b8 <sens_Task+0xa8>
			if( sens_info.timer[SENS_TMR_PROC] == 0 )
 800519e:	4b22      	ldr	r3, [pc, #136]	; (8005228 <sens_Task+0x118>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d13c      	bne.n	8005220 <sens_Task+0x110>
				sens_CalibrateStep();
 80051a6:	f000 f843 	bl	8005230 <sens_CalibrateStep>
				t_cal_step -= 1;
 80051aa:	88fb      	ldrh	r3, [r7, #6]
 80051ac:	3b01      	subs	r3, #1
 80051ae:	80fb      	strh	r3, [r7, #6]
				sens_info.timer[SENS_TMR_PROC] = 1;
 80051b0:	4b1d      	ldr	r3, [pc, #116]	; (8005228 <sens_Task+0x118>)
 80051b2:	2201      	movs	r2, #1
 80051b4:	601a      	str	r2, [r3, #0]
	return;
 80051b6:	e033      	b.n	8005220 <sens_Task+0x110>
			sens_info.gyro_x_bias /= (float)SENS_CAL_STEP_NUM;
 80051b8:	4b1b      	ldr	r3, [pc, #108]	; (8005228 <sens_Task+0x118>)
 80051ba:	ed93 7a05 	vldr	s14, [r3, #20]
 80051be:	eddf 6a1b 	vldr	s13, [pc, #108]	; 800522c <sens_Task+0x11c>
 80051c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80051c6:	4b18      	ldr	r3, [pc, #96]	; (8005228 <sens_Task+0x118>)
 80051c8:	edc3 7a05 	vstr	s15, [r3, #20]
			sens_info.gyro_x_bias /= (float)SENS_CAL_STEP_NUM;
 80051cc:	4b16      	ldr	r3, [pc, #88]	; (8005228 <sens_Task+0x118>)
 80051ce:	ed93 7a05 	vldr	s14, [r3, #20]
 80051d2:	eddf 6a16 	vldr	s13, [pc, #88]	; 800522c <sens_Task+0x11c>
 80051d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80051da:	4b13      	ldr	r3, [pc, #76]	; (8005228 <sens_Task+0x118>)
 80051dc:	edc3 7a05 	vstr	s15, [r3, #20]
			sens_info.gyro_x_bias /= (float)SENS_CAL_STEP_NUM;
 80051e0:	4b11      	ldr	r3, [pc, #68]	; (8005228 <sens_Task+0x118>)
 80051e2:	ed93 7a05 	vldr	s14, [r3, #20]
 80051e6:	eddf 6a11 	vldr	s13, [pc, #68]	; 800522c <sens_Task+0x11c>
 80051ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80051ee:	4b0e      	ldr	r3, [pc, #56]	; (8005228 <sens_Task+0x118>)
 80051f0:	edc3 7a05 	vstr	s15, [r3, #20]
			sens_info.timer[SENS_TMR_PROC] = 1;
 80051f4:	4b0c      	ldr	r3, [pc, #48]	; (8005228 <sens_Task+0x118>)
 80051f6:	2201      	movs	r2, #1
 80051f8:	601a      	str	r2, [r3, #0]
			sens_info.state = 3;
 80051fa:	4b0b      	ldr	r3, [pc, #44]	; (8005228 <sens_Task+0x118>)
 80051fc:	2203      	movs	r2, #3
 80051fe:	711a      	strb	r2, [r3, #4]
	return;
 8005200:	e00e      	b.n	8005220 <sens_Task+0x110>
	else if( sens_info.state == 3 )
 8005202:	4b09      	ldr	r3, [pc, #36]	; (8005228 <sens_Task+0x118>)
 8005204:	791b      	ldrb	r3, [r3, #4]
 8005206:	b2db      	uxtb	r3, r3
 8005208:	2b03      	cmp	r3, #3
 800520a:	d109      	bne.n	8005220 <sens_Task+0x110>
		if( sens_info.timer[SENS_TMR_PROC] == 0 )
 800520c:	4b06      	ldr	r3, [pc, #24]	; (8005228 <sens_Task+0x118>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d105      	bne.n	8005220 <sens_Task+0x110>
			sens_info.timer[SENS_TMR_PROC] = 1;
 8005214:	4b04      	ldr	r3, [pc, #16]	; (8005228 <sens_Task+0x118>)
 8005216:	2201      	movs	r2, #1
 8005218:	601a      	str	r2, [r3, #0]
			sens_UpdData();
 800521a:	f000 f889 	bl	8005330 <sens_UpdData>
	return;
 800521e:	bf00      	nop
 8005220:	bf00      	nop
}
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	20000a50 	.word	0x20000a50
 800522c:	447a0000 	.word	0x447a0000

08005230 <sens_CalibrateStep>:

//
void sens_CalibrateStep()
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b088      	sub	sp, #32
 8005234:	af04      	add	r7, sp, #16
    uint8_t buffer[6];
    int16_t gyroX, gyroY, gyroZ;

	HAL_I2C_Mem_Read(&hi2c1, SENS_I2C_ADDR, SENS_REG_GYRO_XOUT_H, I2C_MEMADD_SIZE_8BIT, buffer, 6, 1000);
 8005236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800523a:	9302      	str	r3, [sp, #8]
 800523c:	2306      	movs	r3, #6
 800523e:	9301      	str	r3, [sp, #4]
 8005240:	1d3b      	adds	r3, r7, #4
 8005242:	9300      	str	r3, [sp, #0]
 8005244:	2301      	movs	r3, #1
 8005246:	2243      	movs	r2, #67	; 0x43
 8005248:	21d0      	movs	r1, #208	; 0xd0
 800524a:	4823      	ldr	r0, [pc, #140]	; (80052d8 <sens_CalibrateStep+0xa8>)
 800524c:	f002 ff5e 	bl	800810c <HAL_I2C_Mem_Read>
	gyroX = (int16_t)(buffer[0] << 8 | buffer[1]);
 8005250:	793b      	ldrb	r3, [r7, #4]
 8005252:	021b      	lsls	r3, r3, #8
 8005254:	b21a      	sxth	r2, r3
 8005256:	797b      	ldrb	r3, [r7, #5]
 8005258:	b21b      	sxth	r3, r3
 800525a:	4313      	orrs	r3, r2
 800525c:	81fb      	strh	r3, [r7, #14]
	gyroY = (int16_t)(buffer[2] << 8 | buffer[3]);
 800525e:	79bb      	ldrb	r3, [r7, #6]
 8005260:	021b      	lsls	r3, r3, #8
 8005262:	b21a      	sxth	r2, r3
 8005264:	79fb      	ldrb	r3, [r7, #7]
 8005266:	b21b      	sxth	r3, r3
 8005268:	4313      	orrs	r3, r2
 800526a:	81bb      	strh	r3, [r7, #12]
	gyroZ = (int16_t)(buffer[4] << 8 | buffer[5]);
 800526c:	7a3b      	ldrb	r3, [r7, #8]
 800526e:	021b      	lsls	r3, r3, #8
 8005270:	b21a      	sxth	r2, r3
 8005272:	7a7b      	ldrb	r3, [r7, #9]
 8005274:	b21b      	sxth	r3, r3
 8005276:	4313      	orrs	r3, r2
 8005278:	817b      	strh	r3, [r7, #10]

	sens_info.gyro_x_bias += gyroX;
 800527a:	4b18      	ldr	r3, [pc, #96]	; (80052dc <sens_CalibrateStep+0xac>)
 800527c:	ed93 7a05 	vldr	s14, [r3, #20]
 8005280:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005284:	ee07 3a90 	vmov	s15, r3
 8005288:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800528c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005290:	4b12      	ldr	r3, [pc, #72]	; (80052dc <sens_CalibrateStep+0xac>)
 8005292:	edc3 7a05 	vstr	s15, [r3, #20]
	sens_info.gyro_y_bias += gyroY;
 8005296:	4b11      	ldr	r3, [pc, #68]	; (80052dc <sens_CalibrateStep+0xac>)
 8005298:	ed93 7a06 	vldr	s14, [r3, #24]
 800529c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80052a0:	ee07 3a90 	vmov	s15, r3
 80052a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052ac:	4b0b      	ldr	r3, [pc, #44]	; (80052dc <sens_CalibrateStep+0xac>)
 80052ae:	edc3 7a06 	vstr	s15, [r3, #24]
	sens_info.gyro_z_bias += gyroZ;
 80052b2:	4b0a      	ldr	r3, [pc, #40]	; (80052dc <sens_CalibrateStep+0xac>)
 80052b4:	ed93 7a07 	vldr	s14, [r3, #28]
 80052b8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80052bc:	ee07 3a90 	vmov	s15, r3
 80052c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052c8:	4b04      	ldr	r3, [pc, #16]	; (80052dc <sens_CalibrateStep+0xac>)
 80052ca:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80052ce:	bf00      	nop
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	2000054c 	.word	0x2000054c
 80052dc:	20000a50 	.word	0x20000a50

080052e0 <sens_SetGyroRange>:

//
void sens_SetGyroRange(uint8_t range)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	4603      	mov	r3, r0
 80052e8:	71fb      	strb	r3, [r7, #7]
	sens_info.gyro_range = range;
 80052ea:	4a06      	ldr	r2, [pc, #24]	; (8005304 <sens_SetGyroRange+0x24>)
 80052ec:	79fb      	ldrb	r3, [r7, #7]
 80052ee:	7153      	strb	r3, [r2, #5]
	sens_WriteByte(SENS_REG_GYRO_CONFIG, range);
 80052f0:	79fb      	ldrb	r3, [r7, #7]
 80052f2:	4619      	mov	r1, r3
 80052f4:	201b      	movs	r0, #27
 80052f6:	f000 f96f 	bl	80055d8 <sens_WriteByte>

    return;
 80052fa:	bf00      	nop
}
 80052fc:	3708      	adds	r7, #8
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	20000a50 	.word	0x20000a50

08005308 <sens_SetAccelRange>:

//
void sens_SetAccelRange(uint8_t range)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	4603      	mov	r3, r0
 8005310:	71fb      	strb	r3, [r7, #7]
	sens_info.accel_range = range;
 8005312:	4a06      	ldr	r2, [pc, #24]	; (800532c <sens_SetAccelRange+0x24>)
 8005314:	79fb      	ldrb	r3, [r7, #7]
 8005316:	f882 3020 	strb.w	r3, [r2, #32]
	sens_WriteByte(SENS_REG_ACCEL_CONFIG, range);
 800531a:	79fb      	ldrb	r3, [r7, #7]
 800531c:	4619      	mov	r1, r3
 800531e:	201c      	movs	r0, #28
 8005320:	f000 f95a 	bl	80055d8 <sens_WriteByte>

    return;
 8005324:	bf00      	nop
}
 8005326:	3708      	adds	r7, #8
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	20000a50 	.word	0x20000a50

08005330 <sens_UpdData>:

//
HAL_StatusTypeDef sens_UpdData()
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b08a      	sub	sp, #40	; 0x28
 8005334:	af00      	add	r7, sp, #0
    uint8_t buf[14];
    HAL_StatusTypeDef status;

    status = sens_Read(SENS_REG_ACCEL_XOUT_H, buf, 14);
 8005336:	463b      	mov	r3, r7
 8005338:	220e      	movs	r2, #14
 800533a:	4619      	mov	r1, r3
 800533c:	203b      	movs	r0, #59	; 0x3b
 800533e:	f000 f967 	bl	8005610 <sens_Read>
 8005342:	4603      	mov	r3, r0
 8005344:	77fb      	strb	r3, [r7, #31]
    if (status != HAL_OK) {
 8005346:	7ffb      	ldrb	r3, [r7, #31]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d001      	beq.n	8005350 <sens_UpdData+0x20>
        return status;
 800534c:	7ffb      	ldrb	r3, [r7, #31]
 800534e:	e12e      	b.n	80055ae <sens_UpdData+0x27e>
    }

    int16_t raw_accel_x = (int16_t)(buf[0] << 8 | buf[1]);
 8005350:	783b      	ldrb	r3, [r7, #0]
 8005352:	021b      	lsls	r3, r3, #8
 8005354:	b21a      	sxth	r2, r3
 8005356:	787b      	ldrb	r3, [r7, #1]
 8005358:	b21b      	sxth	r3, r3
 800535a:	4313      	orrs	r3, r2
 800535c:	83bb      	strh	r3, [r7, #28]
    int16_t raw_accel_y = (int16_t)(buf[2] << 8 | buf[3]);
 800535e:	78bb      	ldrb	r3, [r7, #2]
 8005360:	021b      	lsls	r3, r3, #8
 8005362:	b21a      	sxth	r2, r3
 8005364:	78fb      	ldrb	r3, [r7, #3]
 8005366:	b21b      	sxth	r3, r3
 8005368:	4313      	orrs	r3, r2
 800536a:	837b      	strh	r3, [r7, #26]
    int16_t raw_accel_z = (int16_t)(buf[4] << 8 | buf[5]);
 800536c:	793b      	ldrb	r3, [r7, #4]
 800536e:	021b      	lsls	r3, r3, #8
 8005370:	b21a      	sxth	r2, r3
 8005372:	797b      	ldrb	r3, [r7, #5]
 8005374:	b21b      	sxth	r3, r3
 8005376:	4313      	orrs	r3, r2
 8005378:	833b      	strh	r3, [r7, #24]
    int16_t raw_temp = (int16_t)(buf[6] << 8 | buf[7]);
 800537a:	79bb      	ldrb	r3, [r7, #6]
 800537c:	021b      	lsls	r3, r3, #8
 800537e:	b21a      	sxth	r2, r3
 8005380:	79fb      	ldrb	r3, [r7, #7]
 8005382:	b21b      	sxth	r3, r3
 8005384:	4313      	orrs	r3, r2
 8005386:	82fb      	strh	r3, [r7, #22]
    int16_t raw_gyro_x = (int16_t)(buf[8] << 8 | buf[9]);
 8005388:	7a3b      	ldrb	r3, [r7, #8]
 800538a:	021b      	lsls	r3, r3, #8
 800538c:	b21a      	sxth	r2, r3
 800538e:	7a7b      	ldrb	r3, [r7, #9]
 8005390:	b21b      	sxth	r3, r3
 8005392:	4313      	orrs	r3, r2
 8005394:	82bb      	strh	r3, [r7, #20]
    int16_t raw_gyro_y = (int16_t)(buf[10] << 8 | buf[11]);
 8005396:	7abb      	ldrb	r3, [r7, #10]
 8005398:	021b      	lsls	r3, r3, #8
 800539a:	b21a      	sxth	r2, r3
 800539c:	7afb      	ldrb	r3, [r7, #11]
 800539e:	b21b      	sxth	r3, r3
 80053a0:	4313      	orrs	r3, r2
 80053a2:	827b      	strh	r3, [r7, #18]
    int16_t raw_gyro_z = (int16_t)(buf[12] << 8 | buf[13]);
 80053a4:	7b3b      	ldrb	r3, [r7, #12]
 80053a6:	021b      	lsls	r3, r3, #8
 80053a8:	b21a      	sxth	r2, r3
 80053aa:	7b7b      	ldrb	r3, [r7, #13]
 80053ac:	b21b      	sxth	r3, r3
 80053ae:	4313      	orrs	r3, r2
 80053b0:	823b      	strh	r3, [r7, #16]

    float gyro_sens;
    float accel_sens;

    switch (sens_info.gyro_range) {
 80053b2:	4b83      	ldr	r3, [pc, #524]	; (80055c0 <sens_UpdData+0x290>)
 80053b4:	795b      	ldrb	r3, [r3, #5]
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b18      	cmp	r3, #24
 80053ba:	d841      	bhi.n	8005440 <sens_UpdData+0x110>
 80053bc:	a201      	add	r2, pc, #4	; (adr r2, 80053c4 <sens_UpdData+0x94>)
 80053be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c2:	bf00      	nop
 80053c4:	08005429 	.word	0x08005429
 80053c8:	08005441 	.word	0x08005441
 80053cc:	08005441 	.word	0x08005441
 80053d0:	08005441 	.word	0x08005441
 80053d4:	08005441 	.word	0x08005441
 80053d8:	08005441 	.word	0x08005441
 80053dc:	08005441 	.word	0x08005441
 80053e0:	08005441 	.word	0x08005441
 80053e4:	0800542f 	.word	0x0800542f
 80053e8:	08005441 	.word	0x08005441
 80053ec:	08005441 	.word	0x08005441
 80053f0:	08005441 	.word	0x08005441
 80053f4:	08005441 	.word	0x08005441
 80053f8:	08005441 	.word	0x08005441
 80053fc:	08005441 	.word	0x08005441
 8005400:	08005441 	.word	0x08005441
 8005404:	08005435 	.word	0x08005435
 8005408:	08005441 	.word	0x08005441
 800540c:	08005441 	.word	0x08005441
 8005410:	08005441 	.word	0x08005441
 8005414:	08005441 	.word	0x08005441
 8005418:	08005441 	.word	0x08005441
 800541c:	08005441 	.word	0x08005441
 8005420:	08005441 	.word	0x08005441
 8005424:	0800543b 	.word	0x0800543b
        case GYRO_RANGE_250DPS:
            gyro_sens = GYRO_SENS_250DPS;
 8005428:	4b66      	ldr	r3, [pc, #408]	; (80055c4 <sens_UpdData+0x294>)
 800542a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800542c:	e008      	b.n	8005440 <sens_UpdData+0x110>
        case GYRO_RANGE_500DPS:
            gyro_sens = GYRO_SENS_500DPS;
 800542e:	4b66      	ldr	r3, [pc, #408]	; (80055c8 <sens_UpdData+0x298>)
 8005430:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005432:	e005      	b.n	8005440 <sens_UpdData+0x110>
        case GYRO_RANGE_1000DPS:
            gyro_sens = GYRO_SENS_1000DPS;
 8005434:	4b65      	ldr	r3, [pc, #404]	; (80055cc <sens_UpdData+0x29c>)
 8005436:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005438:	e002      	b.n	8005440 <sens_UpdData+0x110>
        case GYRO_RANGE_2000DPS:
            gyro_sens = GYRO_SENS_2000DPS;
 800543a:	4b65      	ldr	r3, [pc, #404]	; (80055d0 <sens_UpdData+0x2a0>)
 800543c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800543e:	bf00      	nop
    }
    switch (sens_info.accel_range) {
 8005440:	4b5f      	ldr	r3, [pc, #380]	; (80055c0 <sens_UpdData+0x290>)
 8005442:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b18      	cmp	r3, #24
 800544a:	d845      	bhi.n	80054d8 <sens_UpdData+0x1a8>
 800544c:	a201      	add	r2, pc, #4	; (adr r2, 8005454 <sens_UpdData+0x124>)
 800544e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005452:	bf00      	nop
 8005454:	080054b9 	.word	0x080054b9
 8005458:	080054d9 	.word	0x080054d9
 800545c:	080054d9 	.word	0x080054d9
 8005460:	080054d9 	.word	0x080054d9
 8005464:	080054d9 	.word	0x080054d9
 8005468:	080054d9 	.word	0x080054d9
 800546c:	080054d9 	.word	0x080054d9
 8005470:	080054d9 	.word	0x080054d9
 8005474:	080054c1 	.word	0x080054c1
 8005478:	080054d9 	.word	0x080054d9
 800547c:	080054d9 	.word	0x080054d9
 8005480:	080054d9 	.word	0x080054d9
 8005484:	080054d9 	.word	0x080054d9
 8005488:	080054d9 	.word	0x080054d9
 800548c:	080054d9 	.word	0x080054d9
 8005490:	080054d9 	.word	0x080054d9
 8005494:	080054c9 	.word	0x080054c9
 8005498:	080054d9 	.word	0x080054d9
 800549c:	080054d9 	.word	0x080054d9
 80054a0:	080054d9 	.word	0x080054d9
 80054a4:	080054d9 	.word	0x080054d9
 80054a8:	080054d9 	.word	0x080054d9
 80054ac:	080054d9 	.word	0x080054d9
 80054b0:	080054d9 	.word	0x080054d9
 80054b4:	080054d1 	.word	0x080054d1
        case ACCEL_RANGE_2G:
            accel_sens = ACCEL_SENS_2G;
 80054b8:	f04f 438d 	mov.w	r3, #1182793728	; 0x46800000
 80054bc:	623b      	str	r3, [r7, #32]
            break;
 80054be:	e00b      	b.n	80054d8 <sens_UpdData+0x1a8>
        case ACCEL_RANGE_4G:
            accel_sens = ACCEL_SENS_4G;
 80054c0:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 80054c4:	623b      	str	r3, [r7, #32]
            break;
 80054c6:	e007      	b.n	80054d8 <sens_UpdData+0x1a8>
        case ACCEL_RANGE_8G:
            accel_sens = ACCEL_SENS_8G;
 80054c8:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 80054cc:	623b      	str	r3, [r7, #32]
            break;
 80054ce:	e003      	b.n	80054d8 <sens_UpdData+0x1a8>
        case ACCEL_RANGE_16G:
            accel_sens = ACCEL_SENS_16G;
 80054d0:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 80054d4:	623b      	str	r3, [r7, #32]
            break;
 80054d6:	bf00      	nop
    }

    sens_info.accel_x = raw_accel_x / accel_sens; // g
 80054d8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80054dc:	ee07 3a90 	vmov	s15, r3
 80054e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80054e4:	ed97 7a08 	vldr	s14, [r7, #32]
 80054e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054ec:	4b34      	ldr	r3, [pc, #208]	; (80055c0 <sens_UpdData+0x290>)
 80054ee:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    sens_info.accel_y = raw_accel_y / accel_sens; // g
 80054f2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80054f6:	ee07 3a90 	vmov	s15, r3
 80054fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80054fe:	ed97 7a08 	vldr	s14, [r7, #32]
 8005502:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005506:	4b2e      	ldr	r3, [pc, #184]	; (80055c0 <sens_UpdData+0x290>)
 8005508:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    sens_info.accel_z = raw_accel_z / accel_sens; // g
 800550c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8005510:	ee07 3a90 	vmov	s15, r3
 8005514:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005518:	ed97 7a08 	vldr	s14, [r7, #32]
 800551c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005520:	4b27      	ldr	r3, [pc, #156]	; (80055c0 <sens_UpdData+0x290>)
 8005522:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    sens_info.gyro_x = raw_gyro_x / gyro_sens; // °/s
 8005526:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800552a:	ee07 3a90 	vmov	s15, r3
 800552e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005532:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005536:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800553a:	4b21      	ldr	r3, [pc, #132]	; (80055c0 <sens_UpdData+0x290>)
 800553c:	edc3 7a02 	vstr	s15, [r3, #8]
    sens_info.gyro_y = raw_gyro_y / gyro_sens; // °/s
 8005540:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005544:	ee07 3a90 	vmov	s15, r3
 8005548:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800554c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005550:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005554:	4b1a      	ldr	r3, [pc, #104]	; (80055c0 <sens_UpdData+0x290>)
 8005556:	edc3 7a03 	vstr	s15, [r3, #12]
    sens_info.gyro_z = raw_gyro_z / gyro_sens; // °/s
 800555a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800555e:	ee07 3a90 	vmov	s15, r3
 8005562:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005566:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800556a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800556e:	4b14      	ldr	r3, [pc, #80]	; (80055c0 <sens_UpdData+0x290>)
 8005570:	edc3 7a04 	vstr	s15, [r3, #16]
    sens_info.temperature = (raw_temp / 340.0) + 36.53; // °C
 8005574:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005578:	4618      	mov	r0, r3
 800557a:	f7fa ff87 	bl	800048c <__aeabi_i2d>
 800557e:	f04f 0200 	mov.w	r2, #0
 8005582:	4b14      	ldr	r3, [pc, #80]	; (80055d4 <sens_UpdData+0x2a4>)
 8005584:	f7fb f916 	bl	80007b4 <__aeabi_ddiv>
 8005588:	4602      	mov	r2, r0
 800558a:	460b      	mov	r3, r1
 800558c:	4610      	mov	r0, r2
 800558e:	4619      	mov	r1, r3
 8005590:	a309      	add	r3, pc, #36	; (adr r3, 80055b8 <sens_UpdData+0x288>)
 8005592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005596:	f7fa fe2d 	bl	80001f4 <__adddf3>
 800559a:	4602      	mov	r2, r0
 800559c:	460b      	mov	r3, r1
 800559e:	4610      	mov	r0, r2
 80055a0:	4619      	mov	r1, r3
 80055a2:	f7fb f9ef 	bl	8000984 <__aeabi_d2f>
 80055a6:	4603      	mov	r3, r0
 80055a8:	4a05      	ldr	r2, [pc, #20]	; (80055c0 <sens_UpdData+0x290>)
 80055aa:	6313      	str	r3, [r2, #48]	; 0x30

    return HAL_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3728      	adds	r7, #40	; 0x28
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	0a3d70a4 	.word	0x0a3d70a4
 80055bc:	404243d7 	.word	0x404243d7
 80055c0:	20000a50 	.word	0x20000a50
 80055c4:	43030000 	.word	0x43030000
 80055c8:	42830000 	.word	0x42830000
 80055cc:	42033333 	.word	0x42033333
 80055d0:	41833333 	.word	0x41833333
 80055d4:	40754000 	.word	0x40754000

080055d8 <sens_WriteByte>:

void sens_WriteByte(uint8_t reg, uint8_t data)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af04      	add	r7, sp, #16
 80055de:	4603      	mov	r3, r0
 80055e0:	460a      	mov	r2, r1
 80055e2:	71fb      	strb	r3, [r7, #7]
 80055e4:	4613      	mov	r3, r2
 80055e6:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&HAL_MEMS_I2C, SENS_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 1000);
 80055e8:	79fb      	ldrb	r3, [r7, #7]
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80055f0:	9302      	str	r3, [sp, #8]
 80055f2:	2301      	movs	r3, #1
 80055f4:	9301      	str	r3, [sp, #4]
 80055f6:	1dbb      	adds	r3, r7, #6
 80055f8:	9300      	str	r3, [sp, #0]
 80055fa:	2301      	movs	r3, #1
 80055fc:	21d0      	movs	r1, #208	; 0xd0
 80055fe:	4803      	ldr	r0, [pc, #12]	; (800560c <sens_WriteByte+0x34>)
 8005600:	f002 fc8a 	bl	8007f18 <HAL_I2C_Mem_Write>

    return;
 8005604:	bf00      	nop
}
 8005606:	3708      	adds	r7, #8
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	2000054c 	.word	0x2000054c

08005610 <sens_Read>:

HAL_StatusTypeDef sens_Read(uint8_t reg, uint8_t* data, uint16_t size)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b088      	sub	sp, #32
 8005614:	af04      	add	r7, sp, #16
 8005616:	4603      	mov	r3, r0
 8005618:	6039      	str	r1, [r7, #0]
 800561a:	71fb      	strb	r3, [r7, #7]
 800561c:	4613      	mov	r3, r2
 800561e:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef status;

	status = HAL_I2C_Mem_Read(&HAL_MEMS_I2C, SENS_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, size, 1000);
 8005620:	79fb      	ldrb	r3, [r7, #7]
 8005622:	b29a      	uxth	r2, r3
 8005624:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005628:	9302      	str	r3, [sp, #8]
 800562a:	88bb      	ldrh	r3, [r7, #4]
 800562c:	9301      	str	r3, [sp, #4]
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	9300      	str	r3, [sp, #0]
 8005632:	2301      	movs	r3, #1
 8005634:	21d0      	movs	r1, #208	; 0xd0
 8005636:	4807      	ldr	r0, [pc, #28]	; (8005654 <sens_Read+0x44>)
 8005638:	f002 fd68 	bl	800810c <HAL_I2C_Mem_Read>
 800563c:	4603      	mov	r3, r0
 800563e:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 8005640:	7bfb      	ldrb	r3, [r7, #15]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <sens_Read+0x3a>
		return status;
 8005646:	7bfb      	ldrb	r3, [r7, #15]
 8005648:	e000      	b.n	800564c <sens_Read+0x3c>
	}

    return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	2000054c 	.word	0x2000054c

08005658 <cfg_NodeSensVarProp>:

/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeSensVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 8005658:	b480      	push	{r7}
 800565a:	b087      	sub	sp, #28
 800565c:	af00      	add	r7, sp, #0
 800565e:	4603      	mov	r3, r0
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
 8005664:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 8005666:	89fb      	ldrh	r3, [r7, #14]
 8005668:	2b0c      	cmp	r3, #12
 800566a:	d844      	bhi.n	80056f6 <cfg_NodeSensVarProp+0x9e>
 800566c:	a201      	add	r2, pc, #4	; (adr r2, 8005674 <cfg_NodeSensVarProp+0x1c>)
 800566e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005672:	bf00      	nop
 8005674:	080056a9 	.word	0x080056a9
 8005678:	080056af 	.word	0x080056af
 800567c:	080056b5 	.word	0x080056b5
 8005680:	080056bb 	.word	0x080056bb
 8005684:	080056c1 	.word	0x080056c1
 8005688:	080056c7 	.word	0x080056c7
 800568c:	080056cd 	.word	0x080056cd
 8005690:	080056d3 	.word	0x080056d3
 8005694:	080056d9 	.word	0x080056d9
 8005698:	080056df 	.word	0x080056df
 800569c:	080056e5 	.word	0x080056e5
 80056a0:	080056eb 	.word	0x080056eb
 80056a4:	080056f1 	.word	0x080056f1
	{
		case SENS_STATE:		str = "State"; break;
 80056a8:	4b4e      	ldr	r3, [pc, #312]	; (80057e4 <cfg_NodeSensVarProp+0x18c>)
 80056aa:	617b      	str	r3, [r7, #20]
 80056ac:	e025      	b.n	80056fa <cfg_NodeSensVarProp+0xa2>
		case SENS_GYRO_X:		str = "Gyro X"; break;
 80056ae:	4b4e      	ldr	r3, [pc, #312]	; (80057e8 <cfg_NodeSensVarProp+0x190>)
 80056b0:	617b      	str	r3, [r7, #20]
 80056b2:	e022      	b.n	80056fa <cfg_NodeSensVarProp+0xa2>
		case SENS_GYRO_Y:		str = "Gyro Y"; break;
 80056b4:	4b4d      	ldr	r3, [pc, #308]	; (80057ec <cfg_NodeSensVarProp+0x194>)
 80056b6:	617b      	str	r3, [r7, #20]
 80056b8:	e01f      	b.n	80056fa <cfg_NodeSensVarProp+0xa2>
		case SENS_GYRO_Z:		str = "Gyro Z"; break;
 80056ba:	4b4d      	ldr	r3, [pc, #308]	; (80057f0 <cfg_NodeSensVarProp+0x198>)
 80056bc:	617b      	str	r3, [r7, #20]
 80056be:	e01c      	b.n	80056fa <cfg_NodeSensVarProp+0xa2>
		case SENS_ACCEL_X:		str = "Accel X"; break;
 80056c0:	4b4c      	ldr	r3, [pc, #304]	; (80057f4 <cfg_NodeSensVarProp+0x19c>)
 80056c2:	617b      	str	r3, [r7, #20]
 80056c4:	e019      	b.n	80056fa <cfg_NodeSensVarProp+0xa2>
		case SENS_ACCEL_Y:		str = "Accel Y"; break;
 80056c6:	4b4c      	ldr	r3, [pc, #304]	; (80057f8 <cfg_NodeSensVarProp+0x1a0>)
 80056c8:	617b      	str	r3, [r7, #20]
 80056ca:	e016      	b.n	80056fa <cfg_NodeSensVarProp+0xa2>
		case SENS_ACCEL_Z:		str = "Accel Z"; break;
 80056cc:	4b4b      	ldr	r3, [pc, #300]	; (80057fc <cfg_NodeSensVarProp+0x1a4>)
 80056ce:	617b      	str	r3, [r7, #20]
 80056d0:	e013      	b.n	80056fa <cfg_NodeSensVarProp+0xa2>
		case SENS_TEMPERATURE:	str = "Temperature"; break;
 80056d2:	4b4b      	ldr	r3, [pc, #300]	; (8005800 <cfg_NodeSensVarProp+0x1a8>)
 80056d4:	617b      	str	r3, [r7, #20]
 80056d6:	e010      	b.n	80056fa <cfg_NodeSensVarProp+0xa2>
		case SENS_SAT_NUM:		str = "GNSS sat number"; break;
 80056d8:	4b4a      	ldr	r3, [pc, #296]	; (8005804 <cfg_NodeSensVarProp+0x1ac>)
 80056da:	617b      	str	r3, [r7, #20]
 80056dc:	e00d      	b.n	80056fa <cfg_NodeSensVarProp+0xa2>
		case SENS_LATITUDE:		str = "GNSS latitude"; break;
 80056de:	4b4a      	ldr	r3, [pc, #296]	; (8005808 <cfg_NodeSensVarProp+0x1b0>)
 80056e0:	617b      	str	r3, [r7, #20]
 80056e2:	e00a      	b.n	80056fa <cfg_NodeSensVarProp+0xa2>
		case SENS_LONGITUDE:	str = "GNSS longitude"; break;
 80056e4:	4b49      	ldr	r3, [pc, #292]	; (800580c <cfg_NodeSensVarProp+0x1b4>)
 80056e6:	617b      	str	r3, [r7, #20]
 80056e8:	e007      	b.n	80056fa <cfg_NodeSensVarProp+0xa2>
		case SENS_ALTTITUDE:	str = "GNSS altitude"; break;
 80056ea:	4b49      	ldr	r3, [pc, #292]	; (8005810 <cfg_NodeSensVarProp+0x1b8>)
 80056ec:	617b      	str	r3, [r7, #20]
 80056ee:	e004      	b.n	80056fa <cfg_NodeSensVarProp+0xa2>
		case SENS_SPEED:		str = "GNSS speed"; break;
 80056f0:	4b48      	ldr	r3, [pc, #288]	; (8005814 <cfg_NodeSensVarProp+0x1bc>)
 80056f2:	617b      	str	r3, [r7, #20]
 80056f4:	e001      	b.n	80056fa <cfg_NodeSensVarProp+0xa2>
		default: return CFG_ERROR_VARID;
 80056f6:	2302      	movs	r3, #2
 80056f8:	e06e      	b.n	80057d8 <cfg_NodeSensVarProp+0x180>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00f      	beq.n	8005720 <cfg_NodeSensVarProp+0xc8>
 8005700:	e007      	b.n	8005712 <cfg_NodeSensVarProp+0xba>
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	1c53      	adds	r3, r2, #1
 8005706:	617b      	str	r3, [r7, #20]
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	1c59      	adds	r1, r3, #1
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	7812      	ldrb	r2, [r2, #0]
 8005710:	701a      	strb	r2, [r3, #0]
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1f3      	bne.n	8005702 <cfg_NodeSensVarProp+0xaa>
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	2200      	movs	r2, #0
 800571e:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d056      	beq.n	80057d4 <cfg_NodeSensVarProp+0x17c>
 8005726:	89fb      	ldrh	r3, [r7, #14]
 8005728:	2b0c      	cmp	r3, #12
 800572a:	d851      	bhi.n	80057d0 <cfg_NodeSensVarProp+0x178>
 800572c:	a201      	add	r2, pc, #4	; (adr r2, 8005734 <cfg_NodeSensVarProp+0xdc>)
 800572e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005732:	bf00      	nop
 8005734:	08005769 	.word	0x08005769
 8005738:	08005771 	.word	0x08005771
 800573c:	08005779 	.word	0x08005779
 8005740:	08005781 	.word	0x08005781
 8005744:	08005789 	.word	0x08005789
 8005748:	08005791 	.word	0x08005791
 800574c:	08005799 	.word	0x08005799
 8005750:	080057a1 	.word	0x080057a1
 8005754:	080057a9 	.word	0x080057a9
 8005758:	080057b1 	.word	0x080057b1
 800575c:	080057b9 	.word	0x080057b9
 8005760:	080057c1 	.word	0x080057c1
 8005764:	080057c9 	.word	0x080057c9
	{
		case SENS_STATE:		*prop = CFG_VAR_TYPE_UINT; break;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2202      	movs	r2, #2
 800576c:	801a      	strh	r2, [r3, #0]
 800576e:	e032      	b.n	80057d6 <cfg_NodeSensVarProp+0x17e>
		case SENS_GYRO_X:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2214      	movs	r2, #20
 8005774:	801a      	strh	r2, [r3, #0]
 8005776:	e02e      	b.n	80057d6 <cfg_NodeSensVarProp+0x17e>
		case SENS_GYRO_Y:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2214      	movs	r2, #20
 800577c:	801a      	strh	r2, [r3, #0]
 800577e:	e02a      	b.n	80057d6 <cfg_NodeSensVarProp+0x17e>
		case SENS_GYRO_Z:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2214      	movs	r2, #20
 8005784:	801a      	strh	r2, [r3, #0]
 8005786:	e026      	b.n	80057d6 <cfg_NodeSensVarProp+0x17e>
		case SENS_ACCEL_X:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2214      	movs	r2, #20
 800578c:	801a      	strh	r2, [r3, #0]
 800578e:	e022      	b.n	80057d6 <cfg_NodeSensVarProp+0x17e>
		case SENS_ACCEL_Y:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2214      	movs	r2, #20
 8005794:	801a      	strh	r2, [r3, #0]
 8005796:	e01e      	b.n	80057d6 <cfg_NodeSensVarProp+0x17e>
		case SENS_ACCEL_Z:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2214      	movs	r2, #20
 800579c:	801a      	strh	r2, [r3, #0]
 800579e:	e01a      	b.n	80057d6 <cfg_NodeSensVarProp+0x17e>
		case SENS_TEMPERATURE:	*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2214      	movs	r2, #20
 80057a4:	801a      	strh	r2, [r3, #0]
 80057a6:	e016      	b.n	80057d6 <cfg_NodeSensVarProp+0x17e>
		case SENS_SAT_NUM:		*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2212      	movs	r2, #18
 80057ac:	801a      	strh	r2, [r3, #0]
 80057ae:	e012      	b.n	80057d6 <cfg_NodeSensVarProp+0x17e>
		case SENS_LATITUDE:		*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2211      	movs	r2, #17
 80057b4:	801a      	strh	r2, [r3, #0]
 80057b6:	e00e      	b.n	80057d6 <cfg_NodeSensVarProp+0x17e>
		case SENS_LONGITUDE:	*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2211      	movs	r2, #17
 80057bc:	801a      	strh	r2, [r3, #0]
 80057be:	e00a      	b.n	80057d6 <cfg_NodeSensVarProp+0x17e>
		case SENS_ALTTITUDE:	*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2214      	movs	r2, #20
 80057c4:	801a      	strh	r2, [r3, #0]
 80057c6:	e006      	b.n	80057d6 <cfg_NodeSensVarProp+0x17e>
		case SENS_SPEED:		*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2211      	movs	r2, #17
 80057cc:	801a      	strh	r2, [r3, #0]
 80057ce:	e002      	b.n	80057d6 <cfg_NodeSensVarProp+0x17e>
		default: return CFG_ERROR_VARID;
 80057d0:	2302      	movs	r3, #2
 80057d2:	e001      	b.n	80057d8 <cfg_NodeSensVarProp+0x180>
	}
	return CFG_ERROR_NONE;
 80057d4:	bf00      	nop
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	371c      	adds	r7, #28
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	0800b894 	.word	0x0800b894
 80057e8:	0800b89c 	.word	0x0800b89c
 80057ec:	0800b8a4 	.word	0x0800b8a4
 80057f0:	0800b8ac 	.word	0x0800b8ac
 80057f4:	0800b8b4 	.word	0x0800b8b4
 80057f8:	0800b8bc 	.word	0x0800b8bc
 80057fc:	0800b8c4 	.word	0x0800b8c4
 8005800:	0800b8cc 	.word	0x0800b8cc
 8005804:	0800b8d8 	.word	0x0800b8d8
 8005808:	0800b8e8 	.word	0x0800b8e8
 800580c:	0800b8f8 	.word	0x0800b8f8
 8005810:	0800b908 	.word	0x0800b908
 8005814:	0800b918 	.word	0x0800b918

08005818 <cfg_NodeSensVarGet>:

uint16_t cfg_NodeSensVarGet(uint16_t varid, void *value)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	4603      	mov	r3, r0
 8005820:	6039      	str	r1, [r7, #0]
 8005822:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d068      	beq.n	80058fc <cfg_NodeSensVarGet+0xe4>
 800582a:	88fb      	ldrh	r3, [r7, #6]
 800582c:	2b0c      	cmp	r3, #12
 800582e:	d863      	bhi.n	80058f8 <cfg_NodeSensVarGet+0xe0>
 8005830:	a201      	add	r2, pc, #4	; (adr r2, 8005838 <cfg_NodeSensVarGet+0x20>)
 8005832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005836:	bf00      	nop
 8005838:	0800586d 	.word	0x0800586d
 800583c:	0800587b 	.word	0x0800587b
 8005840:	08005885 	.word	0x08005885
 8005844:	0800588f 	.word	0x0800588f
 8005848:	08005899 	.word	0x08005899
 800584c:	080058a3 	.word	0x080058a3
 8005850:	080058ad 	.word	0x080058ad
 8005854:	080058b7 	.word	0x080058b7
 8005858:	080058c1 	.word	0x080058c1
 800585c:	080058d1 	.word	0x080058d1
 8005860:	080058db 	.word	0x080058db
 8005864:	080058e5 	.word	0x080058e5
 8005868:	080058ef 	.word	0x080058ef
	{
		case SENS_STATE:		*(uint32_t*)value = sens_info.state; break;
 800586c:	4b27      	ldr	r3, [pc, #156]	; (800590c <cfg_NodeSensVarGet+0xf4>)
 800586e:	791b      	ldrb	r3, [r3, #4]
 8005870:	b2db      	uxtb	r3, r3
 8005872:	461a      	mov	r2, r3
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	601a      	str	r2, [r3, #0]
 8005878:	e041      	b.n	80058fe <cfg_NodeSensVarGet+0xe6>
		case SENS_GYRO_X:		*(float*)value = sens_info.gyro_x; break;
 800587a:	4b24      	ldr	r3, [pc, #144]	; (800590c <cfg_NodeSensVarGet+0xf4>)
 800587c:	689a      	ldr	r2, [r3, #8]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	e03c      	b.n	80058fe <cfg_NodeSensVarGet+0xe6>
		case SENS_GYRO_Y:		*(float*)value = sens_info.gyro_y; break;
 8005884:	4b21      	ldr	r3, [pc, #132]	; (800590c <cfg_NodeSensVarGet+0xf4>)
 8005886:	68da      	ldr	r2, [r3, #12]
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	601a      	str	r2, [r3, #0]
 800588c:	e037      	b.n	80058fe <cfg_NodeSensVarGet+0xe6>
		case SENS_GYRO_Z:		*(float*)value = sens_info.gyro_z; break;
 800588e:	4b1f      	ldr	r3, [pc, #124]	; (800590c <cfg_NodeSensVarGet+0xf4>)
 8005890:	691a      	ldr	r2, [r3, #16]
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	601a      	str	r2, [r3, #0]
 8005896:	e032      	b.n	80058fe <cfg_NodeSensVarGet+0xe6>
		case SENS_ACCEL_X:		*(float*)value = sens_info.accel_x; break;
 8005898:	4b1c      	ldr	r3, [pc, #112]	; (800590c <cfg_NodeSensVarGet+0xf4>)
 800589a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	601a      	str	r2, [r3, #0]
 80058a0:	e02d      	b.n	80058fe <cfg_NodeSensVarGet+0xe6>
		case SENS_ACCEL_Y:		*(float*)value = sens_info.accel_y; break;
 80058a2:	4b1a      	ldr	r3, [pc, #104]	; (800590c <cfg_NodeSensVarGet+0xf4>)
 80058a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	e028      	b.n	80058fe <cfg_NodeSensVarGet+0xe6>
		case SENS_ACCEL_Z:		*(float*)value = sens_info.accel_z; break;
 80058ac:	4b17      	ldr	r3, [pc, #92]	; (800590c <cfg_NodeSensVarGet+0xf4>)
 80058ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	601a      	str	r2, [r3, #0]
 80058b4:	e023      	b.n	80058fe <cfg_NodeSensVarGet+0xe6>
		case SENS_TEMPERATURE:	*(float*)value = sens_info.temperature; break;
 80058b6:	4b15      	ldr	r3, [pc, #84]	; (800590c <cfg_NodeSensVarGet+0xf4>)
 80058b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	601a      	str	r2, [r3, #0]
 80058be:	e01e      	b.n	80058fe <cfg_NodeSensVarGet+0xe6>
		case SENS_SAT_NUM:		*(int32_t*)value = sens_info.sat_num; break;
 80058c0:	4b12      	ldr	r3, [pc, #72]	; (800590c <cfg_NodeSensVarGet+0xf4>)
 80058c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	461a      	mov	r2, r3
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	601a      	str	r2, [r3, #0]
 80058ce:	e016      	b.n	80058fe <cfg_NodeSensVarGet+0xe6>
		case SENS_LATITUDE:		*(int32_t*)value = sens_info.latitude; break;
 80058d0:	4b0e      	ldr	r3, [pc, #56]	; (800590c <cfg_NodeSensVarGet+0xf4>)
 80058d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	601a      	str	r2, [r3, #0]
 80058d8:	e011      	b.n	80058fe <cfg_NodeSensVarGet+0xe6>
		case SENS_LONGITUDE:	*(int32_t*)value = sens_info.longitude; break;
 80058da:	4b0c      	ldr	r3, [pc, #48]	; (800590c <cfg_NodeSensVarGet+0xf4>)
 80058dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	601a      	str	r2, [r3, #0]
 80058e2:	e00c      	b.n	80058fe <cfg_NodeSensVarGet+0xe6>
		case SENS_ALTTITUDE:	*(float*)value = sens_info.altitude; break;
 80058e4:	4b09      	ldr	r3, [pc, #36]	; (800590c <cfg_NodeSensVarGet+0xf4>)
 80058e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	601a      	str	r2, [r3, #0]
 80058ec:	e007      	b.n	80058fe <cfg_NodeSensVarGet+0xe6>
		case SENS_SPEED:		*(int32_t*)value = sens_info.speed; break;
 80058ee:	4b07      	ldr	r3, [pc, #28]	; (800590c <cfg_NodeSensVarGet+0xf4>)
 80058f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	601a      	str	r2, [r3, #0]
 80058f6:	e002      	b.n	80058fe <cfg_NodeSensVarGet+0xe6>
		default: return CFG_ERROR_VARID;
 80058f8:	2302      	movs	r3, #2
 80058fa:	e001      	b.n	8005900 <cfg_NodeSensVarGet+0xe8>
	}
	return CFG_ERROR_NONE;
 80058fc:	bf00      	nop
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr
 800590c:	20000a50 	.word	0x20000a50

08005910 <cfg_NodeSensVarSet>:

uint16_t cfg_NodeSensVarSet(uint16_t varid, void *value)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	4603      	mov	r3, r0
 8005918:	6039      	str	r1, [r7, #0]
 800591a:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00a      	beq.n	8005938 <cfg_NodeSensVarSet+0x28>
 8005922:	88fb      	ldrh	r3, [r7, #6]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d105      	bne.n	8005934 <cfg_NodeSensVarSet+0x24>
	{
		case SENS_STATE:		sens_info.state = (uint8_t)*(uint32_t*)value; break;
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	b2da      	uxtb	r2, r3
 800592e:	4b06      	ldr	r3, [pc, #24]	; (8005948 <cfg_NodeSensVarSet+0x38>)
 8005930:	711a      	strb	r2, [r3, #4]
 8005932:	e002      	b.n	800593a <cfg_NodeSensVarSet+0x2a>
		default: return CFG_ERROR_VARID;
 8005934:	2302      	movs	r3, #2
 8005936:	e001      	b.n	800593c <cfg_NodeSensVarSet+0x2c>
	}
	return CFG_ERROR_NONE;
 8005938:	bf00      	nop
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr
 8005948:	20000a50 	.word	0x20000a50

0800594c <servo_Timer>:

uint16_t servo_angToPWM(uint16_t ang);
int32_t servo_map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max);

void servo_Timer(uint32_t res)
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
#ifdef NO_SERVO
	return;
#endif //NO_SERVO

	for( uint8_t i = 0; i < SERVO_TMR_NUM; i++ )
 8005954:	2300      	movs	r3, #0
 8005956:	73fb      	strb	r3, [r7, #15]
 8005958:	e014      	b.n	8005984 <servo_Timer+0x38>
	{
		if( servo_info.timer[i] > 0 ){
 800595a:	7bfb      	ldrb	r3, [r7, #15]
 800595c:	4a0e      	ldr	r2, [pc, #56]	; (8005998 <servo_Timer+0x4c>)
 800595e:	330c      	adds	r3, #12
 8005960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00a      	beq.n	800597e <servo_Timer+0x32>
			servo_info.timer[i]--;
 8005968:	7bfb      	ldrb	r3, [r7, #15]
 800596a:	490b      	ldr	r1, [pc, #44]	; (8005998 <servo_Timer+0x4c>)
 800596c:	f103 020c 	add.w	r2, r3, #12
 8005970:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005974:	3a01      	subs	r2, #1
 8005976:	4908      	ldr	r1, [pc, #32]	; (8005998 <servo_Timer+0x4c>)
 8005978:	330c      	adds	r3, #12
 800597a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for( uint8_t i = 0; i < SERVO_TMR_NUM; i++ )
 800597e:	7bfb      	ldrb	r3, [r7, #15]
 8005980:	3301      	adds	r3, #1
 8005982:	73fb      	strb	r3, [r7, #15]
 8005984:	7bfb      	ldrb	r3, [r7, #15]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d0e7      	beq.n	800595a <servo_Timer+0xe>
		}
	}

	return;
 800598a:	bf00      	nop
}
 800598c:	3714      	adds	r7, #20
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	20000aa4 	.word	0x20000aa4

0800599c <servo_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void servo_InitTask()
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
#ifdef NO_SERVO
	return;
#endif //NO_SERVO

	servo_info.servos[SERVO_ROLL].tim = &htim3;
 80059a2:	4b3d      	ldr	r3, [pc, #244]	; (8005a98 <servo_InitTask+0xfc>)
 80059a4:	4a3d      	ldr	r2, [pc, #244]	; (8005a9c <servo_InitTask+0x100>)
 80059a6:	601a      	str	r2, [r3, #0]
	servo_info.servos[SERVO_ROLL].timch = TIM_CHANNEL_1;
 80059a8:	4b3b      	ldr	r3, [pc, #236]	; (8005a98 <servo_InitTask+0xfc>)
 80059aa:	2200      	movs	r2, #0
 80059ac:	605a      	str	r2, [r3, #4]
	servo_info.servos[SERVO_ROLL].cur_ang = 0;
 80059ae:	4b3a      	ldr	r3, [pc, #232]	; (8005a98 <servo_InitTask+0xfc>)
 80059b0:	2200      	movs	r2, #0
 80059b2:	819a      	strh	r2, [r3, #12]
	servo_info.servos[SERVO_ROLL].cur_pwm = 0;
 80059b4:	4b38      	ldr	r3, [pc, #224]	; (8005a98 <servo_InitTask+0xfc>)
 80059b6:	2200      	movs	r2, #0
 80059b8:	815a      	strh	r2, [r3, #10]
	servo_info.servos[SERVO_ROLL].cur_perc = 0;
 80059ba:	4b37      	ldr	r3, [pc, #220]	; (8005a98 <servo_InitTask+0xfc>)
 80059bc:	2200      	movs	r2, #0
 80059be:	739a      	strb	r2, [r3, #14]
	servo_info.servos[SERVO_ROLL].min_ang = 80;
 80059c0:	4b35      	ldr	r3, [pc, #212]	; (8005a98 <servo_InitTask+0xfc>)
 80059c2:	2250      	movs	r2, #80	; 0x50
 80059c4:	821a      	strh	r2, [r3, #16]
	servo_info.servos[SERVO_ROLL].center_ang = 100;
 80059c6:	4b34      	ldr	r3, [pc, #208]	; (8005a98 <servo_InitTask+0xfc>)
 80059c8:	2264      	movs	r2, #100	; 0x64
 80059ca:	825a      	strh	r2, [r3, #18]
	servo_info.servos[SERVO_ROLL].max_ang = 125;
 80059cc:	4b32      	ldr	r3, [pc, #200]	; (8005a98 <servo_InitTask+0xfc>)
 80059ce:	227d      	movs	r2, #125	; 0x7d
 80059d0:	829a      	strh	r2, [r3, #20]
	servo_info.servos[SERVO_ROLL].enable = 1;
 80059d2:	4b31      	ldr	r3, [pc, #196]	; (8005a98 <servo_InitTask+0xfc>)
 80059d4:	2201      	movs	r2, #1
 80059d6:	721a      	strb	r2, [r3, #8]

	servo_info.servos[SERVO_PITCH].tim = &htim3;
 80059d8:	4b2f      	ldr	r3, [pc, #188]	; (8005a98 <servo_InitTask+0xfc>)
 80059da:	4a30      	ldr	r2, [pc, #192]	; (8005a9c <servo_InitTask+0x100>)
 80059dc:	619a      	str	r2, [r3, #24]
	servo_info.servos[SERVO_PITCH].timch = TIM_CHANNEL_2;
 80059de:	4b2e      	ldr	r3, [pc, #184]	; (8005a98 <servo_InitTask+0xfc>)
 80059e0:	2204      	movs	r2, #4
 80059e2:	61da      	str	r2, [r3, #28]
	servo_info.servos[SERVO_PITCH].cur_ang = 0;
 80059e4:	4b2c      	ldr	r3, [pc, #176]	; (8005a98 <servo_InitTask+0xfc>)
 80059e6:	2200      	movs	r2, #0
 80059e8:	849a      	strh	r2, [r3, #36]	; 0x24
	servo_info.servos[SERVO_PITCH].cur_pwm = 0;
 80059ea:	4b2b      	ldr	r3, [pc, #172]	; (8005a98 <servo_InitTask+0xfc>)
 80059ec:	2200      	movs	r2, #0
 80059ee:	845a      	strh	r2, [r3, #34]	; 0x22
	servo_info.servos[SERVO_PITCH].cur_perc = 0;
 80059f0:	4b29      	ldr	r3, [pc, #164]	; (8005a98 <servo_InitTask+0xfc>)
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	servo_info.servos[SERVO_PITCH].min_ang = 45;
 80059f8:	4b27      	ldr	r3, [pc, #156]	; (8005a98 <servo_InitTask+0xfc>)
 80059fa:	222d      	movs	r2, #45	; 0x2d
 80059fc:	851a      	strh	r2, [r3, #40]	; 0x28
	servo_info.servos[SERVO_PITCH].center_ang = 90;
 80059fe:	4b26      	ldr	r3, [pc, #152]	; (8005a98 <servo_InitTask+0xfc>)
 8005a00:	225a      	movs	r2, #90	; 0x5a
 8005a02:	855a      	strh	r2, [r3, #42]	; 0x2a
	servo_info.servos[SERVO_PITCH].max_ang = 125;
 8005a04:	4b24      	ldr	r3, [pc, #144]	; (8005a98 <servo_InitTask+0xfc>)
 8005a06:	227d      	movs	r2, #125	; 0x7d
 8005a08:	859a      	strh	r2, [r3, #44]	; 0x2c
	servo_info.servos[SERVO_PITCH].enable = 1;
 8005a0a:	4b23      	ldr	r3, [pc, #140]	; (8005a98 <servo_InitTask+0xfc>)
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 2020 	strb.w	r2, [r3, #32]

	//Initialize beginning state
	for( uint8_t i = 0; i < SERVOS_NUM; i++ )
 8005a12:	2300      	movs	r3, #0
 8005a14:	71fb      	strb	r3, [r7, #7]
 8005a16:	e02a      	b.n	8005a6e <servo_InitTask+0xd2>
	{
		servo_info.servos[i].cur_pwm = 0;
 8005a18:	79fa      	ldrb	r2, [r7, #7]
 8005a1a:	491f      	ldr	r1, [pc, #124]	; (8005a98 <servo_InitTask+0xfc>)
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	005b      	lsls	r3, r3, #1
 8005a20:	4413      	add	r3, r2
 8005a22:	00db      	lsls	r3, r3, #3
 8005a24:	440b      	add	r3, r1
 8005a26:	330a      	adds	r3, #10
 8005a28:	2200      	movs	r2, #0
 8005a2a:	801a      	strh	r2, [r3, #0]
		servo_info.servos[i].cur_ang = 0;
 8005a2c:	79fa      	ldrb	r2, [r7, #7]
 8005a2e:	491a      	ldr	r1, [pc, #104]	; (8005a98 <servo_InitTask+0xfc>)
 8005a30:	4613      	mov	r3, r2
 8005a32:	005b      	lsls	r3, r3, #1
 8005a34:	4413      	add	r3, r2
 8005a36:	00db      	lsls	r3, r3, #3
 8005a38:	440b      	add	r3, r1
 8005a3a:	330c      	adds	r3, #12
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	801a      	strh	r2, [r3, #0]
		HAL_TIM_PWM_Start(servo_info.servos[i].tim, servo_info.servos[i].timch);
 8005a40:	79fa      	ldrb	r2, [r7, #7]
 8005a42:	4915      	ldr	r1, [pc, #84]	; (8005a98 <servo_InitTask+0xfc>)
 8005a44:	4613      	mov	r3, r2
 8005a46:	005b      	lsls	r3, r3, #1
 8005a48:	4413      	add	r3, r2
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	440b      	add	r3, r1
 8005a4e:	6818      	ldr	r0, [r3, #0]
 8005a50:	79fa      	ldrb	r2, [r7, #7]
 8005a52:	4911      	ldr	r1, [pc, #68]	; (8005a98 <servo_InitTask+0xfc>)
 8005a54:	4613      	mov	r3, r2
 8005a56:	005b      	lsls	r3, r3, #1
 8005a58:	4413      	add	r3, r2
 8005a5a:	00db      	lsls	r3, r3, #3
 8005a5c:	440b      	add	r3, r1
 8005a5e:	3304      	adds	r3, #4
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4619      	mov	r1, r3
 8005a64:	f003 fe6a 	bl	800973c <HAL_TIM_PWM_Start>
	for( uint8_t i = 0; i < SERVOS_NUM; i++ )
 8005a68:	79fb      	ldrb	r3, [r7, #7]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	71fb      	strb	r3, [r7, #7]
 8005a6e:	79fb      	ldrb	r3, [r7, #7]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d9d1      	bls.n	8005a18 <servo_InitTask+0x7c>
	}

	servo_setAng(SERVO_ROLL, servo_info.servos[SERVO_ROLL].center_ang);
 8005a74:	4b08      	ldr	r3, [pc, #32]	; (8005a98 <servo_InitTask+0xfc>)
 8005a76:	8a5b      	ldrh	r3, [r3, #18]
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	2000      	movs	r0, #0
 8005a7e:	f000 f82b 	bl	8005ad8 <servo_setAng>
	servo_setAng(SERVO_PITCH, servo_info.servos[SERVO_PITCH].center_ang);
 8005a82:	4b05      	ldr	r3, [pc, #20]	; (8005a98 <servo_InitTask+0xfc>)
 8005a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	4619      	mov	r1, r3
 8005a8a:	2001      	movs	r0, #1
 8005a8c:	f000 f824 	bl	8005ad8 <servo_setAng>

	return;
 8005a90:	bf00      	nop
}
 8005a92:	3708      	adds	r7, #8
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	20000aa4 	.word	0x20000aa4
 8005a9c:	200005a0 	.word	0x200005a0

08005aa0 <servo_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void servo_Task(void)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	af00      	add	r7, sp, #0
#ifdef NO_SERVO
	return;
#endif //NO_SERVO

	return;
 8005aa4:	bf00      	nop
}
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr

08005aae <servo_angToPWM>:

uint16_t servo_angToPWM(uint16_t ang)
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b085      	sub	sp, #20
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	80fb      	strh	r3, [r7, #6]
	uint16_t pwm_val;

	pwm_val = SERVO_0DEG_PWM_VAL + (ang * SERVO_1DEG_PWM_STEP);
 8005ab8:	88fb      	ldrh	r3, [r7, #6]
 8005aba:	461a      	mov	r2, r3
 8005abc:	0052      	lsls	r2, r2, #1
 8005abe:	4413      	add	r3, r2
 8005ac0:	005b      	lsls	r3, r3, #1
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	33f5      	adds	r3, #245	; 0xf5
 8005ac6:	81fb      	strh	r3, [r7, #14]

	return pwm_val;
 8005ac8:	89fb      	ldrh	r3, [r7, #14]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3714      	adds	r7, #20
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
	...

08005ad8 <servo_setAng>:

void servo_setAng(uint8_t servo, uint16_t ang)
{
 8005ad8:	b590      	push	{r4, r7, lr}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	4603      	mov	r3, r0
 8005ae0:	460a      	mov	r2, r1
 8005ae2:	71fb      	strb	r3, [r7, #7]
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	80bb      	strh	r3, [r7, #4]
#ifdef NO_SERVO
	return;
#endif //NO_SERVO

	if( servo >= SERVOS_NUM ){
 8005ae8:	79fb      	ldrb	r3, [r7, #7]
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	f200 809f 	bhi.w	8005c2e <servo_setAng+0x156>
		return;
	}

	servo_info.servos[servo].cur_ang = ang;
 8005af0:	79fa      	ldrb	r2, [r7, #7]
 8005af2:	4952      	ldr	r1, [pc, #328]	; (8005c3c <servo_setAng+0x164>)
 8005af4:	4613      	mov	r3, r2
 8005af6:	005b      	lsls	r3, r3, #1
 8005af8:	4413      	add	r3, r2
 8005afa:	00db      	lsls	r3, r3, #3
 8005afc:	440b      	add	r3, r1
 8005afe:	330c      	adds	r3, #12
 8005b00:	88ba      	ldrh	r2, [r7, #4]
 8005b02:	801a      	strh	r2, [r3, #0]
	servo_info.servos[servo].cur_pwm = servo_angToPWM(ang);
 8005b04:	79fc      	ldrb	r4, [r7, #7]
 8005b06:	88bb      	ldrh	r3, [r7, #4]
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7ff ffd0 	bl	8005aae <servo_angToPWM>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	4619      	mov	r1, r3
 8005b12:	4a4a      	ldr	r2, [pc, #296]	; (8005c3c <servo_setAng+0x164>)
 8005b14:	4623      	mov	r3, r4
 8005b16:	005b      	lsls	r3, r3, #1
 8005b18:	4423      	add	r3, r4
 8005b1a:	00db      	lsls	r3, r3, #3
 8005b1c:	4413      	add	r3, r2
 8005b1e:	330a      	adds	r3, #10
 8005b20:	460a      	mov	r2, r1
 8005b22:	801a      	strh	r2, [r3, #0]
	if( servo_info.servos[servo].enable == 1 ){
 8005b24:	79fa      	ldrb	r2, [r7, #7]
 8005b26:	4945      	ldr	r1, [pc, #276]	; (8005c3c <servo_setAng+0x164>)
 8005b28:	4613      	mov	r3, r2
 8005b2a:	005b      	lsls	r3, r3, #1
 8005b2c:	4413      	add	r3, r2
 8005b2e:	00db      	lsls	r3, r3, #3
 8005b30:	440b      	add	r3, r1
 8005b32:	3308      	adds	r3, #8
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d17a      	bne.n	8005c32 <servo_setAng+0x15a>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 8005b3c:	79fa      	ldrb	r2, [r7, #7]
 8005b3e:	493f      	ldr	r1, [pc, #252]	; (8005c3c <servo_setAng+0x164>)
 8005b40:	4613      	mov	r3, r2
 8005b42:	005b      	lsls	r3, r3, #1
 8005b44:	4413      	add	r3, r2
 8005b46:	00db      	lsls	r3, r3, #3
 8005b48:	440b      	add	r3, r1
 8005b4a:	3304      	adds	r3, #4
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d115      	bne.n	8005b7e <servo_setAng+0xa6>
 8005b52:	79fa      	ldrb	r2, [r7, #7]
 8005b54:	4939      	ldr	r1, [pc, #228]	; (8005c3c <servo_setAng+0x164>)
 8005b56:	4613      	mov	r3, r2
 8005b58:	005b      	lsls	r3, r3, #1
 8005b5a:	4413      	add	r3, r2
 8005b5c:	00db      	lsls	r3, r3, #3
 8005b5e:	440b      	add	r3, r1
 8005b60:	330a      	adds	r3, #10
 8005b62:	881b      	ldrh	r3, [r3, #0]
 8005b64:	b298      	uxth	r0, r3
 8005b66:	79fa      	ldrb	r2, [r7, #7]
 8005b68:	4934      	ldr	r1, [pc, #208]	; (8005c3c <servo_setAng+0x164>)
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	005b      	lsls	r3, r3, #1
 8005b6e:	4413      	add	r3, r2
 8005b70:	00db      	lsls	r3, r3, #3
 8005b72:	440b      	add	r3, r1
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4602      	mov	r2, r0
 8005b7a:	635a      	str	r2, [r3, #52]	; 0x34
	}

	return;
 8005b7c:	e059      	b.n	8005c32 <servo_setAng+0x15a>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 8005b7e:	79fa      	ldrb	r2, [r7, #7]
 8005b80:	492e      	ldr	r1, [pc, #184]	; (8005c3c <servo_setAng+0x164>)
 8005b82:	4613      	mov	r3, r2
 8005b84:	005b      	lsls	r3, r3, #1
 8005b86:	4413      	add	r3, r2
 8005b88:	00db      	lsls	r3, r3, #3
 8005b8a:	440b      	add	r3, r1
 8005b8c:	3304      	adds	r3, #4
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2b04      	cmp	r3, #4
 8005b92:	d115      	bne.n	8005bc0 <servo_setAng+0xe8>
 8005b94:	79fa      	ldrb	r2, [r7, #7]
 8005b96:	4929      	ldr	r1, [pc, #164]	; (8005c3c <servo_setAng+0x164>)
 8005b98:	4613      	mov	r3, r2
 8005b9a:	005b      	lsls	r3, r3, #1
 8005b9c:	4413      	add	r3, r2
 8005b9e:	00db      	lsls	r3, r3, #3
 8005ba0:	440b      	add	r3, r1
 8005ba2:	330a      	adds	r3, #10
 8005ba4:	881b      	ldrh	r3, [r3, #0]
 8005ba6:	b298      	uxth	r0, r3
 8005ba8:	79fa      	ldrb	r2, [r7, #7]
 8005baa:	4924      	ldr	r1, [pc, #144]	; (8005c3c <servo_setAng+0x164>)
 8005bac:	4613      	mov	r3, r2
 8005bae:	005b      	lsls	r3, r3, #1
 8005bb0:	4413      	add	r3, r2
 8005bb2:	00db      	lsls	r3, r3, #3
 8005bb4:	440b      	add	r3, r1
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	4603      	mov	r3, r0
 8005bbc:	6393      	str	r3, [r2, #56]	; 0x38
	return;
 8005bbe:	e038      	b.n	8005c32 <servo_setAng+0x15a>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 8005bc0:	79fa      	ldrb	r2, [r7, #7]
 8005bc2:	491e      	ldr	r1, [pc, #120]	; (8005c3c <servo_setAng+0x164>)
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	005b      	lsls	r3, r3, #1
 8005bc8:	4413      	add	r3, r2
 8005bca:	00db      	lsls	r3, r3, #3
 8005bcc:	440b      	add	r3, r1
 8005bce:	3304      	adds	r3, #4
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2b08      	cmp	r3, #8
 8005bd4:	d115      	bne.n	8005c02 <servo_setAng+0x12a>
 8005bd6:	79fa      	ldrb	r2, [r7, #7]
 8005bd8:	4918      	ldr	r1, [pc, #96]	; (8005c3c <servo_setAng+0x164>)
 8005bda:	4613      	mov	r3, r2
 8005bdc:	005b      	lsls	r3, r3, #1
 8005bde:	4413      	add	r3, r2
 8005be0:	00db      	lsls	r3, r3, #3
 8005be2:	440b      	add	r3, r1
 8005be4:	330a      	adds	r3, #10
 8005be6:	881b      	ldrh	r3, [r3, #0]
 8005be8:	b298      	uxth	r0, r3
 8005bea:	79fa      	ldrb	r2, [r7, #7]
 8005bec:	4913      	ldr	r1, [pc, #76]	; (8005c3c <servo_setAng+0x164>)
 8005bee:	4613      	mov	r3, r2
 8005bf0:	005b      	lsls	r3, r3, #1
 8005bf2:	4413      	add	r3, r2
 8005bf4:	00db      	lsls	r3, r3, #3
 8005bf6:	440b      	add	r3, r1
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	63d3      	str	r3, [r2, #60]	; 0x3c
	return;
 8005c00:	e017      	b.n	8005c32 <servo_setAng+0x15a>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 8005c02:	79fa      	ldrb	r2, [r7, #7]
 8005c04:	490d      	ldr	r1, [pc, #52]	; (8005c3c <servo_setAng+0x164>)
 8005c06:	4613      	mov	r3, r2
 8005c08:	005b      	lsls	r3, r3, #1
 8005c0a:	4413      	add	r3, r2
 8005c0c:	00db      	lsls	r3, r3, #3
 8005c0e:	440b      	add	r3, r1
 8005c10:	330a      	adds	r3, #10
 8005c12:	881b      	ldrh	r3, [r3, #0]
 8005c14:	b298      	uxth	r0, r3
 8005c16:	79fa      	ldrb	r2, [r7, #7]
 8005c18:	4908      	ldr	r1, [pc, #32]	; (8005c3c <servo_setAng+0x164>)
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	005b      	lsls	r3, r3, #1
 8005c1e:	4413      	add	r3, r2
 8005c20:	00db      	lsls	r3, r3, #3
 8005c22:	440b      	add	r3, r1
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	4603      	mov	r3, r0
 8005c2a:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 8005c2c:	e001      	b.n	8005c32 <servo_setAng+0x15a>
		return;
 8005c2e:	bf00      	nop
 8005c30:	e000      	b.n	8005c34 <servo_setAng+0x15c>
	return;
 8005c32:	bf00      	nop
}
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd90      	pop	{r4, r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	20000aa4 	.word	0x20000aa4

08005c40 <servo_setPercnet>:

void servo_setPercnet(uint8_t servo, int8_t perc)
{
 8005c40:	b590      	push	{r4, r7, lr}
 8005c42:	b087      	sub	sp, #28
 8005c44:	af02      	add	r7, sp, #8
 8005c46:	4603      	mov	r3, r0
 8005c48:	460a      	mov	r2, r1
 8005c4a:	71fb      	strb	r3, [r7, #7]
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	71bb      	strb	r3, [r7, #6]
	return;
#endif //NO_SERVO

	uint16_t ang_tmp;

	if( servo >= SERVOS_NUM ){
 8005c50:	79fb      	ldrb	r3, [r7, #7]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d854      	bhi.n	8005d00 <servo_setPercnet+0xc0>
		return;
	}

	if( (perc > 100) || (perc < -100) ){
 8005c56:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005c5a:	2b64      	cmp	r3, #100	; 0x64
 8005c5c:	dc52      	bgt.n	8005d04 <servo_setPercnet+0xc4>
 8005c5e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005c62:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8005c66:	db4d      	blt.n	8005d04 <servo_setPercnet+0xc4>
		return;
	}

	if( perc >= 0 )
 8005c68:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	db1f      	blt.n	8005cb0 <servo_setPercnet+0x70>
	{
		ang_tmp = (uint16_t)servo_map((int32_t)perc, 0, 100,
 8005c70:	f997 0006 	ldrsb.w	r0, [r7, #6]
										(int32_t)servo_info.servos[servo].center_ang,
 8005c74:	79fa      	ldrb	r2, [r7, #7]
 8005c76:	4925      	ldr	r1, [pc, #148]	; (8005d0c <servo_setPercnet+0xcc>)
 8005c78:	4613      	mov	r3, r2
 8005c7a:	005b      	lsls	r3, r3, #1
 8005c7c:	4413      	add	r3, r2
 8005c7e:	00db      	lsls	r3, r3, #3
 8005c80:	440b      	add	r3, r1
 8005c82:	3312      	adds	r3, #18
 8005c84:	881b      	ldrh	r3, [r3, #0]
 8005c86:	b29b      	uxth	r3, r3
		ang_tmp = (uint16_t)servo_map((int32_t)perc, 0, 100,
 8005c88:	461c      	mov	r4, r3
										(int32_t)servo_info.servos[servo].max_ang);
 8005c8a:	79fa      	ldrb	r2, [r7, #7]
 8005c8c:	491f      	ldr	r1, [pc, #124]	; (8005d0c <servo_setPercnet+0xcc>)
 8005c8e:	4613      	mov	r3, r2
 8005c90:	005b      	lsls	r3, r3, #1
 8005c92:	4413      	add	r3, r2
 8005c94:	00db      	lsls	r3, r3, #3
 8005c96:	440b      	add	r3, r1
 8005c98:	3314      	adds	r3, #20
 8005c9a:	881b      	ldrh	r3, [r3, #0]
 8005c9c:	b29b      	uxth	r3, r3
		ang_tmp = (uint16_t)servo_map((int32_t)perc, 0, 100,
 8005c9e:	9300      	str	r3, [sp, #0]
 8005ca0:	4623      	mov	r3, r4
 8005ca2:	2264      	movs	r2, #100	; 0x64
 8005ca4:	2100      	movs	r1, #0
 8005ca6:	f000 f929 	bl	8005efc <servo_map>
 8005caa:	4603      	mov	r3, r0
 8005cac:	81fb      	strh	r3, [r7, #14]
 8005cae:	e020      	b.n	8005cf2 <servo_setPercnet+0xb2>
	}
	else
	{
		ang_tmp = (uint16_t)servo_map((int32_t)perc, -1, -100,
 8005cb0:	f997 0006 	ldrsb.w	r0, [r7, #6]
										(int32_t)servo_info.servos[servo].center_ang,
 8005cb4:	79fa      	ldrb	r2, [r7, #7]
 8005cb6:	4915      	ldr	r1, [pc, #84]	; (8005d0c <servo_setPercnet+0xcc>)
 8005cb8:	4613      	mov	r3, r2
 8005cba:	005b      	lsls	r3, r3, #1
 8005cbc:	4413      	add	r3, r2
 8005cbe:	00db      	lsls	r3, r3, #3
 8005cc0:	440b      	add	r3, r1
 8005cc2:	3312      	adds	r3, #18
 8005cc4:	881b      	ldrh	r3, [r3, #0]
 8005cc6:	b29b      	uxth	r3, r3
		ang_tmp = (uint16_t)servo_map((int32_t)perc, -1, -100,
 8005cc8:	461c      	mov	r4, r3
										(int32_t)servo_info.servos[servo].min_ang);
 8005cca:	79fa      	ldrb	r2, [r7, #7]
 8005ccc:	490f      	ldr	r1, [pc, #60]	; (8005d0c <servo_setPercnet+0xcc>)
 8005cce:	4613      	mov	r3, r2
 8005cd0:	005b      	lsls	r3, r3, #1
 8005cd2:	4413      	add	r3, r2
 8005cd4:	00db      	lsls	r3, r3, #3
 8005cd6:	440b      	add	r3, r1
 8005cd8:	3310      	adds	r3, #16
 8005cda:	881b      	ldrh	r3, [r3, #0]
 8005cdc:	b29b      	uxth	r3, r3
		ang_tmp = (uint16_t)servo_map((int32_t)perc, -1, -100,
 8005cde:	9300      	str	r3, [sp, #0]
 8005ce0:	4623      	mov	r3, r4
 8005ce2:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8005ce6:	f04f 31ff 	mov.w	r1, #4294967295
 8005cea:	f000 f907 	bl	8005efc <servo_map>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	81fb      	strh	r3, [r7, #14]
	}

	servo_setAng(servo, ang_tmp);
 8005cf2:	89fa      	ldrh	r2, [r7, #14]
 8005cf4:	79fb      	ldrb	r3, [r7, #7]
 8005cf6:	4611      	mov	r1, r2
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7ff feed 	bl	8005ad8 <servo_setAng>

	return;
 8005cfe:	e002      	b.n	8005d06 <servo_setPercnet+0xc6>
		return;
 8005d00:	bf00      	nop
 8005d02:	e000      	b.n	8005d06 <servo_setPercnet+0xc6>
		return;
 8005d04:	bf00      	nop
}
 8005d06:	3714      	adds	r7, #20
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd90      	pop	{r4, r7, pc}
 8005d0c:	20000aa4 	.word	0x20000aa4

08005d10 <servo_setEnable>:

void servo_setEnable(uint8_t servo, uint8_t ena)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	4603      	mov	r3, r0
 8005d18:	460a      	mov	r2, r1
 8005d1a:	71fb      	strb	r3, [r7, #7]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	71bb      	strb	r3, [r7, #6]
#ifdef NO_SERVO
	return;
#endif //NO_SERVO

	if( servo >= SERVOS_NUM ){
 8005d20:	79fb      	ldrb	r3, [r7, #7]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	f200 80e1 	bhi.w	8005eea <servo_setEnable+0x1da>
		return;
	}

	servo_info.servos[servo].enable = ena;
 8005d28:	79fa      	ldrb	r2, [r7, #7]
 8005d2a:	4973      	ldr	r1, [pc, #460]	; (8005ef8 <servo_setEnable+0x1e8>)
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	005b      	lsls	r3, r3, #1
 8005d30:	4413      	add	r3, r2
 8005d32:	00db      	lsls	r3, r3, #3
 8005d34:	440b      	add	r3, r1
 8005d36:	3308      	adds	r3, #8
 8005d38:	79ba      	ldrb	r2, [r7, #6]
 8005d3a:	701a      	strb	r2, [r3, #0]

	if( servo_info.servos[servo].enable == 1 ){
 8005d3c:	79fa      	ldrb	r2, [r7, #7]
 8005d3e:	496e      	ldr	r1, [pc, #440]	; (8005ef8 <servo_setEnable+0x1e8>)
 8005d40:	4613      	mov	r3, r2
 8005d42:	005b      	lsls	r3, r3, #1
 8005d44:	4413      	add	r3, r2
 8005d46:	00db      	lsls	r3, r3, #3
 8005d48:	440b      	add	r3, r1
 8005d4a:	3308      	adds	r3, #8
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d178      	bne.n	8005e46 <servo_setEnable+0x136>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 8005d54:	79fa      	ldrb	r2, [r7, #7]
 8005d56:	4968      	ldr	r1, [pc, #416]	; (8005ef8 <servo_setEnable+0x1e8>)
 8005d58:	4613      	mov	r3, r2
 8005d5a:	005b      	lsls	r3, r3, #1
 8005d5c:	4413      	add	r3, r2
 8005d5e:	00db      	lsls	r3, r3, #3
 8005d60:	440b      	add	r3, r1
 8005d62:	3304      	adds	r3, #4
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d115      	bne.n	8005d96 <servo_setEnable+0x86>
 8005d6a:	79fa      	ldrb	r2, [r7, #7]
 8005d6c:	4962      	ldr	r1, [pc, #392]	; (8005ef8 <servo_setEnable+0x1e8>)
 8005d6e:	4613      	mov	r3, r2
 8005d70:	005b      	lsls	r3, r3, #1
 8005d72:	4413      	add	r3, r2
 8005d74:	00db      	lsls	r3, r3, #3
 8005d76:	440b      	add	r3, r1
 8005d78:	330a      	adds	r3, #10
 8005d7a:	881b      	ldrh	r3, [r3, #0]
 8005d7c:	b298      	uxth	r0, r3
 8005d7e:	79fa      	ldrb	r2, [r7, #7]
 8005d80:	495d      	ldr	r1, [pc, #372]	; (8005ef8 <servo_setEnable+0x1e8>)
 8005d82:	4613      	mov	r3, r2
 8005d84:	005b      	lsls	r3, r3, #1
 8005d86:	4413      	add	r3, r2
 8005d88:	00db      	lsls	r3, r3, #3
 8005d8a:	440b      	add	r3, r1
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4602      	mov	r2, r0
 8005d92:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else{
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, 0);
	}

	return;
 8005d94:	e0aa      	b.n	8005eec <servo_setEnable+0x1dc>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 8005d96:	79fa      	ldrb	r2, [r7, #7]
 8005d98:	4957      	ldr	r1, [pc, #348]	; (8005ef8 <servo_setEnable+0x1e8>)
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	005b      	lsls	r3, r3, #1
 8005d9e:	4413      	add	r3, r2
 8005da0:	00db      	lsls	r3, r3, #3
 8005da2:	440b      	add	r3, r1
 8005da4:	3304      	adds	r3, #4
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2b04      	cmp	r3, #4
 8005daa:	d115      	bne.n	8005dd8 <servo_setEnable+0xc8>
 8005dac:	79fa      	ldrb	r2, [r7, #7]
 8005dae:	4952      	ldr	r1, [pc, #328]	; (8005ef8 <servo_setEnable+0x1e8>)
 8005db0:	4613      	mov	r3, r2
 8005db2:	005b      	lsls	r3, r3, #1
 8005db4:	4413      	add	r3, r2
 8005db6:	00db      	lsls	r3, r3, #3
 8005db8:	440b      	add	r3, r1
 8005dba:	330a      	adds	r3, #10
 8005dbc:	881b      	ldrh	r3, [r3, #0]
 8005dbe:	b298      	uxth	r0, r3
 8005dc0:	79fa      	ldrb	r2, [r7, #7]
 8005dc2:	494d      	ldr	r1, [pc, #308]	; (8005ef8 <servo_setEnable+0x1e8>)
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	005b      	lsls	r3, r3, #1
 8005dc8:	4413      	add	r3, r2
 8005dca:	00db      	lsls	r3, r3, #3
 8005dcc:	440b      	add	r3, r1
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	6393      	str	r3, [r2, #56]	; 0x38
 8005dd6:	e087      	b.n	8005ee8 <servo_setEnable+0x1d8>
 8005dd8:	79fa      	ldrb	r2, [r7, #7]
 8005dda:	4947      	ldr	r1, [pc, #284]	; (8005ef8 <servo_setEnable+0x1e8>)
 8005ddc:	4613      	mov	r3, r2
 8005dde:	005b      	lsls	r3, r3, #1
 8005de0:	4413      	add	r3, r2
 8005de2:	00db      	lsls	r3, r3, #3
 8005de4:	440b      	add	r3, r1
 8005de6:	3304      	adds	r3, #4
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2b08      	cmp	r3, #8
 8005dec:	d115      	bne.n	8005e1a <servo_setEnable+0x10a>
 8005dee:	79fa      	ldrb	r2, [r7, #7]
 8005df0:	4941      	ldr	r1, [pc, #260]	; (8005ef8 <servo_setEnable+0x1e8>)
 8005df2:	4613      	mov	r3, r2
 8005df4:	005b      	lsls	r3, r3, #1
 8005df6:	4413      	add	r3, r2
 8005df8:	00db      	lsls	r3, r3, #3
 8005dfa:	440b      	add	r3, r1
 8005dfc:	330a      	adds	r3, #10
 8005dfe:	881b      	ldrh	r3, [r3, #0]
 8005e00:	b298      	uxth	r0, r3
 8005e02:	79fa      	ldrb	r2, [r7, #7]
 8005e04:	493c      	ldr	r1, [pc, #240]	; (8005ef8 <servo_setEnable+0x1e8>)
 8005e06:	4613      	mov	r3, r2
 8005e08:	005b      	lsls	r3, r3, #1
 8005e0a:	4413      	add	r3, r2
 8005e0c:	00db      	lsls	r3, r3, #3
 8005e0e:	440b      	add	r3, r1
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	4603      	mov	r3, r0
 8005e16:	63d3      	str	r3, [r2, #60]	; 0x3c
 8005e18:	e066      	b.n	8005ee8 <servo_setEnable+0x1d8>
 8005e1a:	79fa      	ldrb	r2, [r7, #7]
 8005e1c:	4936      	ldr	r1, [pc, #216]	; (8005ef8 <servo_setEnable+0x1e8>)
 8005e1e:	4613      	mov	r3, r2
 8005e20:	005b      	lsls	r3, r3, #1
 8005e22:	4413      	add	r3, r2
 8005e24:	00db      	lsls	r3, r3, #3
 8005e26:	440b      	add	r3, r1
 8005e28:	330a      	adds	r3, #10
 8005e2a:	881b      	ldrh	r3, [r3, #0]
 8005e2c:	b298      	uxth	r0, r3
 8005e2e:	79fa      	ldrb	r2, [r7, #7]
 8005e30:	4931      	ldr	r1, [pc, #196]	; (8005ef8 <servo_setEnable+0x1e8>)
 8005e32:	4613      	mov	r3, r2
 8005e34:	005b      	lsls	r3, r3, #1
 8005e36:	4413      	add	r3, r2
 8005e38:	00db      	lsls	r3, r3, #3
 8005e3a:	440b      	add	r3, r1
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	4603      	mov	r3, r0
 8005e42:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 8005e44:	e052      	b.n	8005eec <servo_setEnable+0x1dc>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, 0);
 8005e46:	79fa      	ldrb	r2, [r7, #7]
 8005e48:	492b      	ldr	r1, [pc, #172]	; (8005ef8 <servo_setEnable+0x1e8>)
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	005b      	lsls	r3, r3, #1
 8005e4e:	4413      	add	r3, r2
 8005e50:	00db      	lsls	r3, r3, #3
 8005e52:	440b      	add	r3, r1
 8005e54:	3304      	adds	r3, #4
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d10b      	bne.n	8005e74 <servo_setEnable+0x164>
 8005e5c:	79fa      	ldrb	r2, [r7, #7]
 8005e5e:	4926      	ldr	r1, [pc, #152]	; (8005ef8 <servo_setEnable+0x1e8>)
 8005e60:	4613      	mov	r3, r2
 8005e62:	005b      	lsls	r3, r3, #1
 8005e64:	4413      	add	r3, r2
 8005e66:	00db      	lsls	r3, r3, #3
 8005e68:	440b      	add	r3, r1
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	635a      	str	r2, [r3, #52]	; 0x34
	return;
 8005e72:	e03b      	b.n	8005eec <servo_setEnable+0x1dc>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, 0);
 8005e74:	79fa      	ldrb	r2, [r7, #7]
 8005e76:	4920      	ldr	r1, [pc, #128]	; (8005ef8 <servo_setEnable+0x1e8>)
 8005e78:	4613      	mov	r3, r2
 8005e7a:	005b      	lsls	r3, r3, #1
 8005e7c:	4413      	add	r3, r2
 8005e7e:	00db      	lsls	r3, r3, #3
 8005e80:	440b      	add	r3, r1
 8005e82:	3304      	adds	r3, #4
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2b04      	cmp	r3, #4
 8005e88:	d10b      	bne.n	8005ea2 <servo_setEnable+0x192>
 8005e8a:	79fa      	ldrb	r2, [r7, #7]
 8005e8c:	491a      	ldr	r1, [pc, #104]	; (8005ef8 <servo_setEnable+0x1e8>)
 8005e8e:	4613      	mov	r3, r2
 8005e90:	005b      	lsls	r3, r3, #1
 8005e92:	4413      	add	r3, r2
 8005e94:	00db      	lsls	r3, r3, #3
 8005e96:	440b      	add	r3, r1
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	6393      	str	r3, [r2, #56]	; 0x38
	return;
 8005ea0:	e024      	b.n	8005eec <servo_setEnable+0x1dc>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, 0);
 8005ea2:	79fa      	ldrb	r2, [r7, #7]
 8005ea4:	4914      	ldr	r1, [pc, #80]	; (8005ef8 <servo_setEnable+0x1e8>)
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	005b      	lsls	r3, r3, #1
 8005eaa:	4413      	add	r3, r2
 8005eac:	00db      	lsls	r3, r3, #3
 8005eae:	440b      	add	r3, r1
 8005eb0:	3304      	adds	r3, #4
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2b08      	cmp	r3, #8
 8005eb6:	d10b      	bne.n	8005ed0 <servo_setEnable+0x1c0>
 8005eb8:	79fa      	ldrb	r2, [r7, #7]
 8005eba:	490f      	ldr	r1, [pc, #60]	; (8005ef8 <servo_setEnable+0x1e8>)
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	005b      	lsls	r3, r3, #1
 8005ec0:	4413      	add	r3, r2
 8005ec2:	00db      	lsls	r3, r3, #3
 8005ec4:	440b      	add	r3, r1
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	2300      	movs	r3, #0
 8005ecc:	63d3      	str	r3, [r2, #60]	; 0x3c
	return;
 8005ece:	e00d      	b.n	8005eec <servo_setEnable+0x1dc>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, 0);
 8005ed0:	79fa      	ldrb	r2, [r7, #7]
 8005ed2:	4909      	ldr	r1, [pc, #36]	; (8005ef8 <servo_setEnable+0x1e8>)
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	005b      	lsls	r3, r3, #1
 8005ed8:	4413      	add	r3, r2
 8005eda:	00db      	lsls	r3, r3, #3
 8005edc:	440b      	add	r3, r1
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 8005ee6:	e001      	b.n	8005eec <servo_setEnable+0x1dc>
 8005ee8:	e000      	b.n	8005eec <servo_setEnable+0x1dc>
		return;
 8005eea:	bf00      	nop
}
 8005eec:	370c      	adds	r7, #12
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop
 8005ef8:	20000aa4 	.word	0x20000aa4

08005efc <servo_map>:
  * 	toLow: the lower bound of the value’s target range.
  * 	toHigh: the upper bound of the value’s target range.
  * @retval The mapped value.
  */
int32_t servo_map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
 8005f08:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	69b9      	ldr	r1, [r7, #24]
 8005f12:	683a      	ldr	r2, [r7, #0]
 8005f14:	1a8a      	subs	r2, r1, r2
 8005f16:	fb03 f202 	mul.w	r2, r3, r2
 8005f1a:	6879      	ldr	r1, [r7, #4]
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	1acb      	subs	r3, r1, r3
 8005f20:	fb92 f2f3 	sdiv	r2, r2, r3
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	4413      	add	r3, r2
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3714      	adds	r7, #20
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <cfg_NodeServoVarProp>:

/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeServoVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b087      	sub	sp, #28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
 8005f40:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 8005f42:	89fb      	ldrh	r3, [r7, #14]
 8005f44:	2b0d      	cmp	r3, #13
 8005f46:	d849      	bhi.n	8005fdc <cfg_NodeServoVarProp+0xa8>
 8005f48:	a201      	add	r2, pc, #4	; (adr r2, 8005f50 <cfg_NodeServoVarProp+0x1c>)
 8005f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4e:	bf00      	nop
 8005f50:	08005f89 	.word	0x08005f89
 8005f54:	08005f8f 	.word	0x08005f8f
 8005f58:	08005f95 	.word	0x08005f95
 8005f5c:	08005f9b 	.word	0x08005f9b
 8005f60:	08005fa1 	.word	0x08005fa1
 8005f64:	08005fa7 	.word	0x08005fa7
 8005f68:	08005fad 	.word	0x08005fad
 8005f6c:	08005fb3 	.word	0x08005fb3
 8005f70:	08005fb9 	.word	0x08005fb9
 8005f74:	08005fbf 	.word	0x08005fbf
 8005f78:	08005fc5 	.word	0x08005fc5
 8005f7c:	08005fcb 	.word	0x08005fcb
 8005f80:	08005fd1 	.word	0x08005fd1
 8005f84:	08005fd7 	.word	0x08005fd7
	{
		case SERVO_ROLL_ENA:				str = "ROLL enable"; break;
 8005f88:	4b52      	ldr	r3, [pc, #328]	; (80060d4 <cfg_NodeServoVarProp+0x1a0>)
 8005f8a:	617b      	str	r3, [r7, #20]
 8005f8c:	e028      	b.n	8005fe0 <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_CUR_ANG:			str = "ROLL current angle"; break;
 8005f8e:	4b52      	ldr	r3, [pc, #328]	; (80060d8 <cfg_NodeServoVarProp+0x1a4>)
 8005f90:	617b      	str	r3, [r7, #20]
 8005f92:	e025      	b.n	8005fe0 <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_CUR_PWM:			str = "ROLL current PWM"; break;
 8005f94:	4b51      	ldr	r3, [pc, #324]	; (80060dc <cfg_NodeServoVarProp+0x1a8>)
 8005f96:	617b      	str	r3, [r7, #20]
 8005f98:	e022      	b.n	8005fe0 <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_CUR_PERC:			str = "ROLL current perc"; break;
 8005f9a:	4b51      	ldr	r3, [pc, #324]	; (80060e0 <cfg_NodeServoVarProp+0x1ac>)
 8005f9c:	617b      	str	r3, [r7, #20]
 8005f9e:	e01f      	b.n	8005fe0 <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_MIN_ANG:			str = "ROLL min angle"; break;
 8005fa0:	4b50      	ldr	r3, [pc, #320]	; (80060e4 <cfg_NodeServoVarProp+0x1b0>)
 8005fa2:	617b      	str	r3, [r7, #20]
 8005fa4:	e01c      	b.n	8005fe0 <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_CENT_ANG:			str = "ROLL center angle"; break;
 8005fa6:	4b50      	ldr	r3, [pc, #320]	; (80060e8 <cfg_NodeServoVarProp+0x1b4>)
 8005fa8:	617b      	str	r3, [r7, #20]
 8005faa:	e019      	b.n	8005fe0 <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_MAX_ANG:			str = "ROLL max angle"; break;
 8005fac:	4b4f      	ldr	r3, [pc, #316]	; (80060ec <cfg_NodeServoVarProp+0x1b8>)
 8005fae:	617b      	str	r3, [r7, #20]
 8005fb0:	e016      	b.n	8005fe0 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_ENA:				str = "PITCH enable"; break;
 8005fb2:	4b4f      	ldr	r3, [pc, #316]	; (80060f0 <cfg_NodeServoVarProp+0x1bc>)
 8005fb4:	617b      	str	r3, [r7, #20]
 8005fb6:	e013      	b.n	8005fe0 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_CUR_ANG:			str = "PITCH current angle"; break;
 8005fb8:	4b4e      	ldr	r3, [pc, #312]	; (80060f4 <cfg_NodeServoVarProp+0x1c0>)
 8005fba:	617b      	str	r3, [r7, #20]
 8005fbc:	e010      	b.n	8005fe0 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_CUR_PWM:			str = "PITCH current PWM"; break;
 8005fbe:	4b4e      	ldr	r3, [pc, #312]	; (80060f8 <cfg_NodeServoVarProp+0x1c4>)
 8005fc0:	617b      	str	r3, [r7, #20]
 8005fc2:	e00d      	b.n	8005fe0 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_CUR_PERC:			str = "PITCH current perc"; break;
 8005fc4:	4b4d      	ldr	r3, [pc, #308]	; (80060fc <cfg_NodeServoVarProp+0x1c8>)
 8005fc6:	617b      	str	r3, [r7, #20]
 8005fc8:	e00a      	b.n	8005fe0 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_MIN_ANG:			str = "PITCH min angle"; break;
 8005fca:	4b4d      	ldr	r3, [pc, #308]	; (8006100 <cfg_NodeServoVarProp+0x1cc>)
 8005fcc:	617b      	str	r3, [r7, #20]
 8005fce:	e007      	b.n	8005fe0 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_CENT_ANG:			str = "PITCH center angle"; break;
 8005fd0:	4b4c      	ldr	r3, [pc, #304]	; (8006104 <cfg_NodeServoVarProp+0x1d0>)
 8005fd2:	617b      	str	r3, [r7, #20]
 8005fd4:	e004      	b.n	8005fe0 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_MAX_ANG:			str = "PITCH max angle"; break;
 8005fd6:	4b4c      	ldr	r3, [pc, #304]	; (8006108 <cfg_NodeServoVarProp+0x1d4>)
 8005fd8:	617b      	str	r3, [r7, #20]
 8005fda:	e001      	b.n	8005fe0 <cfg_NodeServoVarProp+0xac>
		default: return CFG_ERROR_VARID;
 8005fdc:	2302      	movs	r3, #2
 8005fde:	e073      	b.n	80060c8 <cfg_NodeServoVarProp+0x194>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00f      	beq.n	8006006 <cfg_NodeServoVarProp+0xd2>
 8005fe6:	e007      	b.n	8005ff8 <cfg_NodeServoVarProp+0xc4>
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	1c53      	adds	r3, r2, #1
 8005fec:	617b      	str	r3, [r7, #20]
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	1c59      	adds	r1, r3, #1
 8005ff2:	60b9      	str	r1, [r7, #8]
 8005ff4:	7812      	ldrb	r2, [r2, #0]
 8005ff6:	701a      	strb	r2, [r3, #0]
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1f3      	bne.n	8005fe8 <cfg_NodeServoVarProp+0xb4>
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	2200      	movs	r2, #0
 8006004:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d05b      	beq.n	80060c4 <cfg_NodeServoVarProp+0x190>
 800600c:	89fb      	ldrh	r3, [r7, #14]
 800600e:	2b0d      	cmp	r3, #13
 8006010:	d856      	bhi.n	80060c0 <cfg_NodeServoVarProp+0x18c>
 8006012:	a201      	add	r2, pc, #4	; (adr r2, 8006018 <cfg_NodeServoVarProp+0xe4>)
 8006014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006018:	08006051 	.word	0x08006051
 800601c:	08006059 	.word	0x08006059
 8006020:	08006061 	.word	0x08006061
 8006024:	08006069 	.word	0x08006069
 8006028:	08006071 	.word	0x08006071
 800602c:	08006079 	.word	0x08006079
 8006030:	08006081 	.word	0x08006081
 8006034:	08006089 	.word	0x08006089
 8006038:	08006091 	.word	0x08006091
 800603c:	08006099 	.word	0x08006099
 8006040:	080060a1 	.word	0x080060a1
 8006044:	080060a9 	.word	0x080060a9
 8006048:	080060b1 	.word	0x080060b1
 800604c:	080060b9 	.word	0x080060b9
	{
		case SERVO_ROLL_ENA:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_CONST; break;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2223      	movs	r2, #35	; 0x23
 8006054:	801a      	strh	r2, [r3, #0]
 8006056:	e036      	b.n	80060c6 <cfg_NodeServoVarProp+0x192>
		case SERVO_ROLL_CUR_ANG:			*prop = CFG_VAR_TYPE_UINT; break;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2202      	movs	r2, #2
 800605c:	801a      	strh	r2, [r3, #0]
 800605e:	e032      	b.n	80060c6 <cfg_NodeServoVarProp+0x192>
		case SERVO_ROLL_CUR_PWM:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2212      	movs	r2, #18
 8006064:	801a      	strh	r2, [r3, #0]
 8006066:	e02e      	b.n	80060c6 <cfg_NodeServoVarProp+0x192>
		case SERVO_ROLL_CUR_PERC:			*prop = CFG_VAR_TYPE_INT; break;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	801a      	strh	r2, [r3, #0]
 800606e:	e02a      	b.n	80060c6 <cfg_NodeServoVarProp+0x192>
		case SERVO_ROLL_MIN_ANG:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2222      	movs	r2, #34	; 0x22
 8006074:	801a      	strh	r2, [r3, #0]
 8006076:	e026      	b.n	80060c6 <cfg_NodeServoVarProp+0x192>
		case SERVO_ROLL_CENT_ANG:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2222      	movs	r2, #34	; 0x22
 800607c:	801a      	strh	r2, [r3, #0]
 800607e:	e022      	b.n	80060c6 <cfg_NodeServoVarProp+0x192>
		case SERVO_ROLL_MAX_ANG:	  		*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2222      	movs	r2, #34	; 0x22
 8006084:	801a      	strh	r2, [r3, #0]
 8006086:	e01e      	b.n	80060c6 <cfg_NodeServoVarProp+0x192>
		case SERVO_PITCH_ENA:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_CONST; break;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2223      	movs	r2, #35	; 0x23
 800608c:	801a      	strh	r2, [r3, #0]
 800608e:	e01a      	b.n	80060c6 <cfg_NodeServoVarProp+0x192>
		case SERVO_PITCH_CUR_ANG:			*prop = CFG_VAR_TYPE_UINT; break;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2202      	movs	r2, #2
 8006094:	801a      	strh	r2, [r3, #0]
 8006096:	e016      	b.n	80060c6 <cfg_NodeServoVarProp+0x192>
		case SERVO_PITCH_CUR_PWM:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2212      	movs	r2, #18
 800609c:	801a      	strh	r2, [r3, #0]
 800609e:	e012      	b.n	80060c6 <cfg_NodeServoVarProp+0x192>
		case SERVO_PITCH_CUR_PERC:			*prop = CFG_VAR_TYPE_INT; break;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	801a      	strh	r2, [r3, #0]
 80060a6:	e00e      	b.n	80060c6 <cfg_NodeServoVarProp+0x192>
		case SERVO_PITCH_MIN_ANG:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2222      	movs	r2, #34	; 0x22
 80060ac:	801a      	strh	r2, [r3, #0]
 80060ae:	e00a      	b.n	80060c6 <cfg_NodeServoVarProp+0x192>
		case SERVO_PITCH_CENT_ANG:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2222      	movs	r2, #34	; 0x22
 80060b4:	801a      	strh	r2, [r3, #0]
 80060b6:	e006      	b.n	80060c6 <cfg_NodeServoVarProp+0x192>
		case SERVO_PITCH_MAX_ANG:	  		*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2222      	movs	r2, #34	; 0x22
 80060bc:	801a      	strh	r2, [r3, #0]
 80060be:	e002      	b.n	80060c6 <cfg_NodeServoVarProp+0x192>
		default: return CFG_ERROR_VARID;
 80060c0:	2302      	movs	r3, #2
 80060c2:	e001      	b.n	80060c8 <cfg_NodeServoVarProp+0x194>
	}
	return CFG_ERROR_NONE;
 80060c4:	bf00      	nop
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	371c      	adds	r7, #28
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr
 80060d4:	0800b924 	.word	0x0800b924
 80060d8:	0800b930 	.word	0x0800b930
 80060dc:	0800b944 	.word	0x0800b944
 80060e0:	0800b958 	.word	0x0800b958
 80060e4:	0800b96c 	.word	0x0800b96c
 80060e8:	0800b97c 	.word	0x0800b97c
 80060ec:	0800b990 	.word	0x0800b990
 80060f0:	0800b9a0 	.word	0x0800b9a0
 80060f4:	0800b9b0 	.word	0x0800b9b0
 80060f8:	0800b9c4 	.word	0x0800b9c4
 80060fc:	0800b9d8 	.word	0x0800b9d8
 8006100:	0800b9ec 	.word	0x0800b9ec
 8006104:	0800b9fc 	.word	0x0800b9fc
 8006108:	0800ba10 	.word	0x0800ba10

0800610c <cfg_NodeServoVarGet>:

uint16_t cfg_NodeServoVarGet(uint16_t varid, void *value)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	4603      	mov	r3, r0
 8006114:	6039      	str	r1, [r7, #0]
 8006116:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	f000 808a 	beq.w	8006234 <cfg_NodeServoVarGet+0x128>
 8006120:	88fb      	ldrh	r3, [r7, #6]
 8006122:	2b0d      	cmp	r3, #13
 8006124:	f200 8084 	bhi.w	8006230 <cfg_NodeServoVarGet+0x124>
 8006128:	a201      	add	r2, pc, #4	; (adr r2, 8006130 <cfg_NodeServoVarGet+0x24>)
 800612a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800612e:	bf00      	nop
 8006130:	08006169 	.word	0x08006169
 8006134:	08006177 	.word	0x08006177
 8006138:	08006185 	.word	0x08006185
 800613c:	08006193 	.word	0x08006193
 8006140:	080061a1 	.word	0x080061a1
 8006144:	080061af 	.word	0x080061af
 8006148:	080061bd 	.word	0x080061bd
 800614c:	080061cb 	.word	0x080061cb
 8006150:	080061db 	.word	0x080061db
 8006154:	080061e9 	.word	0x080061e9
 8006158:	080061f7 	.word	0x080061f7
 800615c:	08006207 	.word	0x08006207
 8006160:	08006215 	.word	0x08006215
 8006164:	08006223 	.word	0x08006223
	{
		case SERVO_ROLL_ENA: 				*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].enable; break;
 8006168:	4b36      	ldr	r3, [pc, #216]	; (8006244 <cfg_NodeServoVarGet+0x138>)
 800616a:	7a1b      	ldrb	r3, [r3, #8]
 800616c:	b2db      	uxtb	r3, r3
 800616e:	461a      	mov	r2, r3
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	601a      	str	r2, [r3, #0]
 8006174:	e05f      	b.n	8006236 <cfg_NodeServoVarGet+0x12a>
		case SERVO_ROLL_CUR_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].cur_ang; break;
 8006176:	4b33      	ldr	r3, [pc, #204]	; (8006244 <cfg_NodeServoVarGet+0x138>)
 8006178:	899b      	ldrh	r3, [r3, #12]
 800617a:	b29b      	uxth	r3, r3
 800617c:	461a      	mov	r2, r3
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	601a      	str	r2, [r3, #0]
 8006182:	e058      	b.n	8006236 <cfg_NodeServoVarGet+0x12a>
		case SERVO_ROLL_CUR_PWM: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].cur_pwm; break;
 8006184:	4b2f      	ldr	r3, [pc, #188]	; (8006244 <cfg_NodeServoVarGet+0x138>)
 8006186:	895b      	ldrh	r3, [r3, #10]
 8006188:	b29b      	uxth	r3, r3
 800618a:	461a      	mov	r2, r3
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	601a      	str	r2, [r3, #0]
 8006190:	e051      	b.n	8006236 <cfg_NodeServoVarGet+0x12a>
		case SERVO_ROLL_CUR_PERC: 			*(uint32_t*)value = (int32_t)servo_info.servos[SERVO_ROLL].cur_perc; break;
 8006192:	4b2c      	ldr	r3, [pc, #176]	; (8006244 <cfg_NodeServoVarGet+0x138>)
 8006194:	7b9b      	ldrb	r3, [r3, #14]
 8006196:	b25b      	sxtb	r3, r3
 8006198:	461a      	mov	r2, r3
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	601a      	str	r2, [r3, #0]
 800619e:	e04a      	b.n	8006236 <cfg_NodeServoVarGet+0x12a>
		case SERVO_ROLL_MIN_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].min_ang; break;
 80061a0:	4b28      	ldr	r3, [pc, #160]	; (8006244 <cfg_NodeServoVarGet+0x138>)
 80061a2:	8a1b      	ldrh	r3, [r3, #16]
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	461a      	mov	r2, r3
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	601a      	str	r2, [r3, #0]
 80061ac:	e043      	b.n	8006236 <cfg_NodeServoVarGet+0x12a>
		case SERVO_ROLL_CENT_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].center_ang; break;
 80061ae:	4b25      	ldr	r3, [pc, #148]	; (8006244 <cfg_NodeServoVarGet+0x138>)
 80061b0:	8a5b      	ldrh	r3, [r3, #18]
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	461a      	mov	r2, r3
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	601a      	str	r2, [r3, #0]
 80061ba:	e03c      	b.n	8006236 <cfg_NodeServoVarGet+0x12a>
		case SERVO_ROLL_MAX_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].max_ang; break;
 80061bc:	4b21      	ldr	r3, [pc, #132]	; (8006244 <cfg_NodeServoVarGet+0x138>)
 80061be:	8a9b      	ldrh	r3, [r3, #20]
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	461a      	mov	r2, r3
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	601a      	str	r2, [r3, #0]
 80061c8:	e035      	b.n	8006236 <cfg_NodeServoVarGet+0x12a>
		case SERVO_PITCH_ENA: 				*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].enable; break;
 80061ca:	4b1e      	ldr	r3, [pc, #120]	; (8006244 <cfg_NodeServoVarGet+0x138>)
 80061cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	461a      	mov	r2, r3
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	601a      	str	r2, [r3, #0]
 80061d8:	e02d      	b.n	8006236 <cfg_NodeServoVarGet+0x12a>
		case SERVO_PITCH_CUR_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].cur_ang; break;
 80061da:	4b1a      	ldr	r3, [pc, #104]	; (8006244 <cfg_NodeServoVarGet+0x138>)
 80061dc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80061de:	b29b      	uxth	r3, r3
 80061e0:	461a      	mov	r2, r3
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	601a      	str	r2, [r3, #0]
 80061e6:	e026      	b.n	8006236 <cfg_NodeServoVarGet+0x12a>
		case SERVO_PITCH_CUR_PWM: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].cur_pwm; break;
 80061e8:	4b16      	ldr	r3, [pc, #88]	; (8006244 <cfg_NodeServoVarGet+0x138>)
 80061ea:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	461a      	mov	r2, r3
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	601a      	str	r2, [r3, #0]
 80061f4:	e01f      	b.n	8006236 <cfg_NodeServoVarGet+0x12a>
		case SERVO_PITCH_CUR_PERC: 			*(uint32_t*)value = (int32_t)servo_info.servos[SERVO_PITCH].cur_perc; break;
 80061f6:	4b13      	ldr	r3, [pc, #76]	; (8006244 <cfg_NodeServoVarGet+0x138>)
 80061f8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80061fc:	b25b      	sxtb	r3, r3
 80061fe:	461a      	mov	r2, r3
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	601a      	str	r2, [r3, #0]
 8006204:	e017      	b.n	8006236 <cfg_NodeServoVarGet+0x12a>
		case SERVO_PITCH_MIN_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].min_ang; break;
 8006206:	4b0f      	ldr	r3, [pc, #60]	; (8006244 <cfg_NodeServoVarGet+0x138>)
 8006208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800620a:	b29b      	uxth	r3, r3
 800620c:	461a      	mov	r2, r3
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	601a      	str	r2, [r3, #0]
 8006212:	e010      	b.n	8006236 <cfg_NodeServoVarGet+0x12a>
		case SERVO_PITCH_CENT_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].center_ang; break;
 8006214:	4b0b      	ldr	r3, [pc, #44]	; (8006244 <cfg_NodeServoVarGet+0x138>)
 8006216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006218:	b29b      	uxth	r3, r3
 800621a:	461a      	mov	r2, r3
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	601a      	str	r2, [r3, #0]
 8006220:	e009      	b.n	8006236 <cfg_NodeServoVarGet+0x12a>
		case SERVO_PITCH_MAX_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].max_ang; break;
 8006222:	4b08      	ldr	r3, [pc, #32]	; (8006244 <cfg_NodeServoVarGet+0x138>)
 8006224:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006226:	b29b      	uxth	r3, r3
 8006228:	461a      	mov	r2, r3
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	601a      	str	r2, [r3, #0]
 800622e:	e002      	b.n	8006236 <cfg_NodeServoVarGet+0x12a>
		default: return CFG_ERROR_VARID;
 8006230:	2302      	movs	r3, #2
 8006232:	e001      	b.n	8006238 <cfg_NodeServoVarGet+0x12c>
	}
	return CFG_ERROR_NONE;
 8006234:	bf00      	nop
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr
 8006244:	20000aa4 	.word	0x20000aa4

08006248 <cfg_NodeServoVarSet>:

uint16_t cfg_NodeServoVarSet(uint16_t varid, void *value)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	4603      	mov	r3, r0
 8006250:	6039      	str	r1, [r7, #0]
 8006252:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d078      	beq.n	800634c <cfg_NodeServoVarSet+0x104>
 800625a:	88fb      	ldrh	r3, [r7, #6]
 800625c:	2b0d      	cmp	r3, #13
 800625e:	d873      	bhi.n	8006348 <cfg_NodeServoVarSet+0x100>
 8006260:	a201      	add	r2, pc, #4	; (adr r2, 8006268 <cfg_NodeServoVarSet+0x20>)
 8006262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006266:	bf00      	nop
 8006268:	080062a1 	.word	0x080062a1
 800626c:	080062b1 	.word	0x080062b1
 8006270:	08006351 	.word	0x08006351
 8006274:	080062c1 	.word	0x080062c1
 8006278:	080062d1 	.word	0x080062d1
 800627c:	080062dd 	.word	0x080062dd
 8006280:	080062e9 	.word	0x080062e9
 8006284:	080062f5 	.word	0x080062f5
 8006288:	08006305 	.word	0x08006305
 800628c:	08006351 	.word	0x08006351
 8006290:	08006315 	.word	0x08006315
 8006294:	08006325 	.word	0x08006325
 8006298:	08006331 	.word	0x08006331
 800629c:	0800633d 	.word	0x0800633d
	{
		case SERVO_ROLL_ENA:				servo_setEnable(SERVO_ROLL, (uint8_t)*(uint32_t*)value); break;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	4619      	mov	r1, r3
 80062a8:	2000      	movs	r0, #0
 80062aa:	f7ff fd31 	bl	8005d10 <servo_setEnable>
 80062ae:	e050      	b.n	8006352 <cfg_NodeServoVarSet+0x10a>
		case SERVO_ROLL_CUR_ANG:			servo_setAng(SERVO_ROLL, (uint16_t)*(uint32_t*)value); break;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	4619      	mov	r1, r3
 80062b8:	2000      	movs	r0, #0
 80062ba:	f7ff fc0d 	bl	8005ad8 <servo_setAng>
 80062be:	e048      	b.n	8006352 <cfg_NodeServoVarSet+0x10a>
		case SERVO_ROLL_CUR_PWM:			break;
		case SERVO_ROLL_CUR_PERC:			servo_setPercnet(SERVO_ROLL, (int8_t)*(uint32_t*)value); break;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	b25b      	sxtb	r3, r3
 80062c6:	4619      	mov	r1, r3
 80062c8:	2000      	movs	r0, #0
 80062ca:	f7ff fcb9 	bl	8005c40 <servo_setPercnet>
 80062ce:	e040      	b.n	8006352 <cfg_NodeServoVarSet+0x10a>
		case SERVO_ROLL_MIN_ANG:			servo_info.servos[SERVO_ROLL].min_ang = *(uint32_t*)value; break;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	4b21      	ldr	r3, [pc, #132]	; (800635c <cfg_NodeServoVarSet+0x114>)
 80062d8:	821a      	strh	r2, [r3, #16]
 80062da:	e03a      	b.n	8006352 <cfg_NodeServoVarSet+0x10a>
		case SERVO_ROLL_CENT_ANG:			servo_info.servos[SERVO_ROLL].center_ang = *(uint32_t*)value; break;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	b29a      	uxth	r2, r3
 80062e2:	4b1e      	ldr	r3, [pc, #120]	; (800635c <cfg_NodeServoVarSet+0x114>)
 80062e4:	825a      	strh	r2, [r3, #18]
 80062e6:	e034      	b.n	8006352 <cfg_NodeServoVarSet+0x10a>
		case SERVO_ROLL_MAX_ANG:			servo_info.servos[SERVO_ROLL].max_ang = *(uint32_t*)value; break;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	4b1b      	ldr	r3, [pc, #108]	; (800635c <cfg_NodeServoVarSet+0x114>)
 80062f0:	829a      	strh	r2, [r3, #20]
 80062f2:	e02e      	b.n	8006352 <cfg_NodeServoVarSet+0x10a>
		case SERVO_PITCH_ENA:				servo_setEnable(SERVO_PITCH, (uint8_t)*(uint32_t*)value); break;
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	4619      	mov	r1, r3
 80062fc:	2001      	movs	r0, #1
 80062fe:	f7ff fd07 	bl	8005d10 <servo_setEnable>
 8006302:	e026      	b.n	8006352 <cfg_NodeServoVarSet+0x10a>
		case SERVO_PITCH_CUR_ANG:			servo_setAng(SERVO_PITCH, (uint16_t)*(uint32_t*)value); break;
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	b29b      	uxth	r3, r3
 800630a:	4619      	mov	r1, r3
 800630c:	2001      	movs	r0, #1
 800630e:	f7ff fbe3 	bl	8005ad8 <servo_setAng>
 8006312:	e01e      	b.n	8006352 <cfg_NodeServoVarSet+0x10a>
		case SERVO_PITCH_CUR_PWM:			break;
		case SERVO_PITCH_CUR_PERC:			servo_setPercnet(SERVO_PITCH, (int8_t)*(uint32_t*)value); break;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	b25b      	sxtb	r3, r3
 800631a:	4619      	mov	r1, r3
 800631c:	2001      	movs	r0, #1
 800631e:	f7ff fc8f 	bl	8005c40 <servo_setPercnet>
 8006322:	e016      	b.n	8006352 <cfg_NodeServoVarSet+0x10a>
		case SERVO_PITCH_MIN_ANG:			servo_info.servos[SERVO_PITCH].min_ang = *(uint32_t*)value; break;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	b29a      	uxth	r2, r3
 800632a:	4b0c      	ldr	r3, [pc, #48]	; (800635c <cfg_NodeServoVarSet+0x114>)
 800632c:	851a      	strh	r2, [r3, #40]	; 0x28
 800632e:	e010      	b.n	8006352 <cfg_NodeServoVarSet+0x10a>
		case SERVO_PITCH_CENT_ANG:			servo_info.servos[SERVO_PITCH].center_ang = *(uint32_t*)value; break;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	b29a      	uxth	r2, r3
 8006336:	4b09      	ldr	r3, [pc, #36]	; (800635c <cfg_NodeServoVarSet+0x114>)
 8006338:	855a      	strh	r2, [r3, #42]	; 0x2a
 800633a:	e00a      	b.n	8006352 <cfg_NodeServoVarSet+0x10a>
		case SERVO_PITCH_MAX_ANG:			servo_info.servos[SERVO_PITCH].max_ang = *(uint32_t*)value; break;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	b29a      	uxth	r2, r3
 8006342:	4b06      	ldr	r3, [pc, #24]	; (800635c <cfg_NodeServoVarSet+0x114>)
 8006344:	859a      	strh	r2, [r3, #44]	; 0x2c
 8006346:	e004      	b.n	8006352 <cfg_NodeServoVarSet+0x10a>
		default: return CFG_ERROR_VARID;
 8006348:	2302      	movs	r3, #2
 800634a:	e003      	b.n	8006354 <cfg_NodeServoVarSet+0x10c>
	}
	return CFG_ERROR_NONE;
 800634c:	bf00      	nop
 800634e:	e000      	b.n	8006352 <cfg_NodeServoVarSet+0x10a>
		case SERVO_ROLL_CUR_PWM:			break;
 8006350:	bf00      	nop
	return CFG_ERROR_NONE;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3708      	adds	r7, #8
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	20000aa4 	.word	0x20000aa4

08006360 <system_Timer>:
  * @brief  called from SysTick_Handler to update local class time
  * @param  res - time pass in mSec
  * @retval None
  */
void system_Timer(uint32_t res)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
	system_time_counter += res;
 8006368:	4b1e      	ldr	r3, [pc, #120]	; (80063e4 <system_Timer+0x84>)
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4413      	add	r3, r2
 8006370:	4a1c      	ldr	r2, [pc, #112]	; (80063e4 <system_Timer+0x84>)
 8006372:	6013      	str	r3, [r2, #0]
	//leds_Timer(res);
	cfg_Timer(res);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f7fb fc23 	bl	8001bc0 <cfg_Timer>
	modem_Timer(res);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f7fd fc72 	bl	8003c64 <modem_Timer>
	servo_Timer(res);
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f7ff fae3 	bl	800594c <servo_Timer>
	motor_Timer(res);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f7fd ff60 	bl	800424c <motor_Timer>
	rc_Timer(res);
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f7fe fb23 	bl	80049d8 <rc_Timer>
	battery_Timer(res);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f7fb f80c 	bl	80013b0 <battery_Timer>
	autopilot_Timer(res);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f7fa fcc5 	bl	8000d28 <autopilot_Timer>
	sens_Timer(res);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f7fe fe86 	bl	80050b0 <sens_Timer>

	for( uint8_t i = 0; i < sys_tmr_num; i++ )
 80063a4:	2300      	movs	r3, #0
 80063a6:	73fb      	strb	r3, [r7, #15]
 80063a8:	e013      	b.n	80063d2 <system_Timer+0x72>
	{
		if( system_info.timer[i] != 0 ){
 80063aa:	7bfb      	ldrb	r3, [r7, #15]
 80063ac:	4a0e      	ldr	r2, [pc, #56]	; (80063e8 <system_Timer+0x88>)
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	4413      	add	r3, r2
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d009      	beq.n	80063cc <system_Timer+0x6c>
			system_info.timer[i]--;
 80063b8:	7bfa      	ldrb	r2, [r7, #15]
 80063ba:	490b      	ldr	r1, [pc, #44]	; (80063e8 <system_Timer+0x88>)
 80063bc:	0093      	lsls	r3, r2, #2
 80063be:	440b      	add	r3, r1
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	1e59      	subs	r1, r3, #1
 80063c4:	4808      	ldr	r0, [pc, #32]	; (80063e8 <system_Timer+0x88>)
 80063c6:	0093      	lsls	r3, r2, #2
 80063c8:	4403      	add	r3, r0
 80063ca:	6059      	str	r1, [r3, #4]
	for( uint8_t i = 0; i < sys_tmr_num; i++ )
 80063cc:	7bfb      	ldrb	r3, [r7, #15]
 80063ce:	3301      	adds	r3, #1
 80063d0:	73fb      	strb	r3, [r7, #15]
 80063d2:	7bfb      	ldrb	r3, [r7, #15]
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d9e8      	bls.n	80063aa <system_Timer+0x4a>
		}
	}
}
 80063d8:	bf00      	nop
 80063da:	bf00      	nop
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	20000af0 	.word	0x20000af0
 80063e8:	20000ae4 	.word	0x20000ae4

080063ec <system_Init>:
  * @brief  Full system init after power up
  * @param  None
  * @retval None
  */
void system_Init()
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	af00      	add	r7, sp, #0
	system_info.reset_req = 0;
 80063f0:	4b0f      	ldr	r3, [pc, #60]	; (8006430 <system_Init+0x44>)
 80063f2:	2200      	movs	r2, #0
 80063f4:	705a      	strb	r2, [r3, #1]
	//leds_InitTask();

	modem_InitTask();
 80063f6:	f7fd fc59 	bl	8003cac <modem_InitTask>
	servo_InitTask();
 80063fa:	f7ff facf 	bl	800599c <servo_InitTask>
	motor_InitTask();
 80063fe:	f7fd ff4f 	bl	80042a0 <motor_InitTask>
	rc_InitTask();
 8006402:	f7fe fb0d 	bl	8004a20 <rc_InitTask>
	sens_InitTask();
 8006406:	f7fe fe77 	bl	80050f8 <sens_InitTask>
	battery_InitTask(10000);
 800640a:	f242 7010 	movw	r0, #10000	; 0x2710
 800640e:	f7fa ffed 	bl	80013ec <battery_InitTask>
	autopilot_InitTask();
 8006412:	f7fa fcad 	bl	8000d70 <autopilot_InitTask>
	cfg_InitTask();
 8006416:	f7fb fc09 	bl	8001c2c <cfg_InitTask>
	HAL_UART_Receive_IT(&HAL_MODEM_UART, (uint8_t*)&cfg_uart_rx_data, 1);
 800641a:	2201      	movs	r2, #1
 800641c:	4905      	ldr	r1, [pc, #20]	; (8006434 <system_Init+0x48>)
 800641e:	4806      	ldr	r0, [pc, #24]	; (8006438 <system_Init+0x4c>)
 8006420:	f003 fff0 	bl	800a404 <HAL_UART_Receive_IT>
	HAL_ADC_Start_IT(&hadc1);
 8006424:	4805      	ldr	r0, [pc, #20]	; (800643c <system_Init+0x50>)
 8006426:	f000 f9bd 	bl	80067a4 <HAL_ADC_Start_IT>
}
 800642a:	bf00      	nop
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	20000ae4 	.word	0x20000ae4
 8006434:	20000af4 	.word	0x20000af4
 8006438:	200005e8 	.word	0x200005e8
 800643c:	20000504 	.word	0x20000504

08006440 <system_Task>:
  * @brief  Full system flow, runs in while loop from main.c file
  * @param  None
  * @retval None
  */
void system_Task(void)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	af00      	add	r7, sp, #0
	//leds_Task();
	cfg_Task();
 8006444:	f7fb fc52 	bl	8001cec <cfg_Task>
	modem_Task();
 8006448:	f7fd fc52 	bl	8003cf0 <modem_Task>
	motor_Task();
 800644c:	f7fd ff74 	bl	8004338 <motor_Task>
	servo_Task();
 8006450:	f7ff fb26 	bl	8005aa0 <servo_Task>
	rc_Task();
 8006454:	f7fe fb0c 	bl	8004a70 <rc_Task>
	sens_Task();
 8006458:	f7fe fe5a 	bl	8005110 <sens_Task>
	battery_Task();
 800645c:	f7fa ffe2 	bl	8001424 <battery_Task>
	autopilot_Task();
 8006460:	f7fa fcd8 	bl	8000e14 <autopilot_Task>

	//ADC
	if( (system_info.adc_cplt == 1) && (system_info.timer[sys_tmr_adc] == 0) )
 8006464:	4b1f      	ldr	r3, [pc, #124]	; (80064e4 <system_Task+0xa4>)
 8006466:	789b      	ldrb	r3, [r3, #2]
 8006468:	b2db      	uxtb	r3, r3
 800646a:	2b01      	cmp	r3, #1
 800646c:	d109      	bne.n	8006482 <system_Task+0x42>
 800646e:	4b1d      	ldr	r3, [pc, #116]	; (80064e4 <system_Task+0xa4>)
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d105      	bne.n	8006482 <system_Task+0x42>
	{
		system_info.adc_cplt = 0;
 8006476:	4b1b      	ldr	r3, [pc, #108]	; (80064e4 <system_Task+0xa4>)
 8006478:	2200      	movs	r2, #0
 800647a:	709a      	strb	r2, [r3, #2]
		 HAL_ADC_Start_IT(&hadc1);
 800647c:	481a      	ldr	r0, [pc, #104]	; (80064e8 <system_Task+0xa8>)
 800647e:	f000 f991 	bl	80067a4 <HAL_ADC_Start_IT>
	}

	//UART restart
	if( _system_restart_uart == 1 )
 8006482:	4b1a      	ldr	r3, [pc, #104]	; (80064ec <system_Task+0xac>)
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	b2db      	uxtb	r3, r3
 8006488:	2b01      	cmp	r3, #1
 800648a:	d10f      	bne.n	80064ac <system_Task+0x6c>
	{
		_system_restart_uart = 0;
 800648c:	4b17      	ldr	r3, [pc, #92]	; (80064ec <system_Task+0xac>)
 800648e:	2200      	movs	r2, #0
 8006490:	701a      	strb	r2, [r3, #0]
		MX_UARTReInit();
 8006492:	f7fd f909 	bl	80036a8 <MX_UARTReInit>
		if( HAL_UART_Receive_IT(&HAL_MODEM_UART, (uint8_t*)&cfg_uart_rx_data, 1) != HAL_OK ){
 8006496:	2201      	movs	r2, #1
 8006498:	4915      	ldr	r1, [pc, #84]	; (80064f0 <system_Task+0xb0>)
 800649a:	4816      	ldr	r0, [pc, #88]	; (80064f4 <system_Task+0xb4>)
 800649c:	f003 ffb2 	bl	800a404 <HAL_UART_Receive_IT>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d002      	beq.n	80064ac <system_Task+0x6c>
			_system_restart_uart = 1;
 80064a6:	4b11      	ldr	r3, [pc, #68]	; (80064ec <system_Task+0xac>)
 80064a8:	2201      	movs	r2, #1
 80064aa:	701a      	strb	r2, [r3, #0]
			//system_ErrorHandler();
		}
	}

	//System reset
	if( system_info.reset_req == 1 )
 80064ac:	4b0d      	ldr	r3, [pc, #52]	; (80064e4 <system_Task+0xa4>)
 80064ae:	785b      	ldrb	r3, [r3, #1]
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d106      	bne.n	80064c4 <system_Task+0x84>
	{
		system_info.reset_req = 2;
 80064b6:	4b0b      	ldr	r3, [pc, #44]	; (80064e4 <system_Task+0xa4>)
 80064b8:	2202      	movs	r2, #2
 80064ba:	705a      	strb	r2, [r3, #1]
		system_info.timer[sys_tmr_reset] = 500;
 80064bc:	4b09      	ldr	r3, [pc, #36]	; (80064e4 <system_Task+0xa4>)
 80064be:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80064c2:	605a      	str	r2, [r3, #4]
	}
	if( (system_info.reset_req == 2) && (system_info.timer[sys_tmr_reset] == 0) )
 80064c4:	4b07      	ldr	r3, [pc, #28]	; (80064e4 <system_Task+0xa4>)
 80064c6:	785b      	ldrb	r3, [r3, #1]
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d108      	bne.n	80064e0 <system_Task+0xa0>
 80064ce:	4b05      	ldr	r3, [pc, #20]	; (80064e4 <system_Task+0xa4>)
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d104      	bne.n	80064e0 <system_Task+0xa0>
	{
		system_info.reset_req = 0;
 80064d6:	4b03      	ldr	r3, [pc, #12]	; (80064e4 <system_Task+0xa4>)
 80064d8:	2200      	movs	r2, #0
 80064da:	705a      	strb	r2, [r3, #1]
		system_Reset();
 80064dc:	f005 f8f0 	bl	800b6c0 <__system_Reset_veneer>
	}
}
 80064e0:	bf00      	nop
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	20000ae4 	.word	0x20000ae4
 80064e8:	20000504 	.word	0x20000504
 80064ec:	20000af5 	.word	0x20000af5
 80064f0:	20000af4 	.word	0x20000af4
 80064f4:	200005e8 	.word	0x200005e8

080064f8 <system_UARTmodemSet115200>:

void system_UARTmodemSet115200()
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	af00      	add	r7, sp, #0
	HAL_UART_Abort_IT(&HAL_MODEM_UART);
 80064fc:	4807      	ldr	r0, [pc, #28]	; (800651c <system_UARTmodemSet115200+0x24>)
 80064fe:	f003 ffb1 	bl	800a464 <HAL_UART_Abort_IT>
	HAL_UART_DeInit(&HAL_MODEM_UART);
 8006502:	4806      	ldr	r0, [pc, #24]	; (800651c <system_UARTmodemSet115200+0x24>)
 8006504:	f003 febd 	bl	800a282 <HAL_UART_DeInit>
	MX_USART1_UART_Init115200();
 8006508:	f7fd f898 	bl	800363c <MX_USART1_UART_Init115200>
	HAL_UART_Receive_IT(&HAL_MODEM_UART, (uint8_t*)&cfg_uart_rx_data, 1);
 800650c:	2201      	movs	r2, #1
 800650e:	4904      	ldr	r1, [pc, #16]	; (8006520 <system_UARTmodemSet115200+0x28>)
 8006510:	4802      	ldr	r0, [pc, #8]	; (800651c <system_UARTmodemSet115200+0x24>)
 8006512:	f003 ff77 	bl	800a404 <HAL_UART_Receive_IT>
	return;
 8006516:	bf00      	nop
}
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	200005e8 	.word	0x200005e8
 8006520:	20000af4 	.word	0x20000af4

08006524 <system_ModemRxCallback>:
void system_ModemRxCallback(uint8_t channel, uint8_t *data, uint32_t len)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b086      	sub	sp, #24
 8006528:	af00      	add	r7, sp, #0
 800652a:	4603      	mov	r3, r0
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	607a      	str	r2, [r7, #4]
 8006530:	73fb      	strb	r3, [r7, #15]
	uint32_t i;

	if( channel == SYSTEM_CFG_MODEM_CH )
 8006532:	7bfb      	ldrb	r3, [r7, #15]
 8006534:	2b01      	cmp	r3, #1
 8006536:	d112      	bne.n	800655e <system_ModemRxCallback+0x3a>
	{
		for( i = 0; i < len; i++ ){
 8006538:	2300      	movs	r3, #0
 800653a:	617b      	str	r3, [r7, #20]
 800653c:	e00a      	b.n	8006554 <system_ModemRxCallback+0x30>
			cfg_RcvData(CFG_IFACE_CH0, data[i]);
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	4413      	add	r3, r2
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	4619      	mov	r1, r3
 8006548:	2000      	movs	r0, #0
 800654a:	f7fb ffe7 	bl	800251c <cfg_RcvData>
		for( i = 0; i < len; i++ ){
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	3301      	adds	r3, #1
 8006552:	617b      	str	r3, [r7, #20]
 8006554:	697a      	ldr	r2, [r7, #20]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	429a      	cmp	r2, r3
 800655a:	d3f0      	bcc.n	800653e <system_ModemRxCallback+0x1a>
			rc_RcvData(data[i]);
		}
	}


	return;
 800655c:	e014      	b.n	8006588 <system_ModemRxCallback+0x64>
	else if( channel == SYSTEM_RC_MODEM_CH )
 800655e:	7bfb      	ldrb	r3, [r7, #15]
 8006560:	2b02      	cmp	r3, #2
 8006562:	d111      	bne.n	8006588 <system_ModemRxCallback+0x64>
		for( i = 0; i < len; i++ ){
 8006564:	2300      	movs	r3, #0
 8006566:	617b      	str	r3, [r7, #20]
 8006568:	e009      	b.n	800657e <system_ModemRxCallback+0x5a>
			rc_RcvData(data[i]);
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	4413      	add	r3, r2
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	4618      	mov	r0, r3
 8006574:	f7fe fb30 	bl	8004bd8 <rc_RcvData>
		for( i = 0; i < len; i++ ){
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	3301      	adds	r3, #1
 800657c:	617b      	str	r3, [r7, #20]
 800657e:	697a      	ldr	r2, [r7, #20]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	429a      	cmp	r2, r3
 8006584:	d3f1      	bcc.n	800656a <system_ModemRxCallback+0x46>
	return;
 8006586:	bf00      	nop
 8006588:	bf00      	nop
}
 800658a:	3718      	adds	r7, #24
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <system_ADC_ConvCpltCallback>:

void system_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b082      	sub	sp, #8
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
	if( hadc == &hadc1){
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a14      	ldr	r2, [pc, #80]	; (80065ec <system_ADC_ConvCpltCallback+0x5c>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d120      	bne.n	80065e2 <system_ADC_ConvCpltCallback+0x52>
		battery_info.battery_volatge = (uint16_t)((float)HAL_ADC_GetValue(&hadc1) *
 80065a0:	4812      	ldr	r0, [pc, #72]	; (80065ec <system_ADC_ConvCpltCallback+0x5c>)
 80065a2:	f000 facd 	bl	8006b40 <HAL_ADC_GetValue>
 80065a6:	ee07 0a90 	vmov	s15, r0
 80065aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ae:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80065f0 <system_ADC_ConvCpltCallback+0x60>
 80065b2:	ee67 7a87 	vmul.f32	s15, s15, s14
										((float)3300 / (float)4095) * (float)BATTERY_MEAS_COEF);
 80065b6:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 80065ba:	ee67 7a87 	vmul.f32	s15, s15, s14
		battery_info.battery_volatge = (uint16_t)((float)HAL_ADC_GetValue(&hadc1) *
 80065be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065c2:	ee17 3a90 	vmov	r3, s15
 80065c6:	b29a      	uxth	r2, r3
 80065c8:	4b0a      	ldr	r3, [pc, #40]	; (80065f4 <system_ADC_ConvCpltCallback+0x64>)
 80065ca:	81da      	strh	r2, [r3, #14]
		battery_info.battery_volatge_updated_flag = 1;
 80065cc:	4b09      	ldr	r3, [pc, #36]	; (80065f4 <system_ADC_ConvCpltCallback+0x64>)
 80065ce:	2201      	movs	r2, #1
 80065d0:	735a      	strb	r2, [r3, #13]
		system_info.adc_cplt = 1;
 80065d2:	4b09      	ldr	r3, [pc, #36]	; (80065f8 <system_ADC_ConvCpltCallback+0x68>)
 80065d4:	2201      	movs	r2, #1
 80065d6:	709a      	strb	r2, [r3, #2]
		system_info.timer[sys_tmr_adc] = 1000;
 80065d8:	4b07      	ldr	r3, [pc, #28]	; (80065f8 <system_ADC_ConvCpltCallback+0x68>)
 80065da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80065de:	609a      	str	r2, [r3, #8]
	}

	return;
 80065e0:	bf00      	nop
 80065e2:	bf00      	nop
}
 80065e4:	3708      	adds	r7, #8
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	20000504 	.word	0x20000504
 80065f0:	3f4e4ce5 	.word	0x3f4e4ce5
 80065f4:	20000198 	.word	0x20000198
 80065f8:	20000ae4 	.word	0x20000ae4

080065fc <system_UART_RxCpltCallback>:
  * @brief RX interrupt from the uart
  * @param None
  * @retval None
  */
void system_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
	if( huart == &HAL_MODEM_UART )
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a0c      	ldr	r2, [pc, #48]	; (8006638 <system_UART_RxCpltCallback+0x3c>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d110      	bne.n	800662e <system_UART_RxCpltCallback+0x32>
	{
		//cfg_RcvData(CFG_IFACE_CH0, cfg_uart_rx_data);
		modem_RcvData(cfg_uart_rx_data);
 800660c:	4b0b      	ldr	r3, [pc, #44]	; (800663c <system_UART_RxCpltCallback+0x40>)
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	b2db      	uxtb	r3, r3
 8006612:	4618      	mov	r0, r3
 8006614:	f7fd fc86 	bl	8003f24 <modem_RcvData>
		if( HAL_UART_Receive_IT(&HAL_MODEM_UART, (uint8_t*)&cfg_uart_rx_data, 1) != HAL_OK ){
 8006618:	2201      	movs	r2, #1
 800661a:	4908      	ldr	r1, [pc, #32]	; (800663c <system_UART_RxCpltCallback+0x40>)
 800661c:	4806      	ldr	r0, [pc, #24]	; (8006638 <system_UART_RxCpltCallback+0x3c>)
 800661e:	f003 fef1 	bl	800a404 <HAL_UART_Receive_IT>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d002      	beq.n	800662e <system_UART_RxCpltCallback+0x32>
			//system_ErrorHandler();
			_system_restart_uart = 1;
 8006628:	4b05      	ldr	r3, [pc, #20]	; (8006640 <system_UART_RxCpltCallback+0x44>)
 800662a:	2201      	movs	r2, #1
 800662c:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800662e:	bf00      	nop
 8006630:	3708      	adds	r7, #8
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	200005e8 	.word	0x200005e8
 800663c:	20000af4 	.word	0x20000af4
 8006640:	20000af5 	.word	0x20000af5

08006644 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006644:	f8df d034 	ldr.w	sp, [pc, #52]	; 800667c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006648:	480d      	ldr	r0, [pc, #52]	; (8006680 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800664a:	490e      	ldr	r1, [pc, #56]	; (8006684 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800664c:	4a0e      	ldr	r2, [pc, #56]	; (8006688 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800664e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006650:	e002      	b.n	8006658 <LoopCopyDataInit>

08006652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006656:	3304      	adds	r3, #4

08006658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800665a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800665c:	d3f9      	bcc.n	8006652 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800665e:	4a0b      	ldr	r2, [pc, #44]	; (800668c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006660:	4c0b      	ldr	r4, [pc, #44]	; (8006690 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006664:	e001      	b.n	800666a <LoopFillZerobss>

08006666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006668:	3204      	adds	r2, #4

0800666a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800666a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800666c:	d3fb      	bcc.n	8006666 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800666e:	f7fd fae7 	bl	8003c40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006672:	f004 ffdd 	bl	800b630 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006676:	f7fc fd81 	bl	800317c <main>
  bx  lr    
 800667a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800667c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006680:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006684:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 8006688:	0800c048 	.word	0x0800c048
  ldr r2, =_sbss
 800668c:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8006690:	20000b1c 	.word	0x20000b1c

08006694 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006694:	e7fe      	b.n	8006694 <DMA1_Stream0_IRQHandler>
	...

08006698 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800669c:	4b0e      	ldr	r3, [pc, #56]	; (80066d8 <HAL_Init+0x40>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a0d      	ldr	r2, [pc, #52]	; (80066d8 <HAL_Init+0x40>)
 80066a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80066a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80066a8:	4b0b      	ldr	r3, [pc, #44]	; (80066d8 <HAL_Init+0x40>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a0a      	ldr	r2, [pc, #40]	; (80066d8 <HAL_Init+0x40>)
 80066ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80066b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80066b4:	4b08      	ldr	r3, [pc, #32]	; (80066d8 <HAL_Init+0x40>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a07      	ldr	r2, [pc, #28]	; (80066d8 <HAL_Init+0x40>)
 80066ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80066c0:	2003      	movs	r0, #3
 80066c2:	f000 fd68 	bl	8007196 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80066c6:	200f      	movs	r0, #15
 80066c8:	f7fd f9f4 	bl	8003ab4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80066cc:	f7fd f822 	bl	8003714 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	40023c00 	.word	0x40023c00

080066dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80066dc:	b480      	push	{r7}
 80066de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80066e0:	4b06      	ldr	r3, [pc, #24]	; (80066fc <HAL_IncTick+0x20>)
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	461a      	mov	r2, r3
 80066e6:	4b06      	ldr	r3, [pc, #24]	; (8006700 <HAL_IncTick+0x24>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4413      	add	r3, r2
 80066ec:	4a04      	ldr	r2, [pc, #16]	; (8006700 <HAL_IncTick+0x24>)
 80066ee:	6013      	str	r3, [r2, #0]
}
 80066f0:	bf00      	nop
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	200000ec 	.word	0x200000ec
 8006700:	20000af8 	.word	0x20000af8

08006704 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006704:	b480      	push	{r7}
 8006706:	af00      	add	r7, sp, #0
  return uwTick;
 8006708:	4b03      	ldr	r3, [pc, #12]	; (8006718 <HAL_GetTick+0x14>)
 800670a:	681b      	ldr	r3, [r3, #0]
}
 800670c:	4618      	mov	r0, r3
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	20000af8 	.word	0x20000af8

0800671c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006724:	2300      	movs	r3, #0
 8006726:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d101      	bne.n	8006732 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e033      	b.n	800679a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006736:	2b00      	cmp	r3, #0
 8006738:	d109      	bne.n	800674e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f7fd f812 	bl	8003764 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006752:	f003 0310 	and.w	r3, r3, #16
 8006756:	2b00      	cmp	r3, #0
 8006758:	d118      	bne.n	800678c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006762:	f023 0302 	bic.w	r3, r3, #2
 8006766:	f043 0202 	orr.w	r2, r3, #2
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 fb3a 	bl	8006de8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677e:	f023 0303 	bic.w	r3, r3, #3
 8006782:	f043 0201 	orr.w	r2, r3, #1
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	641a      	str	r2, [r3, #64]	; 0x40
 800678a:	e001      	b.n	8006790 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006798:	7bfb      	ldrb	r3, [r7, #15]
}
 800679a:	4618      	mov	r0, r3
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
	...

080067a4 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b085      	sub	sp, #20
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80067ac:	2300      	movs	r3, #0
 80067ae:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d101      	bne.n	80067be <HAL_ADC_Start_IT+0x1a>
 80067ba:	2302      	movs	r3, #2
 80067bc:	e0a1      	b.n	8006902 <HAL_ADC_Start_IT+0x15e>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	f003 0301 	and.w	r3, r3, #1
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d018      	beq.n	8006806 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	689a      	ldr	r2, [r3, #8]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f042 0201 	orr.w	r2, r2, #1
 80067e2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80067e4:	4b4a      	ldr	r3, [pc, #296]	; (8006910 <HAL_ADC_Start_IT+0x16c>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a4a      	ldr	r2, [pc, #296]	; (8006914 <HAL_ADC_Start_IT+0x170>)
 80067ea:	fba2 2303 	umull	r2, r3, r2, r3
 80067ee:	0c9a      	lsrs	r2, r3, #18
 80067f0:	4613      	mov	r3, r2
 80067f2:	005b      	lsls	r3, r3, #1
 80067f4:	4413      	add	r3, r2
 80067f6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80067f8:	e002      	b.n	8006800 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	3b01      	subs	r3, #1
 80067fe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1f9      	bne.n	80067fa <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	f003 0301 	and.w	r3, r3, #1
 8006810:	2b01      	cmp	r3, #1
 8006812:	d169      	bne.n	80068e8 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006818:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800681c:	f023 0301 	bic.w	r3, r3, #1
 8006820:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006832:	2b00      	cmp	r3, #0
 8006834:	d007      	beq.n	8006846 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800683e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800684e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006852:	d106      	bne.n	8006862 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006858:	f023 0206 	bic.w	r2, r3, #6
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	645a      	str	r2, [r3, #68]	; 0x44
 8006860:	e002      	b.n	8006868 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006870:	4b29      	ldr	r3, [pc, #164]	; (8006918 <HAL_ADC_Start_IT+0x174>)
 8006872:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800687c:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	6812      	ldr	r2, [r2, #0]
 8006888:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800688c:	f043 0320 	orr.w	r3, r3, #32
 8006890:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	f003 031f 	and.w	r3, r3, #31
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10f      	bne.n	80068be <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d129      	bne.n	8006900 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	689a      	ldr	r2, [r3, #8]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80068ba:	609a      	str	r2, [r3, #8]
 80068bc:	e020      	b.n	8006900 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a16      	ldr	r2, [pc, #88]	; (800691c <HAL_ADC_Start_IT+0x178>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d11b      	bne.n	8006900 <HAL_ADC_Start_IT+0x15c>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d114      	bne.n	8006900 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	689a      	ldr	r2, [r3, #8]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80068e4:	609a      	str	r2, [r3, #8]
 80068e6:	e00b      	b.n	8006900 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ec:	f043 0210 	orr.w	r2, r3, #16
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f8:	f043 0201 	orr.w	r2, r3, #1
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3714      	adds	r7, #20
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop
 8006910:	200000e4 	.word	0x200000e4
 8006914:	431bde83 	.word	0x431bde83
 8006918:	40012300 	.word	0x40012300
 800691c:	40012000 	.word	0x40012000

08006920 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b086      	sub	sp, #24
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8006928:	2300      	movs	r3, #0
 800692a:	617b      	str	r3, [r7, #20]
 800692c:	2300      	movs	r3, #0
 800692e:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f003 0302 	and.w	r3, r3, #2
 8006946:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	f003 0320 	and.w	r3, r3, #32
 800694e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d049      	beq.n	80069ea <HAL_ADC_IRQHandler+0xca>
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d046      	beq.n	80069ea <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006960:	f003 0310 	and.w	r3, r3, #16
 8006964:	2b00      	cmp	r3, #0
 8006966:	d105      	bne.n	8006974 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800697e:	2b00      	cmp	r3, #0
 8006980:	d12b      	bne.n	80069da <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006986:	2b00      	cmp	r3, #0
 8006988:	d127      	bne.n	80069da <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006990:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006994:	2b00      	cmp	r3, #0
 8006996:	d006      	beq.n	80069a6 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d119      	bne.n	80069da <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	685a      	ldr	r2, [r3, #4]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f022 0220 	bic.w	r2, r2, #32
 80069b4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d105      	bne.n	80069da <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d2:	f043 0201 	orr.w	r2, r3, #1
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f7fc fe70 	bl	80036c0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f06f 0212 	mvn.w	r2, #18
 80069e8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f003 0304 	and.w	r3, r3, #4
 80069f0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069f8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d057      	beq.n	8006ab0 <HAL_ADC_IRQHandler+0x190>
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d054      	beq.n	8006ab0 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0a:	f003 0310 	and.w	r3, r3, #16
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d105      	bne.n	8006a1e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a16:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d139      	bne.n	8006aa0 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a32:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d006      	beq.n	8006a48 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d12b      	bne.n	8006aa0 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d124      	bne.n	8006aa0 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d11d      	bne.n	8006aa0 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d119      	bne.n	8006aa0 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	685a      	ldr	r2, [r3, #4]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a7a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a80:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d105      	bne.n	8006aa0 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a98:	f043 0201 	orr.w	r2, r3, #1
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 fa9d 	bl	8006fe0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f06f 020c 	mvn.w	r2, #12
 8006aae:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f003 0301 	and.w	r3, r3, #1
 8006ab6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006abe:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d017      	beq.n	8006af6 <HAL_ADC_IRQHandler+0x1d6>
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d014      	beq.n	8006af6 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0301 	and.w	r3, r3, #1
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d10d      	bne.n	8006af6 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ade:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f837 	bl	8006b5a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f06f 0201 	mvn.w	r2, #1
 8006af4:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f003 0320 	and.w	r3, r3, #32
 8006afc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006b04:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d015      	beq.n	8006b38 <HAL_ADC_IRQHandler+0x218>
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d012      	beq.n	8006b38 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b16:	f043 0202 	orr.w	r2, r3, #2
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f06f 0220 	mvn.w	r2, #32
 8006b26:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 f820 	bl	8006b6e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f06f 0220 	mvn.w	r2, #32
 8006b36:	601a      	str	r2, [r3, #0]
  }
}
 8006b38:	bf00      	nop
 8006b3a:	3718      	adds	r7, #24
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	370c      	adds	r7, #12
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b083      	sub	sp, #12
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8006b62:	bf00      	nop
 8006b64:	370c      	adds	r7, #12
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr

08006b6e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006b6e:	b480      	push	{r7}
 8006b70:	b083      	sub	sp, #12
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006b76:	bf00      	nop
 8006b78:	370c      	adds	r7, #12
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
	...

08006b84 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d101      	bne.n	8006ba0 <HAL_ADC_ConfigChannel+0x1c>
 8006b9c:	2302      	movs	r3, #2
 8006b9e:	e113      	b.n	8006dc8 <HAL_ADC_ConfigChannel+0x244>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2b09      	cmp	r3, #9
 8006bae:	d925      	bls.n	8006bfc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68d9      	ldr	r1, [r3, #12]
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	005b      	lsls	r3, r3, #1
 8006bc2:	4413      	add	r3, r2
 8006bc4:	3b1e      	subs	r3, #30
 8006bc6:	2207      	movs	r2, #7
 8006bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bcc:	43da      	mvns	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	400a      	ands	r2, r1
 8006bd4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68d9      	ldr	r1, [r3, #12]
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	689a      	ldr	r2, [r3, #8]
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	4618      	mov	r0, r3
 8006be8:	4603      	mov	r3, r0
 8006bea:	005b      	lsls	r3, r3, #1
 8006bec:	4403      	add	r3, r0
 8006bee:	3b1e      	subs	r3, #30
 8006bf0:	409a      	lsls	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	430a      	orrs	r2, r1
 8006bf8:	60da      	str	r2, [r3, #12]
 8006bfa:	e022      	b.n	8006c42 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	6919      	ldr	r1, [r3, #16]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	461a      	mov	r2, r3
 8006c0a:	4613      	mov	r3, r2
 8006c0c:	005b      	lsls	r3, r3, #1
 8006c0e:	4413      	add	r3, r2
 8006c10:	2207      	movs	r2, #7
 8006c12:	fa02 f303 	lsl.w	r3, r2, r3
 8006c16:	43da      	mvns	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	400a      	ands	r2, r1
 8006c1e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6919      	ldr	r1, [r3, #16]
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	689a      	ldr	r2, [r3, #8]
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	4618      	mov	r0, r3
 8006c32:	4603      	mov	r3, r0
 8006c34:	005b      	lsls	r3, r3, #1
 8006c36:	4403      	add	r3, r0
 8006c38:	409a      	lsls	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	2b06      	cmp	r3, #6
 8006c48:	d824      	bhi.n	8006c94 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	685a      	ldr	r2, [r3, #4]
 8006c54:	4613      	mov	r3, r2
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	4413      	add	r3, r2
 8006c5a:	3b05      	subs	r3, #5
 8006c5c:	221f      	movs	r2, #31
 8006c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c62:	43da      	mvns	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	400a      	ands	r2, r1
 8006c6a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	4618      	mov	r0, r3
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	685a      	ldr	r2, [r3, #4]
 8006c7e:	4613      	mov	r3, r2
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	4413      	add	r3, r2
 8006c84:	3b05      	subs	r3, #5
 8006c86:	fa00 f203 	lsl.w	r2, r0, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	430a      	orrs	r2, r1
 8006c90:	635a      	str	r2, [r3, #52]	; 0x34
 8006c92:	e04c      	b.n	8006d2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	2b0c      	cmp	r3, #12
 8006c9a:	d824      	bhi.n	8006ce6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	685a      	ldr	r2, [r3, #4]
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	4413      	add	r3, r2
 8006cac:	3b23      	subs	r3, #35	; 0x23
 8006cae:	221f      	movs	r2, #31
 8006cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb4:	43da      	mvns	r2, r3
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	400a      	ands	r2, r1
 8006cbc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	4618      	mov	r0, r3
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	685a      	ldr	r2, [r3, #4]
 8006cd0:	4613      	mov	r3, r2
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4413      	add	r3, r2
 8006cd6:	3b23      	subs	r3, #35	; 0x23
 8006cd8:	fa00 f203 	lsl.w	r2, r0, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	430a      	orrs	r2, r1
 8006ce2:	631a      	str	r2, [r3, #48]	; 0x30
 8006ce4:	e023      	b.n	8006d2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	685a      	ldr	r2, [r3, #4]
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	4413      	add	r3, r2
 8006cf6:	3b41      	subs	r3, #65	; 0x41
 8006cf8:	221f      	movs	r2, #31
 8006cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8006cfe:	43da      	mvns	r2, r3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	400a      	ands	r2, r1
 8006d06:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	4618      	mov	r0, r3
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	685a      	ldr	r2, [r3, #4]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	4413      	add	r3, r2
 8006d20:	3b41      	subs	r3, #65	; 0x41
 8006d22:	fa00 f203 	lsl.w	r2, r0, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	430a      	orrs	r2, r1
 8006d2c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006d2e:	4b29      	ldr	r3, [pc, #164]	; (8006dd4 <HAL_ADC_ConfigChannel+0x250>)
 8006d30:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a28      	ldr	r2, [pc, #160]	; (8006dd8 <HAL_ADC_ConfigChannel+0x254>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d10f      	bne.n	8006d5c <HAL_ADC_ConfigChannel+0x1d8>
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2b12      	cmp	r3, #18
 8006d42:	d10b      	bne.n	8006d5c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a1d      	ldr	r2, [pc, #116]	; (8006dd8 <HAL_ADC_ConfigChannel+0x254>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d12b      	bne.n	8006dbe <HAL_ADC_ConfigChannel+0x23a>
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a1c      	ldr	r2, [pc, #112]	; (8006ddc <HAL_ADC_ConfigChannel+0x258>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d003      	beq.n	8006d78 <HAL_ADC_ConfigChannel+0x1f4>
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2b11      	cmp	r3, #17
 8006d76:	d122      	bne.n	8006dbe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a11      	ldr	r2, [pc, #68]	; (8006ddc <HAL_ADC_ConfigChannel+0x258>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d111      	bne.n	8006dbe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006d9a:	4b11      	ldr	r3, [pc, #68]	; (8006de0 <HAL_ADC_ConfigChannel+0x25c>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a11      	ldr	r2, [pc, #68]	; (8006de4 <HAL_ADC_ConfigChannel+0x260>)
 8006da0:	fba2 2303 	umull	r2, r3, r2, r3
 8006da4:	0c9a      	lsrs	r2, r3, #18
 8006da6:	4613      	mov	r3, r2
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	4413      	add	r3, r2
 8006dac:	005b      	lsls	r3, r3, #1
 8006dae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006db0:	e002      	b.n	8006db8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	3b01      	subs	r3, #1
 8006db6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1f9      	bne.n	8006db2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3714      	adds	r7, #20
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr
 8006dd4:	40012300 	.word	0x40012300
 8006dd8:	40012000 	.word	0x40012000
 8006ddc:	10000012 	.word	0x10000012
 8006de0:	200000e4 	.word	0x200000e4
 8006de4:	431bde83 	.word	0x431bde83

08006de8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006df0:	4b79      	ldr	r3, [pc, #484]	; (8006fd8 <ADC_Init+0x1f0>)
 8006df2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	685a      	ldr	r2, [r3, #4]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	431a      	orrs	r2, r3
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	685a      	ldr	r2, [r3, #4]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	6859      	ldr	r1, [r3, #4]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	691b      	ldr	r3, [r3, #16]
 8006e28:	021a      	lsls	r2, r3, #8
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	430a      	orrs	r2, r1
 8006e30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	685a      	ldr	r2, [r3, #4]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006e40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	6859      	ldr	r1, [r3, #4]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	689a      	ldr	r2, [r3, #8]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	430a      	orrs	r2, r1
 8006e52:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	689a      	ldr	r2, [r3, #8]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	6899      	ldr	r1, [r3, #8]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	68da      	ldr	r2, [r3, #12]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	430a      	orrs	r2, r1
 8006e74:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e7a:	4a58      	ldr	r2, [pc, #352]	; (8006fdc <ADC_Init+0x1f4>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d022      	beq.n	8006ec6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	689a      	ldr	r2, [r3, #8]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006e8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	6899      	ldr	r1, [r3, #8]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	430a      	orrs	r2, r1
 8006ea0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	689a      	ldr	r2, [r3, #8]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006eb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	6899      	ldr	r1, [r3, #8]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	430a      	orrs	r2, r1
 8006ec2:	609a      	str	r2, [r3, #8]
 8006ec4:	e00f      	b.n	8006ee6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	689a      	ldr	r2, [r3, #8]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006ed4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	689a      	ldr	r2, [r3, #8]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006ee4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	689a      	ldr	r2, [r3, #8]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f022 0202 	bic.w	r2, r2, #2
 8006ef4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	6899      	ldr	r1, [r3, #8]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	7e1b      	ldrb	r3, [r3, #24]
 8006f00:	005a      	lsls	r2, r3, #1
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	430a      	orrs	r2, r1
 8006f08:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d01b      	beq.n	8006f4c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	685a      	ldr	r2, [r3, #4]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f22:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	685a      	ldr	r2, [r3, #4]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006f32:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	6859      	ldr	r1, [r3, #4]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	035a      	lsls	r2, r3, #13
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	430a      	orrs	r2, r1
 8006f48:	605a      	str	r2, [r3, #4]
 8006f4a:	e007      	b.n	8006f5c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	685a      	ldr	r2, [r3, #4]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f5a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006f6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	69db      	ldr	r3, [r3, #28]
 8006f76:	3b01      	subs	r3, #1
 8006f78:	051a      	lsls	r2, r3, #20
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	430a      	orrs	r2, r1
 8006f80:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	689a      	ldr	r2, [r3, #8]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006f90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	6899      	ldr	r1, [r3, #8]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006f9e:	025a      	lsls	r2, r3, #9
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	430a      	orrs	r2, r1
 8006fa6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	689a      	ldr	r2, [r3, #8]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	6899      	ldr	r1, [r3, #8]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	695b      	ldr	r3, [r3, #20]
 8006fc2:	029a      	lsls	r2, r3, #10
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	430a      	orrs	r2, r1
 8006fca:	609a      	str	r2, [r3, #8]
}
 8006fcc:	bf00      	nop
 8006fce:	3714      	adds	r7, #20
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr
 8006fd8:	40012300 	.word	0x40012300
 8006fdc:	0f000001 	.word	0x0f000001

08006fe0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8006fe8:	bf00      	nop
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f003 0307 	and.w	r3, r3, #7
 8007002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007004:	4b0c      	ldr	r3, [pc, #48]	; (8007038 <__NVIC_SetPriorityGrouping+0x44>)
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800700a:	68ba      	ldr	r2, [r7, #8]
 800700c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007010:	4013      	ands	r3, r2
 8007012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800701c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007026:	4a04      	ldr	r2, [pc, #16]	; (8007038 <__NVIC_SetPriorityGrouping+0x44>)
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	60d3      	str	r3, [r2, #12]
}
 800702c:	bf00      	nop
 800702e:	3714      	adds	r7, #20
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr
 8007038:	e000ed00 	.word	0xe000ed00

0800703c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800703c:	b480      	push	{r7}
 800703e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007040:	4b04      	ldr	r3, [pc, #16]	; (8007054 <__NVIC_GetPriorityGrouping+0x18>)
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	0a1b      	lsrs	r3, r3, #8
 8007046:	f003 0307 	and.w	r3, r3, #7
}
 800704a:	4618      	mov	r0, r3
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr
 8007054:	e000ed00 	.word	0xe000ed00

08007058 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	4603      	mov	r3, r0
 8007060:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007066:	2b00      	cmp	r3, #0
 8007068:	db0b      	blt.n	8007082 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800706a:	79fb      	ldrb	r3, [r7, #7]
 800706c:	f003 021f 	and.w	r2, r3, #31
 8007070:	4907      	ldr	r1, [pc, #28]	; (8007090 <__NVIC_EnableIRQ+0x38>)
 8007072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007076:	095b      	lsrs	r3, r3, #5
 8007078:	2001      	movs	r0, #1
 800707a:	fa00 f202 	lsl.w	r2, r0, r2
 800707e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007082:	bf00      	nop
 8007084:	370c      	adds	r7, #12
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop
 8007090:	e000e100 	.word	0xe000e100

08007094 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	4603      	mov	r3, r0
 800709c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800709e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	db12      	blt.n	80070cc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80070a6:	79fb      	ldrb	r3, [r7, #7]
 80070a8:	f003 021f 	and.w	r2, r3, #31
 80070ac:	490a      	ldr	r1, [pc, #40]	; (80070d8 <__NVIC_DisableIRQ+0x44>)
 80070ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070b2:	095b      	lsrs	r3, r3, #5
 80070b4:	2001      	movs	r0, #1
 80070b6:	fa00 f202 	lsl.w	r2, r0, r2
 80070ba:	3320      	adds	r3, #32
 80070bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80070c0:	f3bf 8f4f 	dsb	sy
}
 80070c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80070c6:	f3bf 8f6f 	isb	sy
}
 80070ca:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80070cc:	bf00      	nop
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr
 80070d8:	e000e100 	.word	0xe000e100

080070dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	4603      	mov	r3, r0
 80070e4:	6039      	str	r1, [r7, #0]
 80070e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	db0a      	blt.n	8007106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	b2da      	uxtb	r2, r3
 80070f4:	490c      	ldr	r1, [pc, #48]	; (8007128 <__NVIC_SetPriority+0x4c>)
 80070f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070fa:	0112      	lsls	r2, r2, #4
 80070fc:	b2d2      	uxtb	r2, r2
 80070fe:	440b      	add	r3, r1
 8007100:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007104:	e00a      	b.n	800711c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	b2da      	uxtb	r2, r3
 800710a:	4908      	ldr	r1, [pc, #32]	; (800712c <__NVIC_SetPriority+0x50>)
 800710c:	79fb      	ldrb	r3, [r7, #7]
 800710e:	f003 030f 	and.w	r3, r3, #15
 8007112:	3b04      	subs	r3, #4
 8007114:	0112      	lsls	r2, r2, #4
 8007116:	b2d2      	uxtb	r2, r2
 8007118:	440b      	add	r3, r1
 800711a:	761a      	strb	r2, [r3, #24]
}
 800711c:	bf00      	nop
 800711e:	370c      	adds	r7, #12
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr
 8007128:	e000e100 	.word	0xe000e100
 800712c:	e000ed00 	.word	0xe000ed00

08007130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007130:	b480      	push	{r7}
 8007132:	b089      	sub	sp, #36	; 0x24
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f003 0307 	and.w	r3, r3, #7
 8007142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	f1c3 0307 	rsb	r3, r3, #7
 800714a:	2b04      	cmp	r3, #4
 800714c:	bf28      	it	cs
 800714e:	2304      	movcs	r3, #4
 8007150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	3304      	adds	r3, #4
 8007156:	2b06      	cmp	r3, #6
 8007158:	d902      	bls.n	8007160 <NVIC_EncodePriority+0x30>
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	3b03      	subs	r3, #3
 800715e:	e000      	b.n	8007162 <NVIC_EncodePriority+0x32>
 8007160:	2300      	movs	r3, #0
 8007162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007164:	f04f 32ff 	mov.w	r2, #4294967295
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	fa02 f303 	lsl.w	r3, r2, r3
 800716e:	43da      	mvns	r2, r3
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	401a      	ands	r2, r3
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007178:	f04f 31ff 	mov.w	r1, #4294967295
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	fa01 f303 	lsl.w	r3, r1, r3
 8007182:	43d9      	mvns	r1, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007188:	4313      	orrs	r3, r2
         );
}
 800718a:	4618      	mov	r0, r3
 800718c:	3724      	adds	r7, #36	; 0x24
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr

08007196 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007196:	b580      	push	{r7, lr}
 8007198:	b082      	sub	sp, #8
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f7ff ff28 	bl	8006ff4 <__NVIC_SetPriorityGrouping>
}
 80071a4:	bf00      	nop
 80071a6:	3708      	adds	r7, #8
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b086      	sub	sp, #24
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	4603      	mov	r3, r0
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	607a      	str	r2, [r7, #4]
 80071b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80071ba:	2300      	movs	r3, #0
 80071bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80071be:	f7ff ff3d 	bl	800703c <__NVIC_GetPriorityGrouping>
 80071c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	68b9      	ldr	r1, [r7, #8]
 80071c8:	6978      	ldr	r0, [r7, #20]
 80071ca:	f7ff ffb1 	bl	8007130 <NVIC_EncodePriority>
 80071ce:	4602      	mov	r2, r0
 80071d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071d4:	4611      	mov	r1, r2
 80071d6:	4618      	mov	r0, r3
 80071d8:	f7ff ff80 	bl	80070dc <__NVIC_SetPriority>
}
 80071dc:	bf00      	nop
 80071de:	3718      	adds	r7, #24
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	4603      	mov	r3, r0
 80071ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80071ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071f2:	4618      	mov	r0, r3
 80071f4:	f7ff ff30 	bl	8007058 <__NVIC_EnableIRQ>
}
 80071f8:	bf00      	nop
 80071fa:	3708      	adds	r7, #8
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	4603      	mov	r3, r0
 8007208:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800720a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800720e:	4618      	mov	r0, r3
 8007210:	f7ff ff40 	bl	8007094 <__NVIC_DisableIRQ>
}
 8007214:	bf00      	nop
 8007216:	3708      	adds	r7, #8
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007228:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800722a:	f7ff fa6b 	bl	8006704 <HAL_GetTick>
 800722e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007236:	b2db      	uxtb	r3, r3
 8007238:	2b02      	cmp	r3, #2
 800723a:	d008      	beq.n	800724e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2280      	movs	r2, #128	; 0x80
 8007240:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e052      	b.n	80072f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f022 0216 	bic.w	r2, r2, #22
 800725c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	695a      	ldr	r2, [r3, #20]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800726c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007272:	2b00      	cmp	r3, #0
 8007274:	d103      	bne.n	800727e <HAL_DMA_Abort+0x62>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800727a:	2b00      	cmp	r3, #0
 800727c:	d007      	beq.n	800728e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f022 0208 	bic.w	r2, r2, #8
 800728c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f022 0201 	bic.w	r2, r2, #1
 800729c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800729e:	e013      	b.n	80072c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80072a0:	f7ff fa30 	bl	8006704 <HAL_GetTick>
 80072a4:	4602      	mov	r2, r0
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	1ad3      	subs	r3, r2, r3
 80072aa:	2b05      	cmp	r3, #5
 80072ac:	d90c      	bls.n	80072c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2220      	movs	r2, #32
 80072b2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2203      	movs	r2, #3
 80072b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80072c4:	2303      	movs	r3, #3
 80072c6:	e015      	b.n	80072f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f003 0301 	and.w	r3, r3, #1
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d1e4      	bne.n	80072a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072da:	223f      	movs	r2, #63	; 0x3f
 80072dc:	409a      	lsls	r2, r3
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2201      	movs	r2, #1
 80072e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3710      	adds	r7, #16
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800730a:	b2db      	uxtb	r3, r3
 800730c:	2b02      	cmp	r3, #2
 800730e:	d004      	beq.n	800731a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2280      	movs	r2, #128	; 0x80
 8007314:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e00c      	b.n	8007334 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2205      	movs	r2, #5
 800731e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f022 0201 	bic.w	r2, r2, #1
 8007330:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007332:	2300      	movs	r3, #0
}
 8007334:	4618      	mov	r0, r3
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b086      	sub	sp, #24
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007352:	4b23      	ldr	r3, [pc, #140]	; (80073e0 <HAL_FLASH_Program+0xa0>)
 8007354:	7e1b      	ldrb	r3, [r3, #24]
 8007356:	2b01      	cmp	r3, #1
 8007358:	d101      	bne.n	800735e <HAL_FLASH_Program+0x1e>
 800735a:	2302      	movs	r3, #2
 800735c:	e03b      	b.n	80073d6 <HAL_FLASH_Program+0x96>
 800735e:	4b20      	ldr	r3, [pc, #128]	; (80073e0 <HAL_FLASH_Program+0xa0>)
 8007360:	2201      	movs	r2, #1
 8007362:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007364:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007368:	f000 f870 	bl	800744c <FLASH_WaitForLastOperation>
 800736c:	4603      	mov	r3, r0
 800736e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8007370:	7dfb      	ldrb	r3, [r7, #23]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d12b      	bne.n	80073ce <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d105      	bne.n	8007388 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800737c:	783b      	ldrb	r3, [r7, #0]
 800737e:	4619      	mov	r1, r3
 8007380:	68b8      	ldr	r0, [r7, #8]
 8007382:	f000 f91b 	bl	80075bc <FLASH_Program_Byte>
 8007386:	e016      	b.n	80073b6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2b01      	cmp	r3, #1
 800738c:	d105      	bne.n	800739a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800738e:	883b      	ldrh	r3, [r7, #0]
 8007390:	4619      	mov	r1, r3
 8007392:	68b8      	ldr	r0, [r7, #8]
 8007394:	f000 f8ee 	bl	8007574 <FLASH_Program_HalfWord>
 8007398:	e00d      	b.n	80073b6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2b02      	cmp	r3, #2
 800739e:	d105      	bne.n	80073ac <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	4619      	mov	r1, r3
 80073a4:	68b8      	ldr	r0, [r7, #8]
 80073a6:	f000 f8c3 	bl	8007530 <FLASH_Program_Word>
 80073aa:	e004      	b.n	80073b6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80073ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073b0:	68b8      	ldr	r0, [r7, #8]
 80073b2:	f000 f88b 	bl	80074cc <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80073b6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80073ba:	f000 f847 	bl	800744c <FLASH_WaitForLastOperation>
 80073be:	4603      	mov	r3, r0
 80073c0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80073c2:	4b08      	ldr	r3, [pc, #32]	; (80073e4 <HAL_FLASH_Program+0xa4>)
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	4a07      	ldr	r2, [pc, #28]	; (80073e4 <HAL_FLASH_Program+0xa4>)
 80073c8:	f023 0301 	bic.w	r3, r3, #1
 80073cc:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80073ce:	4b04      	ldr	r3, [pc, #16]	; (80073e0 <HAL_FLASH_Program+0xa0>)
 80073d0:	2200      	movs	r2, #0
 80073d2:	761a      	strb	r2, [r3, #24]
  
  return status;
 80073d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3718      	adds	r7, #24
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	20000afc 	.word	0x20000afc
 80073e4:	40023c00 	.word	0x40023c00

080073e8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80073ee:	2300      	movs	r3, #0
 80073f0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80073f2:	4b0b      	ldr	r3, [pc, #44]	; (8007420 <HAL_FLASH_Unlock+0x38>)
 80073f4:	691b      	ldr	r3, [r3, #16]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	da0b      	bge.n	8007412 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80073fa:	4b09      	ldr	r3, [pc, #36]	; (8007420 <HAL_FLASH_Unlock+0x38>)
 80073fc:	4a09      	ldr	r2, [pc, #36]	; (8007424 <HAL_FLASH_Unlock+0x3c>)
 80073fe:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007400:	4b07      	ldr	r3, [pc, #28]	; (8007420 <HAL_FLASH_Unlock+0x38>)
 8007402:	4a09      	ldr	r2, [pc, #36]	; (8007428 <HAL_FLASH_Unlock+0x40>)
 8007404:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007406:	4b06      	ldr	r3, [pc, #24]	; (8007420 <HAL_FLASH_Unlock+0x38>)
 8007408:	691b      	ldr	r3, [r3, #16]
 800740a:	2b00      	cmp	r3, #0
 800740c:	da01      	bge.n	8007412 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8007412:	79fb      	ldrb	r3, [r7, #7]
}
 8007414:	4618      	mov	r0, r3
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr
 8007420:	40023c00 	.word	0x40023c00
 8007424:	45670123 	.word	0x45670123
 8007428:	cdef89ab 	.word	0xcdef89ab

0800742c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800742c:	b480      	push	{r7}
 800742e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8007430:	4b05      	ldr	r3, [pc, #20]	; (8007448 <HAL_FLASH_Lock+0x1c>)
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	4a04      	ldr	r2, [pc, #16]	; (8007448 <HAL_FLASH_Lock+0x1c>)
 8007436:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800743a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr
 8007448:	40023c00 	.word	0x40023c00

0800744c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007454:	2300      	movs	r3, #0
 8007456:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007458:	4b1a      	ldr	r3, [pc, #104]	; (80074c4 <FLASH_WaitForLastOperation+0x78>)
 800745a:	2200      	movs	r2, #0
 800745c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800745e:	f7ff f951 	bl	8006704 <HAL_GetTick>
 8007462:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007464:	e010      	b.n	8007488 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800746c:	d00c      	beq.n	8007488 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d007      	beq.n	8007484 <FLASH_WaitForLastOperation+0x38>
 8007474:	f7ff f946 	bl	8006704 <HAL_GetTick>
 8007478:	4602      	mov	r2, r0
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	1ad3      	subs	r3, r2, r3
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	429a      	cmp	r2, r3
 8007482:	d201      	bcs.n	8007488 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	e019      	b.n	80074bc <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007488:	4b0f      	ldr	r3, [pc, #60]	; (80074c8 <FLASH_WaitForLastOperation+0x7c>)
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007490:	2b00      	cmp	r3, #0
 8007492:	d1e8      	bne.n	8007466 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8007494:	4b0c      	ldr	r3, [pc, #48]	; (80074c8 <FLASH_WaitForLastOperation+0x7c>)
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	f003 0301 	and.w	r3, r3, #1
 800749c:	2b00      	cmp	r3, #0
 800749e:	d002      	beq.n	80074a6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80074a0:	4b09      	ldr	r3, [pc, #36]	; (80074c8 <FLASH_WaitForLastOperation+0x7c>)
 80074a2:	2201      	movs	r2, #1
 80074a4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80074a6:	4b08      	ldr	r3, [pc, #32]	; (80074c8 <FLASH_WaitForLastOperation+0x7c>)
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d003      	beq.n	80074ba <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80074b2:	f000 f8a5 	bl	8007600 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	e000      	b.n	80074bc <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80074ba:	2300      	movs	r3, #0
  
}  
 80074bc:	4618      	mov	r0, r3
 80074be:	3710      	adds	r7, #16
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	20000afc 	.word	0x20000afc
 80074c8:	40023c00 	.word	0x40023c00

080074cc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b085      	sub	sp, #20
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80074d8:	4b14      	ldr	r3, [pc, #80]	; (800752c <FLASH_Program_DoubleWord+0x60>)
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	4a13      	ldr	r2, [pc, #76]	; (800752c <FLASH_Program_DoubleWord+0x60>)
 80074de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80074e4:	4b11      	ldr	r3, [pc, #68]	; (800752c <FLASH_Program_DoubleWord+0x60>)
 80074e6:	691b      	ldr	r3, [r3, #16]
 80074e8:	4a10      	ldr	r2, [pc, #64]	; (800752c <FLASH_Program_DoubleWord+0x60>)
 80074ea:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80074ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80074f0:	4b0e      	ldr	r3, [pc, #56]	; (800752c <FLASH_Program_DoubleWord+0x60>)
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	4a0d      	ldr	r2, [pc, #52]	; (800752c <FLASH_Program_DoubleWord+0x60>)
 80074f6:	f043 0301 	orr.w	r3, r3, #1
 80074fa:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	683a      	ldr	r2, [r7, #0]
 8007500:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8007502:	f3bf 8f6f 	isb	sy
}
 8007506:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8007508:	e9d7 0100 	ldrd	r0, r1, [r7]
 800750c:	f04f 0200 	mov.w	r2, #0
 8007510:	f04f 0300 	mov.w	r3, #0
 8007514:	000a      	movs	r2, r1
 8007516:	2300      	movs	r3, #0
 8007518:	68f9      	ldr	r1, [r7, #12]
 800751a:	3104      	adds	r1, #4
 800751c:	4613      	mov	r3, r2
 800751e:	600b      	str	r3, [r1, #0]
}
 8007520:	bf00      	nop
 8007522:	3714      	adds	r7, #20
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr
 800752c:	40023c00 	.word	0x40023c00

08007530 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800753a:	4b0d      	ldr	r3, [pc, #52]	; (8007570 <FLASH_Program_Word+0x40>)
 800753c:	691b      	ldr	r3, [r3, #16]
 800753e:	4a0c      	ldr	r2, [pc, #48]	; (8007570 <FLASH_Program_Word+0x40>)
 8007540:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007544:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8007546:	4b0a      	ldr	r3, [pc, #40]	; (8007570 <FLASH_Program_Word+0x40>)
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	4a09      	ldr	r2, [pc, #36]	; (8007570 <FLASH_Program_Word+0x40>)
 800754c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007550:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007552:	4b07      	ldr	r3, [pc, #28]	; (8007570 <FLASH_Program_Word+0x40>)
 8007554:	691b      	ldr	r3, [r3, #16]
 8007556:	4a06      	ldr	r2, [pc, #24]	; (8007570 <FLASH_Program_Word+0x40>)
 8007558:	f043 0301 	orr.w	r3, r3, #1
 800755c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	683a      	ldr	r2, [r7, #0]
 8007562:	601a      	str	r2, [r3, #0]
}
 8007564:	bf00      	nop
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr
 8007570:	40023c00 	.word	0x40023c00

08007574 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	460b      	mov	r3, r1
 800757e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007580:	4b0d      	ldr	r3, [pc, #52]	; (80075b8 <FLASH_Program_HalfWord+0x44>)
 8007582:	691b      	ldr	r3, [r3, #16]
 8007584:	4a0c      	ldr	r2, [pc, #48]	; (80075b8 <FLASH_Program_HalfWord+0x44>)
 8007586:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800758a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800758c:	4b0a      	ldr	r3, [pc, #40]	; (80075b8 <FLASH_Program_HalfWord+0x44>)
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	4a09      	ldr	r2, [pc, #36]	; (80075b8 <FLASH_Program_HalfWord+0x44>)
 8007592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007596:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007598:	4b07      	ldr	r3, [pc, #28]	; (80075b8 <FLASH_Program_HalfWord+0x44>)
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	4a06      	ldr	r2, [pc, #24]	; (80075b8 <FLASH_Program_HalfWord+0x44>)
 800759e:	f043 0301 	orr.w	r3, r3, #1
 80075a2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	887a      	ldrh	r2, [r7, #2]
 80075a8:	801a      	strh	r2, [r3, #0]
}
 80075aa:	bf00      	nop
 80075ac:	370c      	adds	r7, #12
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop
 80075b8:	40023c00 	.word	0x40023c00

080075bc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	460b      	mov	r3, r1
 80075c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80075c8:	4b0c      	ldr	r3, [pc, #48]	; (80075fc <FLASH_Program_Byte+0x40>)
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	4a0b      	ldr	r2, [pc, #44]	; (80075fc <FLASH_Program_Byte+0x40>)
 80075ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80075d4:	4b09      	ldr	r3, [pc, #36]	; (80075fc <FLASH_Program_Byte+0x40>)
 80075d6:	4a09      	ldr	r2, [pc, #36]	; (80075fc <FLASH_Program_Byte+0x40>)
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80075dc:	4b07      	ldr	r3, [pc, #28]	; (80075fc <FLASH_Program_Byte+0x40>)
 80075de:	691b      	ldr	r3, [r3, #16]
 80075e0:	4a06      	ldr	r2, [pc, #24]	; (80075fc <FLASH_Program_Byte+0x40>)
 80075e2:	f043 0301 	orr.w	r3, r3, #1
 80075e6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	78fa      	ldrb	r2, [r7, #3]
 80075ec:	701a      	strb	r2, [r3, #0]
}
 80075ee:	bf00      	nop
 80075f0:	370c      	adds	r7, #12
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr
 80075fa:	bf00      	nop
 80075fc:	40023c00 	.word	0x40023c00

08007600 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8007600:	b480      	push	{r7}
 8007602:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8007604:	4b2f      	ldr	r3, [pc, #188]	; (80076c4 <FLASH_SetErrorCode+0xc4>)
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	f003 0310 	and.w	r3, r3, #16
 800760c:	2b00      	cmp	r3, #0
 800760e:	d008      	beq.n	8007622 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007610:	4b2d      	ldr	r3, [pc, #180]	; (80076c8 <FLASH_SetErrorCode+0xc8>)
 8007612:	69db      	ldr	r3, [r3, #28]
 8007614:	f043 0310 	orr.w	r3, r3, #16
 8007618:	4a2b      	ldr	r2, [pc, #172]	; (80076c8 <FLASH_SetErrorCode+0xc8>)
 800761a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800761c:	4b29      	ldr	r3, [pc, #164]	; (80076c4 <FLASH_SetErrorCode+0xc4>)
 800761e:	2210      	movs	r2, #16
 8007620:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8007622:	4b28      	ldr	r3, [pc, #160]	; (80076c4 <FLASH_SetErrorCode+0xc4>)
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	f003 0320 	and.w	r3, r3, #32
 800762a:	2b00      	cmp	r3, #0
 800762c:	d008      	beq.n	8007640 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800762e:	4b26      	ldr	r3, [pc, #152]	; (80076c8 <FLASH_SetErrorCode+0xc8>)
 8007630:	69db      	ldr	r3, [r3, #28]
 8007632:	f043 0308 	orr.w	r3, r3, #8
 8007636:	4a24      	ldr	r2, [pc, #144]	; (80076c8 <FLASH_SetErrorCode+0xc8>)
 8007638:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800763a:	4b22      	ldr	r3, [pc, #136]	; (80076c4 <FLASH_SetErrorCode+0xc4>)
 800763c:	2220      	movs	r2, #32
 800763e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8007640:	4b20      	ldr	r3, [pc, #128]	; (80076c4 <FLASH_SetErrorCode+0xc4>)
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007648:	2b00      	cmp	r3, #0
 800764a:	d008      	beq.n	800765e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800764c:	4b1e      	ldr	r3, [pc, #120]	; (80076c8 <FLASH_SetErrorCode+0xc8>)
 800764e:	69db      	ldr	r3, [r3, #28]
 8007650:	f043 0304 	orr.w	r3, r3, #4
 8007654:	4a1c      	ldr	r2, [pc, #112]	; (80076c8 <FLASH_SetErrorCode+0xc8>)
 8007656:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8007658:	4b1a      	ldr	r3, [pc, #104]	; (80076c4 <FLASH_SetErrorCode+0xc4>)
 800765a:	2240      	movs	r2, #64	; 0x40
 800765c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800765e:	4b19      	ldr	r3, [pc, #100]	; (80076c4 <FLASH_SetErrorCode+0xc4>)
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007666:	2b00      	cmp	r3, #0
 8007668:	d008      	beq.n	800767c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800766a:	4b17      	ldr	r3, [pc, #92]	; (80076c8 <FLASH_SetErrorCode+0xc8>)
 800766c:	69db      	ldr	r3, [r3, #28]
 800766e:	f043 0302 	orr.w	r3, r3, #2
 8007672:	4a15      	ldr	r2, [pc, #84]	; (80076c8 <FLASH_SetErrorCode+0xc8>)
 8007674:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8007676:	4b13      	ldr	r3, [pc, #76]	; (80076c4 <FLASH_SetErrorCode+0xc4>)
 8007678:	2280      	movs	r2, #128	; 0x80
 800767a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800767c:	4b11      	ldr	r3, [pc, #68]	; (80076c4 <FLASH_SetErrorCode+0xc4>)
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007684:	2b00      	cmp	r3, #0
 8007686:	d009      	beq.n	800769c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8007688:	4b0f      	ldr	r3, [pc, #60]	; (80076c8 <FLASH_SetErrorCode+0xc8>)
 800768a:	69db      	ldr	r3, [r3, #28]
 800768c:	f043 0301 	orr.w	r3, r3, #1
 8007690:	4a0d      	ldr	r2, [pc, #52]	; (80076c8 <FLASH_SetErrorCode+0xc8>)
 8007692:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8007694:	4b0b      	ldr	r3, [pc, #44]	; (80076c4 <FLASH_SetErrorCode+0xc4>)
 8007696:	f44f 7280 	mov.w	r2, #256	; 0x100
 800769a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800769c:	4b09      	ldr	r3, [pc, #36]	; (80076c4 <FLASH_SetErrorCode+0xc4>)
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	f003 0302 	and.w	r3, r3, #2
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d008      	beq.n	80076ba <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80076a8:	4b07      	ldr	r3, [pc, #28]	; (80076c8 <FLASH_SetErrorCode+0xc8>)
 80076aa:	69db      	ldr	r3, [r3, #28]
 80076ac:	f043 0320 	orr.w	r3, r3, #32
 80076b0:	4a05      	ldr	r2, [pc, #20]	; (80076c8 <FLASH_SetErrorCode+0xc8>)
 80076b2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80076b4:	4b03      	ldr	r3, [pc, #12]	; (80076c4 <FLASH_SetErrorCode+0xc4>)
 80076b6:	2202      	movs	r2, #2
 80076b8:	60da      	str	r2, [r3, #12]
  }
}
 80076ba:	bf00      	nop
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr
 80076c4:	40023c00 	.word	0x40023c00
 80076c8:	20000afc 	.word	0x20000afc

080076cc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b085      	sub	sp, #20
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	460b      	mov	r3, r1
 80076d6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80076d8:	2300      	movs	r3, #0
 80076da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80076dc:	78fb      	ldrb	r3, [r7, #3]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d102      	bne.n	80076e8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80076e2:	2300      	movs	r3, #0
 80076e4:	60fb      	str	r3, [r7, #12]
 80076e6:	e010      	b.n	800770a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80076e8:	78fb      	ldrb	r3, [r7, #3]
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d103      	bne.n	80076f6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80076ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076f2:	60fb      	str	r3, [r7, #12]
 80076f4:	e009      	b.n	800770a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80076f6:	78fb      	ldrb	r3, [r7, #3]
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	d103      	bne.n	8007704 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80076fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007700:	60fb      	str	r3, [r7, #12]
 8007702:	e002      	b.n	800770a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8007704:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007708:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800770a:	4b13      	ldr	r3, [pc, #76]	; (8007758 <FLASH_Erase_Sector+0x8c>)
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	4a12      	ldr	r2, [pc, #72]	; (8007758 <FLASH_Erase_Sector+0x8c>)
 8007710:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007714:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8007716:	4b10      	ldr	r3, [pc, #64]	; (8007758 <FLASH_Erase_Sector+0x8c>)
 8007718:	691a      	ldr	r2, [r3, #16]
 800771a:	490f      	ldr	r1, [pc, #60]	; (8007758 <FLASH_Erase_Sector+0x8c>)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	4313      	orrs	r3, r2
 8007720:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8007722:	4b0d      	ldr	r3, [pc, #52]	; (8007758 <FLASH_Erase_Sector+0x8c>)
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	4a0c      	ldr	r2, [pc, #48]	; (8007758 <FLASH_Erase_Sector+0x8c>)
 8007728:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800772c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800772e:	4b0a      	ldr	r3, [pc, #40]	; (8007758 <FLASH_Erase_Sector+0x8c>)
 8007730:	691a      	ldr	r2, [r3, #16]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	00db      	lsls	r3, r3, #3
 8007736:	4313      	orrs	r3, r2
 8007738:	4a07      	ldr	r2, [pc, #28]	; (8007758 <FLASH_Erase_Sector+0x8c>)
 800773a:	f043 0302 	orr.w	r3, r3, #2
 800773e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8007740:	4b05      	ldr	r3, [pc, #20]	; (8007758 <FLASH_Erase_Sector+0x8c>)
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	4a04      	ldr	r2, [pc, #16]	; (8007758 <FLASH_Erase_Sector+0x8c>)
 8007746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800774a:	6113      	str	r3, [r2, #16]
}
 800774c:	bf00      	nop
 800774e:	3714      	adds	r7, #20
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr
 8007758:	40023c00 	.word	0x40023c00

0800775c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800775c:	b480      	push	{r7}
 800775e:	b089      	sub	sp, #36	; 0x24
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007766:	2300      	movs	r3, #0
 8007768:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800776a:	2300      	movs	r3, #0
 800776c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800776e:	2300      	movs	r3, #0
 8007770:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007772:	2300      	movs	r3, #0
 8007774:	61fb      	str	r3, [r7, #28]
 8007776:	e159      	b.n	8007a2c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007778:	2201      	movs	r2, #1
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	fa02 f303 	lsl.w	r3, r2, r3
 8007780:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	697a      	ldr	r2, [r7, #20]
 8007788:	4013      	ands	r3, r2
 800778a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800778c:	693a      	ldr	r2, [r7, #16]
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	429a      	cmp	r2, r3
 8007792:	f040 8148 	bne.w	8007a26 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	f003 0303 	and.w	r3, r3, #3
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d005      	beq.n	80077ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	d130      	bne.n	8007810 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	005b      	lsls	r3, r3, #1
 80077b8:	2203      	movs	r2, #3
 80077ba:	fa02 f303 	lsl.w	r3, r2, r3
 80077be:	43db      	mvns	r3, r3
 80077c0:	69ba      	ldr	r2, [r7, #24]
 80077c2:	4013      	ands	r3, r2
 80077c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	68da      	ldr	r2, [r3, #12]
 80077ca:	69fb      	ldr	r3, [r7, #28]
 80077cc:	005b      	lsls	r3, r3, #1
 80077ce:	fa02 f303 	lsl.w	r3, r2, r3
 80077d2:	69ba      	ldr	r2, [r7, #24]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	69ba      	ldr	r2, [r7, #24]
 80077dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80077e4:	2201      	movs	r2, #1
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	fa02 f303 	lsl.w	r3, r2, r3
 80077ec:	43db      	mvns	r3, r3
 80077ee:	69ba      	ldr	r2, [r7, #24]
 80077f0:	4013      	ands	r3, r2
 80077f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	091b      	lsrs	r3, r3, #4
 80077fa:	f003 0201 	and.w	r2, r3, #1
 80077fe:	69fb      	ldr	r3, [r7, #28]
 8007800:	fa02 f303 	lsl.w	r3, r2, r3
 8007804:	69ba      	ldr	r2, [r7, #24]
 8007806:	4313      	orrs	r3, r2
 8007808:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	69ba      	ldr	r2, [r7, #24]
 800780e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	f003 0303 	and.w	r3, r3, #3
 8007818:	2b03      	cmp	r3, #3
 800781a:	d017      	beq.n	800784c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007822:	69fb      	ldr	r3, [r7, #28]
 8007824:	005b      	lsls	r3, r3, #1
 8007826:	2203      	movs	r2, #3
 8007828:	fa02 f303 	lsl.w	r3, r2, r3
 800782c:	43db      	mvns	r3, r3
 800782e:	69ba      	ldr	r2, [r7, #24]
 8007830:	4013      	ands	r3, r2
 8007832:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	689a      	ldr	r2, [r3, #8]
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	005b      	lsls	r3, r3, #1
 800783c:	fa02 f303 	lsl.w	r3, r2, r3
 8007840:	69ba      	ldr	r2, [r7, #24]
 8007842:	4313      	orrs	r3, r2
 8007844:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	69ba      	ldr	r2, [r7, #24]
 800784a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	f003 0303 	and.w	r3, r3, #3
 8007854:	2b02      	cmp	r3, #2
 8007856:	d123      	bne.n	80078a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	08da      	lsrs	r2, r3, #3
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	3208      	adds	r2, #8
 8007860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007864:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	f003 0307 	and.w	r3, r3, #7
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	220f      	movs	r2, #15
 8007870:	fa02 f303 	lsl.w	r3, r2, r3
 8007874:	43db      	mvns	r3, r3
 8007876:	69ba      	ldr	r2, [r7, #24]
 8007878:	4013      	ands	r3, r2
 800787a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	691a      	ldr	r2, [r3, #16]
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	f003 0307 	and.w	r3, r3, #7
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	fa02 f303 	lsl.w	r3, r2, r3
 800788c:	69ba      	ldr	r2, [r7, #24]
 800788e:	4313      	orrs	r3, r2
 8007890:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	08da      	lsrs	r2, r3, #3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	3208      	adds	r2, #8
 800789a:	69b9      	ldr	r1, [r7, #24]
 800789c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	005b      	lsls	r3, r3, #1
 80078aa:	2203      	movs	r2, #3
 80078ac:	fa02 f303 	lsl.w	r3, r2, r3
 80078b0:	43db      	mvns	r3, r3
 80078b2:	69ba      	ldr	r2, [r7, #24]
 80078b4:	4013      	ands	r3, r2
 80078b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	f003 0203 	and.w	r2, r3, #3
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	005b      	lsls	r3, r3, #1
 80078c4:	fa02 f303 	lsl.w	r3, r2, r3
 80078c8:	69ba      	ldr	r2, [r7, #24]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	69ba      	ldr	r2, [r7, #24]
 80078d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f000 80a2 	beq.w	8007a26 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80078e2:	2300      	movs	r3, #0
 80078e4:	60fb      	str	r3, [r7, #12]
 80078e6:	4b57      	ldr	r3, [pc, #348]	; (8007a44 <HAL_GPIO_Init+0x2e8>)
 80078e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ea:	4a56      	ldr	r2, [pc, #344]	; (8007a44 <HAL_GPIO_Init+0x2e8>)
 80078ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80078f0:	6453      	str	r3, [r2, #68]	; 0x44
 80078f2:	4b54      	ldr	r3, [pc, #336]	; (8007a44 <HAL_GPIO_Init+0x2e8>)
 80078f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078fa:	60fb      	str	r3, [r7, #12]
 80078fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80078fe:	4a52      	ldr	r2, [pc, #328]	; (8007a48 <HAL_GPIO_Init+0x2ec>)
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	089b      	lsrs	r3, r3, #2
 8007904:	3302      	adds	r3, #2
 8007906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800790a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800790c:	69fb      	ldr	r3, [r7, #28]
 800790e:	f003 0303 	and.w	r3, r3, #3
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	220f      	movs	r2, #15
 8007916:	fa02 f303 	lsl.w	r3, r2, r3
 800791a:	43db      	mvns	r3, r3
 800791c:	69ba      	ldr	r2, [r7, #24]
 800791e:	4013      	ands	r3, r2
 8007920:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a49      	ldr	r2, [pc, #292]	; (8007a4c <HAL_GPIO_Init+0x2f0>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d019      	beq.n	800795e <HAL_GPIO_Init+0x202>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a48      	ldr	r2, [pc, #288]	; (8007a50 <HAL_GPIO_Init+0x2f4>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d013      	beq.n	800795a <HAL_GPIO_Init+0x1fe>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4a47      	ldr	r2, [pc, #284]	; (8007a54 <HAL_GPIO_Init+0x2f8>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d00d      	beq.n	8007956 <HAL_GPIO_Init+0x1fa>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a46      	ldr	r2, [pc, #280]	; (8007a58 <HAL_GPIO_Init+0x2fc>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d007      	beq.n	8007952 <HAL_GPIO_Init+0x1f6>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a45      	ldr	r2, [pc, #276]	; (8007a5c <HAL_GPIO_Init+0x300>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d101      	bne.n	800794e <HAL_GPIO_Init+0x1f2>
 800794a:	2304      	movs	r3, #4
 800794c:	e008      	b.n	8007960 <HAL_GPIO_Init+0x204>
 800794e:	2307      	movs	r3, #7
 8007950:	e006      	b.n	8007960 <HAL_GPIO_Init+0x204>
 8007952:	2303      	movs	r3, #3
 8007954:	e004      	b.n	8007960 <HAL_GPIO_Init+0x204>
 8007956:	2302      	movs	r3, #2
 8007958:	e002      	b.n	8007960 <HAL_GPIO_Init+0x204>
 800795a:	2301      	movs	r3, #1
 800795c:	e000      	b.n	8007960 <HAL_GPIO_Init+0x204>
 800795e:	2300      	movs	r3, #0
 8007960:	69fa      	ldr	r2, [r7, #28]
 8007962:	f002 0203 	and.w	r2, r2, #3
 8007966:	0092      	lsls	r2, r2, #2
 8007968:	4093      	lsls	r3, r2
 800796a:	69ba      	ldr	r2, [r7, #24]
 800796c:	4313      	orrs	r3, r2
 800796e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007970:	4935      	ldr	r1, [pc, #212]	; (8007a48 <HAL_GPIO_Init+0x2ec>)
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	089b      	lsrs	r3, r3, #2
 8007976:	3302      	adds	r3, #2
 8007978:	69ba      	ldr	r2, [r7, #24]
 800797a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800797e:	4b38      	ldr	r3, [pc, #224]	; (8007a60 <HAL_GPIO_Init+0x304>)
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	43db      	mvns	r3, r3
 8007988:	69ba      	ldr	r2, [r7, #24]
 800798a:	4013      	ands	r3, r2
 800798c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007996:	2b00      	cmp	r3, #0
 8007998:	d003      	beq.n	80079a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800799a:	69ba      	ldr	r2, [r7, #24]
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	4313      	orrs	r3, r2
 80079a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80079a2:	4a2f      	ldr	r2, [pc, #188]	; (8007a60 <HAL_GPIO_Init+0x304>)
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80079a8:	4b2d      	ldr	r3, [pc, #180]	; (8007a60 <HAL_GPIO_Init+0x304>)
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	43db      	mvns	r3, r3
 80079b2:	69ba      	ldr	r2, [r7, #24]
 80079b4:	4013      	ands	r3, r2
 80079b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d003      	beq.n	80079cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80079c4:	69ba      	ldr	r2, [r7, #24]
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	4313      	orrs	r3, r2
 80079ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80079cc:	4a24      	ldr	r2, [pc, #144]	; (8007a60 <HAL_GPIO_Init+0x304>)
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80079d2:	4b23      	ldr	r3, [pc, #140]	; (8007a60 <HAL_GPIO_Init+0x304>)
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	43db      	mvns	r3, r3
 80079dc:	69ba      	ldr	r2, [r7, #24]
 80079de:	4013      	ands	r3, r2
 80079e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d003      	beq.n	80079f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80079ee:	69ba      	ldr	r2, [r7, #24]
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80079f6:	4a1a      	ldr	r2, [pc, #104]	; (8007a60 <HAL_GPIO_Init+0x304>)
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80079fc:	4b18      	ldr	r3, [pc, #96]	; (8007a60 <HAL_GPIO_Init+0x304>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	43db      	mvns	r3, r3
 8007a06:	69ba      	ldr	r2, [r7, #24]
 8007a08:	4013      	ands	r3, r2
 8007a0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d003      	beq.n	8007a20 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007a18:	69ba      	ldr	r2, [r7, #24]
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007a20:	4a0f      	ldr	r2, [pc, #60]	; (8007a60 <HAL_GPIO_Init+0x304>)
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	3301      	adds	r3, #1
 8007a2a:	61fb      	str	r3, [r7, #28]
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	2b0f      	cmp	r3, #15
 8007a30:	f67f aea2 	bls.w	8007778 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007a34:	bf00      	nop
 8007a36:	bf00      	nop
 8007a38:	3724      	adds	r7, #36	; 0x24
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	40023800 	.word	0x40023800
 8007a48:	40013800 	.word	0x40013800
 8007a4c:	40020000 	.word	0x40020000
 8007a50:	40020400 	.word	0x40020400
 8007a54:	40020800 	.word	0x40020800
 8007a58:	40020c00 	.word	0x40020c00
 8007a5c:	40021000 	.word	0x40021000
 8007a60:	40013c00 	.word	0x40013c00

08007a64 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b087      	sub	sp, #28
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8007a72:	2300      	movs	r3, #0
 8007a74:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8007a76:	2300      	movs	r3, #0
 8007a78:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	617b      	str	r3, [r7, #20]
 8007a7e:	e0bb      	b.n	8007bf8 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007a80:	2201      	movs	r2, #1
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	fa02 f303 	lsl.w	r3, r2, r3
 8007a88:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8007a8a:	683a      	ldr	r2, [r7, #0]
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	4013      	ands	r3, r2
 8007a90:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8007a92:	68fa      	ldr	r2, [r7, #12]
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	f040 80ab 	bne.w	8007bf2 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007a9c:	4a5c      	ldr	r2, [pc, #368]	; (8007c10 <HAL_GPIO_DeInit+0x1ac>)
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	089b      	lsrs	r3, r3, #2
 8007aa2:	3302      	adds	r3, #2
 8007aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007aa8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	f003 0303 	and.w	r3, r3, #3
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	220f      	movs	r2, #15
 8007ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab8:	68ba      	ldr	r2, [r7, #8]
 8007aba:	4013      	ands	r3, r2
 8007abc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a54      	ldr	r2, [pc, #336]	; (8007c14 <HAL_GPIO_DeInit+0x1b0>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d019      	beq.n	8007afa <HAL_GPIO_DeInit+0x96>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a53      	ldr	r2, [pc, #332]	; (8007c18 <HAL_GPIO_DeInit+0x1b4>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d013      	beq.n	8007af6 <HAL_GPIO_DeInit+0x92>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a52      	ldr	r2, [pc, #328]	; (8007c1c <HAL_GPIO_DeInit+0x1b8>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d00d      	beq.n	8007af2 <HAL_GPIO_DeInit+0x8e>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a51      	ldr	r2, [pc, #324]	; (8007c20 <HAL_GPIO_DeInit+0x1bc>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d007      	beq.n	8007aee <HAL_GPIO_DeInit+0x8a>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a50      	ldr	r2, [pc, #320]	; (8007c24 <HAL_GPIO_DeInit+0x1c0>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d101      	bne.n	8007aea <HAL_GPIO_DeInit+0x86>
 8007ae6:	2304      	movs	r3, #4
 8007ae8:	e008      	b.n	8007afc <HAL_GPIO_DeInit+0x98>
 8007aea:	2307      	movs	r3, #7
 8007aec:	e006      	b.n	8007afc <HAL_GPIO_DeInit+0x98>
 8007aee:	2303      	movs	r3, #3
 8007af0:	e004      	b.n	8007afc <HAL_GPIO_DeInit+0x98>
 8007af2:	2302      	movs	r3, #2
 8007af4:	e002      	b.n	8007afc <HAL_GPIO_DeInit+0x98>
 8007af6:	2301      	movs	r3, #1
 8007af8:	e000      	b.n	8007afc <HAL_GPIO_DeInit+0x98>
 8007afa:	2300      	movs	r3, #0
 8007afc:	697a      	ldr	r2, [r7, #20]
 8007afe:	f002 0203 	and.w	r2, r2, #3
 8007b02:	0092      	lsls	r2, r2, #2
 8007b04:	4093      	lsls	r3, r2
 8007b06:	68ba      	ldr	r2, [r7, #8]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d132      	bne.n	8007b72 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007b0c:	4b46      	ldr	r3, [pc, #280]	; (8007c28 <HAL_GPIO_DeInit+0x1c4>)
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	43db      	mvns	r3, r3
 8007b14:	4944      	ldr	r1, [pc, #272]	; (8007c28 <HAL_GPIO_DeInit+0x1c4>)
 8007b16:	4013      	ands	r3, r2
 8007b18:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007b1a:	4b43      	ldr	r3, [pc, #268]	; (8007c28 <HAL_GPIO_DeInit+0x1c4>)
 8007b1c:	685a      	ldr	r2, [r3, #4]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	43db      	mvns	r3, r3
 8007b22:	4941      	ldr	r1, [pc, #260]	; (8007c28 <HAL_GPIO_DeInit+0x1c4>)
 8007b24:	4013      	ands	r3, r2
 8007b26:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007b28:	4b3f      	ldr	r3, [pc, #252]	; (8007c28 <HAL_GPIO_DeInit+0x1c4>)
 8007b2a:	68da      	ldr	r2, [r3, #12]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	43db      	mvns	r3, r3
 8007b30:	493d      	ldr	r1, [pc, #244]	; (8007c28 <HAL_GPIO_DeInit+0x1c4>)
 8007b32:	4013      	ands	r3, r2
 8007b34:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007b36:	4b3c      	ldr	r3, [pc, #240]	; (8007c28 <HAL_GPIO_DeInit+0x1c4>)
 8007b38:	689a      	ldr	r2, [r3, #8]
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	43db      	mvns	r3, r3
 8007b3e:	493a      	ldr	r1, [pc, #232]	; (8007c28 <HAL_GPIO_DeInit+0x1c4>)
 8007b40:	4013      	ands	r3, r2
 8007b42:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	f003 0303 	and.w	r3, r3, #3
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	220f      	movs	r2, #15
 8007b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b52:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007b54:	4a2e      	ldr	r2, [pc, #184]	; (8007c10 <HAL_GPIO_DeInit+0x1ac>)
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	089b      	lsrs	r3, r3, #2
 8007b5a:	3302      	adds	r3, #2
 8007b5c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	43da      	mvns	r2, r3
 8007b64:	482a      	ldr	r0, [pc, #168]	; (8007c10 <HAL_GPIO_DeInit+0x1ac>)
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	089b      	lsrs	r3, r3, #2
 8007b6a:	400a      	ands	r2, r1
 8007b6c:	3302      	adds	r3, #2
 8007b6e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	005b      	lsls	r3, r3, #1
 8007b7a:	2103      	movs	r1, #3
 8007b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8007b80:	43db      	mvns	r3, r3
 8007b82:	401a      	ands	r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	08da      	lsrs	r2, r3, #3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	3208      	adds	r2, #8
 8007b90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	f003 0307 	and.w	r3, r3, #7
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	220f      	movs	r2, #15
 8007b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba2:	43db      	mvns	r3, r3
 8007ba4:	697a      	ldr	r2, [r7, #20]
 8007ba6:	08d2      	lsrs	r2, r2, #3
 8007ba8:	4019      	ands	r1, r3
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	3208      	adds	r2, #8
 8007bae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	68da      	ldr	r2, [r3, #12]
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	005b      	lsls	r3, r3, #1
 8007bba:	2103      	movs	r1, #3
 8007bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8007bc0:	43db      	mvns	r3, r3
 8007bc2:	401a      	ands	r2, r3
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	685a      	ldr	r2, [r3, #4]
 8007bcc:	2101      	movs	r1, #1
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8007bd4:	43db      	mvns	r3, r3
 8007bd6:	401a      	ands	r2, r3
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	689a      	ldr	r2, [r3, #8]
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	005b      	lsls	r3, r3, #1
 8007be4:	2103      	movs	r1, #3
 8007be6:	fa01 f303 	lsl.w	r3, r1, r3
 8007bea:	43db      	mvns	r3, r3
 8007bec:	401a      	ands	r2, r3
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	617b      	str	r3, [r7, #20]
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	2b0f      	cmp	r3, #15
 8007bfc:	f67f af40 	bls.w	8007a80 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007c00:	bf00      	nop
 8007c02:	bf00      	nop
 8007c04:	371c      	adds	r7, #28
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr
 8007c0e:	bf00      	nop
 8007c10:	40013800 	.word	0x40013800
 8007c14:	40020000 	.word	0x40020000
 8007c18:	40020400 	.word	0x40020400
 8007c1c:	40020800 	.word	0x40020800
 8007c20:	40020c00 	.word	0x40020c00
 8007c24:	40021000 	.word	0x40021000
 8007c28:	40013c00 	.word	0x40013c00

08007c2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b085      	sub	sp, #20
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	460b      	mov	r3, r1
 8007c36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	691a      	ldr	r2, [r3, #16]
 8007c3c:	887b      	ldrh	r3, [r7, #2]
 8007c3e:	4013      	ands	r3, r2
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d002      	beq.n	8007c4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007c44:	2301      	movs	r3, #1
 8007c46:	73fb      	strb	r3, [r7, #15]
 8007c48:	e001      	b.n	8007c4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3714      	adds	r7, #20
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	460b      	mov	r3, r1
 8007c66:	807b      	strh	r3, [r7, #2]
 8007c68:	4613      	mov	r3, r2
 8007c6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007c6c:	787b      	ldrb	r3, [r7, #1]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d003      	beq.n	8007c7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007c72:	887a      	ldrh	r2, [r7, #2]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007c78:	e003      	b.n	8007c82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007c7a:	887b      	ldrh	r3, [r7, #2]
 8007c7c:	041a      	lsls	r2, r3, #16
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	619a      	str	r2, [r3, #24]
}
 8007c82:	bf00      	nop
 8007c84:	370c      	adds	r7, #12
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr
	...

08007c90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d101      	bne.n	8007ca2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e12b      	b.n	8007efa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d106      	bne.n	8007cbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f7fb fda0 	bl	80037fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2224      	movs	r2, #36	; 0x24
 8007cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f022 0201 	bic.w	r2, r2, #1
 8007cd2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ce2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007cf2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007cf4:	f001 fbbc 	bl	8009470 <HAL_RCC_GetPCLK1Freq>
 8007cf8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	4a81      	ldr	r2, [pc, #516]	; (8007f04 <HAL_I2C_Init+0x274>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d807      	bhi.n	8007d14 <HAL_I2C_Init+0x84>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	4a80      	ldr	r2, [pc, #512]	; (8007f08 <HAL_I2C_Init+0x278>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	bf94      	ite	ls
 8007d0c:	2301      	movls	r3, #1
 8007d0e:	2300      	movhi	r3, #0
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	e006      	b.n	8007d22 <HAL_I2C_Init+0x92>
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	4a7d      	ldr	r2, [pc, #500]	; (8007f0c <HAL_I2C_Init+0x27c>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	bf94      	ite	ls
 8007d1c:	2301      	movls	r3, #1
 8007d1e:	2300      	movhi	r3, #0
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d001      	beq.n	8007d2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	e0e7      	b.n	8007efa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	4a78      	ldr	r2, [pc, #480]	; (8007f10 <HAL_I2C_Init+0x280>)
 8007d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d32:	0c9b      	lsrs	r3, r3, #18
 8007d34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	68ba      	ldr	r2, [r7, #8]
 8007d46:	430a      	orrs	r2, r1
 8007d48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	6a1b      	ldr	r3, [r3, #32]
 8007d50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	4a6a      	ldr	r2, [pc, #424]	; (8007f04 <HAL_I2C_Init+0x274>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d802      	bhi.n	8007d64 <HAL_I2C_Init+0xd4>
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	3301      	adds	r3, #1
 8007d62:	e009      	b.n	8007d78 <HAL_I2C_Init+0xe8>
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007d6a:	fb02 f303 	mul.w	r3, r2, r3
 8007d6e:	4a69      	ldr	r2, [pc, #420]	; (8007f14 <HAL_I2C_Init+0x284>)
 8007d70:	fba2 2303 	umull	r2, r3, r2, r3
 8007d74:	099b      	lsrs	r3, r3, #6
 8007d76:	3301      	adds	r3, #1
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	6812      	ldr	r2, [r2, #0]
 8007d7c:	430b      	orrs	r3, r1
 8007d7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	69db      	ldr	r3, [r3, #28]
 8007d86:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007d8a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	495c      	ldr	r1, [pc, #368]	; (8007f04 <HAL_I2C_Init+0x274>)
 8007d94:	428b      	cmp	r3, r1
 8007d96:	d819      	bhi.n	8007dcc <HAL_I2C_Init+0x13c>
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	1e59      	subs	r1, r3, #1
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	005b      	lsls	r3, r3, #1
 8007da2:	fbb1 f3f3 	udiv	r3, r1, r3
 8007da6:	1c59      	adds	r1, r3, #1
 8007da8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007dac:	400b      	ands	r3, r1
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d00a      	beq.n	8007dc8 <HAL_I2C_Init+0x138>
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	1e59      	subs	r1, r3, #1
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	005b      	lsls	r3, r3, #1
 8007dbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007dc6:	e051      	b.n	8007e6c <HAL_I2C_Init+0x1dc>
 8007dc8:	2304      	movs	r3, #4
 8007dca:	e04f      	b.n	8007e6c <HAL_I2C_Init+0x1dc>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d111      	bne.n	8007df8 <HAL_I2C_Init+0x168>
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	1e58      	subs	r0, r3, #1
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6859      	ldr	r1, [r3, #4]
 8007ddc:	460b      	mov	r3, r1
 8007dde:	005b      	lsls	r3, r3, #1
 8007de0:	440b      	add	r3, r1
 8007de2:	fbb0 f3f3 	udiv	r3, r0, r3
 8007de6:	3301      	adds	r3, #1
 8007de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	bf0c      	ite	eq
 8007df0:	2301      	moveq	r3, #1
 8007df2:	2300      	movne	r3, #0
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	e012      	b.n	8007e1e <HAL_I2C_Init+0x18e>
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	1e58      	subs	r0, r3, #1
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6859      	ldr	r1, [r3, #4]
 8007e00:	460b      	mov	r3, r1
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	440b      	add	r3, r1
 8007e06:	0099      	lsls	r1, r3, #2
 8007e08:	440b      	add	r3, r1
 8007e0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e0e:	3301      	adds	r3, #1
 8007e10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	bf0c      	ite	eq
 8007e18:	2301      	moveq	r3, #1
 8007e1a:	2300      	movne	r3, #0
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d001      	beq.n	8007e26 <HAL_I2C_Init+0x196>
 8007e22:	2301      	movs	r3, #1
 8007e24:	e022      	b.n	8007e6c <HAL_I2C_Init+0x1dc>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d10e      	bne.n	8007e4c <HAL_I2C_Init+0x1bc>
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	1e58      	subs	r0, r3, #1
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6859      	ldr	r1, [r3, #4]
 8007e36:	460b      	mov	r3, r1
 8007e38:	005b      	lsls	r3, r3, #1
 8007e3a:	440b      	add	r3, r1
 8007e3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e40:	3301      	adds	r3, #1
 8007e42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e4a:	e00f      	b.n	8007e6c <HAL_I2C_Init+0x1dc>
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	1e58      	subs	r0, r3, #1
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6859      	ldr	r1, [r3, #4]
 8007e54:	460b      	mov	r3, r1
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	440b      	add	r3, r1
 8007e5a:	0099      	lsls	r1, r3, #2
 8007e5c:	440b      	add	r3, r1
 8007e5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e62:	3301      	adds	r3, #1
 8007e64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e6c:	6879      	ldr	r1, [r7, #4]
 8007e6e:	6809      	ldr	r1, [r1, #0]
 8007e70:	4313      	orrs	r3, r2
 8007e72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	69da      	ldr	r2, [r3, #28]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a1b      	ldr	r3, [r3, #32]
 8007e86:	431a      	orrs	r2, r3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	430a      	orrs	r2, r1
 8007e8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007e9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	6911      	ldr	r1, [r2, #16]
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	68d2      	ldr	r2, [r2, #12]
 8007ea6:	4311      	orrs	r1, r2
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	6812      	ldr	r2, [r2, #0]
 8007eac:	430b      	orrs	r3, r1
 8007eae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	695a      	ldr	r2, [r3, #20]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	699b      	ldr	r3, [r3, #24]
 8007ec2:	431a      	orrs	r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	430a      	orrs	r2, r1
 8007eca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f042 0201 	orr.w	r2, r2, #1
 8007eda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2220      	movs	r2, #32
 8007ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3710      	adds	r7, #16
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	000186a0 	.word	0x000186a0
 8007f08:	001e847f 	.word	0x001e847f
 8007f0c:	003d08ff 	.word	0x003d08ff
 8007f10:	431bde83 	.word	0x431bde83
 8007f14:	10624dd3 	.word	0x10624dd3

08007f18 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b088      	sub	sp, #32
 8007f1c:	af02      	add	r7, sp, #8
 8007f1e:	60f8      	str	r0, [r7, #12]
 8007f20:	4608      	mov	r0, r1
 8007f22:	4611      	mov	r1, r2
 8007f24:	461a      	mov	r2, r3
 8007f26:	4603      	mov	r3, r0
 8007f28:	817b      	strh	r3, [r7, #10]
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	813b      	strh	r3, [r7, #8]
 8007f2e:	4613      	mov	r3, r2
 8007f30:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007f32:	f7fe fbe7 	bl	8006704 <HAL_GetTick>
 8007f36:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	2b20      	cmp	r3, #32
 8007f42:	f040 80d9 	bne.w	80080f8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	9300      	str	r3, [sp, #0]
 8007f4a:	2319      	movs	r3, #25
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	496d      	ldr	r1, [pc, #436]	; (8008104 <HAL_I2C_Mem_Write+0x1ec>)
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f000 fc7f 	bl	8008854 <I2C_WaitOnFlagUntilTimeout>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d001      	beq.n	8007f60 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007f5c:	2302      	movs	r3, #2
 8007f5e:	e0cc      	b.n	80080fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d101      	bne.n	8007f6e <HAL_I2C_Mem_Write+0x56>
 8007f6a:	2302      	movs	r3, #2
 8007f6c:	e0c5      	b.n	80080fa <HAL_I2C_Mem_Write+0x1e2>
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2201      	movs	r2, #1
 8007f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f003 0301 	and.w	r3, r3, #1
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d007      	beq.n	8007f94 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f042 0201 	orr.w	r2, r2, #1
 8007f92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007fa2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2221      	movs	r2, #33	; 0x21
 8007fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2240      	movs	r2, #64	; 0x40
 8007fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6a3a      	ldr	r2, [r7, #32]
 8007fbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007fc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fca:	b29a      	uxth	r2, r3
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	4a4d      	ldr	r2, [pc, #308]	; (8008108 <HAL_I2C_Mem_Write+0x1f0>)
 8007fd4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007fd6:	88f8      	ldrh	r0, [r7, #6]
 8007fd8:	893a      	ldrh	r2, [r7, #8]
 8007fda:	8979      	ldrh	r1, [r7, #10]
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	9301      	str	r3, [sp, #4]
 8007fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe2:	9300      	str	r3, [sp, #0]
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	68f8      	ldr	r0, [r7, #12]
 8007fe8:	f000 fab6 	bl	8008558 <I2C_RequestMemoryWrite>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d052      	beq.n	8008098 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e081      	b.n	80080fa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ff6:	697a      	ldr	r2, [r7, #20]
 8007ff8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f000 fd00 	bl	8008a00 <I2C_WaitOnTXEFlagUntilTimeout>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00d      	beq.n	8008022 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800800a:	2b04      	cmp	r3, #4
 800800c:	d107      	bne.n	800801e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800801c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	e06b      	b.n	80080fa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008026:	781a      	ldrb	r2, [r3, #0]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008032:	1c5a      	adds	r2, r3, #1
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800803c:	3b01      	subs	r3, #1
 800803e:	b29a      	uxth	r2, r3
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008048:	b29b      	uxth	r3, r3
 800804a:	3b01      	subs	r3, #1
 800804c:	b29a      	uxth	r2, r3
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	695b      	ldr	r3, [r3, #20]
 8008058:	f003 0304 	and.w	r3, r3, #4
 800805c:	2b04      	cmp	r3, #4
 800805e:	d11b      	bne.n	8008098 <HAL_I2C_Mem_Write+0x180>
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008064:	2b00      	cmp	r3, #0
 8008066:	d017      	beq.n	8008098 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800806c:	781a      	ldrb	r2, [r3, #0]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008078:	1c5a      	adds	r2, r3, #1
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008082:	3b01      	subs	r3, #1
 8008084:	b29a      	uxth	r2, r3
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800808e:	b29b      	uxth	r3, r3
 8008090:	3b01      	subs	r3, #1
 8008092:	b29a      	uxth	r2, r3
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800809c:	2b00      	cmp	r3, #0
 800809e:	d1aa      	bne.n	8007ff6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80080a0:	697a      	ldr	r2, [r7, #20]
 80080a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080a4:	68f8      	ldr	r0, [r7, #12]
 80080a6:	f000 fcec 	bl	8008a82 <I2C_WaitOnBTFFlagUntilTimeout>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d00d      	beq.n	80080cc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b4:	2b04      	cmp	r3, #4
 80080b6:	d107      	bne.n	80080c8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080c6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	e016      	b.n	80080fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2220      	movs	r2, #32
 80080e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2200      	movs	r2, #0
 80080e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2200      	movs	r2, #0
 80080f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80080f4:	2300      	movs	r3, #0
 80080f6:	e000      	b.n	80080fa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80080f8:	2302      	movs	r3, #2
  }
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3718      	adds	r7, #24
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	00100002 	.word	0x00100002
 8008108:	ffff0000 	.word	0xffff0000

0800810c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b08c      	sub	sp, #48	; 0x30
 8008110:	af02      	add	r7, sp, #8
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	4608      	mov	r0, r1
 8008116:	4611      	mov	r1, r2
 8008118:	461a      	mov	r2, r3
 800811a:	4603      	mov	r3, r0
 800811c:	817b      	strh	r3, [r7, #10]
 800811e:	460b      	mov	r3, r1
 8008120:	813b      	strh	r3, [r7, #8]
 8008122:	4613      	mov	r3, r2
 8008124:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008126:	f7fe faed 	bl	8006704 <HAL_GetTick>
 800812a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008132:	b2db      	uxtb	r3, r3
 8008134:	2b20      	cmp	r3, #32
 8008136:	f040 8208 	bne.w	800854a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800813a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813c:	9300      	str	r3, [sp, #0]
 800813e:	2319      	movs	r3, #25
 8008140:	2201      	movs	r2, #1
 8008142:	497b      	ldr	r1, [pc, #492]	; (8008330 <HAL_I2C_Mem_Read+0x224>)
 8008144:	68f8      	ldr	r0, [r7, #12]
 8008146:	f000 fb85 	bl	8008854 <I2C_WaitOnFlagUntilTimeout>
 800814a:	4603      	mov	r3, r0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d001      	beq.n	8008154 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008150:	2302      	movs	r3, #2
 8008152:	e1fb      	b.n	800854c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800815a:	2b01      	cmp	r3, #1
 800815c:	d101      	bne.n	8008162 <HAL_I2C_Mem_Read+0x56>
 800815e:	2302      	movs	r3, #2
 8008160:	e1f4      	b.n	800854c <HAL_I2C_Mem_Read+0x440>
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2201      	movs	r2, #1
 8008166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 0301 	and.w	r3, r3, #1
 8008174:	2b01      	cmp	r3, #1
 8008176:	d007      	beq.n	8008188 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f042 0201 	orr.w	r2, r2, #1
 8008186:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008196:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2222      	movs	r2, #34	; 0x22
 800819c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2240      	movs	r2, #64	; 0x40
 80081a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2200      	movs	r2, #0
 80081ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80081b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081be:	b29a      	uxth	r2, r3
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	4a5b      	ldr	r2, [pc, #364]	; (8008334 <HAL_I2C_Mem_Read+0x228>)
 80081c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80081ca:	88f8      	ldrh	r0, [r7, #6]
 80081cc:	893a      	ldrh	r2, [r7, #8]
 80081ce:	8979      	ldrh	r1, [r7, #10]
 80081d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d2:	9301      	str	r3, [sp, #4]
 80081d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d6:	9300      	str	r3, [sp, #0]
 80081d8:	4603      	mov	r3, r0
 80081da:	68f8      	ldr	r0, [r7, #12]
 80081dc:	f000 fa52 	bl	8008684 <I2C_RequestMemoryRead>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d001      	beq.n	80081ea <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	e1b0      	b.n	800854c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d113      	bne.n	800821a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081f2:	2300      	movs	r3, #0
 80081f4:	623b      	str	r3, [r7, #32]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	695b      	ldr	r3, [r3, #20]
 80081fc:	623b      	str	r3, [r7, #32]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	699b      	ldr	r3, [r3, #24]
 8008204:	623b      	str	r3, [r7, #32]
 8008206:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008216:	601a      	str	r2, [r3, #0]
 8008218:	e184      	b.n	8008524 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800821e:	2b01      	cmp	r3, #1
 8008220:	d11b      	bne.n	800825a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008230:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008232:	2300      	movs	r3, #0
 8008234:	61fb      	str	r3, [r7, #28]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	695b      	ldr	r3, [r3, #20]
 800823c:	61fb      	str	r3, [r7, #28]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	699b      	ldr	r3, [r3, #24]
 8008244:	61fb      	str	r3, [r7, #28]
 8008246:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008256:	601a      	str	r2, [r3, #0]
 8008258:	e164      	b.n	8008524 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800825e:	2b02      	cmp	r3, #2
 8008260:	d11b      	bne.n	800829a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008270:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008280:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008282:	2300      	movs	r3, #0
 8008284:	61bb      	str	r3, [r7, #24]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	695b      	ldr	r3, [r3, #20]
 800828c:	61bb      	str	r3, [r7, #24]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	699b      	ldr	r3, [r3, #24]
 8008294:	61bb      	str	r3, [r7, #24]
 8008296:	69bb      	ldr	r3, [r7, #24]
 8008298:	e144      	b.n	8008524 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800829a:	2300      	movs	r3, #0
 800829c:	617b      	str	r3, [r7, #20]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	695b      	ldr	r3, [r3, #20]
 80082a4:	617b      	str	r3, [r7, #20]
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	699b      	ldr	r3, [r3, #24]
 80082ac:	617b      	str	r3, [r7, #20]
 80082ae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80082b0:	e138      	b.n	8008524 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082b6:	2b03      	cmp	r3, #3
 80082b8:	f200 80f1 	bhi.w	800849e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d123      	bne.n	800830c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80082c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	f000 fc1b 	bl	8008b04 <I2C_WaitOnRXNEFlagUntilTimeout>
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d001      	beq.n	80082d8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80082d4:	2301      	movs	r3, #1
 80082d6:	e139      	b.n	800854c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	691a      	ldr	r2, [r3, #16]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e2:	b2d2      	uxtb	r2, r2
 80082e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ea:	1c5a      	adds	r2, r3, #1
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082f4:	3b01      	subs	r3, #1
 80082f6:	b29a      	uxth	r2, r3
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008300:	b29b      	uxth	r3, r3
 8008302:	3b01      	subs	r3, #1
 8008304:	b29a      	uxth	r2, r3
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	855a      	strh	r2, [r3, #42]	; 0x2a
 800830a:	e10b      	b.n	8008524 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008310:	2b02      	cmp	r3, #2
 8008312:	d14e      	bne.n	80083b2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008316:	9300      	str	r3, [sp, #0]
 8008318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831a:	2200      	movs	r2, #0
 800831c:	4906      	ldr	r1, [pc, #24]	; (8008338 <HAL_I2C_Mem_Read+0x22c>)
 800831e:	68f8      	ldr	r0, [r7, #12]
 8008320:	f000 fa98 	bl	8008854 <I2C_WaitOnFlagUntilTimeout>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d008      	beq.n	800833c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800832a:	2301      	movs	r3, #1
 800832c:	e10e      	b.n	800854c <HAL_I2C_Mem_Read+0x440>
 800832e:	bf00      	nop
 8008330:	00100002 	.word	0x00100002
 8008334:	ffff0000 	.word	0xffff0000
 8008338:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800834a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	691a      	ldr	r2, [r3, #16]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008356:	b2d2      	uxtb	r2, r2
 8008358:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835e:	1c5a      	adds	r2, r3, #1
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008368:	3b01      	subs	r3, #1
 800836a:	b29a      	uxth	r2, r3
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008374:	b29b      	uxth	r3, r3
 8008376:	3b01      	subs	r3, #1
 8008378:	b29a      	uxth	r2, r3
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	691a      	ldr	r2, [r3, #16]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008388:	b2d2      	uxtb	r2, r2
 800838a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008390:	1c5a      	adds	r2, r3, #1
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800839a:	3b01      	subs	r3, #1
 800839c:	b29a      	uxth	r2, r3
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	3b01      	subs	r3, #1
 80083aa:	b29a      	uxth	r2, r3
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80083b0:	e0b8      	b.n	8008524 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80083b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b4:	9300      	str	r3, [sp, #0]
 80083b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b8:	2200      	movs	r2, #0
 80083ba:	4966      	ldr	r1, [pc, #408]	; (8008554 <HAL_I2C_Mem_Read+0x448>)
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f000 fa49 	bl	8008854 <I2C_WaitOnFlagUntilTimeout>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d001      	beq.n	80083cc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80083c8:	2301      	movs	r3, #1
 80083ca:	e0bf      	b.n	800854c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	691a      	ldr	r2, [r3, #16]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e6:	b2d2      	uxtb	r2, r2
 80083e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ee:	1c5a      	adds	r2, r3, #1
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083f8:	3b01      	subs	r3, #1
 80083fa:	b29a      	uxth	r2, r3
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008404:	b29b      	uxth	r3, r3
 8008406:	3b01      	subs	r3, #1
 8008408:	b29a      	uxth	r2, r3
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800840e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008410:	9300      	str	r3, [sp, #0]
 8008412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008414:	2200      	movs	r2, #0
 8008416:	494f      	ldr	r1, [pc, #316]	; (8008554 <HAL_I2C_Mem_Read+0x448>)
 8008418:	68f8      	ldr	r0, [r7, #12]
 800841a:	f000 fa1b 	bl	8008854 <I2C_WaitOnFlagUntilTimeout>
 800841e:	4603      	mov	r3, r0
 8008420:	2b00      	cmp	r3, #0
 8008422:	d001      	beq.n	8008428 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	e091      	b.n	800854c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008436:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	691a      	ldr	r2, [r3, #16]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008442:	b2d2      	uxtb	r2, r2
 8008444:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844a:	1c5a      	adds	r2, r3, #1
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008454:	3b01      	subs	r3, #1
 8008456:	b29a      	uxth	r2, r3
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008460:	b29b      	uxth	r3, r3
 8008462:	3b01      	subs	r3, #1
 8008464:	b29a      	uxth	r2, r3
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	691a      	ldr	r2, [r3, #16]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008474:	b2d2      	uxtb	r2, r2
 8008476:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847c:	1c5a      	adds	r2, r3, #1
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008486:	3b01      	subs	r3, #1
 8008488:	b29a      	uxth	r2, r3
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008492:	b29b      	uxth	r3, r3
 8008494:	3b01      	subs	r3, #1
 8008496:	b29a      	uxth	r2, r3
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800849c:	e042      	b.n	8008524 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800849e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	f000 fb2e 	bl	8008b04 <I2C_WaitOnRXNEFlagUntilTimeout>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d001      	beq.n	80084b2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	e04c      	b.n	800854c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	691a      	ldr	r2, [r3, #16]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084bc:	b2d2      	uxtb	r2, r2
 80084be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c4:	1c5a      	adds	r2, r3, #1
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084ce:	3b01      	subs	r3, #1
 80084d0:	b29a      	uxth	r2, r3
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084da:	b29b      	uxth	r3, r3
 80084dc:	3b01      	subs	r3, #1
 80084de:	b29a      	uxth	r2, r3
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	695b      	ldr	r3, [r3, #20]
 80084ea:	f003 0304 	and.w	r3, r3, #4
 80084ee:	2b04      	cmp	r3, #4
 80084f0:	d118      	bne.n	8008524 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	691a      	ldr	r2, [r3, #16]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084fc:	b2d2      	uxtb	r2, r2
 80084fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008504:	1c5a      	adds	r2, r3, #1
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800850e:	3b01      	subs	r3, #1
 8008510:	b29a      	uxth	r2, r3
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800851a:	b29b      	uxth	r3, r3
 800851c:	3b01      	subs	r3, #1
 800851e:	b29a      	uxth	r2, r3
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008528:	2b00      	cmp	r3, #0
 800852a:	f47f aec2 	bne.w	80082b2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2220      	movs	r2, #32
 8008532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2200      	movs	r2, #0
 800853a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008546:	2300      	movs	r3, #0
 8008548:	e000      	b.n	800854c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800854a:	2302      	movs	r3, #2
  }
}
 800854c:	4618      	mov	r0, r3
 800854e:	3728      	adds	r7, #40	; 0x28
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}
 8008554:	00010004 	.word	0x00010004

08008558 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b088      	sub	sp, #32
 800855c:	af02      	add	r7, sp, #8
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	4608      	mov	r0, r1
 8008562:	4611      	mov	r1, r2
 8008564:	461a      	mov	r2, r3
 8008566:	4603      	mov	r3, r0
 8008568:	817b      	strh	r3, [r7, #10]
 800856a:	460b      	mov	r3, r1
 800856c:	813b      	strh	r3, [r7, #8]
 800856e:	4613      	mov	r3, r2
 8008570:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008580:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008584:	9300      	str	r3, [sp, #0]
 8008586:	6a3b      	ldr	r3, [r7, #32]
 8008588:	2200      	movs	r2, #0
 800858a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800858e:	68f8      	ldr	r0, [r7, #12]
 8008590:	f000 f960 	bl	8008854 <I2C_WaitOnFlagUntilTimeout>
 8008594:	4603      	mov	r3, r0
 8008596:	2b00      	cmp	r3, #0
 8008598:	d00d      	beq.n	80085b6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085a8:	d103      	bne.n	80085b2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80085b2:	2303      	movs	r3, #3
 80085b4:	e05f      	b.n	8008676 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80085b6:	897b      	ldrh	r3, [r7, #10]
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	461a      	mov	r2, r3
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80085c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80085c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c8:	6a3a      	ldr	r2, [r7, #32]
 80085ca:	492d      	ldr	r1, [pc, #180]	; (8008680 <I2C_RequestMemoryWrite+0x128>)
 80085cc:	68f8      	ldr	r0, [r7, #12]
 80085ce:	f000 f998 	bl	8008902 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80085d2:	4603      	mov	r3, r0
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d001      	beq.n	80085dc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80085d8:	2301      	movs	r3, #1
 80085da:	e04c      	b.n	8008676 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085dc:	2300      	movs	r3, #0
 80085de:	617b      	str	r3, [r7, #20]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	695b      	ldr	r3, [r3, #20]
 80085e6:	617b      	str	r3, [r7, #20]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	699b      	ldr	r3, [r3, #24]
 80085ee:	617b      	str	r3, [r7, #20]
 80085f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085f4:	6a39      	ldr	r1, [r7, #32]
 80085f6:	68f8      	ldr	r0, [r7, #12]
 80085f8:	f000 fa02 	bl	8008a00 <I2C_WaitOnTXEFlagUntilTimeout>
 80085fc:	4603      	mov	r3, r0
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00d      	beq.n	800861e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008606:	2b04      	cmp	r3, #4
 8008608:	d107      	bne.n	800861a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	681a      	ldr	r2, [r3, #0]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008618:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	e02b      	b.n	8008676 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800861e:	88fb      	ldrh	r3, [r7, #6]
 8008620:	2b01      	cmp	r3, #1
 8008622:	d105      	bne.n	8008630 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008624:	893b      	ldrh	r3, [r7, #8]
 8008626:	b2da      	uxtb	r2, r3
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	611a      	str	r2, [r3, #16]
 800862e:	e021      	b.n	8008674 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008630:	893b      	ldrh	r3, [r7, #8]
 8008632:	0a1b      	lsrs	r3, r3, #8
 8008634:	b29b      	uxth	r3, r3
 8008636:	b2da      	uxtb	r2, r3
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800863e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008640:	6a39      	ldr	r1, [r7, #32]
 8008642:	68f8      	ldr	r0, [r7, #12]
 8008644:	f000 f9dc 	bl	8008a00 <I2C_WaitOnTXEFlagUntilTimeout>
 8008648:	4603      	mov	r3, r0
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00d      	beq.n	800866a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008652:	2b04      	cmp	r3, #4
 8008654:	d107      	bne.n	8008666 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008664:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008666:	2301      	movs	r3, #1
 8008668:	e005      	b.n	8008676 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800866a:	893b      	ldrh	r3, [r7, #8]
 800866c:	b2da      	uxtb	r2, r3
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008674:	2300      	movs	r3, #0
}
 8008676:	4618      	mov	r0, r3
 8008678:	3718      	adds	r7, #24
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	00010002 	.word	0x00010002

08008684 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b088      	sub	sp, #32
 8008688:	af02      	add	r7, sp, #8
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	4608      	mov	r0, r1
 800868e:	4611      	mov	r1, r2
 8008690:	461a      	mov	r2, r3
 8008692:	4603      	mov	r3, r0
 8008694:	817b      	strh	r3, [r7, #10]
 8008696:	460b      	mov	r3, r1
 8008698:	813b      	strh	r3, [r7, #8]
 800869a:	4613      	mov	r3, r2
 800869c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80086ac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80086be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c0:	9300      	str	r3, [sp, #0]
 80086c2:	6a3b      	ldr	r3, [r7, #32]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80086ca:	68f8      	ldr	r0, [r7, #12]
 80086cc:	f000 f8c2 	bl	8008854 <I2C_WaitOnFlagUntilTimeout>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d00d      	beq.n	80086f2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086e4:	d103      	bne.n	80086ee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80086ee:	2303      	movs	r3, #3
 80086f0:	e0aa      	b.n	8008848 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80086f2:	897b      	ldrh	r3, [r7, #10]
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	461a      	mov	r2, r3
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008700:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008704:	6a3a      	ldr	r2, [r7, #32]
 8008706:	4952      	ldr	r1, [pc, #328]	; (8008850 <I2C_RequestMemoryRead+0x1cc>)
 8008708:	68f8      	ldr	r0, [r7, #12]
 800870a:	f000 f8fa 	bl	8008902 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800870e:	4603      	mov	r3, r0
 8008710:	2b00      	cmp	r3, #0
 8008712:	d001      	beq.n	8008718 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	e097      	b.n	8008848 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008718:	2300      	movs	r3, #0
 800871a:	617b      	str	r3, [r7, #20]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	695b      	ldr	r3, [r3, #20]
 8008722:	617b      	str	r3, [r7, #20]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	699b      	ldr	r3, [r3, #24]
 800872a:	617b      	str	r3, [r7, #20]
 800872c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800872e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008730:	6a39      	ldr	r1, [r7, #32]
 8008732:	68f8      	ldr	r0, [r7, #12]
 8008734:	f000 f964 	bl	8008a00 <I2C_WaitOnTXEFlagUntilTimeout>
 8008738:	4603      	mov	r3, r0
 800873a:	2b00      	cmp	r3, #0
 800873c:	d00d      	beq.n	800875a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008742:	2b04      	cmp	r3, #4
 8008744:	d107      	bne.n	8008756 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008754:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008756:	2301      	movs	r3, #1
 8008758:	e076      	b.n	8008848 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800875a:	88fb      	ldrh	r3, [r7, #6]
 800875c:	2b01      	cmp	r3, #1
 800875e:	d105      	bne.n	800876c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008760:	893b      	ldrh	r3, [r7, #8]
 8008762:	b2da      	uxtb	r2, r3
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	611a      	str	r2, [r3, #16]
 800876a:	e021      	b.n	80087b0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800876c:	893b      	ldrh	r3, [r7, #8]
 800876e:	0a1b      	lsrs	r3, r3, #8
 8008770:	b29b      	uxth	r3, r3
 8008772:	b2da      	uxtb	r2, r3
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800877a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800877c:	6a39      	ldr	r1, [r7, #32]
 800877e:	68f8      	ldr	r0, [r7, #12]
 8008780:	f000 f93e 	bl	8008a00 <I2C_WaitOnTXEFlagUntilTimeout>
 8008784:	4603      	mov	r3, r0
 8008786:	2b00      	cmp	r3, #0
 8008788:	d00d      	beq.n	80087a6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800878e:	2b04      	cmp	r3, #4
 8008790:	d107      	bne.n	80087a2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	e050      	b.n	8008848 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80087a6:	893b      	ldrh	r3, [r7, #8]
 80087a8:	b2da      	uxtb	r2, r3
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80087b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087b2:	6a39      	ldr	r1, [r7, #32]
 80087b4:	68f8      	ldr	r0, [r7, #12]
 80087b6:	f000 f923 	bl	8008a00 <I2C_WaitOnTXEFlagUntilTimeout>
 80087ba:	4603      	mov	r3, r0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d00d      	beq.n	80087dc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087c4:	2b04      	cmp	r3, #4
 80087c6:	d107      	bne.n	80087d8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087d6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	e035      	b.n	8008848 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80087ea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80087ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ee:	9300      	str	r3, [sp, #0]
 80087f0:	6a3b      	ldr	r3, [r7, #32]
 80087f2:	2200      	movs	r2, #0
 80087f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80087f8:	68f8      	ldr	r0, [r7, #12]
 80087fa:	f000 f82b 	bl	8008854 <I2C_WaitOnFlagUntilTimeout>
 80087fe:	4603      	mov	r3, r0
 8008800:	2b00      	cmp	r3, #0
 8008802:	d00d      	beq.n	8008820 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800880e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008812:	d103      	bne.n	800881c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f44f 7200 	mov.w	r2, #512	; 0x200
 800881a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800881c:	2303      	movs	r3, #3
 800881e:	e013      	b.n	8008848 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008820:	897b      	ldrh	r3, [r7, #10]
 8008822:	b2db      	uxtb	r3, r3
 8008824:	f043 0301 	orr.w	r3, r3, #1
 8008828:	b2da      	uxtb	r2, r3
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008832:	6a3a      	ldr	r2, [r7, #32]
 8008834:	4906      	ldr	r1, [pc, #24]	; (8008850 <I2C_RequestMemoryRead+0x1cc>)
 8008836:	68f8      	ldr	r0, [r7, #12]
 8008838:	f000 f863 	bl	8008902 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800883c:	4603      	mov	r3, r0
 800883e:	2b00      	cmp	r3, #0
 8008840:	d001      	beq.n	8008846 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008842:	2301      	movs	r3, #1
 8008844:	e000      	b.n	8008848 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008846:	2300      	movs	r3, #0
}
 8008848:	4618      	mov	r0, r3
 800884a:	3718      	adds	r7, #24
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}
 8008850:	00010002 	.word	0x00010002

08008854 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	603b      	str	r3, [r7, #0]
 8008860:	4613      	mov	r3, r2
 8008862:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008864:	e025      	b.n	80088b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800886c:	d021      	beq.n	80088b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800886e:	f7fd ff49 	bl	8006704 <HAL_GetTick>
 8008872:	4602      	mov	r2, r0
 8008874:	69bb      	ldr	r3, [r7, #24]
 8008876:	1ad3      	subs	r3, r2, r3
 8008878:	683a      	ldr	r2, [r7, #0]
 800887a:	429a      	cmp	r2, r3
 800887c:	d302      	bcc.n	8008884 <I2C_WaitOnFlagUntilTimeout+0x30>
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d116      	bne.n	80088b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2200      	movs	r2, #0
 8008888:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2220      	movs	r2, #32
 800888e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2200      	movs	r2, #0
 8008896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800889e:	f043 0220 	orr.w	r2, r3, #32
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2200      	movs	r2, #0
 80088aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80088ae:	2301      	movs	r3, #1
 80088b0:	e023      	b.n	80088fa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	0c1b      	lsrs	r3, r3, #16
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d10d      	bne.n	80088d8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	695b      	ldr	r3, [r3, #20]
 80088c2:	43da      	mvns	r2, r3
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	4013      	ands	r3, r2
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	bf0c      	ite	eq
 80088ce:	2301      	moveq	r3, #1
 80088d0:	2300      	movne	r3, #0
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	461a      	mov	r2, r3
 80088d6:	e00c      	b.n	80088f2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	699b      	ldr	r3, [r3, #24]
 80088de:	43da      	mvns	r2, r3
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	4013      	ands	r3, r2
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	bf0c      	ite	eq
 80088ea:	2301      	moveq	r3, #1
 80088ec:	2300      	movne	r3, #0
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	461a      	mov	r2, r3
 80088f2:	79fb      	ldrb	r3, [r7, #7]
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d0b6      	beq.n	8008866 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80088f8:	2300      	movs	r3, #0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3710      	adds	r7, #16
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b084      	sub	sp, #16
 8008906:	af00      	add	r7, sp, #0
 8008908:	60f8      	str	r0, [r7, #12]
 800890a:	60b9      	str	r1, [r7, #8]
 800890c:	607a      	str	r2, [r7, #4]
 800890e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008910:	e051      	b.n	80089b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	695b      	ldr	r3, [r3, #20]
 8008918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800891c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008920:	d123      	bne.n	800896a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008930:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800893a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2200      	movs	r2, #0
 8008940:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2220      	movs	r2, #32
 8008946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2200      	movs	r2, #0
 800894e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008956:	f043 0204 	orr.w	r2, r3, #4
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2200      	movs	r2, #0
 8008962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008966:	2301      	movs	r3, #1
 8008968:	e046      	b.n	80089f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008970:	d021      	beq.n	80089b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008972:	f7fd fec7 	bl	8006704 <HAL_GetTick>
 8008976:	4602      	mov	r2, r0
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	1ad3      	subs	r3, r2, r3
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	429a      	cmp	r2, r3
 8008980:	d302      	bcc.n	8008988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d116      	bne.n	80089b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2200      	movs	r2, #0
 800898c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2220      	movs	r2, #32
 8008992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2200      	movs	r2, #0
 800899a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a2:	f043 0220 	orr.w	r2, r3, #32
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2200      	movs	r2, #0
 80089ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e020      	b.n	80089f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	0c1b      	lsrs	r3, r3, #16
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d10c      	bne.n	80089da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	695b      	ldr	r3, [r3, #20]
 80089c6:	43da      	mvns	r2, r3
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	4013      	ands	r3, r2
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	bf14      	ite	ne
 80089d2:	2301      	movne	r3, #1
 80089d4:	2300      	moveq	r3, #0
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	e00b      	b.n	80089f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	699b      	ldr	r3, [r3, #24]
 80089e0:	43da      	mvns	r2, r3
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	4013      	ands	r3, r2
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	bf14      	ite	ne
 80089ec:	2301      	movne	r3, #1
 80089ee:	2300      	moveq	r3, #0
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d18d      	bne.n	8008912 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80089f6:	2300      	movs	r3, #0
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3710      	adds	r7, #16
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008a0c:	e02d      	b.n	8008a6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008a0e:	68f8      	ldr	r0, [r7, #12]
 8008a10:	f000 f8ce 	bl	8008bb0 <I2C_IsAcknowledgeFailed>
 8008a14:	4603      	mov	r3, r0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d001      	beq.n	8008a1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	e02d      	b.n	8008a7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a24:	d021      	beq.n	8008a6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a26:	f7fd fe6d 	bl	8006704 <HAL_GetTick>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	1ad3      	subs	r3, r2, r3
 8008a30:	68ba      	ldr	r2, [r7, #8]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d302      	bcc.n	8008a3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d116      	bne.n	8008a6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2220      	movs	r2, #32
 8008a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a56:	f043 0220 	orr.w	r2, r3, #32
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2200      	movs	r2, #0
 8008a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	e007      	b.n	8008a7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	695b      	ldr	r3, [r3, #20]
 8008a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a74:	2b80      	cmp	r3, #128	; 0x80
 8008a76:	d1ca      	bne.n	8008a0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008a78:	2300      	movs	r3, #0
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b084      	sub	sp, #16
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	60f8      	str	r0, [r7, #12]
 8008a8a:	60b9      	str	r1, [r7, #8]
 8008a8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008a8e:	e02d      	b.n	8008aec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008a90:	68f8      	ldr	r0, [r7, #12]
 8008a92:	f000 f88d 	bl	8008bb0 <I2C_IsAcknowledgeFailed>
 8008a96:	4603      	mov	r3, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d001      	beq.n	8008aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	e02d      	b.n	8008afc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aa6:	d021      	beq.n	8008aec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008aa8:	f7fd fe2c 	bl	8006704 <HAL_GetTick>
 8008aac:	4602      	mov	r2, r0
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	1ad3      	subs	r3, r2, r3
 8008ab2:	68ba      	ldr	r2, [r7, #8]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d302      	bcc.n	8008abe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d116      	bne.n	8008aec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2220      	movs	r2, #32
 8008ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad8:	f043 0220 	orr.w	r2, r3, #32
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	e007      	b.n	8008afc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	695b      	ldr	r3, [r3, #20]
 8008af2:	f003 0304 	and.w	r3, r3, #4
 8008af6:	2b04      	cmp	r3, #4
 8008af8:	d1ca      	bne.n	8008a90 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008afa:	2300      	movs	r3, #0
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3710      	adds	r7, #16
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	60f8      	str	r0, [r7, #12]
 8008b0c:	60b9      	str	r1, [r7, #8]
 8008b0e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008b10:	e042      	b.n	8008b98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	695b      	ldr	r3, [r3, #20]
 8008b18:	f003 0310 	and.w	r3, r3, #16
 8008b1c:	2b10      	cmp	r3, #16
 8008b1e:	d119      	bne.n	8008b54 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f06f 0210 	mvn.w	r2, #16
 8008b28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2220      	movs	r2, #32
 8008b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	e029      	b.n	8008ba8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b54:	f7fd fdd6 	bl	8006704 <HAL_GetTick>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	1ad3      	subs	r3, r2, r3
 8008b5e:	68ba      	ldr	r2, [r7, #8]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d302      	bcc.n	8008b6a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d116      	bne.n	8008b98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2220      	movs	r2, #32
 8008b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b84:	f043 0220 	orr.w	r2, r3, #32
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	e007      	b.n	8008ba8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	695b      	ldr	r3, [r3, #20]
 8008b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ba2:	2b40      	cmp	r3, #64	; 0x40
 8008ba4:	d1b5      	bne.n	8008b12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008ba6:	2300      	movs	r3, #0
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3710      	adds	r7, #16
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	695b      	ldr	r3, [r3, #20]
 8008bbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bc6:	d11b      	bne.n	8008c00 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008bd0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2220      	movs	r2, #32
 8008bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bec:	f043 0204 	orr.w	r2, r3, #4
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	e000      	b.n	8008c02 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	370c      	adds	r7, #12
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr
	...

08008c10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b086      	sub	sp, #24
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d101      	bne.n	8008c22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	e267      	b.n	80090f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f003 0301 	and.w	r3, r3, #1
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d075      	beq.n	8008d1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008c2e:	4b88      	ldr	r3, [pc, #544]	; (8008e50 <HAL_RCC_OscConfig+0x240>)
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	f003 030c 	and.w	r3, r3, #12
 8008c36:	2b04      	cmp	r3, #4
 8008c38:	d00c      	beq.n	8008c54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008c3a:	4b85      	ldr	r3, [pc, #532]	; (8008e50 <HAL_RCC_OscConfig+0x240>)
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008c42:	2b08      	cmp	r3, #8
 8008c44:	d112      	bne.n	8008c6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008c46:	4b82      	ldr	r3, [pc, #520]	; (8008e50 <HAL_RCC_OscConfig+0x240>)
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c52:	d10b      	bne.n	8008c6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c54:	4b7e      	ldr	r3, [pc, #504]	; (8008e50 <HAL_RCC_OscConfig+0x240>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d05b      	beq.n	8008d18 <HAL_RCC_OscConfig+0x108>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d157      	bne.n	8008d18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	e242      	b.n	80090f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c74:	d106      	bne.n	8008c84 <HAL_RCC_OscConfig+0x74>
 8008c76:	4b76      	ldr	r3, [pc, #472]	; (8008e50 <HAL_RCC_OscConfig+0x240>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a75      	ldr	r2, [pc, #468]	; (8008e50 <HAL_RCC_OscConfig+0x240>)
 8008c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c80:	6013      	str	r3, [r2, #0]
 8008c82:	e01d      	b.n	8008cc0 <HAL_RCC_OscConfig+0xb0>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c8c:	d10c      	bne.n	8008ca8 <HAL_RCC_OscConfig+0x98>
 8008c8e:	4b70      	ldr	r3, [pc, #448]	; (8008e50 <HAL_RCC_OscConfig+0x240>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a6f      	ldr	r2, [pc, #444]	; (8008e50 <HAL_RCC_OscConfig+0x240>)
 8008c94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c98:	6013      	str	r3, [r2, #0]
 8008c9a:	4b6d      	ldr	r3, [pc, #436]	; (8008e50 <HAL_RCC_OscConfig+0x240>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a6c      	ldr	r2, [pc, #432]	; (8008e50 <HAL_RCC_OscConfig+0x240>)
 8008ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ca4:	6013      	str	r3, [r2, #0]
 8008ca6:	e00b      	b.n	8008cc0 <HAL_RCC_OscConfig+0xb0>
 8008ca8:	4b69      	ldr	r3, [pc, #420]	; (8008e50 <HAL_RCC_OscConfig+0x240>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a68      	ldr	r2, [pc, #416]	; (8008e50 <HAL_RCC_OscConfig+0x240>)
 8008cae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cb2:	6013      	str	r3, [r2, #0]
 8008cb4:	4b66      	ldr	r3, [pc, #408]	; (8008e50 <HAL_RCC_OscConfig+0x240>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a65      	ldr	r2, [pc, #404]	; (8008e50 <HAL_RCC_OscConfig+0x240>)
 8008cba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008cbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d013      	beq.n	8008cf0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cc8:	f7fd fd1c 	bl	8006704 <HAL_GetTick>
 8008ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008cce:	e008      	b.n	8008ce2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008cd0:	f7fd fd18 	bl	8006704 <HAL_GetTick>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	1ad3      	subs	r3, r2, r3
 8008cda:	2b64      	cmp	r3, #100	; 0x64
 8008cdc:	d901      	bls.n	8008ce2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008cde:	2303      	movs	r3, #3
 8008ce0:	e207      	b.n	80090f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ce2:	4b5b      	ldr	r3, [pc, #364]	; (8008e50 <HAL_RCC_OscConfig+0x240>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d0f0      	beq.n	8008cd0 <HAL_RCC_OscConfig+0xc0>
 8008cee:	e014      	b.n	8008d1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cf0:	f7fd fd08 	bl	8006704 <HAL_GetTick>
 8008cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008cf6:	e008      	b.n	8008d0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008cf8:	f7fd fd04 	bl	8006704 <HAL_GetTick>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	1ad3      	subs	r3, r2, r3
 8008d02:	2b64      	cmp	r3, #100	; 0x64
 8008d04:	d901      	bls.n	8008d0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008d06:	2303      	movs	r3, #3
 8008d08:	e1f3      	b.n	80090f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008d0a:	4b51      	ldr	r3, [pc, #324]	; (8008e50 <HAL_RCC_OscConfig+0x240>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d1f0      	bne.n	8008cf8 <HAL_RCC_OscConfig+0xe8>
 8008d16:	e000      	b.n	8008d1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f003 0302 	and.w	r3, r3, #2
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d063      	beq.n	8008dee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008d26:	4b4a      	ldr	r3, [pc, #296]	; (8008e50 <HAL_RCC_OscConfig+0x240>)
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	f003 030c 	and.w	r3, r3, #12
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d00b      	beq.n	8008d4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008d32:	4b47      	ldr	r3, [pc, #284]	; (8008e50 <HAL_RCC_OscConfig+0x240>)
 8008d34:	689b      	ldr	r3, [r3, #8]
 8008d36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008d3a:	2b08      	cmp	r3, #8
 8008d3c:	d11c      	bne.n	8008d78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008d3e:	4b44      	ldr	r3, [pc, #272]	; (8008e50 <HAL_RCC_OscConfig+0x240>)
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d116      	bne.n	8008d78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d4a:	4b41      	ldr	r3, [pc, #260]	; (8008e50 <HAL_RCC_OscConfig+0x240>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f003 0302 	and.w	r3, r3, #2
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d005      	beq.n	8008d62 <HAL_RCC_OscConfig+0x152>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	68db      	ldr	r3, [r3, #12]
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d001      	beq.n	8008d62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e1c7      	b.n	80090f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d62:	4b3b      	ldr	r3, [pc, #236]	; (8008e50 <HAL_RCC_OscConfig+0x240>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	691b      	ldr	r3, [r3, #16]
 8008d6e:	00db      	lsls	r3, r3, #3
 8008d70:	4937      	ldr	r1, [pc, #220]	; (8008e50 <HAL_RCC_OscConfig+0x240>)
 8008d72:	4313      	orrs	r3, r2
 8008d74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d76:	e03a      	b.n	8008dee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d020      	beq.n	8008dc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008d80:	4b34      	ldr	r3, [pc, #208]	; (8008e54 <HAL_RCC_OscConfig+0x244>)
 8008d82:	2201      	movs	r2, #1
 8008d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d86:	f7fd fcbd 	bl	8006704 <HAL_GetTick>
 8008d8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d8c:	e008      	b.n	8008da0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d8e:	f7fd fcb9 	bl	8006704 <HAL_GetTick>
 8008d92:	4602      	mov	r2, r0
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	1ad3      	subs	r3, r2, r3
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	d901      	bls.n	8008da0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008d9c:	2303      	movs	r3, #3
 8008d9e:	e1a8      	b.n	80090f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008da0:	4b2b      	ldr	r3, [pc, #172]	; (8008e50 <HAL_RCC_OscConfig+0x240>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f003 0302 	and.w	r3, r3, #2
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d0f0      	beq.n	8008d8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008dac:	4b28      	ldr	r3, [pc, #160]	; (8008e50 <HAL_RCC_OscConfig+0x240>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	691b      	ldr	r3, [r3, #16]
 8008db8:	00db      	lsls	r3, r3, #3
 8008dba:	4925      	ldr	r1, [pc, #148]	; (8008e50 <HAL_RCC_OscConfig+0x240>)
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	600b      	str	r3, [r1, #0]
 8008dc0:	e015      	b.n	8008dee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008dc2:	4b24      	ldr	r3, [pc, #144]	; (8008e54 <HAL_RCC_OscConfig+0x244>)
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dc8:	f7fd fc9c 	bl	8006704 <HAL_GetTick>
 8008dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008dce:	e008      	b.n	8008de2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008dd0:	f7fd fc98 	bl	8006704 <HAL_GetTick>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	1ad3      	subs	r3, r2, r3
 8008dda:	2b02      	cmp	r3, #2
 8008ddc:	d901      	bls.n	8008de2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008dde:	2303      	movs	r3, #3
 8008de0:	e187      	b.n	80090f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008de2:	4b1b      	ldr	r3, [pc, #108]	; (8008e50 <HAL_RCC_OscConfig+0x240>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f003 0302 	and.w	r3, r3, #2
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d1f0      	bne.n	8008dd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f003 0308 	and.w	r3, r3, #8
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d036      	beq.n	8008e68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	695b      	ldr	r3, [r3, #20]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d016      	beq.n	8008e30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008e02:	4b15      	ldr	r3, [pc, #84]	; (8008e58 <HAL_RCC_OscConfig+0x248>)
 8008e04:	2201      	movs	r2, #1
 8008e06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e08:	f7fd fc7c 	bl	8006704 <HAL_GetTick>
 8008e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e0e:	e008      	b.n	8008e22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e10:	f7fd fc78 	bl	8006704 <HAL_GetTick>
 8008e14:	4602      	mov	r2, r0
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	1ad3      	subs	r3, r2, r3
 8008e1a:	2b02      	cmp	r3, #2
 8008e1c:	d901      	bls.n	8008e22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008e1e:	2303      	movs	r3, #3
 8008e20:	e167      	b.n	80090f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e22:	4b0b      	ldr	r3, [pc, #44]	; (8008e50 <HAL_RCC_OscConfig+0x240>)
 8008e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e26:	f003 0302 	and.w	r3, r3, #2
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d0f0      	beq.n	8008e10 <HAL_RCC_OscConfig+0x200>
 8008e2e:	e01b      	b.n	8008e68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008e30:	4b09      	ldr	r3, [pc, #36]	; (8008e58 <HAL_RCC_OscConfig+0x248>)
 8008e32:	2200      	movs	r2, #0
 8008e34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e36:	f7fd fc65 	bl	8006704 <HAL_GetTick>
 8008e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e3c:	e00e      	b.n	8008e5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e3e:	f7fd fc61 	bl	8006704 <HAL_GetTick>
 8008e42:	4602      	mov	r2, r0
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	1ad3      	subs	r3, r2, r3
 8008e48:	2b02      	cmp	r3, #2
 8008e4a:	d907      	bls.n	8008e5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008e4c:	2303      	movs	r3, #3
 8008e4e:	e150      	b.n	80090f2 <HAL_RCC_OscConfig+0x4e2>
 8008e50:	40023800 	.word	0x40023800
 8008e54:	42470000 	.word	0x42470000
 8008e58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e5c:	4b88      	ldr	r3, [pc, #544]	; (8009080 <HAL_RCC_OscConfig+0x470>)
 8008e5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e60:	f003 0302 	and.w	r3, r3, #2
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d1ea      	bne.n	8008e3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f003 0304 	and.w	r3, r3, #4
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	f000 8097 	beq.w	8008fa4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008e76:	2300      	movs	r3, #0
 8008e78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008e7a:	4b81      	ldr	r3, [pc, #516]	; (8009080 <HAL_RCC_OscConfig+0x470>)
 8008e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d10f      	bne.n	8008ea6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e86:	2300      	movs	r3, #0
 8008e88:	60bb      	str	r3, [r7, #8]
 8008e8a:	4b7d      	ldr	r3, [pc, #500]	; (8009080 <HAL_RCC_OscConfig+0x470>)
 8008e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e8e:	4a7c      	ldr	r2, [pc, #496]	; (8009080 <HAL_RCC_OscConfig+0x470>)
 8008e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e94:	6413      	str	r3, [r2, #64]	; 0x40
 8008e96:	4b7a      	ldr	r3, [pc, #488]	; (8009080 <HAL_RCC_OscConfig+0x470>)
 8008e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e9e:	60bb      	str	r3, [r7, #8]
 8008ea0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ea6:	4b77      	ldr	r3, [pc, #476]	; (8009084 <HAL_RCC_OscConfig+0x474>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d118      	bne.n	8008ee4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008eb2:	4b74      	ldr	r3, [pc, #464]	; (8009084 <HAL_RCC_OscConfig+0x474>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a73      	ldr	r2, [pc, #460]	; (8009084 <HAL_RCC_OscConfig+0x474>)
 8008eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ebc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008ebe:	f7fd fc21 	bl	8006704 <HAL_GetTick>
 8008ec2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ec4:	e008      	b.n	8008ed8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ec6:	f7fd fc1d 	bl	8006704 <HAL_GetTick>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	1ad3      	subs	r3, r2, r3
 8008ed0:	2b02      	cmp	r3, #2
 8008ed2:	d901      	bls.n	8008ed8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008ed4:	2303      	movs	r3, #3
 8008ed6:	e10c      	b.n	80090f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ed8:	4b6a      	ldr	r3, [pc, #424]	; (8009084 <HAL_RCC_OscConfig+0x474>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d0f0      	beq.n	8008ec6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d106      	bne.n	8008efa <HAL_RCC_OscConfig+0x2ea>
 8008eec:	4b64      	ldr	r3, [pc, #400]	; (8009080 <HAL_RCC_OscConfig+0x470>)
 8008eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ef0:	4a63      	ldr	r2, [pc, #396]	; (8009080 <HAL_RCC_OscConfig+0x470>)
 8008ef2:	f043 0301 	orr.w	r3, r3, #1
 8008ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8008ef8:	e01c      	b.n	8008f34 <HAL_RCC_OscConfig+0x324>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	2b05      	cmp	r3, #5
 8008f00:	d10c      	bne.n	8008f1c <HAL_RCC_OscConfig+0x30c>
 8008f02:	4b5f      	ldr	r3, [pc, #380]	; (8009080 <HAL_RCC_OscConfig+0x470>)
 8008f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f06:	4a5e      	ldr	r2, [pc, #376]	; (8009080 <HAL_RCC_OscConfig+0x470>)
 8008f08:	f043 0304 	orr.w	r3, r3, #4
 8008f0c:	6713      	str	r3, [r2, #112]	; 0x70
 8008f0e:	4b5c      	ldr	r3, [pc, #368]	; (8009080 <HAL_RCC_OscConfig+0x470>)
 8008f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f12:	4a5b      	ldr	r2, [pc, #364]	; (8009080 <HAL_RCC_OscConfig+0x470>)
 8008f14:	f043 0301 	orr.w	r3, r3, #1
 8008f18:	6713      	str	r3, [r2, #112]	; 0x70
 8008f1a:	e00b      	b.n	8008f34 <HAL_RCC_OscConfig+0x324>
 8008f1c:	4b58      	ldr	r3, [pc, #352]	; (8009080 <HAL_RCC_OscConfig+0x470>)
 8008f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f20:	4a57      	ldr	r2, [pc, #348]	; (8009080 <HAL_RCC_OscConfig+0x470>)
 8008f22:	f023 0301 	bic.w	r3, r3, #1
 8008f26:	6713      	str	r3, [r2, #112]	; 0x70
 8008f28:	4b55      	ldr	r3, [pc, #340]	; (8009080 <HAL_RCC_OscConfig+0x470>)
 8008f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f2c:	4a54      	ldr	r2, [pc, #336]	; (8009080 <HAL_RCC_OscConfig+0x470>)
 8008f2e:	f023 0304 	bic.w	r3, r3, #4
 8008f32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	689b      	ldr	r3, [r3, #8]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d015      	beq.n	8008f68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f3c:	f7fd fbe2 	bl	8006704 <HAL_GetTick>
 8008f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f42:	e00a      	b.n	8008f5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f44:	f7fd fbde 	bl	8006704 <HAL_GetTick>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	1ad3      	subs	r3, r2, r3
 8008f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d901      	bls.n	8008f5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008f56:	2303      	movs	r3, #3
 8008f58:	e0cb      	b.n	80090f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f5a:	4b49      	ldr	r3, [pc, #292]	; (8009080 <HAL_RCC_OscConfig+0x470>)
 8008f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f5e:	f003 0302 	and.w	r3, r3, #2
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d0ee      	beq.n	8008f44 <HAL_RCC_OscConfig+0x334>
 8008f66:	e014      	b.n	8008f92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008f68:	f7fd fbcc 	bl	8006704 <HAL_GetTick>
 8008f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f6e:	e00a      	b.n	8008f86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f70:	f7fd fbc8 	bl	8006704 <HAL_GetTick>
 8008f74:	4602      	mov	r2, r0
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	1ad3      	subs	r3, r2, r3
 8008f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d901      	bls.n	8008f86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008f82:	2303      	movs	r3, #3
 8008f84:	e0b5      	b.n	80090f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f86:	4b3e      	ldr	r3, [pc, #248]	; (8009080 <HAL_RCC_OscConfig+0x470>)
 8008f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f8a:	f003 0302 	and.w	r3, r3, #2
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d1ee      	bne.n	8008f70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008f92:	7dfb      	ldrb	r3, [r7, #23]
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d105      	bne.n	8008fa4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f98:	4b39      	ldr	r3, [pc, #228]	; (8009080 <HAL_RCC_OscConfig+0x470>)
 8008f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f9c:	4a38      	ldr	r2, [pc, #224]	; (8009080 <HAL_RCC_OscConfig+0x470>)
 8008f9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008fa2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	699b      	ldr	r3, [r3, #24]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	f000 80a1 	beq.w	80090f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008fae:	4b34      	ldr	r3, [pc, #208]	; (8009080 <HAL_RCC_OscConfig+0x470>)
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	f003 030c 	and.w	r3, r3, #12
 8008fb6:	2b08      	cmp	r3, #8
 8008fb8:	d05c      	beq.n	8009074 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	699b      	ldr	r3, [r3, #24]
 8008fbe:	2b02      	cmp	r3, #2
 8008fc0:	d141      	bne.n	8009046 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008fc2:	4b31      	ldr	r3, [pc, #196]	; (8009088 <HAL_RCC_OscConfig+0x478>)
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fc8:	f7fd fb9c 	bl	8006704 <HAL_GetTick>
 8008fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fce:	e008      	b.n	8008fe2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008fd0:	f7fd fb98 	bl	8006704 <HAL_GetTick>
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	1ad3      	subs	r3, r2, r3
 8008fda:	2b02      	cmp	r3, #2
 8008fdc:	d901      	bls.n	8008fe2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008fde:	2303      	movs	r3, #3
 8008fe0:	e087      	b.n	80090f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fe2:	4b27      	ldr	r3, [pc, #156]	; (8009080 <HAL_RCC_OscConfig+0x470>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d1f0      	bne.n	8008fd0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	69da      	ldr	r2, [r3, #28]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6a1b      	ldr	r3, [r3, #32]
 8008ff6:	431a      	orrs	r2, r3
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ffc:	019b      	lsls	r3, r3, #6
 8008ffe:	431a      	orrs	r2, r3
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009004:	085b      	lsrs	r3, r3, #1
 8009006:	3b01      	subs	r3, #1
 8009008:	041b      	lsls	r3, r3, #16
 800900a:	431a      	orrs	r2, r3
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009010:	061b      	lsls	r3, r3, #24
 8009012:	491b      	ldr	r1, [pc, #108]	; (8009080 <HAL_RCC_OscConfig+0x470>)
 8009014:	4313      	orrs	r3, r2
 8009016:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009018:	4b1b      	ldr	r3, [pc, #108]	; (8009088 <HAL_RCC_OscConfig+0x478>)
 800901a:	2201      	movs	r2, #1
 800901c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800901e:	f7fd fb71 	bl	8006704 <HAL_GetTick>
 8009022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009024:	e008      	b.n	8009038 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009026:	f7fd fb6d 	bl	8006704 <HAL_GetTick>
 800902a:	4602      	mov	r2, r0
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	1ad3      	subs	r3, r2, r3
 8009030:	2b02      	cmp	r3, #2
 8009032:	d901      	bls.n	8009038 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009034:	2303      	movs	r3, #3
 8009036:	e05c      	b.n	80090f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009038:	4b11      	ldr	r3, [pc, #68]	; (8009080 <HAL_RCC_OscConfig+0x470>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009040:	2b00      	cmp	r3, #0
 8009042:	d0f0      	beq.n	8009026 <HAL_RCC_OscConfig+0x416>
 8009044:	e054      	b.n	80090f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009046:	4b10      	ldr	r3, [pc, #64]	; (8009088 <HAL_RCC_OscConfig+0x478>)
 8009048:	2200      	movs	r2, #0
 800904a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800904c:	f7fd fb5a 	bl	8006704 <HAL_GetTick>
 8009050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009052:	e008      	b.n	8009066 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009054:	f7fd fb56 	bl	8006704 <HAL_GetTick>
 8009058:	4602      	mov	r2, r0
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	1ad3      	subs	r3, r2, r3
 800905e:	2b02      	cmp	r3, #2
 8009060:	d901      	bls.n	8009066 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009062:	2303      	movs	r3, #3
 8009064:	e045      	b.n	80090f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009066:	4b06      	ldr	r3, [pc, #24]	; (8009080 <HAL_RCC_OscConfig+0x470>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800906e:	2b00      	cmp	r3, #0
 8009070:	d1f0      	bne.n	8009054 <HAL_RCC_OscConfig+0x444>
 8009072:	e03d      	b.n	80090f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	699b      	ldr	r3, [r3, #24]
 8009078:	2b01      	cmp	r3, #1
 800907a:	d107      	bne.n	800908c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800907c:	2301      	movs	r3, #1
 800907e:	e038      	b.n	80090f2 <HAL_RCC_OscConfig+0x4e2>
 8009080:	40023800 	.word	0x40023800
 8009084:	40007000 	.word	0x40007000
 8009088:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800908c:	4b1b      	ldr	r3, [pc, #108]	; (80090fc <HAL_RCC_OscConfig+0x4ec>)
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	699b      	ldr	r3, [r3, #24]
 8009096:	2b01      	cmp	r3, #1
 8009098:	d028      	beq.n	80090ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d121      	bne.n	80090ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d11a      	bne.n	80090ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80090b6:	68fa      	ldr	r2, [r7, #12]
 80090b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80090bc:	4013      	ands	r3, r2
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80090c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d111      	bne.n	80090ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090d2:	085b      	lsrs	r3, r3, #1
 80090d4:	3b01      	subs	r3, #1
 80090d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80090d8:	429a      	cmp	r2, r3
 80090da:	d107      	bne.n	80090ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d001      	beq.n	80090f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80090ec:	2301      	movs	r3, #1
 80090ee:	e000      	b.n	80090f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80090f0:	2300      	movs	r3, #0
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3718      	adds	r7, #24
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
 80090fa:	bf00      	nop
 80090fc:	40023800 	.word	0x40023800

08009100 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d101      	bne.n	8009114 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009110:	2301      	movs	r3, #1
 8009112:	e0cc      	b.n	80092ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009114:	4b68      	ldr	r3, [pc, #416]	; (80092b8 <HAL_RCC_ClockConfig+0x1b8>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f003 0307 	and.w	r3, r3, #7
 800911c:	683a      	ldr	r2, [r7, #0]
 800911e:	429a      	cmp	r2, r3
 8009120:	d90c      	bls.n	800913c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009122:	4b65      	ldr	r3, [pc, #404]	; (80092b8 <HAL_RCC_ClockConfig+0x1b8>)
 8009124:	683a      	ldr	r2, [r7, #0]
 8009126:	b2d2      	uxtb	r2, r2
 8009128:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800912a:	4b63      	ldr	r3, [pc, #396]	; (80092b8 <HAL_RCC_ClockConfig+0x1b8>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f003 0307 	and.w	r3, r3, #7
 8009132:	683a      	ldr	r2, [r7, #0]
 8009134:	429a      	cmp	r2, r3
 8009136:	d001      	beq.n	800913c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009138:	2301      	movs	r3, #1
 800913a:	e0b8      	b.n	80092ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f003 0302 	and.w	r3, r3, #2
 8009144:	2b00      	cmp	r3, #0
 8009146:	d020      	beq.n	800918a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f003 0304 	and.w	r3, r3, #4
 8009150:	2b00      	cmp	r3, #0
 8009152:	d005      	beq.n	8009160 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009154:	4b59      	ldr	r3, [pc, #356]	; (80092bc <HAL_RCC_ClockConfig+0x1bc>)
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	4a58      	ldr	r2, [pc, #352]	; (80092bc <HAL_RCC_ClockConfig+0x1bc>)
 800915a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800915e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f003 0308 	and.w	r3, r3, #8
 8009168:	2b00      	cmp	r3, #0
 800916a:	d005      	beq.n	8009178 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800916c:	4b53      	ldr	r3, [pc, #332]	; (80092bc <HAL_RCC_ClockConfig+0x1bc>)
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	4a52      	ldr	r2, [pc, #328]	; (80092bc <HAL_RCC_ClockConfig+0x1bc>)
 8009172:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009176:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009178:	4b50      	ldr	r3, [pc, #320]	; (80092bc <HAL_RCC_ClockConfig+0x1bc>)
 800917a:	689b      	ldr	r3, [r3, #8]
 800917c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	689b      	ldr	r3, [r3, #8]
 8009184:	494d      	ldr	r1, [pc, #308]	; (80092bc <HAL_RCC_ClockConfig+0x1bc>)
 8009186:	4313      	orrs	r3, r2
 8009188:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f003 0301 	and.w	r3, r3, #1
 8009192:	2b00      	cmp	r3, #0
 8009194:	d044      	beq.n	8009220 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	2b01      	cmp	r3, #1
 800919c:	d107      	bne.n	80091ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800919e:	4b47      	ldr	r3, [pc, #284]	; (80092bc <HAL_RCC_ClockConfig+0x1bc>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d119      	bne.n	80091de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80091aa:	2301      	movs	r3, #1
 80091ac:	e07f      	b.n	80092ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	2b02      	cmp	r3, #2
 80091b4:	d003      	beq.n	80091be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80091ba:	2b03      	cmp	r3, #3
 80091bc:	d107      	bne.n	80091ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80091be:	4b3f      	ldr	r3, [pc, #252]	; (80092bc <HAL_RCC_ClockConfig+0x1bc>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d109      	bne.n	80091de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80091ca:	2301      	movs	r3, #1
 80091cc:	e06f      	b.n	80092ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80091ce:	4b3b      	ldr	r3, [pc, #236]	; (80092bc <HAL_RCC_ClockConfig+0x1bc>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f003 0302 	and.w	r3, r3, #2
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d101      	bne.n	80091de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80091da:	2301      	movs	r3, #1
 80091dc:	e067      	b.n	80092ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80091de:	4b37      	ldr	r3, [pc, #220]	; (80092bc <HAL_RCC_ClockConfig+0x1bc>)
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	f023 0203 	bic.w	r2, r3, #3
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	4934      	ldr	r1, [pc, #208]	; (80092bc <HAL_RCC_ClockConfig+0x1bc>)
 80091ec:	4313      	orrs	r3, r2
 80091ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80091f0:	f7fd fa88 	bl	8006704 <HAL_GetTick>
 80091f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091f6:	e00a      	b.n	800920e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091f8:	f7fd fa84 	bl	8006704 <HAL_GetTick>
 80091fc:	4602      	mov	r2, r0
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	1ad3      	subs	r3, r2, r3
 8009202:	f241 3288 	movw	r2, #5000	; 0x1388
 8009206:	4293      	cmp	r3, r2
 8009208:	d901      	bls.n	800920e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800920a:	2303      	movs	r3, #3
 800920c:	e04f      	b.n	80092ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800920e:	4b2b      	ldr	r3, [pc, #172]	; (80092bc <HAL_RCC_ClockConfig+0x1bc>)
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	f003 020c 	and.w	r2, r3, #12
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	009b      	lsls	r3, r3, #2
 800921c:	429a      	cmp	r2, r3
 800921e:	d1eb      	bne.n	80091f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009220:	4b25      	ldr	r3, [pc, #148]	; (80092b8 <HAL_RCC_ClockConfig+0x1b8>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f003 0307 	and.w	r3, r3, #7
 8009228:	683a      	ldr	r2, [r7, #0]
 800922a:	429a      	cmp	r2, r3
 800922c:	d20c      	bcs.n	8009248 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800922e:	4b22      	ldr	r3, [pc, #136]	; (80092b8 <HAL_RCC_ClockConfig+0x1b8>)
 8009230:	683a      	ldr	r2, [r7, #0]
 8009232:	b2d2      	uxtb	r2, r2
 8009234:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009236:	4b20      	ldr	r3, [pc, #128]	; (80092b8 <HAL_RCC_ClockConfig+0x1b8>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f003 0307 	and.w	r3, r3, #7
 800923e:	683a      	ldr	r2, [r7, #0]
 8009240:	429a      	cmp	r2, r3
 8009242:	d001      	beq.n	8009248 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009244:	2301      	movs	r3, #1
 8009246:	e032      	b.n	80092ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f003 0304 	and.w	r3, r3, #4
 8009250:	2b00      	cmp	r3, #0
 8009252:	d008      	beq.n	8009266 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009254:	4b19      	ldr	r3, [pc, #100]	; (80092bc <HAL_RCC_ClockConfig+0x1bc>)
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	4916      	ldr	r1, [pc, #88]	; (80092bc <HAL_RCC_ClockConfig+0x1bc>)
 8009262:	4313      	orrs	r3, r2
 8009264:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f003 0308 	and.w	r3, r3, #8
 800926e:	2b00      	cmp	r3, #0
 8009270:	d009      	beq.n	8009286 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009272:	4b12      	ldr	r3, [pc, #72]	; (80092bc <HAL_RCC_ClockConfig+0x1bc>)
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	691b      	ldr	r3, [r3, #16]
 800927e:	00db      	lsls	r3, r3, #3
 8009280:	490e      	ldr	r1, [pc, #56]	; (80092bc <HAL_RCC_ClockConfig+0x1bc>)
 8009282:	4313      	orrs	r3, r2
 8009284:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009286:	f000 f821 	bl	80092cc <HAL_RCC_GetSysClockFreq>
 800928a:	4602      	mov	r2, r0
 800928c:	4b0b      	ldr	r3, [pc, #44]	; (80092bc <HAL_RCC_ClockConfig+0x1bc>)
 800928e:	689b      	ldr	r3, [r3, #8]
 8009290:	091b      	lsrs	r3, r3, #4
 8009292:	f003 030f 	and.w	r3, r3, #15
 8009296:	490a      	ldr	r1, [pc, #40]	; (80092c0 <HAL_RCC_ClockConfig+0x1c0>)
 8009298:	5ccb      	ldrb	r3, [r1, r3]
 800929a:	fa22 f303 	lsr.w	r3, r2, r3
 800929e:	4a09      	ldr	r2, [pc, #36]	; (80092c4 <HAL_RCC_ClockConfig+0x1c4>)
 80092a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80092a2:	4b09      	ldr	r3, [pc, #36]	; (80092c8 <HAL_RCC_ClockConfig+0x1c8>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4618      	mov	r0, r3
 80092a8:	f7fa fc04 	bl	8003ab4 <HAL_InitTick>

  return HAL_OK;
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3710      	adds	r7, #16
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	bf00      	nop
 80092b8:	40023c00 	.word	0x40023c00
 80092bc:	40023800 	.word	0x40023800
 80092c0:	0800c020 	.word	0x0800c020
 80092c4:	200000e4 	.word	0x200000e4
 80092c8:	200000e8 	.word	0x200000e8

080092cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80092cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092d0:	b090      	sub	sp, #64	; 0x40
 80092d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80092d4:	2300      	movs	r3, #0
 80092d6:	637b      	str	r3, [r7, #52]	; 0x34
 80092d8:	2300      	movs	r3, #0
 80092da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092dc:	2300      	movs	r3, #0
 80092de:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80092e0:	2300      	movs	r3, #0
 80092e2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80092e4:	4b59      	ldr	r3, [pc, #356]	; (800944c <HAL_RCC_GetSysClockFreq+0x180>)
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	f003 030c 	and.w	r3, r3, #12
 80092ec:	2b08      	cmp	r3, #8
 80092ee:	d00d      	beq.n	800930c <HAL_RCC_GetSysClockFreq+0x40>
 80092f0:	2b08      	cmp	r3, #8
 80092f2:	f200 80a1 	bhi.w	8009438 <HAL_RCC_GetSysClockFreq+0x16c>
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d002      	beq.n	8009300 <HAL_RCC_GetSysClockFreq+0x34>
 80092fa:	2b04      	cmp	r3, #4
 80092fc:	d003      	beq.n	8009306 <HAL_RCC_GetSysClockFreq+0x3a>
 80092fe:	e09b      	b.n	8009438 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009300:	4b53      	ldr	r3, [pc, #332]	; (8009450 <HAL_RCC_GetSysClockFreq+0x184>)
 8009302:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8009304:	e09b      	b.n	800943e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009306:	4b53      	ldr	r3, [pc, #332]	; (8009454 <HAL_RCC_GetSysClockFreq+0x188>)
 8009308:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800930a:	e098      	b.n	800943e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800930c:	4b4f      	ldr	r3, [pc, #316]	; (800944c <HAL_RCC_GetSysClockFreq+0x180>)
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009314:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009316:	4b4d      	ldr	r3, [pc, #308]	; (800944c <HAL_RCC_GetSysClockFreq+0x180>)
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800931e:	2b00      	cmp	r3, #0
 8009320:	d028      	beq.n	8009374 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009322:	4b4a      	ldr	r3, [pc, #296]	; (800944c <HAL_RCC_GetSysClockFreq+0x180>)
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	099b      	lsrs	r3, r3, #6
 8009328:	2200      	movs	r2, #0
 800932a:	623b      	str	r3, [r7, #32]
 800932c:	627a      	str	r2, [r7, #36]	; 0x24
 800932e:	6a3b      	ldr	r3, [r7, #32]
 8009330:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009334:	2100      	movs	r1, #0
 8009336:	4b47      	ldr	r3, [pc, #284]	; (8009454 <HAL_RCC_GetSysClockFreq+0x188>)
 8009338:	fb03 f201 	mul.w	r2, r3, r1
 800933c:	2300      	movs	r3, #0
 800933e:	fb00 f303 	mul.w	r3, r0, r3
 8009342:	4413      	add	r3, r2
 8009344:	4a43      	ldr	r2, [pc, #268]	; (8009454 <HAL_RCC_GetSysClockFreq+0x188>)
 8009346:	fba0 1202 	umull	r1, r2, r0, r2
 800934a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800934c:	460a      	mov	r2, r1
 800934e:	62ba      	str	r2, [r7, #40]	; 0x28
 8009350:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009352:	4413      	add	r3, r2
 8009354:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009358:	2200      	movs	r2, #0
 800935a:	61bb      	str	r3, [r7, #24]
 800935c:	61fa      	str	r2, [r7, #28]
 800935e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009362:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009366:	f7f7 fb5d 	bl	8000a24 <__aeabi_uldivmod>
 800936a:	4602      	mov	r2, r0
 800936c:	460b      	mov	r3, r1
 800936e:	4613      	mov	r3, r2
 8009370:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009372:	e053      	b.n	800941c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009374:	4b35      	ldr	r3, [pc, #212]	; (800944c <HAL_RCC_GetSysClockFreq+0x180>)
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	099b      	lsrs	r3, r3, #6
 800937a:	2200      	movs	r2, #0
 800937c:	613b      	str	r3, [r7, #16]
 800937e:	617a      	str	r2, [r7, #20]
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009386:	f04f 0b00 	mov.w	fp, #0
 800938a:	4652      	mov	r2, sl
 800938c:	465b      	mov	r3, fp
 800938e:	f04f 0000 	mov.w	r0, #0
 8009392:	f04f 0100 	mov.w	r1, #0
 8009396:	0159      	lsls	r1, r3, #5
 8009398:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800939c:	0150      	lsls	r0, r2, #5
 800939e:	4602      	mov	r2, r0
 80093a0:	460b      	mov	r3, r1
 80093a2:	ebb2 080a 	subs.w	r8, r2, sl
 80093a6:	eb63 090b 	sbc.w	r9, r3, fp
 80093aa:	f04f 0200 	mov.w	r2, #0
 80093ae:	f04f 0300 	mov.w	r3, #0
 80093b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80093b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80093ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80093be:	ebb2 0408 	subs.w	r4, r2, r8
 80093c2:	eb63 0509 	sbc.w	r5, r3, r9
 80093c6:	f04f 0200 	mov.w	r2, #0
 80093ca:	f04f 0300 	mov.w	r3, #0
 80093ce:	00eb      	lsls	r3, r5, #3
 80093d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80093d4:	00e2      	lsls	r2, r4, #3
 80093d6:	4614      	mov	r4, r2
 80093d8:	461d      	mov	r5, r3
 80093da:	eb14 030a 	adds.w	r3, r4, sl
 80093de:	603b      	str	r3, [r7, #0]
 80093e0:	eb45 030b 	adc.w	r3, r5, fp
 80093e4:	607b      	str	r3, [r7, #4]
 80093e6:	f04f 0200 	mov.w	r2, #0
 80093ea:	f04f 0300 	mov.w	r3, #0
 80093ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80093f2:	4629      	mov	r1, r5
 80093f4:	028b      	lsls	r3, r1, #10
 80093f6:	4621      	mov	r1, r4
 80093f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80093fc:	4621      	mov	r1, r4
 80093fe:	028a      	lsls	r2, r1, #10
 8009400:	4610      	mov	r0, r2
 8009402:	4619      	mov	r1, r3
 8009404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009406:	2200      	movs	r2, #0
 8009408:	60bb      	str	r3, [r7, #8]
 800940a:	60fa      	str	r2, [r7, #12]
 800940c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009410:	f7f7 fb08 	bl	8000a24 <__aeabi_uldivmod>
 8009414:	4602      	mov	r2, r0
 8009416:	460b      	mov	r3, r1
 8009418:	4613      	mov	r3, r2
 800941a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800941c:	4b0b      	ldr	r3, [pc, #44]	; (800944c <HAL_RCC_GetSysClockFreq+0x180>)
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	0c1b      	lsrs	r3, r3, #16
 8009422:	f003 0303 	and.w	r3, r3, #3
 8009426:	3301      	adds	r3, #1
 8009428:	005b      	lsls	r3, r3, #1
 800942a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800942c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800942e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009430:	fbb2 f3f3 	udiv	r3, r2, r3
 8009434:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009436:	e002      	b.n	800943e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009438:	4b05      	ldr	r3, [pc, #20]	; (8009450 <HAL_RCC_GetSysClockFreq+0x184>)
 800943a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800943c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800943e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8009440:	4618      	mov	r0, r3
 8009442:	3740      	adds	r7, #64	; 0x40
 8009444:	46bd      	mov	sp, r7
 8009446:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800944a:	bf00      	nop
 800944c:	40023800 	.word	0x40023800
 8009450:	00f42400 	.word	0x00f42400
 8009454:	017d7840 	.word	0x017d7840

08009458 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009458:	b480      	push	{r7}
 800945a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800945c:	4b03      	ldr	r3, [pc, #12]	; (800946c <HAL_RCC_GetHCLKFreq+0x14>)
 800945e:	681b      	ldr	r3, [r3, #0]
}
 8009460:	4618      	mov	r0, r3
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr
 800946a:	bf00      	nop
 800946c:	200000e4 	.word	0x200000e4

08009470 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009474:	f7ff fff0 	bl	8009458 <HAL_RCC_GetHCLKFreq>
 8009478:	4602      	mov	r2, r0
 800947a:	4b05      	ldr	r3, [pc, #20]	; (8009490 <HAL_RCC_GetPCLK1Freq+0x20>)
 800947c:	689b      	ldr	r3, [r3, #8]
 800947e:	0a9b      	lsrs	r3, r3, #10
 8009480:	f003 0307 	and.w	r3, r3, #7
 8009484:	4903      	ldr	r1, [pc, #12]	; (8009494 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009486:	5ccb      	ldrb	r3, [r1, r3]
 8009488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800948c:	4618      	mov	r0, r3
 800948e:	bd80      	pop	{r7, pc}
 8009490:	40023800 	.word	0x40023800
 8009494:	0800c030 	.word	0x0800c030

08009498 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800949c:	f7ff ffdc 	bl	8009458 <HAL_RCC_GetHCLKFreq>
 80094a0:	4602      	mov	r2, r0
 80094a2:	4b05      	ldr	r3, [pc, #20]	; (80094b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80094a4:	689b      	ldr	r3, [r3, #8]
 80094a6:	0b5b      	lsrs	r3, r3, #13
 80094a8:	f003 0307 	and.w	r3, r3, #7
 80094ac:	4903      	ldr	r1, [pc, #12]	; (80094bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80094ae:	5ccb      	ldrb	r3, [r1, r3]
 80094b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	bd80      	pop	{r7, pc}
 80094b8:	40023800 	.word	0x40023800
 80094bc:	0800c030 	.word	0x0800c030

080094c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b083      	sub	sp, #12
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	220f      	movs	r2, #15
 80094ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80094d0:	4b12      	ldr	r3, [pc, #72]	; (800951c <HAL_RCC_GetClockConfig+0x5c>)
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	f003 0203 	and.w	r2, r3, #3
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80094dc:	4b0f      	ldr	r3, [pc, #60]	; (800951c <HAL_RCC_GetClockConfig+0x5c>)
 80094de:	689b      	ldr	r3, [r3, #8]
 80094e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80094e8:	4b0c      	ldr	r3, [pc, #48]	; (800951c <HAL_RCC_GetClockConfig+0x5c>)
 80094ea:	689b      	ldr	r3, [r3, #8]
 80094ec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80094f4:	4b09      	ldr	r3, [pc, #36]	; (800951c <HAL_RCC_GetClockConfig+0x5c>)
 80094f6:	689b      	ldr	r3, [r3, #8]
 80094f8:	08db      	lsrs	r3, r3, #3
 80094fa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009502:	4b07      	ldr	r3, [pc, #28]	; (8009520 <HAL_RCC_GetClockConfig+0x60>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f003 0207 	and.w	r2, r3, #7
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	601a      	str	r2, [r3, #0]
}
 800950e:	bf00      	nop
 8009510:	370c      	adds	r7, #12
 8009512:	46bd      	mov	sp, r7
 8009514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009518:	4770      	bx	lr
 800951a:	bf00      	nop
 800951c:	40023800 	.word	0x40023800
 8009520:	40023c00 	.word	0x40023c00

08009524 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b082      	sub	sp, #8
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d101      	bne.n	8009536 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009532:	2301      	movs	r3, #1
 8009534:	e041      	b.n	80095ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800953c:	b2db      	uxtb	r3, r3
 800953e:	2b00      	cmp	r3, #0
 8009540:	d106      	bne.n	8009550 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2200      	movs	r2, #0
 8009546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 f839 	bl	80095c2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2202      	movs	r2, #2
 8009554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	3304      	adds	r3, #4
 8009560:	4619      	mov	r1, r3
 8009562:	4610      	mov	r0, r2
 8009564:	f000 fb8c 	bl	8009c80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2201      	movs	r2, #1
 800956c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2201      	movs	r2, #1
 8009574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2201      	movs	r2, #1
 800957c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2201      	movs	r2, #1
 8009584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2201      	movs	r2, #1
 800958c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2201      	movs	r2, #1
 8009594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2201      	movs	r2, #1
 800959c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2201      	movs	r2, #1
 80095a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2201      	movs	r2, #1
 80095ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2201      	movs	r2, #1
 80095b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80095b8:	2300      	movs	r3, #0
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3708      	adds	r7, #8
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}

080095c2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80095c2:	b480      	push	{r7}
 80095c4:	b083      	sub	sp, #12
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80095ca:	bf00      	nop
 80095cc:	370c      	adds	r7, #12
 80095ce:	46bd      	mov	sp, r7
 80095d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d4:	4770      	bx	lr
	...

080095d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80095d8:	b480      	push	{r7}
 80095da:	b085      	sub	sp, #20
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d001      	beq.n	80095f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80095ec:	2301      	movs	r3, #1
 80095ee:	e044      	b.n	800967a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2202      	movs	r2, #2
 80095f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	68da      	ldr	r2, [r3, #12]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f042 0201 	orr.w	r2, r2, #1
 8009606:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a1e      	ldr	r2, [pc, #120]	; (8009688 <HAL_TIM_Base_Start_IT+0xb0>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d018      	beq.n	8009644 <HAL_TIM_Base_Start_IT+0x6c>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800961a:	d013      	beq.n	8009644 <HAL_TIM_Base_Start_IT+0x6c>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a1a      	ldr	r2, [pc, #104]	; (800968c <HAL_TIM_Base_Start_IT+0xb4>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d00e      	beq.n	8009644 <HAL_TIM_Base_Start_IT+0x6c>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a19      	ldr	r2, [pc, #100]	; (8009690 <HAL_TIM_Base_Start_IT+0xb8>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d009      	beq.n	8009644 <HAL_TIM_Base_Start_IT+0x6c>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a17      	ldr	r2, [pc, #92]	; (8009694 <HAL_TIM_Base_Start_IT+0xbc>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d004      	beq.n	8009644 <HAL_TIM_Base_Start_IT+0x6c>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a16      	ldr	r2, [pc, #88]	; (8009698 <HAL_TIM_Base_Start_IT+0xc0>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d111      	bne.n	8009668 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	689b      	ldr	r3, [r3, #8]
 800964a:	f003 0307 	and.w	r3, r3, #7
 800964e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2b06      	cmp	r3, #6
 8009654:	d010      	beq.n	8009678 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f042 0201 	orr.w	r2, r2, #1
 8009664:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009666:	e007      	b.n	8009678 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	681a      	ldr	r2, [r3, #0]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f042 0201 	orr.w	r2, r2, #1
 8009676:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009678:	2300      	movs	r3, #0
}
 800967a:	4618      	mov	r0, r3
 800967c:	3714      	adds	r7, #20
 800967e:	46bd      	mov	sp, r7
 8009680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009684:	4770      	bx	lr
 8009686:	bf00      	nop
 8009688:	40010000 	.word	0x40010000
 800968c:	40000400 	.word	0x40000400
 8009690:	40000800 	.word	0x40000800
 8009694:	40000c00 	.word	0x40000c00
 8009698:	40014000 	.word	0x40014000

0800969c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b082      	sub	sp, #8
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d101      	bne.n	80096ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80096aa:	2301      	movs	r3, #1
 80096ac:	e041      	b.n	8009732 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096b4:	b2db      	uxtb	r3, r3
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d106      	bne.n	80096c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2200      	movs	r2, #0
 80096be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f7fa f8e2 	bl	800388c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2202      	movs	r2, #2
 80096cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	3304      	adds	r3, #4
 80096d8:	4619      	mov	r1, r3
 80096da:	4610      	mov	r0, r2
 80096dc:	f000 fad0 	bl	8009c80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2201      	movs	r2, #1
 80096e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2201      	movs	r2, #1
 80096ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2201      	movs	r2, #1
 80096f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2201      	movs	r2, #1
 80096fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2201      	movs	r2, #1
 8009704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2201      	movs	r2, #1
 800970c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2201      	movs	r2, #1
 8009714:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2201      	movs	r2, #1
 800971c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2201      	movs	r2, #1
 8009724:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2201      	movs	r2, #1
 800972c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009730:	2300      	movs	r3, #0
}
 8009732:	4618      	mov	r0, r3
 8009734:	3708      	adds	r7, #8
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
	...

0800973c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d109      	bne.n	8009760 <HAL_TIM_PWM_Start+0x24>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009752:	b2db      	uxtb	r3, r3
 8009754:	2b01      	cmp	r3, #1
 8009756:	bf14      	ite	ne
 8009758:	2301      	movne	r3, #1
 800975a:	2300      	moveq	r3, #0
 800975c:	b2db      	uxtb	r3, r3
 800975e:	e022      	b.n	80097a6 <HAL_TIM_PWM_Start+0x6a>
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	2b04      	cmp	r3, #4
 8009764:	d109      	bne.n	800977a <HAL_TIM_PWM_Start+0x3e>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800976c:	b2db      	uxtb	r3, r3
 800976e:	2b01      	cmp	r3, #1
 8009770:	bf14      	ite	ne
 8009772:	2301      	movne	r3, #1
 8009774:	2300      	moveq	r3, #0
 8009776:	b2db      	uxtb	r3, r3
 8009778:	e015      	b.n	80097a6 <HAL_TIM_PWM_Start+0x6a>
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	2b08      	cmp	r3, #8
 800977e:	d109      	bne.n	8009794 <HAL_TIM_PWM_Start+0x58>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009786:	b2db      	uxtb	r3, r3
 8009788:	2b01      	cmp	r3, #1
 800978a:	bf14      	ite	ne
 800978c:	2301      	movne	r3, #1
 800978e:	2300      	moveq	r3, #0
 8009790:	b2db      	uxtb	r3, r3
 8009792:	e008      	b.n	80097a6 <HAL_TIM_PWM_Start+0x6a>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800979a:	b2db      	uxtb	r3, r3
 800979c:	2b01      	cmp	r3, #1
 800979e:	bf14      	ite	ne
 80097a0:	2301      	movne	r3, #1
 80097a2:	2300      	moveq	r3, #0
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d001      	beq.n	80097ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80097aa:	2301      	movs	r3, #1
 80097ac:	e068      	b.n	8009880 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d104      	bne.n	80097be <HAL_TIM_PWM_Start+0x82>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2202      	movs	r2, #2
 80097b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097bc:	e013      	b.n	80097e6 <HAL_TIM_PWM_Start+0xaa>
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	2b04      	cmp	r3, #4
 80097c2:	d104      	bne.n	80097ce <HAL_TIM_PWM_Start+0x92>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2202      	movs	r2, #2
 80097c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097cc:	e00b      	b.n	80097e6 <HAL_TIM_PWM_Start+0xaa>
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	2b08      	cmp	r3, #8
 80097d2:	d104      	bne.n	80097de <HAL_TIM_PWM_Start+0xa2>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2202      	movs	r2, #2
 80097d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097dc:	e003      	b.n	80097e6 <HAL_TIM_PWM_Start+0xaa>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2202      	movs	r2, #2
 80097e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	2201      	movs	r2, #1
 80097ec:	6839      	ldr	r1, [r7, #0]
 80097ee:	4618      	mov	r0, r3
 80097f0:	f000 fc52 	bl	800a098 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a23      	ldr	r2, [pc, #140]	; (8009888 <HAL_TIM_PWM_Start+0x14c>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d107      	bne.n	800980e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800980c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4a1d      	ldr	r2, [pc, #116]	; (8009888 <HAL_TIM_PWM_Start+0x14c>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d018      	beq.n	800984a <HAL_TIM_PWM_Start+0x10e>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009820:	d013      	beq.n	800984a <HAL_TIM_PWM_Start+0x10e>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a19      	ldr	r2, [pc, #100]	; (800988c <HAL_TIM_PWM_Start+0x150>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d00e      	beq.n	800984a <HAL_TIM_PWM_Start+0x10e>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a17      	ldr	r2, [pc, #92]	; (8009890 <HAL_TIM_PWM_Start+0x154>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d009      	beq.n	800984a <HAL_TIM_PWM_Start+0x10e>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a16      	ldr	r2, [pc, #88]	; (8009894 <HAL_TIM_PWM_Start+0x158>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d004      	beq.n	800984a <HAL_TIM_PWM_Start+0x10e>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a14      	ldr	r2, [pc, #80]	; (8009898 <HAL_TIM_PWM_Start+0x15c>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d111      	bne.n	800986e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	f003 0307 	and.w	r3, r3, #7
 8009854:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2b06      	cmp	r3, #6
 800985a:	d010      	beq.n	800987e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f042 0201 	orr.w	r2, r2, #1
 800986a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800986c:	e007      	b.n	800987e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	681a      	ldr	r2, [r3, #0]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f042 0201 	orr.w	r2, r2, #1
 800987c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800987e:	2300      	movs	r3, #0
}
 8009880:	4618      	mov	r0, r3
 8009882:	3710      	adds	r7, #16
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}
 8009888:	40010000 	.word	0x40010000
 800988c:	40000400 	.word	0x40000400
 8009890:	40000800 	.word	0x40000800
 8009894:	40000c00 	.word	0x40000c00
 8009898:	40014000 	.word	0x40014000

0800989c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b082      	sub	sp, #8
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	691b      	ldr	r3, [r3, #16]
 80098aa:	f003 0302 	and.w	r3, r3, #2
 80098ae:	2b02      	cmp	r3, #2
 80098b0:	d122      	bne.n	80098f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	68db      	ldr	r3, [r3, #12]
 80098b8:	f003 0302 	and.w	r3, r3, #2
 80098bc:	2b02      	cmp	r3, #2
 80098be:	d11b      	bne.n	80098f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f06f 0202 	mvn.w	r2, #2
 80098c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2201      	movs	r2, #1
 80098ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	699b      	ldr	r3, [r3, #24]
 80098d6:	f003 0303 	and.w	r3, r3, #3
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d003      	beq.n	80098e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 f9b0 	bl	8009c44 <HAL_TIM_IC_CaptureCallback>
 80098e4:	e005      	b.n	80098f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 f9a2 	bl	8009c30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f000 f9b3 	bl	8009c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2200      	movs	r2, #0
 80098f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	691b      	ldr	r3, [r3, #16]
 80098fe:	f003 0304 	and.w	r3, r3, #4
 8009902:	2b04      	cmp	r3, #4
 8009904:	d122      	bne.n	800994c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	f003 0304 	and.w	r3, r3, #4
 8009910:	2b04      	cmp	r3, #4
 8009912:	d11b      	bne.n	800994c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f06f 0204 	mvn.w	r2, #4
 800991c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2202      	movs	r2, #2
 8009922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	699b      	ldr	r3, [r3, #24]
 800992a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800992e:	2b00      	cmp	r3, #0
 8009930:	d003      	beq.n	800993a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f000 f986 	bl	8009c44 <HAL_TIM_IC_CaptureCallback>
 8009938:	e005      	b.n	8009946 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 f978 	bl	8009c30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f000 f989 	bl	8009c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2200      	movs	r2, #0
 800994a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	691b      	ldr	r3, [r3, #16]
 8009952:	f003 0308 	and.w	r3, r3, #8
 8009956:	2b08      	cmp	r3, #8
 8009958:	d122      	bne.n	80099a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	68db      	ldr	r3, [r3, #12]
 8009960:	f003 0308 	and.w	r3, r3, #8
 8009964:	2b08      	cmp	r3, #8
 8009966:	d11b      	bne.n	80099a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f06f 0208 	mvn.w	r2, #8
 8009970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2204      	movs	r2, #4
 8009976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	69db      	ldr	r3, [r3, #28]
 800997e:	f003 0303 	and.w	r3, r3, #3
 8009982:	2b00      	cmp	r3, #0
 8009984:	d003      	beq.n	800998e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 f95c 	bl	8009c44 <HAL_TIM_IC_CaptureCallback>
 800998c:	e005      	b.n	800999a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f000 f94e 	bl	8009c30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f000 f95f 	bl	8009c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2200      	movs	r2, #0
 800999e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	691b      	ldr	r3, [r3, #16]
 80099a6:	f003 0310 	and.w	r3, r3, #16
 80099aa:	2b10      	cmp	r3, #16
 80099ac:	d122      	bne.n	80099f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	68db      	ldr	r3, [r3, #12]
 80099b4:	f003 0310 	and.w	r3, r3, #16
 80099b8:	2b10      	cmp	r3, #16
 80099ba:	d11b      	bne.n	80099f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f06f 0210 	mvn.w	r2, #16
 80099c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2208      	movs	r2, #8
 80099ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	69db      	ldr	r3, [r3, #28]
 80099d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d003      	beq.n	80099e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 f932 	bl	8009c44 <HAL_TIM_IC_CaptureCallback>
 80099e0:	e005      	b.n	80099ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 f924 	bl	8009c30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 f935 	bl	8009c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2200      	movs	r2, #0
 80099f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	691b      	ldr	r3, [r3, #16]
 80099fa:	f003 0301 	and.w	r3, r3, #1
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	d10e      	bne.n	8009a20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	68db      	ldr	r3, [r3, #12]
 8009a08:	f003 0301 	and.w	r3, r3, #1
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d107      	bne.n	8009a20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f06f 0201 	mvn.w	r2, #1
 8009a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f7f9 fe5c 	bl	80036d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	691b      	ldr	r3, [r3, #16]
 8009a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a2a:	2b80      	cmp	r3, #128	; 0x80
 8009a2c:	d10e      	bne.n	8009a4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	68db      	ldr	r3, [r3, #12]
 8009a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a38:	2b80      	cmp	r3, #128	; 0x80
 8009a3a:	d107      	bne.n	8009a4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 fbc4 	bl	800a1d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	691b      	ldr	r3, [r3, #16]
 8009a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a56:	2b40      	cmp	r3, #64	; 0x40
 8009a58:	d10e      	bne.n	8009a78 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	68db      	ldr	r3, [r3, #12]
 8009a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a64:	2b40      	cmp	r3, #64	; 0x40
 8009a66:	d107      	bne.n	8009a78 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 f8fa 	bl	8009c6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	691b      	ldr	r3, [r3, #16]
 8009a7e:	f003 0320 	and.w	r3, r3, #32
 8009a82:	2b20      	cmp	r3, #32
 8009a84:	d10e      	bne.n	8009aa4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	68db      	ldr	r3, [r3, #12]
 8009a8c:	f003 0320 	and.w	r3, r3, #32
 8009a90:	2b20      	cmp	r3, #32
 8009a92:	d107      	bne.n	8009aa4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f06f 0220 	mvn.w	r2, #32
 8009a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 fb8e 	bl	800a1c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009aa4:	bf00      	nop
 8009aa6:	3708      	adds	r7, #8
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b086      	sub	sp, #24
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	60f8      	str	r0, [r7, #12]
 8009ab4:	60b9      	str	r1, [r7, #8]
 8009ab6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ac2:	2b01      	cmp	r3, #1
 8009ac4:	d101      	bne.n	8009aca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009ac6:	2302      	movs	r3, #2
 8009ac8:	e0ae      	b.n	8009c28 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2201      	movs	r2, #1
 8009ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2b0c      	cmp	r3, #12
 8009ad6:	f200 809f 	bhi.w	8009c18 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009ada:	a201      	add	r2, pc, #4	; (adr r2, 8009ae0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae0:	08009b15 	.word	0x08009b15
 8009ae4:	08009c19 	.word	0x08009c19
 8009ae8:	08009c19 	.word	0x08009c19
 8009aec:	08009c19 	.word	0x08009c19
 8009af0:	08009b55 	.word	0x08009b55
 8009af4:	08009c19 	.word	0x08009c19
 8009af8:	08009c19 	.word	0x08009c19
 8009afc:	08009c19 	.word	0x08009c19
 8009b00:	08009b97 	.word	0x08009b97
 8009b04:	08009c19 	.word	0x08009c19
 8009b08:	08009c19 	.word	0x08009c19
 8009b0c:	08009c19 	.word	0x08009c19
 8009b10:	08009bd7 	.word	0x08009bd7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	68b9      	ldr	r1, [r7, #8]
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f000 f930 	bl	8009d80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	699a      	ldr	r2, [r3, #24]
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f042 0208 	orr.w	r2, r2, #8
 8009b2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	699a      	ldr	r2, [r3, #24]
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f022 0204 	bic.w	r2, r2, #4
 8009b3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	6999      	ldr	r1, [r3, #24]
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	691a      	ldr	r2, [r3, #16]
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	430a      	orrs	r2, r1
 8009b50:	619a      	str	r2, [r3, #24]
      break;
 8009b52:	e064      	b.n	8009c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	68b9      	ldr	r1, [r7, #8]
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f000 f976 	bl	8009e4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	699a      	ldr	r2, [r3, #24]
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	699a      	ldr	r2, [r3, #24]
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	6999      	ldr	r1, [r3, #24]
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	691b      	ldr	r3, [r3, #16]
 8009b8a:	021a      	lsls	r2, r3, #8
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	430a      	orrs	r2, r1
 8009b92:	619a      	str	r2, [r3, #24]
      break;
 8009b94:	e043      	b.n	8009c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	68b9      	ldr	r1, [r7, #8]
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f000 f9c1 	bl	8009f24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	69da      	ldr	r2, [r3, #28]
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f042 0208 	orr.w	r2, r2, #8
 8009bb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	69da      	ldr	r2, [r3, #28]
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f022 0204 	bic.w	r2, r2, #4
 8009bc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	69d9      	ldr	r1, [r3, #28]
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	691a      	ldr	r2, [r3, #16]
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	430a      	orrs	r2, r1
 8009bd2:	61da      	str	r2, [r3, #28]
      break;
 8009bd4:	e023      	b.n	8009c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	68b9      	ldr	r1, [r7, #8]
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f000 fa0b 	bl	8009ff8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	69da      	ldr	r2, [r3, #28]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009bf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	69da      	ldr	r2, [r3, #28]
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	69d9      	ldr	r1, [r3, #28]
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	691b      	ldr	r3, [r3, #16]
 8009c0c:	021a      	lsls	r2, r3, #8
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	430a      	orrs	r2, r1
 8009c14:	61da      	str	r2, [r3, #28]
      break;
 8009c16:	e002      	b.n	8009c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009c18:	2301      	movs	r3, #1
 8009c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8009c1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2200      	movs	r2, #0
 8009c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3718      	adds	r7, #24
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c38:	bf00      	nop
 8009c3a:	370c      	adds	r7, #12
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009c4c:	bf00      	nop
 8009c4e:	370c      	adds	r7, #12
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b083      	sub	sp, #12
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009c60:	bf00      	nop
 8009c62:	370c      	adds	r7, #12
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr

08009c6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b083      	sub	sp, #12
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c74:	bf00      	nop
 8009c76:	370c      	adds	r7, #12
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr

08009c80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b085      	sub	sp, #20
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	4a34      	ldr	r2, [pc, #208]	; (8009d64 <TIM_Base_SetConfig+0xe4>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d00f      	beq.n	8009cb8 <TIM_Base_SetConfig+0x38>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c9e:	d00b      	beq.n	8009cb8 <TIM_Base_SetConfig+0x38>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	4a31      	ldr	r2, [pc, #196]	; (8009d68 <TIM_Base_SetConfig+0xe8>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d007      	beq.n	8009cb8 <TIM_Base_SetConfig+0x38>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	4a30      	ldr	r2, [pc, #192]	; (8009d6c <TIM_Base_SetConfig+0xec>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d003      	beq.n	8009cb8 <TIM_Base_SetConfig+0x38>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	4a2f      	ldr	r2, [pc, #188]	; (8009d70 <TIM_Base_SetConfig+0xf0>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d108      	bne.n	8009cca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	68fa      	ldr	r2, [r7, #12]
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	4a25      	ldr	r2, [pc, #148]	; (8009d64 <TIM_Base_SetConfig+0xe4>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d01b      	beq.n	8009d0a <TIM_Base_SetConfig+0x8a>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cd8:	d017      	beq.n	8009d0a <TIM_Base_SetConfig+0x8a>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	4a22      	ldr	r2, [pc, #136]	; (8009d68 <TIM_Base_SetConfig+0xe8>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d013      	beq.n	8009d0a <TIM_Base_SetConfig+0x8a>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	4a21      	ldr	r2, [pc, #132]	; (8009d6c <TIM_Base_SetConfig+0xec>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d00f      	beq.n	8009d0a <TIM_Base_SetConfig+0x8a>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	4a20      	ldr	r2, [pc, #128]	; (8009d70 <TIM_Base_SetConfig+0xf0>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d00b      	beq.n	8009d0a <TIM_Base_SetConfig+0x8a>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	4a1f      	ldr	r2, [pc, #124]	; (8009d74 <TIM_Base_SetConfig+0xf4>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d007      	beq.n	8009d0a <TIM_Base_SetConfig+0x8a>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	4a1e      	ldr	r2, [pc, #120]	; (8009d78 <TIM_Base_SetConfig+0xf8>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d003      	beq.n	8009d0a <TIM_Base_SetConfig+0x8a>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	4a1d      	ldr	r2, [pc, #116]	; (8009d7c <TIM_Base_SetConfig+0xfc>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d108      	bne.n	8009d1c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	68db      	ldr	r3, [r3, #12]
 8009d16:	68fa      	ldr	r2, [r7, #12]
 8009d18:	4313      	orrs	r3, r2
 8009d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	695b      	ldr	r3, [r3, #20]
 8009d26:	4313      	orrs	r3, r2
 8009d28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	68fa      	ldr	r2, [r7, #12]
 8009d2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	689a      	ldr	r2, [r3, #8]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	681a      	ldr	r2, [r3, #0]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	4a08      	ldr	r2, [pc, #32]	; (8009d64 <TIM_Base_SetConfig+0xe4>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d103      	bne.n	8009d50 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	691a      	ldr	r2, [r3, #16]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2201      	movs	r2, #1
 8009d54:	615a      	str	r2, [r3, #20]
}
 8009d56:	bf00      	nop
 8009d58:	3714      	adds	r7, #20
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr
 8009d62:	bf00      	nop
 8009d64:	40010000 	.word	0x40010000
 8009d68:	40000400 	.word	0x40000400
 8009d6c:	40000800 	.word	0x40000800
 8009d70:	40000c00 	.word	0x40000c00
 8009d74:	40014000 	.word	0x40014000
 8009d78:	40014400 	.word	0x40014400
 8009d7c:	40014800 	.word	0x40014800

08009d80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b087      	sub	sp, #28
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6a1b      	ldr	r3, [r3, #32]
 8009d8e:	f023 0201 	bic.w	r2, r3, #1
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6a1b      	ldr	r3, [r3, #32]
 8009d9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	699b      	ldr	r3, [r3, #24]
 8009da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f023 0303 	bic.w	r3, r3, #3
 8009db6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	68fa      	ldr	r2, [r7, #12]
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	f023 0302 	bic.w	r3, r3, #2
 8009dc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	689b      	ldr	r3, [r3, #8]
 8009dce:	697a      	ldr	r2, [r7, #20]
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	4a1c      	ldr	r2, [pc, #112]	; (8009e48 <TIM_OC1_SetConfig+0xc8>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d10c      	bne.n	8009df6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	f023 0308 	bic.w	r3, r3, #8
 8009de2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	68db      	ldr	r3, [r3, #12]
 8009de8:	697a      	ldr	r2, [r7, #20]
 8009dea:	4313      	orrs	r3, r2
 8009dec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	f023 0304 	bic.w	r3, r3, #4
 8009df4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	4a13      	ldr	r2, [pc, #76]	; (8009e48 <TIM_OC1_SetConfig+0xc8>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d111      	bne.n	8009e22 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	695b      	ldr	r3, [r3, #20]
 8009e12:	693a      	ldr	r2, [r7, #16]
 8009e14:	4313      	orrs	r3, r2
 8009e16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	699b      	ldr	r3, [r3, #24]
 8009e1c:	693a      	ldr	r2, [r7, #16]
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	693a      	ldr	r2, [r7, #16]
 8009e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	68fa      	ldr	r2, [r7, #12]
 8009e2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	685a      	ldr	r2, [r3, #4]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	697a      	ldr	r2, [r7, #20]
 8009e3a:	621a      	str	r2, [r3, #32]
}
 8009e3c:	bf00      	nop
 8009e3e:	371c      	adds	r7, #28
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr
 8009e48:	40010000 	.word	0x40010000

08009e4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b087      	sub	sp, #28
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6a1b      	ldr	r3, [r3, #32]
 8009e5a:	f023 0210 	bic.w	r2, r3, #16
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6a1b      	ldr	r3, [r3, #32]
 8009e66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	699b      	ldr	r3, [r3, #24]
 8009e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	021b      	lsls	r3, r3, #8
 8009e8a:	68fa      	ldr	r2, [r7, #12]
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	f023 0320 	bic.w	r3, r3, #32
 8009e96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	689b      	ldr	r3, [r3, #8]
 8009e9c:	011b      	lsls	r3, r3, #4
 8009e9e:	697a      	ldr	r2, [r7, #20]
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	4a1e      	ldr	r2, [pc, #120]	; (8009f20 <TIM_OC2_SetConfig+0xd4>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d10d      	bne.n	8009ec8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009eb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	68db      	ldr	r3, [r3, #12]
 8009eb8:	011b      	lsls	r3, r3, #4
 8009eba:	697a      	ldr	r2, [r7, #20]
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ec6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	4a15      	ldr	r2, [pc, #84]	; (8009f20 <TIM_OC2_SetConfig+0xd4>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d113      	bne.n	8009ef8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ed6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ede:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	695b      	ldr	r3, [r3, #20]
 8009ee4:	009b      	lsls	r3, r3, #2
 8009ee6:	693a      	ldr	r2, [r7, #16]
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	699b      	ldr	r3, [r3, #24]
 8009ef0:	009b      	lsls	r3, r3, #2
 8009ef2:	693a      	ldr	r2, [r7, #16]
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	693a      	ldr	r2, [r7, #16]
 8009efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	68fa      	ldr	r2, [r7, #12]
 8009f02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	685a      	ldr	r2, [r3, #4]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	697a      	ldr	r2, [r7, #20]
 8009f10:	621a      	str	r2, [r3, #32]
}
 8009f12:	bf00      	nop
 8009f14:	371c      	adds	r7, #28
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr
 8009f1e:	bf00      	nop
 8009f20:	40010000 	.word	0x40010000

08009f24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b087      	sub	sp, #28
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6a1b      	ldr	r3, [r3, #32]
 8009f32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6a1b      	ldr	r3, [r3, #32]
 8009f3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	685b      	ldr	r3, [r3, #4]
 8009f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	69db      	ldr	r3, [r3, #28]
 8009f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f023 0303 	bic.w	r3, r3, #3
 8009f5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	68fa      	ldr	r2, [r7, #12]
 8009f62:	4313      	orrs	r3, r2
 8009f64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009f6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	689b      	ldr	r3, [r3, #8]
 8009f72:	021b      	lsls	r3, r3, #8
 8009f74:	697a      	ldr	r2, [r7, #20]
 8009f76:	4313      	orrs	r3, r2
 8009f78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	4a1d      	ldr	r2, [pc, #116]	; (8009ff4 <TIM_OC3_SetConfig+0xd0>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d10d      	bne.n	8009f9e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	68db      	ldr	r3, [r3, #12]
 8009f8e:	021b      	lsls	r3, r3, #8
 8009f90:	697a      	ldr	r2, [r7, #20]
 8009f92:	4313      	orrs	r3, r2
 8009f94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	4a14      	ldr	r2, [pc, #80]	; (8009ff4 <TIM_OC3_SetConfig+0xd0>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d113      	bne.n	8009fce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009fac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	695b      	ldr	r3, [r3, #20]
 8009fba:	011b      	lsls	r3, r3, #4
 8009fbc:	693a      	ldr	r2, [r7, #16]
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	699b      	ldr	r3, [r3, #24]
 8009fc6:	011b      	lsls	r3, r3, #4
 8009fc8:	693a      	ldr	r2, [r7, #16]
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	693a      	ldr	r2, [r7, #16]
 8009fd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	68fa      	ldr	r2, [r7, #12]
 8009fd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	685a      	ldr	r2, [r3, #4]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	697a      	ldr	r2, [r7, #20]
 8009fe6:	621a      	str	r2, [r3, #32]
}
 8009fe8:	bf00      	nop
 8009fea:	371c      	adds	r7, #28
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr
 8009ff4:	40010000 	.word	0x40010000

08009ff8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b087      	sub	sp, #28
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6a1b      	ldr	r3, [r3, #32]
 800a006:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6a1b      	ldr	r3, [r3, #32]
 800a012:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	69db      	ldr	r3, [r3, #28]
 800a01e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a02e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	021b      	lsls	r3, r3, #8
 800a036:	68fa      	ldr	r2, [r7, #12]
 800a038:	4313      	orrs	r3, r2
 800a03a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a042:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	689b      	ldr	r3, [r3, #8]
 800a048:	031b      	lsls	r3, r3, #12
 800a04a:	693a      	ldr	r2, [r7, #16]
 800a04c:	4313      	orrs	r3, r2
 800a04e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	4a10      	ldr	r2, [pc, #64]	; (800a094 <TIM_OC4_SetConfig+0x9c>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d109      	bne.n	800a06c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a05e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	695b      	ldr	r3, [r3, #20]
 800a064:	019b      	lsls	r3, r3, #6
 800a066:	697a      	ldr	r2, [r7, #20]
 800a068:	4313      	orrs	r3, r2
 800a06a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	697a      	ldr	r2, [r7, #20]
 800a070:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	68fa      	ldr	r2, [r7, #12]
 800a076:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	685a      	ldr	r2, [r3, #4]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	693a      	ldr	r2, [r7, #16]
 800a084:	621a      	str	r2, [r3, #32]
}
 800a086:	bf00      	nop
 800a088:	371c      	adds	r7, #28
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr
 800a092:	bf00      	nop
 800a094:	40010000 	.word	0x40010000

0800a098 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a098:	b480      	push	{r7}
 800a09a:	b087      	sub	sp, #28
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	60b9      	str	r1, [r7, #8]
 800a0a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	f003 031f 	and.w	r3, r3, #31
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a0b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	6a1a      	ldr	r2, [r3, #32]
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	43db      	mvns	r3, r3
 800a0ba:	401a      	ands	r2, r3
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	6a1a      	ldr	r2, [r3, #32]
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	f003 031f 	and.w	r3, r3, #31
 800a0ca:	6879      	ldr	r1, [r7, #4]
 800a0cc:	fa01 f303 	lsl.w	r3, r1, r3
 800a0d0:	431a      	orrs	r2, r3
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	621a      	str	r2, [r3, #32]
}
 800a0d6:	bf00      	nop
 800a0d8:	371c      	adds	r7, #28
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e0:	4770      	bx	lr
	...

0800a0e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b085      	sub	sp, #20
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d101      	bne.n	800a0fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a0f8:	2302      	movs	r3, #2
 800a0fa:	e050      	b.n	800a19e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2201      	movs	r2, #1
 800a100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2202      	movs	r2, #2
 800a108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	689b      	ldr	r3, [r3, #8]
 800a11a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a122:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	68fa      	ldr	r2, [r7, #12]
 800a12a:	4313      	orrs	r3, r2
 800a12c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	68fa      	ldr	r2, [r7, #12]
 800a134:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4a1c      	ldr	r2, [pc, #112]	; (800a1ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d018      	beq.n	800a172 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a148:	d013      	beq.n	800a172 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4a18      	ldr	r2, [pc, #96]	; (800a1b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d00e      	beq.n	800a172 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4a16      	ldr	r2, [pc, #88]	; (800a1b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d009      	beq.n	800a172 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a15      	ldr	r2, [pc, #84]	; (800a1b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d004      	beq.n	800a172 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4a13      	ldr	r2, [pc, #76]	; (800a1bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d10c      	bne.n	800a18c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a178:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	68ba      	ldr	r2, [r7, #8]
 800a180:	4313      	orrs	r3, r2
 800a182:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	68ba      	ldr	r2, [r7, #8]
 800a18a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2201      	movs	r2, #1
 800a190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2200      	movs	r2, #0
 800a198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a19c:	2300      	movs	r3, #0
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3714      	adds	r7, #20
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a8:	4770      	bx	lr
 800a1aa:	bf00      	nop
 800a1ac:	40010000 	.word	0x40010000
 800a1b0:	40000400 	.word	0x40000400
 800a1b4:	40000800 	.word	0x40000800
 800a1b8:	40000c00 	.word	0x40000c00
 800a1bc:	40014000 	.word	0x40014000

0800a1c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b083      	sub	sp, #12
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a1c8:	bf00      	nop
 800a1ca:	370c      	adds	r7, #12
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr

0800a1d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a1dc:	bf00      	nop
 800a1de:	370c      	adds	r7, #12
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr

0800a1e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b082      	sub	sp, #8
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d101      	bne.n	800a1fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	e03f      	b.n	800a27a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a200:	b2db      	uxtb	r3, r3
 800a202:	2b00      	cmp	r3, #0
 800a204:	d106      	bne.n	800a214 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2200      	movs	r2, #0
 800a20a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f7f9 fb98 	bl	8003944 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2224      	movs	r2, #36	; 0x24
 800a218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	68da      	ldr	r2, [r3, #12]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a22a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f000 ff8b 	bl	800b148 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	691a      	ldr	r2, [r3, #16]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a240:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	695a      	ldr	r2, [r3, #20]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a250:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	68da      	ldr	r2, [r3, #12]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a260:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2200      	movs	r2, #0
 800a266:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2220      	movs	r2, #32
 800a26c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2220      	movs	r2, #32
 800a274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a278:	2300      	movs	r3, #0
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3708      	adds	r7, #8
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}

0800a282 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800a282:	b580      	push	{r7, lr}
 800a284:	b082      	sub	sp, #8
 800a286:	af00      	add	r7, sp, #0
 800a288:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d101      	bne.n	800a294 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800a290:	2301      	movs	r3, #1
 800a292:	e021      	b.n	800a2d8 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2224      	movs	r2, #36	; 0x24
 800a298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	68da      	ldr	r2, [r3, #12]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a2aa:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f7f9 fbcd 	bl	8003a4c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a2d6:	2300      	movs	r3, #0
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3708      	adds	r7, #8
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b08a      	sub	sp, #40	; 0x28
 800a2e4:	af02      	add	r7, sp, #8
 800a2e6:	60f8      	str	r0, [r7, #12]
 800a2e8:	60b9      	str	r1, [r7, #8]
 800a2ea:	603b      	str	r3, [r7, #0]
 800a2ec:	4613      	mov	r3, r2
 800a2ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2fa:	b2db      	uxtb	r3, r3
 800a2fc:	2b20      	cmp	r3, #32
 800a2fe:	d17c      	bne.n	800a3fa <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d002      	beq.n	800a30c <HAL_UART_Transmit+0x2c>
 800a306:	88fb      	ldrh	r3, [r7, #6]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d101      	bne.n	800a310 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a30c:	2301      	movs	r3, #1
 800a30e:	e075      	b.n	800a3fc <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a316:	2b01      	cmp	r3, #1
 800a318:	d101      	bne.n	800a31e <HAL_UART_Transmit+0x3e>
 800a31a:	2302      	movs	r3, #2
 800a31c:	e06e      	b.n	800a3fc <HAL_UART_Transmit+0x11c>
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2201      	movs	r2, #1
 800a322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2200      	movs	r2, #0
 800a32a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	2221      	movs	r2, #33	; 0x21
 800a330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a334:	f7fc f9e6 	bl	8006704 <HAL_GetTick>
 800a338:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	88fa      	ldrh	r2, [r7, #6]
 800a33e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	88fa      	ldrh	r2, [r7, #6]
 800a344:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	689b      	ldr	r3, [r3, #8]
 800a34a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a34e:	d108      	bne.n	800a362 <HAL_UART_Transmit+0x82>
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	691b      	ldr	r3, [r3, #16]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d104      	bne.n	800a362 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a358:	2300      	movs	r3, #0
 800a35a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	61bb      	str	r3, [r7, #24]
 800a360:	e003      	b.n	800a36a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a366:	2300      	movs	r3, #0
 800a368:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2200      	movs	r2, #0
 800a36e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a372:	e02a      	b.n	800a3ca <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	9300      	str	r3, [sp, #0]
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	2200      	movs	r2, #0
 800a37c:	2180      	movs	r1, #128	; 0x80
 800a37e:	68f8      	ldr	r0, [r7, #12]
 800a380:	f000 fc3c 	bl	800abfc <UART_WaitOnFlagUntilTimeout>
 800a384:	4603      	mov	r3, r0
 800a386:	2b00      	cmp	r3, #0
 800a388:	d001      	beq.n	800a38e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a38a:	2303      	movs	r3, #3
 800a38c:	e036      	b.n	800a3fc <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a38e:	69fb      	ldr	r3, [r7, #28]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d10b      	bne.n	800a3ac <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a394:	69bb      	ldr	r3, [r7, #24]
 800a396:	881b      	ldrh	r3, [r3, #0]
 800a398:	461a      	mov	r2, r3
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a3a2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a3a4:	69bb      	ldr	r3, [r7, #24]
 800a3a6:	3302      	adds	r3, #2
 800a3a8:	61bb      	str	r3, [r7, #24]
 800a3aa:	e007      	b.n	800a3bc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a3ac:	69fb      	ldr	r3, [r7, #28]
 800a3ae:	781a      	ldrb	r2, [r3, #0]
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a3b6:	69fb      	ldr	r3, [r7, #28]
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	3b01      	subs	r3, #1
 800a3c4:	b29a      	uxth	r2, r3
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d1cf      	bne.n	800a374 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	9300      	str	r3, [sp, #0]
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	2140      	movs	r1, #64	; 0x40
 800a3de:	68f8      	ldr	r0, [r7, #12]
 800a3e0:	f000 fc0c 	bl	800abfc <UART_WaitOnFlagUntilTimeout>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d001      	beq.n	800a3ee <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a3ea:	2303      	movs	r3, #3
 800a3ec:	e006      	b.n	800a3fc <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2220      	movs	r2, #32
 800a3f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	e000      	b.n	800a3fc <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a3fa:	2302      	movs	r3, #2
  }
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3720      	adds	r7, #32
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b084      	sub	sp, #16
 800a408:	af00      	add	r7, sp, #0
 800a40a:	60f8      	str	r0, [r7, #12]
 800a40c:	60b9      	str	r1, [r7, #8]
 800a40e:	4613      	mov	r3, r2
 800a410:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a418:	b2db      	uxtb	r3, r3
 800a41a:	2b20      	cmp	r3, #32
 800a41c:	d11d      	bne.n	800a45a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d002      	beq.n	800a42a <HAL_UART_Receive_IT+0x26>
 800a424:	88fb      	ldrh	r3, [r7, #6]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d101      	bne.n	800a42e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a42a:	2301      	movs	r3, #1
 800a42c:	e016      	b.n	800a45c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a434:	2b01      	cmp	r3, #1
 800a436:	d101      	bne.n	800a43c <HAL_UART_Receive_IT+0x38>
 800a438:	2302      	movs	r3, #2
 800a43a:	e00f      	b.n	800a45c <HAL_UART_Receive_IT+0x58>
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2201      	movs	r2, #1
 800a440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2200      	movs	r2, #0
 800a448:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a44a:	88fb      	ldrh	r3, [r7, #6]
 800a44c:	461a      	mov	r2, r3
 800a44e:	68b9      	ldr	r1, [r7, #8]
 800a450:	68f8      	ldr	r0, [r7, #12]
 800a452:	f000 fc41 	bl	800acd8 <UART_Start_Receive_IT>
 800a456:	4603      	mov	r3, r0
 800a458:	e000      	b.n	800a45c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a45a:	2302      	movs	r3, #2
  }
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3710      	adds	r7, #16
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b0a2      	sub	sp, #136	; 0x88
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 800a46c:	2301      	movs	r3, #1
 800a46e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	330c      	adds	r3, #12
 800a478:	663b      	str	r3, [r7, #96]	; 0x60
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a47a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a47c:	e853 3f00 	ldrex	r3, [r3]
 800a480:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a482:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a484:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800a488:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	330c      	adds	r3, #12
 800a492:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a496:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a498:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a49a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a49c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a49e:	e841 2300 	strex	r3, r2, [r1]
 800a4a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a4a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d1e3      	bne.n	800a472 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	3314      	adds	r3, #20
 800a4b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4b4:	e853 3f00 	ldrex	r3, [r3]
 800a4b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a4ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4bc:	f023 0301 	bic.w	r3, r3, #1
 800a4c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	3314      	adds	r3, #20
 800a4c8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a4ca:	65ba      	str	r2, [r7, #88]	; 0x58
 800a4cc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a4d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a4d2:	e841 2300 	strex	r3, r2, [r1]
 800a4d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a4d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d1e5      	bne.n	800a4aa <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d119      	bne.n	800a51a <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	330c      	adds	r3, #12
 800a4ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4f0:	e853 3f00 	ldrex	r3, [r3]
 800a4f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a4f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4f8:	f023 0310 	bic.w	r3, r3, #16
 800a4fc:	67bb      	str	r3, [r7, #120]	; 0x78
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	330c      	adds	r3, #12
 800a504:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a506:	647a      	str	r2, [r7, #68]	; 0x44
 800a508:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a50a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a50c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a50e:	e841 2300 	strex	r3, r2, [r1]
 800a512:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a516:	2b00      	cmp	r3, #0
 800a518:	d1e5      	bne.n	800a4e6 <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d00f      	beq.n	800a542 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	695b      	ldr	r3, [r3, #20]
 800a528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a52c:	2b80      	cmp	r3, #128	; 0x80
 800a52e:	d104      	bne.n	800a53a <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a534:	4a53      	ldr	r2, [pc, #332]	; (800a684 <HAL_UART_Abort_IT+0x220>)
 800a536:	651a      	str	r2, [r3, #80]	; 0x50
 800a538:	e003      	b.n	800a542 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a53e:	2200      	movs	r2, #0
 800a540:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a546:	2b00      	cmp	r3, #0
 800a548:	d00f      	beq.n	800a56a <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	695b      	ldr	r3, [r3, #20]
 800a550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a554:	2b40      	cmp	r3, #64	; 0x40
 800a556:	d104      	bne.n	800a562 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a55c:	4a4a      	ldr	r2, [pc, #296]	; (800a688 <HAL_UART_Abort_IT+0x224>)
 800a55e:	651a      	str	r2, [r3, #80]	; 0x50
 800a560:	e003      	b.n	800a56a <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a566:	2200      	movs	r2, #0
 800a568:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	695b      	ldr	r3, [r3, #20]
 800a570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a574:	2b80      	cmp	r3, #128	; 0x80
 800a576:	d12d      	bne.n	800a5d4 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	3314      	adds	r3, #20
 800a57e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a582:	e853 3f00 	ldrex	r3, [r3]
 800a586:	623b      	str	r3, [r7, #32]
   return(result);
 800a588:	6a3b      	ldr	r3, [r7, #32]
 800a58a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a58e:	677b      	str	r3, [r7, #116]	; 0x74
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	3314      	adds	r3, #20
 800a596:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a598:	633a      	str	r2, [r7, #48]	; 0x30
 800a59a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a59c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a59e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5a0:	e841 2300 	strex	r3, r2, [r1]
 800a5a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d1e5      	bne.n	800a578 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d00f      	beq.n	800a5d4 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f7fc fe9f 	bl	80072fc <HAL_DMA_Abort_IT>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d004      	beq.n	800a5ce <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	651a      	str	r2, [r3, #80]	; 0x50
 800a5cc:	e002      	b.n	800a5d4 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	695b      	ldr	r3, [r3, #20]
 800a5da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5de:	2b40      	cmp	r3, #64	; 0x40
 800a5e0:	d130      	bne.n	800a644 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	3314      	adds	r3, #20
 800a5e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	e853 3f00 	ldrex	r3, [r3]
 800a5f0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5f8:	673b      	str	r3, [r7, #112]	; 0x70
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	3314      	adds	r3, #20
 800a600:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a602:	61fa      	str	r2, [r7, #28]
 800a604:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a606:	69b9      	ldr	r1, [r7, #24]
 800a608:	69fa      	ldr	r2, [r7, #28]
 800a60a:	e841 2300 	strex	r3, r2, [r1]
 800a60e:	617b      	str	r3, [r7, #20]
   return(result);
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d1e5      	bne.n	800a5e2 <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d012      	beq.n	800a644 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a622:	4618      	mov	r0, r3
 800a624:	f7fc fe6a 	bl	80072fc <HAL_DMA_Abort_IT>
 800a628:	4603      	mov	r3, r0
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d007      	beq.n	800a63e <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a632:	2200      	movs	r2, #0
 800a634:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 800a636:	2301      	movs	r3, #1
 800a638:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a63c:	e002      	b.n	800a644 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 800a63e:	2300      	movs	r3, #0
 800a640:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 800a644:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a648:	2b01      	cmp	r3, #1
 800a64a:	d116      	bne.n	800a67a <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2200      	movs	r2, #0
 800a650:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2200      	movs	r2, #0
 800a656:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2200      	movs	r2, #0
 800a65c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2220      	movs	r2, #32
 800a662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2220      	movs	r2, #32
 800a66a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2200      	movs	r2, #0
 800a672:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f000 faab 	bl	800abd0 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800a67a:	2300      	movs	r3, #0
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3788      	adds	r7, #136	; 0x88
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}
 800a684:	0800ae43 	.word	0x0800ae43
 800a688:	0800aea3 	.word	0x0800aea3

0800a68c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b0ba      	sub	sp, #232	; 0xe8
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	695b      	ldr	r3, [r3, #20]
 800a6ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a6be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6c2:	f003 030f 	and.w	r3, r3, #15
 800a6c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a6ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d10f      	bne.n	800a6f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a6d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6d6:	f003 0320 	and.w	r3, r3, #32
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d009      	beq.n	800a6f2 <HAL_UART_IRQHandler+0x66>
 800a6de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6e2:	f003 0320 	and.w	r3, r3, #32
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d003      	beq.n	800a6f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f000 fc71 	bl	800afd2 <UART_Receive_IT>
      return;
 800a6f0:	e256      	b.n	800aba0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a6f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	f000 80de 	beq.w	800a8b8 <HAL_UART_IRQHandler+0x22c>
 800a6fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a700:	f003 0301 	and.w	r3, r3, #1
 800a704:	2b00      	cmp	r3, #0
 800a706:	d106      	bne.n	800a716 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a70c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a710:	2b00      	cmp	r3, #0
 800a712:	f000 80d1 	beq.w	800a8b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a71a:	f003 0301 	and.w	r3, r3, #1
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d00b      	beq.n	800a73a <HAL_UART_IRQHandler+0xae>
 800a722:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d005      	beq.n	800a73a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a732:	f043 0201 	orr.w	r2, r3, #1
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a73a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a73e:	f003 0304 	and.w	r3, r3, #4
 800a742:	2b00      	cmp	r3, #0
 800a744:	d00b      	beq.n	800a75e <HAL_UART_IRQHandler+0xd2>
 800a746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a74a:	f003 0301 	and.w	r3, r3, #1
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d005      	beq.n	800a75e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a756:	f043 0202 	orr.w	r2, r3, #2
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a75e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a762:	f003 0302 	and.w	r3, r3, #2
 800a766:	2b00      	cmp	r3, #0
 800a768:	d00b      	beq.n	800a782 <HAL_UART_IRQHandler+0xf6>
 800a76a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a76e:	f003 0301 	and.w	r3, r3, #1
 800a772:	2b00      	cmp	r3, #0
 800a774:	d005      	beq.n	800a782 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a77a:	f043 0204 	orr.w	r2, r3, #4
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a786:	f003 0308 	and.w	r3, r3, #8
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d011      	beq.n	800a7b2 <HAL_UART_IRQHandler+0x126>
 800a78e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a792:	f003 0320 	and.w	r3, r3, #32
 800a796:	2b00      	cmp	r3, #0
 800a798:	d105      	bne.n	800a7a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a79a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a79e:	f003 0301 	and.w	r3, r3, #1
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d005      	beq.n	800a7b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7aa:	f043 0208 	orr.w	r2, r3, #8
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	f000 81ed 	beq.w	800ab96 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a7bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7c0:	f003 0320 	and.w	r3, r3, #32
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d008      	beq.n	800a7da <HAL_UART_IRQHandler+0x14e>
 800a7c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7cc:	f003 0320 	and.w	r3, r3, #32
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d002      	beq.n	800a7da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f000 fbfc 	bl	800afd2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	695b      	ldr	r3, [r3, #20]
 800a7e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7e4:	2b40      	cmp	r3, #64	; 0x40
 800a7e6:	bf0c      	ite	eq
 800a7e8:	2301      	moveq	r3, #1
 800a7ea:	2300      	movne	r3, #0
 800a7ec:	b2db      	uxtb	r3, r3
 800a7ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7f6:	f003 0308 	and.w	r3, r3, #8
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d103      	bne.n	800a806 <HAL_UART_IRQHandler+0x17a>
 800a7fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a802:	2b00      	cmp	r3, #0
 800a804:	d04f      	beq.n	800a8a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f000 faa4 	bl	800ad54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	695b      	ldr	r3, [r3, #20]
 800a812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a816:	2b40      	cmp	r3, #64	; 0x40
 800a818:	d141      	bne.n	800a89e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	3314      	adds	r3, #20
 800a820:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a824:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a828:	e853 3f00 	ldrex	r3, [r3]
 800a82c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a830:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a834:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a838:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	3314      	adds	r3, #20
 800a842:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a846:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a84a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a84e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a852:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a856:	e841 2300 	strex	r3, r2, [r1]
 800a85a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a85e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a862:	2b00      	cmp	r3, #0
 800a864:	d1d9      	bne.n	800a81a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d013      	beq.n	800a896 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a872:	4a7d      	ldr	r2, [pc, #500]	; (800aa68 <HAL_UART_IRQHandler+0x3dc>)
 800a874:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a87a:	4618      	mov	r0, r3
 800a87c:	f7fc fd3e 	bl	80072fc <HAL_DMA_Abort_IT>
 800a880:	4603      	mov	r3, r0
 800a882:	2b00      	cmp	r3, #0
 800a884:	d016      	beq.n	800a8b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a88a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a88c:	687a      	ldr	r2, [r7, #4]
 800a88e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a890:	4610      	mov	r0, r2
 800a892:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a894:	e00e      	b.n	800a8b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 f990 	bl	800abbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a89c:	e00a      	b.n	800a8b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 f98c 	bl	800abbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8a4:	e006      	b.n	800a8b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f000 f988 	bl	800abbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a8b2:	e170      	b.n	800ab96 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8b4:	bf00      	nop
    return;
 800a8b6:	e16e      	b.n	800ab96 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	f040 814a 	bne.w	800ab56 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a8c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8c6:	f003 0310 	and.w	r3, r3, #16
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	f000 8143 	beq.w	800ab56 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a8d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8d4:	f003 0310 	and.w	r3, r3, #16
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	f000 813c 	beq.w	800ab56 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a8de:	2300      	movs	r3, #0
 800a8e0:	60bb      	str	r3, [r7, #8]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	60bb      	str	r3, [r7, #8]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	60bb      	str	r3, [r7, #8]
 800a8f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	695b      	ldr	r3, [r3, #20]
 800a8fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8fe:	2b40      	cmp	r3, #64	; 0x40
 800a900:	f040 80b4 	bne.w	800aa6c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a910:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a914:	2b00      	cmp	r3, #0
 800a916:	f000 8140 	beq.w	800ab9a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a91e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a922:	429a      	cmp	r2, r3
 800a924:	f080 8139 	bcs.w	800ab9a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a92e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a934:	69db      	ldr	r3, [r3, #28]
 800a936:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a93a:	f000 8088 	beq.w	800aa4e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	330c      	adds	r3, #12
 800a944:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a948:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a94c:	e853 3f00 	ldrex	r3, [r3]
 800a950:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a954:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a958:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a95c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	330c      	adds	r3, #12
 800a966:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a96a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a96e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a972:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a976:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a97a:	e841 2300 	strex	r3, r2, [r1]
 800a97e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a982:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a986:	2b00      	cmp	r3, #0
 800a988:	d1d9      	bne.n	800a93e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	3314      	adds	r3, #20
 800a990:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a992:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a994:	e853 3f00 	ldrex	r3, [r3]
 800a998:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a99a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a99c:	f023 0301 	bic.w	r3, r3, #1
 800a9a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	3314      	adds	r3, #20
 800a9aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a9ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a9b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a9b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a9ba:	e841 2300 	strex	r3, r2, [r1]
 800a9be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a9c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d1e1      	bne.n	800a98a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	3314      	adds	r3, #20
 800a9cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a9d0:	e853 3f00 	ldrex	r3, [r3]
 800a9d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a9d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a9d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	3314      	adds	r3, #20
 800a9e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a9ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a9ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a9f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a9f2:	e841 2300 	strex	r3, r2, [r1]
 800a9f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a9f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d1e3      	bne.n	800a9c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2220      	movs	r2, #32
 800aa02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	330c      	adds	r3, #12
 800aa12:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa16:	e853 3f00 	ldrex	r3, [r3]
 800aa1a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800aa1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa1e:	f023 0310 	bic.w	r3, r3, #16
 800aa22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	330c      	adds	r3, #12
 800aa2c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800aa30:	65ba      	str	r2, [r7, #88]	; 0x58
 800aa32:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aa36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aa38:	e841 2300 	strex	r3, r2, [r1]
 800aa3c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aa3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d1e3      	bne.n	800aa0c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f7fc fbe7 	bl	800721c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	1ad3      	subs	r3, r2, r3
 800aa5a:	b29b      	uxth	r3, r3
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f000 f8c0 	bl	800abe4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800aa64:	e099      	b.n	800ab9a <HAL_UART_IRQHandler+0x50e>
 800aa66:	bf00      	nop
 800aa68:	0800ae1b 	.word	0x0800ae1b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aa74:	b29b      	uxth	r3, r3
 800aa76:	1ad3      	subs	r3, r2, r3
 800aa78:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aa80:	b29b      	uxth	r3, r3
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	f000 808b 	beq.w	800ab9e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800aa88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	f000 8086 	beq.w	800ab9e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	330c      	adds	r3, #12
 800aa98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa9c:	e853 3f00 	ldrex	r3, [r3]
 800aaa0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aaa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaa4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aaa8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	330c      	adds	r3, #12
 800aab2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800aab6:	647a      	str	r2, [r7, #68]	; 0x44
 800aab8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aabc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aabe:	e841 2300 	strex	r3, r2, [r1]
 800aac2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d1e3      	bne.n	800aa92 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	3314      	adds	r3, #20
 800aad0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad4:	e853 3f00 	ldrex	r3, [r3]
 800aad8:	623b      	str	r3, [r7, #32]
   return(result);
 800aada:	6a3b      	ldr	r3, [r7, #32]
 800aadc:	f023 0301 	bic.w	r3, r3, #1
 800aae0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	3314      	adds	r3, #20
 800aaea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800aaee:	633a      	str	r2, [r7, #48]	; 0x30
 800aaf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aaf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aaf6:	e841 2300 	strex	r3, r2, [r1]
 800aafa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d1e3      	bne.n	800aaca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2220      	movs	r2, #32
 800ab06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	330c      	adds	r3, #12
 800ab16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	e853 3f00 	ldrex	r3, [r3]
 800ab1e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f023 0310 	bic.w	r3, r3, #16
 800ab26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	330c      	adds	r3, #12
 800ab30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ab34:	61fa      	str	r2, [r7, #28]
 800ab36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab38:	69b9      	ldr	r1, [r7, #24]
 800ab3a:	69fa      	ldr	r2, [r7, #28]
 800ab3c:	e841 2300 	strex	r3, r2, [r1]
 800ab40:	617b      	str	r3, [r7, #20]
   return(result);
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d1e3      	bne.n	800ab10 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ab48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f000 f848 	bl	800abe4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ab54:	e023      	b.n	800ab9e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ab56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d009      	beq.n	800ab76 <HAL_UART_IRQHandler+0x4ea>
 800ab62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d003      	beq.n	800ab76 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f000 f9c7 	bl	800af02 <UART_Transmit_IT>
    return;
 800ab74:	e014      	b.n	800aba0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ab76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d00e      	beq.n	800aba0 <HAL_UART_IRQHandler+0x514>
 800ab82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d008      	beq.n	800aba0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f000 fa07 	bl	800afa2 <UART_EndTransmit_IT>
    return;
 800ab94:	e004      	b.n	800aba0 <HAL_UART_IRQHandler+0x514>
    return;
 800ab96:	bf00      	nop
 800ab98:	e002      	b.n	800aba0 <HAL_UART_IRQHandler+0x514>
      return;
 800ab9a:	bf00      	nop
 800ab9c:	e000      	b.n	800aba0 <HAL_UART_IRQHandler+0x514>
      return;
 800ab9e:	bf00      	nop
  }
}
 800aba0:	37e8      	adds	r7, #232	; 0xe8
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
 800aba6:	bf00      	nop

0800aba8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b083      	sub	sp, #12
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800abb0:	bf00      	nop
 800abb2:	370c      	adds	r7, #12
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr

0800abbc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b083      	sub	sp, #12
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800abc4:	bf00      	nop
 800abc6:	370c      	adds	r7, #12
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr

0800abd0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800abd0:	b480      	push	{r7}
 800abd2:	b083      	sub	sp, #12
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800abd8:	bf00      	nop
 800abda:	370c      	adds	r7, #12
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr

0800abe4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b083      	sub	sp, #12
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	460b      	mov	r3, r1
 800abee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800abf0:	bf00      	nop
 800abf2:	370c      	adds	r7, #12
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr

0800abfc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b090      	sub	sp, #64	; 0x40
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	60f8      	str	r0, [r7, #12]
 800ac04:	60b9      	str	r1, [r7, #8]
 800ac06:	603b      	str	r3, [r7, #0]
 800ac08:	4613      	mov	r3, r2
 800ac0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac0c:	e050      	b.n	800acb0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac14:	d04c      	beq.n	800acb0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800ac16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d007      	beq.n	800ac2c <UART_WaitOnFlagUntilTimeout+0x30>
 800ac1c:	f7fb fd72 	bl	8006704 <HAL_GetTick>
 800ac20:	4602      	mov	r2, r0
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	1ad3      	subs	r3, r2, r3
 800ac26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	d241      	bcs.n	800acb0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	330c      	adds	r3, #12
 800ac32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac36:	e853 3f00 	ldrex	r3, [r3]
 800ac3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ac3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac3e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ac42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	330c      	adds	r3, #12
 800ac4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ac4c:	637a      	str	r2, [r7, #52]	; 0x34
 800ac4e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ac52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac54:	e841 2300 	strex	r3, r2, [r1]
 800ac58:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ac5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d1e5      	bne.n	800ac2c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	3314      	adds	r3, #20
 800ac66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac68:	697b      	ldr	r3, [r7, #20]
 800ac6a:	e853 3f00 	ldrex	r3, [r3]
 800ac6e:	613b      	str	r3, [r7, #16]
   return(result);
 800ac70:	693b      	ldr	r3, [r7, #16]
 800ac72:	f023 0301 	bic.w	r3, r3, #1
 800ac76:	63bb      	str	r3, [r7, #56]	; 0x38
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	3314      	adds	r3, #20
 800ac7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac80:	623a      	str	r2, [r7, #32]
 800ac82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac84:	69f9      	ldr	r1, [r7, #28]
 800ac86:	6a3a      	ldr	r2, [r7, #32]
 800ac88:	e841 2300 	strex	r3, r2, [r1]
 800ac8c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ac8e:	69bb      	ldr	r3, [r7, #24]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d1e5      	bne.n	800ac60 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	2220      	movs	r2, #32
 800ac98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	2220      	movs	r2, #32
 800aca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	2200      	movs	r2, #0
 800aca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800acac:	2303      	movs	r3, #3
 800acae:	e00f      	b.n	800acd0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	681a      	ldr	r2, [r3, #0]
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	4013      	ands	r3, r2
 800acba:	68ba      	ldr	r2, [r7, #8]
 800acbc:	429a      	cmp	r2, r3
 800acbe:	bf0c      	ite	eq
 800acc0:	2301      	moveq	r3, #1
 800acc2:	2300      	movne	r3, #0
 800acc4:	b2db      	uxtb	r3, r3
 800acc6:	461a      	mov	r2, r3
 800acc8:	79fb      	ldrb	r3, [r7, #7]
 800acca:	429a      	cmp	r2, r3
 800accc:	d09f      	beq.n	800ac0e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800acce:	2300      	movs	r3, #0
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	3740      	adds	r7, #64	; 0x40
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}

0800acd8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800acd8:	b480      	push	{r7}
 800acda:	b085      	sub	sp, #20
 800acdc:	af00      	add	r7, sp, #0
 800acde:	60f8      	str	r0, [r7, #12]
 800ace0:	60b9      	str	r1, [r7, #8]
 800ace2:	4613      	mov	r3, r2
 800ace4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	68ba      	ldr	r2, [r7, #8]
 800acea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	88fa      	ldrh	r2, [r7, #6]
 800acf0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	88fa      	ldrh	r2, [r7, #6]
 800acf6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	2200      	movs	r2, #0
 800acfc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2222      	movs	r2, #34	; 0x22
 800ad02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	691b      	ldr	r3, [r3, #16]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d007      	beq.n	800ad26 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	68da      	ldr	r2, [r3, #12]
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ad24:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	695a      	ldr	r2, [r3, #20]
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f042 0201 	orr.w	r2, r2, #1
 800ad34:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	68da      	ldr	r2, [r3, #12]
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f042 0220 	orr.w	r2, r2, #32
 800ad44:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ad46:	2300      	movs	r3, #0
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3714      	adds	r7, #20
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr

0800ad54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b095      	sub	sp, #84	; 0x54
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	330c      	adds	r3, #12
 800ad62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad66:	e853 3f00 	ldrex	r3, [r3]
 800ad6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ad6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad72:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	330c      	adds	r3, #12
 800ad7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ad7c:	643a      	str	r2, [r7, #64]	; 0x40
 800ad7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ad82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad84:	e841 2300 	strex	r3, r2, [r1]
 800ad88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ad8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d1e5      	bne.n	800ad5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	3314      	adds	r3, #20
 800ad96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad98:	6a3b      	ldr	r3, [r7, #32]
 800ad9a:	e853 3f00 	ldrex	r3, [r3]
 800ad9e:	61fb      	str	r3, [r7, #28]
   return(result);
 800ada0:	69fb      	ldr	r3, [r7, #28]
 800ada2:	f023 0301 	bic.w	r3, r3, #1
 800ada6:	64bb      	str	r3, [r7, #72]	; 0x48
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	3314      	adds	r3, #20
 800adae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800adb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800adb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800adb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800adb8:	e841 2300 	strex	r3, r2, [r1]
 800adbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800adbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d1e5      	bne.n	800ad90 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adc8:	2b01      	cmp	r3, #1
 800adca:	d119      	bne.n	800ae00 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	330c      	adds	r3, #12
 800add2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	e853 3f00 	ldrex	r3, [r3]
 800adda:	60bb      	str	r3, [r7, #8]
   return(result);
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	f023 0310 	bic.w	r3, r3, #16
 800ade2:	647b      	str	r3, [r7, #68]	; 0x44
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	330c      	adds	r3, #12
 800adea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800adec:	61ba      	str	r2, [r7, #24]
 800adee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adf0:	6979      	ldr	r1, [r7, #20]
 800adf2:	69ba      	ldr	r2, [r7, #24]
 800adf4:	e841 2300 	strex	r3, r2, [r1]
 800adf8:	613b      	str	r3, [r7, #16]
   return(result);
 800adfa:	693b      	ldr	r3, [r7, #16]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d1e5      	bne.n	800adcc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2220      	movs	r2, #32
 800ae04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ae0e:	bf00      	nop
 800ae10:	3754      	adds	r7, #84	; 0x54
 800ae12:	46bd      	mov	sp, r7
 800ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae18:	4770      	bx	lr

0800ae1a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ae1a:	b580      	push	{r7, lr}
 800ae1c:	b084      	sub	sp, #16
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	2200      	movs	r2, #0
 800ae32:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae34:	68f8      	ldr	r0, [r7, #12]
 800ae36:	f7ff fec1 	bl	800abbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae3a:	bf00      	nop
 800ae3c:	3710      	adds	r7, #16
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}

0800ae42 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800ae42:	b580      	push	{r7, lr}
 800ae44:	b084      	sub	sp, #16
 800ae46:	af00      	add	r7, sp, #0
 800ae48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae4e:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae54:	2200      	movs	r2, #0
 800ae56:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d004      	beq.n	800ae6a <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d117      	bne.n	800ae9a <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2200      	movs	r2, #0
 800ae74:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2220      	movs	r2, #32
 800ae80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	2220      	movs	r2, #32
 800ae88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800ae92:	68f8      	ldr	r0, [r7, #12]
 800ae94:	f7ff fe9c 	bl	800abd0 <HAL_UART_AbortCpltCallback>
 800ae98:	e000      	b.n	800ae9c <UART_DMATxAbortCallback+0x5a>
      return;
 800ae9a:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae9c:	3710      	adds	r7, #16
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}

0800aea2 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800aea2:	b580      	push	{r7, lr}
 800aea4:	b084      	sub	sp, #16
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeae:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d004      	beq.n	800aeca <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d117      	bne.n	800aefa <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2200      	movs	r2, #0
 800aece:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2200      	movs	r2, #0
 800aed4:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	2200      	movs	r2, #0
 800aeda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	2220      	movs	r2, #32
 800aee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2220      	movs	r2, #32
 800aee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2200      	movs	r2, #0
 800aef0:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800aef2:	68f8      	ldr	r0, [r7, #12]
 800aef4:	f7ff fe6c 	bl	800abd0 <HAL_UART_AbortCpltCallback>
 800aef8:	e000      	b.n	800aefc <UART_DMARxAbortCallback+0x5a>
      return;
 800aefa:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aefc:	3710      	adds	r7, #16
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}

0800af02 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800af02:	b480      	push	{r7}
 800af04:	b085      	sub	sp, #20
 800af06:	af00      	add	r7, sp, #0
 800af08:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af10:	b2db      	uxtb	r3, r3
 800af12:	2b21      	cmp	r3, #33	; 0x21
 800af14:	d13e      	bne.n	800af94 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	689b      	ldr	r3, [r3, #8]
 800af1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af1e:	d114      	bne.n	800af4a <UART_Transmit_IT+0x48>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	691b      	ldr	r3, [r3, #16]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d110      	bne.n	800af4a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6a1b      	ldr	r3, [r3, #32]
 800af2c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	881b      	ldrh	r3, [r3, #0]
 800af32:	461a      	mov	r2, r3
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800af3c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6a1b      	ldr	r3, [r3, #32]
 800af42:	1c9a      	adds	r2, r3, #2
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	621a      	str	r2, [r3, #32]
 800af48:	e008      	b.n	800af5c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6a1b      	ldr	r3, [r3, #32]
 800af4e:	1c59      	adds	r1, r3, #1
 800af50:	687a      	ldr	r2, [r7, #4]
 800af52:	6211      	str	r1, [r2, #32]
 800af54:	781a      	ldrb	r2, [r3, #0]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800af60:	b29b      	uxth	r3, r3
 800af62:	3b01      	subs	r3, #1
 800af64:	b29b      	uxth	r3, r3
 800af66:	687a      	ldr	r2, [r7, #4]
 800af68:	4619      	mov	r1, r3
 800af6a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d10f      	bne.n	800af90 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	68da      	ldr	r2, [r3, #12]
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800af7e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	68da      	ldr	r2, [r3, #12]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800af8e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800af90:	2300      	movs	r3, #0
 800af92:	e000      	b.n	800af96 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800af94:	2302      	movs	r3, #2
  }
}
 800af96:	4618      	mov	r0, r3
 800af98:	3714      	adds	r7, #20
 800af9a:	46bd      	mov	sp, r7
 800af9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa0:	4770      	bx	lr

0800afa2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800afa2:	b580      	push	{r7, lr}
 800afa4:	b082      	sub	sp, #8
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	68da      	ldr	r2, [r3, #12]
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800afb8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2220      	movs	r2, #32
 800afbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f7ff fdf0 	bl	800aba8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800afc8:	2300      	movs	r3, #0
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3708      	adds	r7, #8
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}

0800afd2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800afd2:	b580      	push	{r7, lr}
 800afd4:	b08c      	sub	sp, #48	; 0x30
 800afd6:	af00      	add	r7, sp, #0
 800afd8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800afe0:	b2db      	uxtb	r3, r3
 800afe2:	2b22      	cmp	r3, #34	; 0x22
 800afe4:	f040 80ab 	bne.w	800b13e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	689b      	ldr	r3, [r3, #8]
 800afec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aff0:	d117      	bne.n	800b022 <UART_Receive_IT+0x50>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	691b      	ldr	r3, [r3, #16]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d113      	bne.n	800b022 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800affa:	2300      	movs	r3, #0
 800affc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b002:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	685b      	ldr	r3, [r3, #4]
 800b00a:	b29b      	uxth	r3, r3
 800b00c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b010:	b29a      	uxth	r2, r3
 800b012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b014:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b01a:	1c9a      	adds	r2, r3, #2
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	629a      	str	r2, [r3, #40]	; 0x28
 800b020:	e026      	b.n	800b070 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b026:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b028:	2300      	movs	r3, #0
 800b02a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	689b      	ldr	r3, [r3, #8]
 800b030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b034:	d007      	beq.n	800b046 <UART_Receive_IT+0x74>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	689b      	ldr	r3, [r3, #8]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d10a      	bne.n	800b054 <UART_Receive_IT+0x82>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	691b      	ldr	r3, [r3, #16]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d106      	bne.n	800b054 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	b2da      	uxtb	r2, r3
 800b04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b050:	701a      	strb	r2, [r3, #0]
 800b052:	e008      	b.n	800b066 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	b2db      	uxtb	r3, r3
 800b05c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b060:	b2da      	uxtb	r2, r3
 800b062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b064:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b06a:	1c5a      	adds	r2, r3, #1
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b074:	b29b      	uxth	r3, r3
 800b076:	3b01      	subs	r3, #1
 800b078:	b29b      	uxth	r3, r3
 800b07a:	687a      	ldr	r2, [r7, #4]
 800b07c:	4619      	mov	r1, r3
 800b07e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b080:	2b00      	cmp	r3, #0
 800b082:	d15a      	bne.n	800b13a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	68da      	ldr	r2, [r3, #12]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f022 0220 	bic.w	r2, r2, #32
 800b092:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	68da      	ldr	r2, [r3, #12]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b0a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	695a      	ldr	r2, [r3, #20]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f022 0201 	bic.w	r2, r2, #1
 800b0b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2220      	movs	r2, #32
 800b0b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0c0:	2b01      	cmp	r3, #1
 800b0c2:	d135      	bne.n	800b130 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	330c      	adds	r3, #12
 800b0d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	e853 3f00 	ldrex	r3, [r3]
 800b0d8:	613b      	str	r3, [r7, #16]
   return(result);
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	f023 0310 	bic.w	r3, r3, #16
 800b0e0:	627b      	str	r3, [r7, #36]	; 0x24
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	330c      	adds	r3, #12
 800b0e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0ea:	623a      	str	r2, [r7, #32]
 800b0ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ee:	69f9      	ldr	r1, [r7, #28]
 800b0f0:	6a3a      	ldr	r2, [r7, #32]
 800b0f2:	e841 2300 	strex	r3, r2, [r1]
 800b0f6:	61bb      	str	r3, [r7, #24]
   return(result);
 800b0f8:	69bb      	ldr	r3, [r7, #24]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d1e5      	bne.n	800b0ca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f003 0310 	and.w	r3, r3, #16
 800b108:	2b10      	cmp	r3, #16
 800b10a:	d10a      	bne.n	800b122 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b10c:	2300      	movs	r3, #0
 800b10e:	60fb      	str	r3, [r7, #12]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	60fb      	str	r3, [r7, #12]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	60fb      	str	r3, [r7, #12]
 800b120:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b126:	4619      	mov	r1, r3
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f7ff fd5b 	bl	800abe4 <HAL_UARTEx_RxEventCallback>
 800b12e:	e002      	b.n	800b136 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f7f8 faad 	bl	8003690 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b136:	2300      	movs	r3, #0
 800b138:	e002      	b.n	800b140 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b13a:	2300      	movs	r3, #0
 800b13c:	e000      	b.n	800b140 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b13e:	2302      	movs	r3, #2
  }
}
 800b140:	4618      	mov	r0, r3
 800b142:	3730      	adds	r7, #48	; 0x30
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}

0800b148 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b148:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b14c:	b0c0      	sub	sp, #256	; 0x100
 800b14e:	af00      	add	r7, sp, #0
 800b150:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	691b      	ldr	r3, [r3, #16]
 800b15c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b164:	68d9      	ldr	r1, [r3, #12]
 800b166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b16a:	681a      	ldr	r2, [r3, #0]
 800b16c:	ea40 0301 	orr.w	r3, r0, r1
 800b170:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b176:	689a      	ldr	r2, [r3, #8]
 800b178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b17c:	691b      	ldr	r3, [r3, #16]
 800b17e:	431a      	orrs	r2, r3
 800b180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b184:	695b      	ldr	r3, [r3, #20]
 800b186:	431a      	orrs	r2, r3
 800b188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b18c:	69db      	ldr	r3, [r3, #28]
 800b18e:	4313      	orrs	r3, r2
 800b190:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	68db      	ldr	r3, [r3, #12]
 800b19c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b1a0:	f021 010c 	bic.w	r1, r1, #12
 800b1a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1a8:	681a      	ldr	r2, [r3, #0]
 800b1aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b1ae:	430b      	orrs	r3, r1
 800b1b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b1b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	695b      	ldr	r3, [r3, #20]
 800b1ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b1be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1c2:	6999      	ldr	r1, [r3, #24]
 800b1c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1c8:	681a      	ldr	r2, [r3, #0]
 800b1ca:	ea40 0301 	orr.w	r3, r0, r1
 800b1ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b1d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1d4:	681a      	ldr	r2, [r3, #0]
 800b1d6:	4b8f      	ldr	r3, [pc, #572]	; (800b414 <UART_SetConfig+0x2cc>)
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d005      	beq.n	800b1e8 <UART_SetConfig+0xa0>
 800b1dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1e0:	681a      	ldr	r2, [r3, #0]
 800b1e2:	4b8d      	ldr	r3, [pc, #564]	; (800b418 <UART_SetConfig+0x2d0>)
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	d104      	bne.n	800b1f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b1e8:	f7fe f956 	bl	8009498 <HAL_RCC_GetPCLK2Freq>
 800b1ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b1f0:	e003      	b.n	800b1fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b1f2:	f7fe f93d 	bl	8009470 <HAL_RCC_GetPCLK1Freq>
 800b1f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b1fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1fe:	69db      	ldr	r3, [r3, #28]
 800b200:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b204:	f040 810c 	bne.w	800b420 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b208:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b20c:	2200      	movs	r2, #0
 800b20e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b212:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b216:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b21a:	4622      	mov	r2, r4
 800b21c:	462b      	mov	r3, r5
 800b21e:	1891      	adds	r1, r2, r2
 800b220:	65b9      	str	r1, [r7, #88]	; 0x58
 800b222:	415b      	adcs	r3, r3
 800b224:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b226:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b22a:	4621      	mov	r1, r4
 800b22c:	eb12 0801 	adds.w	r8, r2, r1
 800b230:	4629      	mov	r1, r5
 800b232:	eb43 0901 	adc.w	r9, r3, r1
 800b236:	f04f 0200 	mov.w	r2, #0
 800b23a:	f04f 0300 	mov.w	r3, #0
 800b23e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b242:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b246:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b24a:	4690      	mov	r8, r2
 800b24c:	4699      	mov	r9, r3
 800b24e:	4623      	mov	r3, r4
 800b250:	eb18 0303 	adds.w	r3, r8, r3
 800b254:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b258:	462b      	mov	r3, r5
 800b25a:	eb49 0303 	adc.w	r3, r9, r3
 800b25e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b266:	685b      	ldr	r3, [r3, #4]
 800b268:	2200      	movs	r2, #0
 800b26a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b26e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b272:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b276:	460b      	mov	r3, r1
 800b278:	18db      	adds	r3, r3, r3
 800b27a:	653b      	str	r3, [r7, #80]	; 0x50
 800b27c:	4613      	mov	r3, r2
 800b27e:	eb42 0303 	adc.w	r3, r2, r3
 800b282:	657b      	str	r3, [r7, #84]	; 0x54
 800b284:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b288:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b28c:	f7f5 fbca 	bl	8000a24 <__aeabi_uldivmod>
 800b290:	4602      	mov	r2, r0
 800b292:	460b      	mov	r3, r1
 800b294:	4b61      	ldr	r3, [pc, #388]	; (800b41c <UART_SetConfig+0x2d4>)
 800b296:	fba3 2302 	umull	r2, r3, r3, r2
 800b29a:	095b      	lsrs	r3, r3, #5
 800b29c:	011c      	lsls	r4, r3, #4
 800b29e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b2a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b2ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b2b0:	4642      	mov	r2, r8
 800b2b2:	464b      	mov	r3, r9
 800b2b4:	1891      	adds	r1, r2, r2
 800b2b6:	64b9      	str	r1, [r7, #72]	; 0x48
 800b2b8:	415b      	adcs	r3, r3
 800b2ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b2bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b2c0:	4641      	mov	r1, r8
 800b2c2:	eb12 0a01 	adds.w	sl, r2, r1
 800b2c6:	4649      	mov	r1, r9
 800b2c8:	eb43 0b01 	adc.w	fp, r3, r1
 800b2cc:	f04f 0200 	mov.w	r2, #0
 800b2d0:	f04f 0300 	mov.w	r3, #0
 800b2d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b2d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b2dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b2e0:	4692      	mov	sl, r2
 800b2e2:	469b      	mov	fp, r3
 800b2e4:	4643      	mov	r3, r8
 800b2e6:	eb1a 0303 	adds.w	r3, sl, r3
 800b2ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b2ee:	464b      	mov	r3, r9
 800b2f0:	eb4b 0303 	adc.w	r3, fp, r3
 800b2f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b2f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2fc:	685b      	ldr	r3, [r3, #4]
 800b2fe:	2200      	movs	r2, #0
 800b300:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b304:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b308:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b30c:	460b      	mov	r3, r1
 800b30e:	18db      	adds	r3, r3, r3
 800b310:	643b      	str	r3, [r7, #64]	; 0x40
 800b312:	4613      	mov	r3, r2
 800b314:	eb42 0303 	adc.w	r3, r2, r3
 800b318:	647b      	str	r3, [r7, #68]	; 0x44
 800b31a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b31e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b322:	f7f5 fb7f 	bl	8000a24 <__aeabi_uldivmod>
 800b326:	4602      	mov	r2, r0
 800b328:	460b      	mov	r3, r1
 800b32a:	4611      	mov	r1, r2
 800b32c:	4b3b      	ldr	r3, [pc, #236]	; (800b41c <UART_SetConfig+0x2d4>)
 800b32e:	fba3 2301 	umull	r2, r3, r3, r1
 800b332:	095b      	lsrs	r3, r3, #5
 800b334:	2264      	movs	r2, #100	; 0x64
 800b336:	fb02 f303 	mul.w	r3, r2, r3
 800b33a:	1acb      	subs	r3, r1, r3
 800b33c:	00db      	lsls	r3, r3, #3
 800b33e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b342:	4b36      	ldr	r3, [pc, #216]	; (800b41c <UART_SetConfig+0x2d4>)
 800b344:	fba3 2302 	umull	r2, r3, r3, r2
 800b348:	095b      	lsrs	r3, r3, #5
 800b34a:	005b      	lsls	r3, r3, #1
 800b34c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b350:	441c      	add	r4, r3
 800b352:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b356:	2200      	movs	r2, #0
 800b358:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b35c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b360:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b364:	4642      	mov	r2, r8
 800b366:	464b      	mov	r3, r9
 800b368:	1891      	adds	r1, r2, r2
 800b36a:	63b9      	str	r1, [r7, #56]	; 0x38
 800b36c:	415b      	adcs	r3, r3
 800b36e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b370:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b374:	4641      	mov	r1, r8
 800b376:	1851      	adds	r1, r2, r1
 800b378:	6339      	str	r1, [r7, #48]	; 0x30
 800b37a:	4649      	mov	r1, r9
 800b37c:	414b      	adcs	r3, r1
 800b37e:	637b      	str	r3, [r7, #52]	; 0x34
 800b380:	f04f 0200 	mov.w	r2, #0
 800b384:	f04f 0300 	mov.w	r3, #0
 800b388:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b38c:	4659      	mov	r1, fp
 800b38e:	00cb      	lsls	r3, r1, #3
 800b390:	4651      	mov	r1, sl
 800b392:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b396:	4651      	mov	r1, sl
 800b398:	00ca      	lsls	r2, r1, #3
 800b39a:	4610      	mov	r0, r2
 800b39c:	4619      	mov	r1, r3
 800b39e:	4603      	mov	r3, r0
 800b3a0:	4642      	mov	r2, r8
 800b3a2:	189b      	adds	r3, r3, r2
 800b3a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b3a8:	464b      	mov	r3, r9
 800b3aa:	460a      	mov	r2, r1
 800b3ac:	eb42 0303 	adc.w	r3, r2, r3
 800b3b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b3b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3b8:	685b      	ldr	r3, [r3, #4]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b3c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b3c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b3c8:	460b      	mov	r3, r1
 800b3ca:	18db      	adds	r3, r3, r3
 800b3cc:	62bb      	str	r3, [r7, #40]	; 0x28
 800b3ce:	4613      	mov	r3, r2
 800b3d0:	eb42 0303 	adc.w	r3, r2, r3
 800b3d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b3da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b3de:	f7f5 fb21 	bl	8000a24 <__aeabi_uldivmod>
 800b3e2:	4602      	mov	r2, r0
 800b3e4:	460b      	mov	r3, r1
 800b3e6:	4b0d      	ldr	r3, [pc, #52]	; (800b41c <UART_SetConfig+0x2d4>)
 800b3e8:	fba3 1302 	umull	r1, r3, r3, r2
 800b3ec:	095b      	lsrs	r3, r3, #5
 800b3ee:	2164      	movs	r1, #100	; 0x64
 800b3f0:	fb01 f303 	mul.w	r3, r1, r3
 800b3f4:	1ad3      	subs	r3, r2, r3
 800b3f6:	00db      	lsls	r3, r3, #3
 800b3f8:	3332      	adds	r3, #50	; 0x32
 800b3fa:	4a08      	ldr	r2, [pc, #32]	; (800b41c <UART_SetConfig+0x2d4>)
 800b3fc:	fba2 2303 	umull	r2, r3, r2, r3
 800b400:	095b      	lsrs	r3, r3, #5
 800b402:	f003 0207 	and.w	r2, r3, #7
 800b406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	4422      	add	r2, r4
 800b40e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b410:	e105      	b.n	800b61e <UART_SetConfig+0x4d6>
 800b412:	bf00      	nop
 800b414:	40011000 	.word	0x40011000
 800b418:	40011400 	.word	0x40011400
 800b41c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b420:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b424:	2200      	movs	r2, #0
 800b426:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b42a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b42e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b432:	4642      	mov	r2, r8
 800b434:	464b      	mov	r3, r9
 800b436:	1891      	adds	r1, r2, r2
 800b438:	6239      	str	r1, [r7, #32]
 800b43a:	415b      	adcs	r3, r3
 800b43c:	627b      	str	r3, [r7, #36]	; 0x24
 800b43e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b442:	4641      	mov	r1, r8
 800b444:	1854      	adds	r4, r2, r1
 800b446:	4649      	mov	r1, r9
 800b448:	eb43 0501 	adc.w	r5, r3, r1
 800b44c:	f04f 0200 	mov.w	r2, #0
 800b450:	f04f 0300 	mov.w	r3, #0
 800b454:	00eb      	lsls	r3, r5, #3
 800b456:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b45a:	00e2      	lsls	r2, r4, #3
 800b45c:	4614      	mov	r4, r2
 800b45e:	461d      	mov	r5, r3
 800b460:	4643      	mov	r3, r8
 800b462:	18e3      	adds	r3, r4, r3
 800b464:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b468:	464b      	mov	r3, r9
 800b46a:	eb45 0303 	adc.w	r3, r5, r3
 800b46e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b476:	685b      	ldr	r3, [r3, #4]
 800b478:	2200      	movs	r2, #0
 800b47a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b47e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b482:	f04f 0200 	mov.w	r2, #0
 800b486:	f04f 0300 	mov.w	r3, #0
 800b48a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b48e:	4629      	mov	r1, r5
 800b490:	008b      	lsls	r3, r1, #2
 800b492:	4621      	mov	r1, r4
 800b494:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b498:	4621      	mov	r1, r4
 800b49a:	008a      	lsls	r2, r1, #2
 800b49c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b4a0:	f7f5 fac0 	bl	8000a24 <__aeabi_uldivmod>
 800b4a4:	4602      	mov	r2, r0
 800b4a6:	460b      	mov	r3, r1
 800b4a8:	4b60      	ldr	r3, [pc, #384]	; (800b62c <UART_SetConfig+0x4e4>)
 800b4aa:	fba3 2302 	umull	r2, r3, r3, r2
 800b4ae:	095b      	lsrs	r3, r3, #5
 800b4b0:	011c      	lsls	r4, r3, #4
 800b4b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b4bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b4c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b4c4:	4642      	mov	r2, r8
 800b4c6:	464b      	mov	r3, r9
 800b4c8:	1891      	adds	r1, r2, r2
 800b4ca:	61b9      	str	r1, [r7, #24]
 800b4cc:	415b      	adcs	r3, r3
 800b4ce:	61fb      	str	r3, [r7, #28]
 800b4d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b4d4:	4641      	mov	r1, r8
 800b4d6:	1851      	adds	r1, r2, r1
 800b4d8:	6139      	str	r1, [r7, #16]
 800b4da:	4649      	mov	r1, r9
 800b4dc:	414b      	adcs	r3, r1
 800b4de:	617b      	str	r3, [r7, #20]
 800b4e0:	f04f 0200 	mov.w	r2, #0
 800b4e4:	f04f 0300 	mov.w	r3, #0
 800b4e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b4ec:	4659      	mov	r1, fp
 800b4ee:	00cb      	lsls	r3, r1, #3
 800b4f0:	4651      	mov	r1, sl
 800b4f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b4f6:	4651      	mov	r1, sl
 800b4f8:	00ca      	lsls	r2, r1, #3
 800b4fa:	4610      	mov	r0, r2
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	4603      	mov	r3, r0
 800b500:	4642      	mov	r2, r8
 800b502:	189b      	adds	r3, r3, r2
 800b504:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b508:	464b      	mov	r3, r9
 800b50a:	460a      	mov	r2, r1
 800b50c:	eb42 0303 	adc.w	r3, r2, r3
 800b510:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b518:	685b      	ldr	r3, [r3, #4]
 800b51a:	2200      	movs	r2, #0
 800b51c:	67bb      	str	r3, [r7, #120]	; 0x78
 800b51e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b520:	f04f 0200 	mov.w	r2, #0
 800b524:	f04f 0300 	mov.w	r3, #0
 800b528:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b52c:	4649      	mov	r1, r9
 800b52e:	008b      	lsls	r3, r1, #2
 800b530:	4641      	mov	r1, r8
 800b532:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b536:	4641      	mov	r1, r8
 800b538:	008a      	lsls	r2, r1, #2
 800b53a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b53e:	f7f5 fa71 	bl	8000a24 <__aeabi_uldivmod>
 800b542:	4602      	mov	r2, r0
 800b544:	460b      	mov	r3, r1
 800b546:	4b39      	ldr	r3, [pc, #228]	; (800b62c <UART_SetConfig+0x4e4>)
 800b548:	fba3 1302 	umull	r1, r3, r3, r2
 800b54c:	095b      	lsrs	r3, r3, #5
 800b54e:	2164      	movs	r1, #100	; 0x64
 800b550:	fb01 f303 	mul.w	r3, r1, r3
 800b554:	1ad3      	subs	r3, r2, r3
 800b556:	011b      	lsls	r3, r3, #4
 800b558:	3332      	adds	r3, #50	; 0x32
 800b55a:	4a34      	ldr	r2, [pc, #208]	; (800b62c <UART_SetConfig+0x4e4>)
 800b55c:	fba2 2303 	umull	r2, r3, r2, r3
 800b560:	095b      	lsrs	r3, r3, #5
 800b562:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b566:	441c      	add	r4, r3
 800b568:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b56c:	2200      	movs	r2, #0
 800b56e:	673b      	str	r3, [r7, #112]	; 0x70
 800b570:	677a      	str	r2, [r7, #116]	; 0x74
 800b572:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b576:	4642      	mov	r2, r8
 800b578:	464b      	mov	r3, r9
 800b57a:	1891      	adds	r1, r2, r2
 800b57c:	60b9      	str	r1, [r7, #8]
 800b57e:	415b      	adcs	r3, r3
 800b580:	60fb      	str	r3, [r7, #12]
 800b582:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b586:	4641      	mov	r1, r8
 800b588:	1851      	adds	r1, r2, r1
 800b58a:	6039      	str	r1, [r7, #0]
 800b58c:	4649      	mov	r1, r9
 800b58e:	414b      	adcs	r3, r1
 800b590:	607b      	str	r3, [r7, #4]
 800b592:	f04f 0200 	mov.w	r2, #0
 800b596:	f04f 0300 	mov.w	r3, #0
 800b59a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b59e:	4659      	mov	r1, fp
 800b5a0:	00cb      	lsls	r3, r1, #3
 800b5a2:	4651      	mov	r1, sl
 800b5a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b5a8:	4651      	mov	r1, sl
 800b5aa:	00ca      	lsls	r2, r1, #3
 800b5ac:	4610      	mov	r0, r2
 800b5ae:	4619      	mov	r1, r3
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	4642      	mov	r2, r8
 800b5b4:	189b      	adds	r3, r3, r2
 800b5b6:	66bb      	str	r3, [r7, #104]	; 0x68
 800b5b8:	464b      	mov	r3, r9
 800b5ba:	460a      	mov	r2, r1
 800b5bc:	eb42 0303 	adc.w	r3, r2, r3
 800b5c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b5c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5c6:	685b      	ldr	r3, [r3, #4]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	663b      	str	r3, [r7, #96]	; 0x60
 800b5cc:	667a      	str	r2, [r7, #100]	; 0x64
 800b5ce:	f04f 0200 	mov.w	r2, #0
 800b5d2:	f04f 0300 	mov.w	r3, #0
 800b5d6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b5da:	4649      	mov	r1, r9
 800b5dc:	008b      	lsls	r3, r1, #2
 800b5de:	4641      	mov	r1, r8
 800b5e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b5e4:	4641      	mov	r1, r8
 800b5e6:	008a      	lsls	r2, r1, #2
 800b5e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b5ec:	f7f5 fa1a 	bl	8000a24 <__aeabi_uldivmod>
 800b5f0:	4602      	mov	r2, r0
 800b5f2:	460b      	mov	r3, r1
 800b5f4:	4b0d      	ldr	r3, [pc, #52]	; (800b62c <UART_SetConfig+0x4e4>)
 800b5f6:	fba3 1302 	umull	r1, r3, r3, r2
 800b5fa:	095b      	lsrs	r3, r3, #5
 800b5fc:	2164      	movs	r1, #100	; 0x64
 800b5fe:	fb01 f303 	mul.w	r3, r1, r3
 800b602:	1ad3      	subs	r3, r2, r3
 800b604:	011b      	lsls	r3, r3, #4
 800b606:	3332      	adds	r3, #50	; 0x32
 800b608:	4a08      	ldr	r2, [pc, #32]	; (800b62c <UART_SetConfig+0x4e4>)
 800b60a:	fba2 2303 	umull	r2, r3, r2, r3
 800b60e:	095b      	lsrs	r3, r3, #5
 800b610:	f003 020f 	and.w	r2, r3, #15
 800b614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	4422      	add	r2, r4
 800b61c:	609a      	str	r2, [r3, #8]
}
 800b61e:	bf00      	nop
 800b620:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b624:	46bd      	mov	sp, r7
 800b626:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b62a:	bf00      	nop
 800b62c:	51eb851f 	.word	0x51eb851f

0800b630 <__libc_init_array>:
 800b630:	b570      	push	{r4, r5, r6, lr}
 800b632:	4d0d      	ldr	r5, [pc, #52]	; (800b668 <__libc_init_array+0x38>)
 800b634:	4c0d      	ldr	r4, [pc, #52]	; (800b66c <__libc_init_array+0x3c>)
 800b636:	1b64      	subs	r4, r4, r5
 800b638:	10a4      	asrs	r4, r4, #2
 800b63a:	2600      	movs	r6, #0
 800b63c:	42a6      	cmp	r6, r4
 800b63e:	d109      	bne.n	800b654 <__libc_init_array+0x24>
 800b640:	4d0b      	ldr	r5, [pc, #44]	; (800b670 <__libc_init_array+0x40>)
 800b642:	4c0c      	ldr	r4, [pc, #48]	; (800b674 <__libc_init_array+0x44>)
 800b644:	f000 f82e 	bl	800b6a4 <_init>
 800b648:	1b64      	subs	r4, r4, r5
 800b64a:	10a4      	asrs	r4, r4, #2
 800b64c:	2600      	movs	r6, #0
 800b64e:	42a6      	cmp	r6, r4
 800b650:	d105      	bne.n	800b65e <__libc_init_array+0x2e>
 800b652:	bd70      	pop	{r4, r5, r6, pc}
 800b654:	f855 3b04 	ldr.w	r3, [r5], #4
 800b658:	4798      	blx	r3
 800b65a:	3601      	adds	r6, #1
 800b65c:	e7ee      	b.n	800b63c <__libc_init_array+0xc>
 800b65e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b662:	4798      	blx	r3
 800b664:	3601      	adds	r6, #1
 800b666:	e7f2      	b.n	800b64e <__libc_init_array+0x1e>
 800b668:	0800c040 	.word	0x0800c040
 800b66c:	0800c040 	.word	0x0800c040
 800b670:	0800c040 	.word	0x0800c040
 800b674:	0800c044 	.word	0x0800c044

0800b678 <memcpy>:
 800b678:	440a      	add	r2, r1
 800b67a:	4291      	cmp	r1, r2
 800b67c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b680:	d100      	bne.n	800b684 <memcpy+0xc>
 800b682:	4770      	bx	lr
 800b684:	b510      	push	{r4, lr}
 800b686:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b68a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b68e:	4291      	cmp	r1, r2
 800b690:	d1f9      	bne.n	800b686 <memcpy+0xe>
 800b692:	bd10      	pop	{r4, pc}

0800b694 <memset>:
 800b694:	4402      	add	r2, r0
 800b696:	4603      	mov	r3, r0
 800b698:	4293      	cmp	r3, r2
 800b69a:	d100      	bne.n	800b69e <memset+0xa>
 800b69c:	4770      	bx	lr
 800b69e:	f803 1b01 	strb.w	r1, [r3], #1
 800b6a2:	e7f9      	b.n	800b698 <memset+0x4>

0800b6a4 <_init>:
 800b6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6a6:	bf00      	nop
 800b6a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6aa:	bc08      	pop	{r3}
 800b6ac:	469e      	mov	lr, r3
 800b6ae:	4770      	bx	lr

0800b6b0 <_fini>:
 800b6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6b2:	bf00      	nop
 800b6b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6b6:	bc08      	pop	{r3}
 800b6b8:	469e      	mov	lr, r3
 800b6ba:	4770      	bx	lr
 800b6bc:	0000      	movs	r0, r0
	...

0800b6c0 <__system_Reset_veneer>:
 800b6c0:	f85f f000 	ldr.w	pc, [pc]	; 800b6c4 <__system_Reset_veneer+0x4>
 800b6c4:	200000f1 	.word	0x200000f1

Disassembly of section .data:

20000000 <_battery_perc_lut>:
20000000:	00010bb8 000a0ce4 00320e10 003c0e74     ..........2.t.<.
20000010:	00460ea6 004b0ece 00500ef6 00550f1e     ..F...K...P...U.
20000020:	005a0f50 005f0f82 00611004 00641068     P.Z..._...a.h.d.

20000030 <cfg_NodeList>:
20000030:	00010001 00000004 08001ad1 08001b41     ............A...
20000040:	080019fd 00010065 00000030 08001969     ....e...0...i...
20000050:	080019ad 080018ed 00010066 00000000     ........f.......
	...
2000006c:	006627d9 0000000e 0800610d 08006249     .'f......a..Ib..
2000007c:	08005f35 006627da 00000006 080048a1     5_...'f......H..
2000008c:	08004945 08004799 006627db 0000000a     EI...G...'f.....
2000009c:	08004f25 08005021 08004db5 006627dc     %O..!P...M...'f.
200000ac:	00000003 080016f5 0800175d 08001645     ........]...E...
200000bc:	006627dd 0000000d 08005819 08005911     .'f......X...Y..
200000cc:	08005659 00010067 00000002 0800130d     YV..g...........
200000dc:	08001361 0800127d                       a...}...

200000e4 <SystemCoreClock>:
200000e4:	00f42400                                .$..

200000e8 <uwTickPrio>:
200000e8:	00000010                                ....

200000ec <uwTickFreq>:
200000ec:	00000001                                ....

200000f0 <system_Reset>:

__ramfunc void system_Reset()
{
200000f0:	b480      	push	{r7}
200000f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
200000f4:	b672      	cpsid	i
}
200000f6:	bf00      	nop
	__disable_irq();
	SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos) | (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
200000f8:	4b05      	ldr	r3, [pc, #20]	; (20000110 <system_Reset+0x20>)
200000fa:	68db      	ldr	r3, [r3, #12]
200000fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
20000100:	4903      	ldr	r1, [pc, #12]	; (20000110 <system_Reset+0x20>)
20000102:	4b04      	ldr	r3, [pc, #16]	; (20000114 <system_Reset+0x24>)
20000104:	4313      	orrs	r3, r2
20000106:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
20000108:	f3bf 8f4f 	dsb	sy
}
2000010c:	bf00      	nop
	SCB_AIRCR_SYSRESETREQ_Msk); 																/* Keep priority group unchanged *//* Ensure completion of memory access */
	__DSB();                                                                             		// Ensure completion of memory access
	while(1);
2000010e:	e7fe      	b.n	2000010e <system_Reset+0x1e>
20000110:	e000ed00 	.word	0xe000ed00
20000114:	05fa0004 	.word	0x05fa0004
